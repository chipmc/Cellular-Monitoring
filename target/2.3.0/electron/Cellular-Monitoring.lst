
/Users/chipmc/Documents/Maker/Particle/Projects/Cellular-Monitoring/target/2.3.0/electron/Cellular-Monitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006740  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000018  40024000  08086760  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000100  20000000  08086778  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000006b4  20000100  20000100  00040100  2**3
                  ALLOC
  6 .module_info_suffix 00000028  08086878  08086878  00036878  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080868a0  080868a0  000368a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00151ac4  00000000  00000000  000368a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001819d  00000000  00000000  00188368  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002928  00000000  00000000  001a0505  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000068e8  00000000  00000000  001a2e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002a61e  00000000  00000000  001a9715  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00037148  00000000  00000000  001d3d33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000b9c90  00000000  00000000  0020ae7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00007118  00000000  00000000  002c4b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00022da4  00000000  00000000  002cbc24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <localtime_r>:
#endif // !(defined(DYNALIB_IMPORT) && (defined(PARTICLE_COMPILE_LTO) || defined(PARTICLE_COMPILE_LTO_FAT)))
DYNALIB_FN(18, services2, mktime32, time32_t(struct tm*))
DYNALIB_FN(19, services2, __ssvfscanf_r, int(struct _reent*, FILE*, const char*, va_list))
DYNALIB_FN(20, services2, _printf_i, int(struct _reent*, struct _prt_data_t*, FILE*, int (*pfunc)(struct _reent *, FILE *, const char *, size_t), va_list*))
DYNALIB_FN(21, services2, localtime32_r, struct tm*(const time32_t*, struct tm*))
DYNALIB_FN(22, services2, localtime_r, struct tm*(const time_t*, struct tm*))
 8080020:	b508      	push	{r3, lr}
 8080022:	4b02      	ldr	r3, [pc, #8]	; (808002c <localtime_r+0xc>)
 8080024:	681b      	ldr	r3, [r3, #0]
 8080026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080028:	9301      	str	r3, [sp, #4]
 808002a:	bd08      	pop	{r3, pc}
 808002c:	0806002c 	.word	0x0806002c

08080030 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080030:	4809      	ldr	r0, [pc, #36]	; (8080058 <module_user_pre_init+0x28>)
 8080032:	490a      	ldr	r1, [pc, #40]	; (808005c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 8080034:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080036:	4288      	cmp	r0, r1
 8080038:	d005      	beq.n	8080046 <module_user_pre_init+0x16>
 808003a:	4a09      	ldr	r2, [pc, #36]	; (8080060 <module_user_pre_init+0x30>)
 808003c:	4282      	cmp	r2, r0
 808003e:	d002      	beq.n	8080046 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080040:	1a12      	subs	r2, r2, r0
 8080042:	f005 fdb2 	bl	8085baa <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080046:	4807      	ldr	r0, [pc, #28]	; (8080064 <module_user_pre_init+0x34>)
 8080048:	4a07      	ldr	r2, [pc, #28]	; (8080068 <module_user_pre_init+0x38>)
 808004a:	2100      	movs	r1, #0
 808004c:	1a12      	subs	r2, r2, r0
 808004e:	f005 fdd4 	bl	8085bfa <memset>
    return &link_heap_start;
}
 8080052:	4806      	ldr	r0, [pc, #24]	; (808006c <module_user_pre_init+0x3c>)
 8080054:	bd08      	pop	{r3, pc}
 8080056:	bf00      	nop
 8080058:	20000000 	.word	0x20000000
 808005c:	08086778 	.word	0x08086778
 8080060:	20000100 	.word	0x20000100
 8080064:	20000100 	.word	0x20000100
 8080068:	200007b1 	.word	0x200007b1
 808006c:	200007b1 	.word	0x200007b1

08080070 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080070:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080072:	f004 fc8b 	bl	808498c <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080076:	2500      	movs	r5, #0
 8080078:	4e05      	ldr	r6, [pc, #20]	; (8080090 <module_user_init+0x20>)
 808007a:	4c06      	ldr	r4, [pc, #24]	; (8080094 <module_user_init+0x24>)
 808007c:	1ba4      	subs	r4, r4, r6
 808007e:	08a4      	lsrs	r4, r4, #2
 8080080:	42a5      	cmp	r5, r4
 8080082:	d100      	bne.n	8080086 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080084:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 8080086:	f856 3b04 	ldr.w	r3, [r6], #4
 808008a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808008c:	3501      	adds	r5, #1
 808008e:	e7f7      	b.n	8080080 <module_user_init+0x10>
 8080090:	0808673c 	.word	0x0808673c
 8080094:	0808675c 	.word	0x0808675c

08080098 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080098:	f001 b9f0 	b.w	808147c <setup>

0808009c <module_user_loop>:
}

void module_user_loop() {
 808009c:	b508      	push	{r3, lr}
    loop();
 808009e:	f001 f877 	bl	8081190 <loop>
    _post_loop();
}
 80800a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80800a6:	f004 bc29 	b.w	80848fc <_post_loop>

080800aa <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80800aa:	f001 bf3d 	b.w	8081f28 <malloc>

080800ae <_Znaj>:
 80800ae:	f001 bf3b 	b.w	8081f28 <malloc>

080800b2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80800b2:	f001 bf41 	b.w	8081f38 <free>
	...

080800b8 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800b8:	2100      	movs	r1, #0
 80800ba:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80800bc:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800be:	4a02      	ldr	r2, [pc, #8]	; (80800c8 <__cxa_pure_virtual+0x10>)
 80800c0:	f001 fde2 	bl	8081c88 <panic_>
  while (1);
 80800c4:	e7fe      	b.n	80800c4 <__cxa_pure_virtual+0xc>
 80800c6:	bf00      	nop
 80800c8:	080819a9 	.word	0x080819a9

080800cc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800cc:	7800      	ldrb	r0, [r0, #0]
 80800ce:	fab0 f080 	clz	r0, r0
 80800d2:	0940      	lsrs	r0, r0, #5
 80800d4:	4770      	bx	lr

080800d6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800d6:	2301      	movs	r3, #1
 80800d8:	7003      	strb	r3, [r0, #0]
 80800da:	4770      	bx	lr

080800dc <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80800dc:	6803      	ldr	r3, [r0, #0]
 80800de:	b2c9      	uxtb	r1, r1
 80800e0:	689b      	ldr	r3, [r3, #8]
 80800e2:	4718      	bx	r3

080800e4 <_ZN17Adafruit_FRAM_I2CC1Ev>:
    Constructor
*/
/**************************************************************************/
Adafruit_FRAM_I2C::Adafruit_FRAM_I2C(void)
{
  _framInitialised = false;
 80800e4:	2200      	movs	r2, #0
 80800e6:	7042      	strb	r2, [r0, #1]
}
 80800e8:	4770      	bx	lr

080800ea <_ZN17Adafruit_FRAM_I2C6write8Eth>:
    @params[in] i2cAddr
                The 8-bit value to write at framAddr
*/
/**************************************************************************/
void Adafruit_FRAM_I2C::write8 (uint16_t framAddr, uint8_t value)
{
 80800ea:	b570      	push	{r4, r5, r6, lr}
 80800ec:	4606      	mov	r6, r0
 80800ee:	460c      	mov	r4, r1
 80800f0:	4615      	mov	r5, r2
  Wire.beginTransmission(i2c_addr);
 80800f2:	f004 fd2f 	bl	8084b54 <_Z19__fetch_global_Wirev>
 80800f6:	7831      	ldrb	r1, [r6, #0]
 80800f8:	f002 fcaa 	bl	8082a50 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(framAddr >> 8);
 80800fc:	f004 fd2a 	bl	8084b54 <_Z19__fetch_global_Wirev>
 8080100:	0a21      	lsrs	r1, r4, #8
 8080102:	f7ff ffeb 	bl	80800dc <_ZN7TwoWire5writeEi>
  Wire.write(framAddr & 0xFF);
 8080106:	f004 fd25 	bl	8084b54 <_Z19__fetch_global_Wirev>
 808010a:	b2e1      	uxtb	r1, r4
 808010c:	f7ff ffe6 	bl	80800dc <_ZN7TwoWire5writeEi>
  Wire.write(value);
 8080110:	f004 fd20 	bl	8084b54 <_Z19__fetch_global_Wirev>
 8080114:	6803      	ldr	r3, [r0, #0]
 8080116:	4629      	mov	r1, r5
 8080118:	689b      	ldr	r3, [r3, #8]
 808011a:	4798      	blx	r3
  Wire.endTransmission();
 808011c:	f004 fd1a 	bl	8084b54 <_Z19__fetch_global_Wirev>
}
 8080120:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Wire.endTransmission();
 8080124:	f002 bcb7 	b.w	8082a96 <_ZN7TwoWire15endTransmissionEv>

08080128 <_ZN17Adafruit_FRAM_I2C5read8Et>:

    @returns    The 8-bit value retrieved at framAddr
*/
/**************************************************************************/
uint8_t Adafruit_FRAM_I2C::read8 (uint16_t framAddr)
{
 8080128:	b538      	push	{r3, r4, r5, lr}
 808012a:	4604      	mov	r4, r0
 808012c:	460d      	mov	r5, r1
  Wire.beginTransmission(i2c_addr);
 808012e:	f004 fd11 	bl	8084b54 <_Z19__fetch_global_Wirev>
 8080132:	7821      	ldrb	r1, [r4, #0]
 8080134:	f002 fc8c 	bl	8082a50 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(framAddr >> 8);
 8080138:	f004 fd0c 	bl	8084b54 <_Z19__fetch_global_Wirev>
 808013c:	0a29      	lsrs	r1, r5, #8
 808013e:	f7ff ffcd 	bl	80800dc <_ZN7TwoWire5writeEi>
  Wire.write(framAddr & 0xFF);
 8080142:	f004 fd07 	bl	8084b54 <_Z19__fetch_global_Wirev>
 8080146:	b2e9      	uxtb	r1, r5
 8080148:	f7ff ffc8 	bl	80800dc <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
 808014c:	f004 fd02 	bl	8084b54 <_Z19__fetch_global_Wirev>
 8080150:	f002 fca1 	bl	8082a96 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(i2c_addr, (uint8_t)1);
 8080154:	f004 fcfe 	bl	8084b54 <_Z19__fetch_global_Wirev>
 8080158:	2201      	movs	r2, #1
 808015a:	7821      	ldrb	r1, [r4, #0]
 808015c:	f002 fc75 	bl	8082a4a <_ZN7TwoWire11requestFromEhj>

  return Wire.read();
 8080160:	f004 fcf8 	bl	8084b54 <_Z19__fetch_global_Wirev>
 8080164:	6803      	ldr	r3, [r0, #0]
 8080166:	695b      	ldr	r3, [r3, #20]
 8080168:	4798      	blx	r3
}
 808016a:	b2c0      	uxtb	r0, r0
 808016c:	bd38      	pop	{r3, r4, r5, pc}

0808016e <_ZN17Adafruit_FRAM_I2C11getDeviceIDEPtS0_>:
                  Product ID fields (bytes 7..0). Should be 0x510 for
                  the MB85RC256V.
*/
/**************************************************************************/
void Adafruit_FRAM_I2C::getDeviceID(uint16_t *manufacturerID, uint16_t *productID)
{
 808016e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080170:	4604      	mov	r4, r0
 8080172:	4616      	mov	r6, r2
 8080174:	460f      	mov	r7, r1
  uint8_t a[3] = { 0, 0, 0 };
  uint8_t results;

  Wire.beginTransmission(MB85RC_SLAVE_ID >> 1);
 8080176:	f004 fced 	bl	8084b54 <_Z19__fetch_global_Wirev>
 808017a:	217c      	movs	r1, #124	; 0x7c
 808017c:	f002 fc6c 	bl	8082a58 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(i2c_addr << 1);
 8080180:	f004 fce8 	bl	8084b54 <_Z19__fetch_global_Wirev>
 8080184:	7821      	ldrb	r1, [r4, #0]
 8080186:	0049      	lsls	r1, r1, #1
 8080188:	f7ff ffa8 	bl	80800dc <_ZN7TwoWire5writeEi>
  results = Wire.endTransmission(false);
 808018c:	f004 fce2 	bl	8084b54 <_Z19__fetch_global_Wirev>
 8080190:	2100      	movs	r1, #0
 8080192:	f002 fc7c 	bl	8082a8e <_ZN7TwoWire15endTransmissionEh>

  Wire.requestFrom(MB85RC_SLAVE_ID >> 1, 3);
 8080196:	f004 fcdd 	bl	8084b54 <_Z19__fetch_global_Wirev>
 808019a:	2203      	movs	r2, #3
 808019c:	217c      	movs	r1, #124	; 0x7c
 808019e:	f002 fc54 	bl	8082a4a <_ZN7TwoWire11requestFromEhj>
  a[0] = Wire.read();
 80801a2:	f004 fcd7 	bl	8084b54 <_Z19__fetch_global_Wirev>
 80801a6:	6803      	ldr	r3, [r0, #0]
 80801a8:	695b      	ldr	r3, [r3, #20]
 80801aa:	4798      	blx	r3
 80801ac:	4605      	mov	r5, r0
  a[1] = Wire.read();
 80801ae:	f004 fcd1 	bl	8084b54 <_Z19__fetch_global_Wirev>
 80801b2:	6803      	ldr	r3, [r0, #0]
  a[2] = Wire.read();

  /* Shift values to separate manuf and prod IDs */
  /* See p.10 of http://www.fujitsu.com/downloads/MICRO/fsa/pdf/products/memory/fram/MB85RC256V-DS501-00017-3v0-E.pdf */
  *manufacturerID = (a[0] << 4) + (a[1]  >> 4);
 80801b4:	b2ed      	uxtb	r5, r5
  a[1] = Wire.read();
 80801b6:	695b      	ldr	r3, [r3, #20]
 80801b8:	4798      	blx	r3
 80801ba:	4604      	mov	r4, r0
  a[2] = Wire.read();
 80801bc:	f004 fcca 	bl	8084b54 <_Z19__fetch_global_Wirev>
 80801c0:	6803      	ldr	r3, [r0, #0]
 80801c2:	695b      	ldr	r3, [r3, #20]
 80801c4:	4798      	blx	r3
  *manufacturerID = (a[0] << 4) + (a[1]  >> 4);
 80801c6:	f3c4 1303 	ubfx	r3, r4, #4, #4
  *productID = ((a[1] & 0x0F) << 8) + a[2];
 80801ca:	0224      	lsls	r4, r4, #8
 80801cc:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 80801d0:	b2c0      	uxtb	r0, r0
  *manufacturerID = (a[0] << 4) + (a[1]  >> 4);
 80801d2:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  *productID = ((a[1] & 0x0F) << 8) + a[2];
 80801d6:	4404      	add	r4, r0
  *manufacturerID = (a[0] << 4) + (a[1]  >> 4);
 80801d8:	803d      	strh	r5, [r7, #0]
  *productID = ((a[1] & 0x0F) << 8) + a[2];
 80801da:	8034      	strh	r4, [r6, #0]
}
 80801dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080801de <_ZN17Adafruit_FRAM_I2C5beginEh>:
{
 80801de:	b513      	push	{r0, r1, r4, lr}
 80801e0:	4604      	mov	r4, r0
  i2c_addr = addr;
 80801e2:	7001      	strb	r1, [r0, #0]
  Wire.begin();
 80801e4:	f004 fcb6 	bl	8084b54 <_Z19__fetch_global_Wirev>
 80801e8:	f002 fc00 	bl	80829ec <_ZN7TwoWire5beginEv>
  getDeviceID(&manufID, &prodID);
 80801ec:	4620      	mov	r0, r4
 80801ee:	f10d 0206 	add.w	r2, sp, #6
 80801f2:	a901      	add	r1, sp, #4
 80801f4:	f7ff ffbb 	bl	808016e <_ZN17Adafruit_FRAM_I2C11getDeviceIDEPtS0_>
  if (manufID != 0x00A)
 80801f8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80801fc:	2b0a      	cmp	r3, #10
 80801fe:	d108      	bne.n	8080212 <_ZN17Adafruit_FRAM_I2C5beginEh+0x34>
  if (prodID != 0x510)
 8080200:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8080204:	f5b3 6fa2 	cmp.w	r3, #1296	; 0x510
 8080208:	d103      	bne.n	8080212 <_ZN17Adafruit_FRAM_I2C5beginEh+0x34>
  _framInitialised = true;
 808020a:	2001      	movs	r0, #1
 808020c:	7060      	strb	r0, [r4, #1]
}
 808020e:	b002      	add	sp, #8
 8080210:	bd10      	pop	{r4, pc}
    return false;
 8080212:	2000      	movs	r0, #0
 8080214:	e7fb      	b.n	808020e <_ZN17Adafruit_FRAM_I2C5beginEh+0x30>

08080216 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 8080216:	4770      	bx	lr

08080218 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
 8080218:	6a00      	ldr	r0, [r0, #32]
 808021a:	6803      	ldr	r3, [r0, #0]
 808021c:	68db      	ldr	r3, [r3, #12]
 808021e:	4718      	bx	r3

08080220 <_Z7sendNow6String>:
  }
  else return 0;
}

int sendNow(String command) // Function to force sending data in current hour
{
 8080220:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8080222:	4904      	ldr	r1, [pc, #16]	; (8080234 <_Z7sendNow6String+0x14>)
 8080224:	f004 f83c 	bl	80842a0 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080228:	b118      	cbz	r0, 8080232 <_Z7sendNow6String+0x12>
  {
    state = REPORTING_STATE;
 808022a:	2204      	movs	r2, #4
    return 1;
 808022c:	2001      	movs	r0, #1
    state = REPORTING_STATE;
 808022e:	4b02      	ldr	r3, [pc, #8]	; (8080238 <_Z7sendNow6String+0x18>)
 8080230:	701a      	strb	r2, [r3, #0]
  }
  else return 0;
}
 8080232:	bd08      	pop	{r3, pc}
 8080234:	08085fac 	.word	0x08085fac
 8080238:	20000180 	.word	0x20000180

0808023c <_Z11watchdogISRv>:
{
 808023c:	b508      	push	{r3, lr}
  if (pettingEnabled) {
 808023e:	4b07      	ldr	r3, [pc, #28]	; (808025c <_Z11watchdogISRv+0x20>)
 8080240:	781b      	ldrb	r3, [r3, #0]
 8080242:	b14b      	cbz	r3, 8080258 <_Z11watchdogISRv+0x1c>
    digitalWrite(donePin, HIGH);                              // Pet the watchdog
 8080244:	2101      	movs	r1, #1
 8080246:	2006      	movs	r0, #6
 8080248:	f004 fc2d 	bl	8084aa6 <digitalWrite>
}
 808024c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    digitalWrite(donePin, LOW);
 8080250:	2100      	movs	r1, #0
 8080252:	2006      	movs	r0, #6
 8080254:	f004 bc27 	b.w	8084aa6 <digitalWrite>
}
 8080258:	bd08      	pop	{r3, pc}
 808025a:	bf00      	nop
 808025c:	20000004 	.word	0x20000004

08080260 <_Z12hardResetNow6String>:
{
 8080260:	b508      	push	{r3, lr}
 8080262:	4905      	ldr	r1, [pc, #20]	; (8080278 <_Z12hardResetNow6String+0x18>)
 8080264:	f004 f81c 	bl	80842a0 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080268:	b120      	cbz	r0, 8080274 <_Z12hardResetNow6String+0x14>
    digitalWrite(hardResetPin,HIGH);          // This will cut all power to the Electron AND the carrir board
 808026a:	2004      	movs	r0, #4
 808026c:	2101      	movs	r1, #1
 808026e:	f004 fc1a 	bl	8084aa6 <digitalWrite>
 8080272:	2001      	movs	r0, #1
}
 8080274:	bd08      	pop	{r3, pc}
 8080276:	bf00      	nop
 8080278:	08085fac 	.word	0x08085fac

0808027c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 808027c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808027e:	4604      	mov	r4, r0
 8080280:	f89d 5018 	ldrb.w	r5, [sp, #24]
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
 8080284:	431d      	orrs	r5, r3
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8080286:	f88d 5000 	strb.w	r5, [sp]
 808028a:	233c      	movs	r3, #60	; 0x3c
 808028c:	f002 f976 	bl	808257c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }
 8080290:	4620      	mov	r0, r4
 8080292:	b003      	add	sp, #12
 8080294:	bd30      	pop	{r4, r5, pc}
	...

08080298 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 8080298:	b510      	push	{r4, lr}
 808029a:	4604      	mov	r4, r0
 808029c:	4b09      	ldr	r3, [pc, #36]	; (80802c4 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 808029e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 80802a0:	f002 ffbe 	bl	8083220 <_ZN5spark10LogManager8instanceEv>
 80802a4:	4621      	mov	r1, r4
 80802a6:	f003 f9cb 	bl	8083640 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 80802aa:	f004 fa87 	bl	80847bc <_Z16_fetch_usbserialv>
 80802ae:	f004 fa6b 	bl	8084788 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 80802b2:	4620      	mov	r0, r4
 80802b4:	4b04      	ldr	r3, [pc, #16]	; (80802c8 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 80802b6:	f840 3b04 	str.w	r3, [r0], #4
 80802ba:	f003 f8af 	bl	808341c <_ZN5spark6detail9LogFilterD1Ev>
    }
 80802be:	4620      	mov	r0, r4
 80802c0:	bd10      	pop	{r4, pc}
 80802c2:	bf00      	nop
 80802c4:	0808632c 	.word	0x0808632c
 80802c8:	08086314 	.word	0x08086314

080802cc <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 80802cc:	b510      	push	{r4, lr}
 80802ce:	4604      	mov	r4, r0
    }
 80802d0:	f7ff ffe2 	bl	8080298 <_ZN5spark16SerialLogHandlerD1Ev>
 80802d4:	4620      	mov	r0, r4
 80802d6:	2124      	movs	r1, #36	; 0x24
 80802d8:	f004 fc92 	bl	8084c00 <_ZdlPvj>
 80802dc:	4620      	mov	r0, r4
 80802de:	bd10      	pop	{r4, pc}

080802e0 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 80802e0:	2300      	movs	r3, #0
 80802e2:	6840      	ldr	r0, [r0, #4]
 80802e4:	461a      	mov	r2, r3
 80802e6:	4619      	mov	r1, r3
 80802e8:	f001 bde6 	b.w	8081eb8 <network_off>

080802ec <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80802ec:	2200      	movs	r2, #0
 80802ee:	6840      	ldr	r0, [r0, #4]
 80802f0:	4611      	mov	r1, r2
 80802f2:	f001 bdd1 	b.w	8081e98 <network_ready>

080802f6 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 80802f6:	b40e      	push	{r1, r2, r3}
 80802f8:	b510      	push	{r4, lr}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80802fa:	2300      	movs	r3, #0
    log(LOG_LEVEL_INFO, fmt, args);
 80802fc:	6801      	ldr	r1, [r0, #0]
    attr.flags = 0;
 80802fe:	2020      	movs	r0, #32
inline void spark::Logger::info(const char *fmt, ...) const {
 8080300:	b08d      	sub	sp, #52	; 0x34
 8080302:	aa0f      	add	r2, sp, #60	; 0x3c
 8080304:	f852 4b04 	ldr.w	r4, [r2], #4
    attr.flags = 0;
 8080308:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 808030c:	e9cd 4200 	strd	r4, r2, [sp]
    va_start(args, fmt);
 8080310:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080312:	201e      	movs	r0, #30
 8080314:	aa04      	add	r2, sp, #16
 8080316:	f001 fcbf 	bl	8081c98 <log_message_v>
}
 808031a:	b00d      	add	sp, #52	; 0x34
 808031c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8080320:	b003      	add	sp, #12
 8080322:	4770      	bx	lr

08080324 <_Z9FRAMread8j>:
// Begin section
uint8_t FRAMread8(unsigned int address)  // Read 8 bits from FRAM
{
    uint8_t result;
    //Serial.println("In FRAMread8");
    result = fram.read8(address);
 8080324:	b281      	uxth	r1, r0
 8080326:	4801      	ldr	r0, [pc, #4]	; (808032c <_Z9FRAMread8j+0x8>)
 8080328:	f7ff befe 	b.w	8080128 <_ZN17Adafruit_FRAM_I2C5read8Et>
 808032c:	20000139 	.word	0x20000139

08080330 <_Z10FRAMwrite8jh>:
    return result;
}

void FRAMwrite8(unsigned int address, uint8_t value)    // Write 8 bits to FRAM
{
 8080330:	460a      	mov	r2, r1
    fram.write8(address,value);
 8080332:	b281      	uxth	r1, r0
 8080334:	4801      	ldr	r0, [pc, #4]	; (808033c <_Z10FRAMwrite8jh+0xc>)
 8080336:	f7ff bed8 	b.w	80800ea <_ZN17Adafruit_FRAM_I2C6write8Eth>
 808033a:	bf00      	nop
 808033c:	20000139 	.word	0x20000139

08080340 <_Z10FRAMread16j>:
}

int FRAMread16(unsigned int address)
{
 8080340:	b570      	push	{r4, r5, r6, lr}
    long two;
    long one;
    //Read the 2 bytes from  memory.
    two = fram.read8(address);
 8080342:	4e07      	ldr	r6, [pc, #28]	; (8080360 <_Z10FRAMread16j+0x20>)
 8080344:	b284      	uxth	r4, r0
 8080346:	4621      	mov	r1, r4
 8080348:	4630      	mov	r0, r6
 808034a:	f7ff feed 	bl	8080128 <_ZN17Adafruit_FRAM_I2C5read8Et>
    one = fram.read8(address + 1);
 808034e:	1c61      	adds	r1, r4, #1
    two = fram.read8(address);
 8080350:	4605      	mov	r5, r0
    one = fram.read8(address + 1);
 8080352:	b289      	uxth	r1, r1
 8080354:	4630      	mov	r0, r6
 8080356:	f7ff fee7 	bl	8080128 <_ZN17Adafruit_FRAM_I2C5read8Et>
    //Return the recomposed long by using bitshift.
    return ((two << 0) & 0xFF) + ((one << 8) & 0xFFFF);
}
 808035a:	eb05 2000 	add.w	r0, r5, r0, lsl #8
 808035e:	bd70      	pop	{r4, r5, r6, pc}
 8080360:	20000139 	.word	0x20000139

08080364 <_Z11FRAMwrite16ji>:

void FRAMwrite16(unsigned int address, int value)   // Write 16 bits to FRAM
{
 8080364:	b570      	push	{r4, r5, r6, lr}
 8080366:	460d      	mov	r5, r1
    //Decomposition from a long to 2 bytes by using bitshift.
    //One = Most significant -> Four = Least significant byte
    uint8_t two = (value & 0xFF);
    uint8_t one = ((value >> 8) & 0xFF);
    //Write the 2 bytes into the eeprom memory.
    fram.write8(address, two);
 8080368:	4e07      	ldr	r6, [pc, #28]	; (8080388 <_Z11FRAMwrite16ji+0x24>)
 808036a:	b284      	uxth	r4, r0
 808036c:	b2ca      	uxtb	r2, r1
 808036e:	4630      	mov	r0, r6
 8080370:	4621      	mov	r1, r4
    fram.write8(address + 1, one);
 8080372:	3401      	adds	r4, #1
    fram.write8(address, two);
 8080374:	f7ff feb9 	bl	80800ea <_ZN17Adafruit_FRAM_I2C6write8Eth>
    fram.write8(address + 1, one);
 8080378:	4630      	mov	r0, r6
 808037a:	f3c5 2207 	ubfx	r2, r5, #8, #8
 808037e:	b2a1      	uxth	r1, r4
}
 8080380:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fram.write8(address + 1, one);
 8080384:	f7ff beb1 	b.w	80800ea <_ZN17Adafruit_FRAM_I2C6write8Eth>
 8080388:	20000139 	.word	0x20000139

0808038c <_Z11resetCounts6String>:
{
 808038c:	b508      	push	{r3, lr}
 808038e:	490a      	ldr	r1, [pc, #40]	; (80803b8 <_Z11resetCounts6String+0x2c>)
 8080390:	f003 ff86 	bl	80842a0 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080394:	b170      	cbz	r0, 80803b4 <_Z11resetCounts6String+0x28>
    FRAMwrite8(RESETCOUNT,0);          // If so, store incremented number - watchdog must have done This
 8080396:	2100      	movs	r1, #0
 8080398:	2002      	movs	r0, #2
 808039a:	f7ff ffc9 	bl	8080330 <_Z10FRAMwrite8jh>
    resetCount = 0;
 808039e:	2100      	movs	r1, #0
 80803a0:	4b06      	ldr	r3, [pc, #24]	; (80803bc <_Z11resetCounts6String+0x30>)
    FRAMwrite16(DAILYPUMPMINUTES,0);
 80803a2:	2014      	movs	r0, #20
    resetCount = 0;
 80803a4:	6019      	str	r1, [r3, #0]
    dataInFlight = false;
 80803a6:	4b06      	ldr	r3, [pc, #24]	; (80803c0 <_Z11resetCounts6String+0x34>)
 80803a8:	7019      	strb	r1, [r3, #0]
    dailyPumpingMins = 0;
 80803aa:	4b06      	ldr	r3, [pc, #24]	; (80803c4 <_Z11resetCounts6String+0x38>)
 80803ac:	6019      	str	r1, [r3, #0]
    FRAMwrite16(DAILYPUMPMINUTES,0);
 80803ae:	f7ff ffd9 	bl	8080364 <_Z11FRAMwrite16ji>
 80803b2:	2001      	movs	r0, #1
}
 80803b4:	bd08      	pop	{r3, pc}
 80803b6:	bf00      	nop
 80803b8:	08085fac 	.word	0x08085fac
 80803bc:	20000178 	.word	0x20000178
 80803c0:	20000138 	.word	0x20000138
 80803c4:	20000134 	.word	0x20000134

080803c8 <_Z10FRAMread32m>:

unsigned long FRAMread32(unsigned long address)
{
 80803c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    long four;
    long three;
    long two;
    long one;
    //Read the 4 bytes from memory.
    four = fram.read8(address);
 80803cc:	4e0f      	ldr	r6, [pc, #60]	; (808040c <_Z10FRAMread32m+0x44>)
 80803ce:	b284      	uxth	r4, r0
 80803d0:	4621      	mov	r1, r4
 80803d2:	4630      	mov	r0, r6
 80803d4:	f7ff fea8 	bl	8080128 <_ZN17Adafruit_FRAM_I2C5read8Et>
    three = fram.read8(address + 1);
 80803d8:	1c61      	adds	r1, r4, #1
    four = fram.read8(address);
 80803da:	4605      	mov	r5, r0
    three = fram.read8(address + 1);
 80803dc:	b289      	uxth	r1, r1
 80803de:	4630      	mov	r0, r6
 80803e0:	f7ff fea2 	bl	8080128 <_ZN17Adafruit_FRAM_I2C5read8Et>
    two = fram.read8(address + 2);
 80803e4:	1ca1      	adds	r1, r4, #2
    three = fram.read8(address + 1);
 80803e6:	4680      	mov	r8, r0
    two = fram.read8(address + 2);
 80803e8:	b289      	uxth	r1, r1
 80803ea:	4630      	mov	r0, r6
 80803ec:	f7ff fe9c 	bl	8080128 <_ZN17Adafruit_FRAM_I2C5read8Et>
    one = fram.read8(address + 3);
 80803f0:	1ce1      	adds	r1, r4, #3
    two = fram.read8(address + 2);
 80803f2:	4607      	mov	r7, r0
    one = fram.read8(address + 3);
 80803f4:	b289      	uxth	r1, r1
 80803f6:	4630      	mov	r0, r6
 80803f8:	f7ff fe96 	bl	8080128 <_ZN17Adafruit_FRAM_I2C5read8Et>
    //Return the recomposed long by using bitshift.
    return ((four << 0) & 0xFF) + ((three << 8) & 0xFFFF) + ((two << 16) & 0xFFFFFF) + ((one << 24) & 0xFFFFFFFF);
 80803fc:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8080400:	eb05 4507 	add.w	r5, r5, r7, lsl #16
}
 8080404:	eb05 6000 	add.w	r0, r5, r0, lsl #24
 8080408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808040c:	20000139 	.word	0x20000139

08080410 <_Z11FRAMwrite32im>:

void FRAMwrite32(int address, unsigned long value)  // Write 32 bits to FRAM
{
 8080410:	b570      	push	{r4, r5, r6, lr}
 8080412:	460d      	mov	r5, r1
    uint8_t four = (value & 0xFF);
    uint8_t three = ((value >> 8) & 0xFF);
    uint8_t two = ((value >> 16) & 0xFF);
    uint8_t one = ((value >> 24) & 0xFF);
    //Write the 4 bytes into the eeprom memory.
    fram.write8(address, four);
 8080414:	4e0e      	ldr	r6, [pc, #56]	; (8080450 <_Z11FRAMwrite32im+0x40>)
 8080416:	b284      	uxth	r4, r0
 8080418:	b2ca      	uxtb	r2, r1
 808041a:	4630      	mov	r0, r6
 808041c:	4621      	mov	r1, r4
 808041e:	f7ff fe64 	bl	80800ea <_ZN17Adafruit_FRAM_I2C6write8Eth>
    fram.write8(address + 1, three);
 8080422:	1c61      	adds	r1, r4, #1
 8080424:	4630      	mov	r0, r6
 8080426:	f3c5 2207 	ubfx	r2, r5, #8, #8
 808042a:	b289      	uxth	r1, r1
 808042c:	f7ff fe5d 	bl	80800ea <_ZN17Adafruit_FRAM_I2C6write8Eth>
    fram.write8(address + 2, two);
 8080430:	1ca1      	adds	r1, r4, #2
 8080432:	4630      	mov	r0, r6
 8080434:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8080438:	b289      	uxth	r1, r1
    fram.write8(address + 3, one);
 808043a:	3403      	adds	r4, #3
    fram.write8(address + 2, two);
 808043c:	f7ff fe55 	bl	80800ea <_ZN17Adafruit_FRAM_I2C6write8Eth>
    fram.write8(address + 3, one);
 8080440:	4630      	mov	r0, r6
 8080442:	0e2a      	lsrs	r2, r5, #24
 8080444:	b2a1      	uxth	r1, r4
}
 8080446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fram.write8(address + 3, one);
 808044a:	f7ff be4e 	b.w	80800ea <_ZN17Adafruit_FRAM_I2C6write8Eth>
 808044e:	bf00      	nop
 8080450:	20000139 	.word	0x20000139

08080454 <_Z17getSignalStrengthv>:
void getSignalStrength() {
 8080454:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
 8080456:	4d17      	ldr	r5, [pc, #92]	; (80804b4 <_Z17getSignalStrengthv+0x60>)
void getSignalStrength() {
 8080458:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
 808045a:	ac04      	add	r4, sp, #16
 808045c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808045e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8080460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8080462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8080464:	e895 0003 	ldmia.w	r5, {r0, r1}
 8080468:	e884 0003 	stmia.w	r4, {r0, r1}
  CellularSignal sig = Cellular.RSSI();
 808046c:	4912      	ldr	r1, [pc, #72]	; (80804b8 <_Z17getSignalStrengthv+0x64>)
 808046e:	a80e      	add	r0, sp, #56	; 0x38
 8080470:	f001 fe00 	bl	8082074 <_ZN5spark13CellularClass4RSSIEv>
  auto rat = sig.getAccessTechnology();
 8080474:	a80e      	add	r0, sp, #56	; 0x38
 8080476:	f001 fe50 	bl	808211a <_ZNK14CellularSignal19getAccessTechnologyEv>
 808047a:	4604      	mov	r4, r0
  float strengthPercentage = sig.getStrength();
 808047c:	a80e      	add	r0, sp, #56	; 0x38
 808047e:	f001 fe6b 	bl	8082158 <_ZNK14CellularSignal11getStrengthEv>
 8080482:	4605      	mov	r5, r0
  float qualityPercentage = sig.getQuality();
 8080484:	a80e      	add	r0, sp, #56	; 0x38
 8080486:	f001 fe91 	bl	80821ac <_ZNK14CellularSignal10getQualityEv>
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
 808048a:	ab18      	add	r3, sp, #96	; 0x60
 808048c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8080490:	f004 fd24 	bl	8084edc <__aeabi_f2d>
 8080494:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8080498:	4628      	mov	r0, r5
 808049a:	f004 fd1f 	bl	8084edc <__aeabi_f2d>
 808049e:	e9cd 0100 	strd	r0, r1, [sp]
 80804a2:	4a06      	ldr	r2, [pc, #24]	; (80804bc <_Z17getSignalStrengthv+0x68>)
 80804a4:	2111      	movs	r1, #17
 80804a6:	f854 3c50 	ldr.w	r3, [r4, #-80]
 80804aa:	4805      	ldr	r0, [pc, #20]	; (80804c0 <_Z17getSignalStrengthv+0x6c>)
 80804ac:	f001 fd5c 	bl	8081f68 <snprintf>
}
 80804b0:	b019      	add	sp, #100	; 0x64
 80804b2:	bd30      	pop	{r4, r5, pc}
 80804b4:	0808633c 	.word	0x0808633c
 80804b8:	2000019c 	.word	0x2000019c
 80804bc:	08085fd3 	.word	0x08085fd3
 80804c0:	40024000 	.word	0x40024000
 80804c4:	00000000 	.word	0x00000000

080804c8 <_Z14getTemperaturev>:
{
 80804c8:	b508      	push	{r3, lr}
  int reading = analogRead(tmp36Pin);   //getting the voltage reading from the temperature sensor
 80804ca:	200a      	movs	r0, #10
 80804cc:	f004 fb04 	bl	8084ad8 <analogRead>
  float voltage = reading * 3.3;        // converting that reading to voltage, for 3.3v arduino use 3.3
 80804d0:	f004 fcf2 	bl	8084eb8 <__aeabi_i2d>
 80804d4:	a314      	add	r3, pc, #80	; (adr r3, 8080528 <_Z14getTemperaturev+0x60>)
 80804d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80804da:	f004 fd57 	bl	8084f8c <__aeabi_dmul>
 80804de:	f004 ffaf 	bl	8085440 <__aeabi_d2f>
  voltage /= 4096.0;                    // Electron is different than the Arduino where there are only 1024 steps
 80804e2:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
 80804e6:	f005 f909 	bl	80856fc <__aeabi_fmul>
  int temperatureC = int(((voltage - 0.5) * 100));  //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
 80804ea:	f004 fcf7 	bl	8084edc <__aeabi_f2d>
 80804ee:	2200      	movs	r2, #0
 80804f0:	4b0f      	ldr	r3, [pc, #60]	; (8080530 <_Z14getTemperaturev+0x68>)
 80804f2:	f004 fb93 	bl	8084c1c <__aeabi_dsub>
 80804f6:	2200      	movs	r2, #0
 80804f8:	4b0e      	ldr	r3, [pc, #56]	; (8080534 <_Z14getTemperaturev+0x6c>)
 80804fa:	f004 fd47 	bl	8084f8c <__aeabi_dmul>
 80804fe:	f004 ff57 	bl	80853b0 <__aeabi_d2iz>
  temperatureF = int((temperatureC * 9.0 / 5.0) + 32.0);  // now convert to Fahrenheit
 8080502:	f004 fcd9 	bl	8084eb8 <__aeabi_i2d>
 8080506:	2200      	movs	r2, #0
 8080508:	4b0b      	ldr	r3, [pc, #44]	; (8080538 <_Z14getTemperaturev+0x70>)
 808050a:	f004 fd3f 	bl	8084f8c <__aeabi_dmul>
 808050e:	2200      	movs	r2, #0
 8080510:	4b0a      	ldr	r3, [pc, #40]	; (808053c <_Z14getTemperaturev+0x74>)
 8080512:	f004 fe65 	bl	80851e0 <__aeabi_ddiv>
 8080516:	2200      	movs	r2, #0
 8080518:	4b09      	ldr	r3, [pc, #36]	; (8080540 <_Z14getTemperaturev+0x78>)
 808051a:	f004 fb81 	bl	8084c20 <__adddf3>
 808051e:	f004 ff47 	bl	80853b0 <__aeabi_d2iz>
 8080522:	4b08      	ldr	r3, [pc, #32]	; (8080544 <_Z14getTemperaturev+0x7c>)
 8080524:	6018      	str	r0, [r3, #0]
}
 8080526:	bd08      	pop	{r3, pc}
 8080528:	66666666 	.word	0x66666666
 808052c:	400a6666 	.word	0x400a6666
 8080530:	3fe00000 	.word	0x3fe00000
 8080534:	40590000 	.word	0x40590000
 8080538:	40220000 	.word	0x40220000
 808053c:	40140000 	.word	0x40140000
 8080540:	40400000 	.word	0x40400000
 8080544:	20000190 	.word	0x20000190

08080548 <_Z17connectToParticlev>:
{
 8080548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (!Cellular.ready())
 808054c:	4d2f      	ldr	r5, [pc, #188]	; (808060c <_Z17connectToParticlev+0xc4>)
 808054e:	4628      	mov	r0, r5
 8080550:	f7ff fecc 	bl	80802ec <_ZN5spark13CellularClass5readyEv>
 8080554:	4604      	mov	r4, r0
 8080556:	b308      	cbz	r0, 808059c <_Z17connectToParticlev+0x54>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8080558:	f001 fa2e 	bl	80819b8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808055c:	4d2c      	ldr	r5, [pc, #176]	; (8080610 <_Z17connectToParticlev+0xc8>)
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 808055e:	f04f 0a00 	mov.w	sl, #0
 8080562:	6028      	str	r0, [r5, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
 8080564:	f001 fc28 	bl	8081db8 <spark_process>
        spark_cloud_flag_connect();
 8080568:	f001 fc2e 	bl	8081dc8 <spark_cloud_flag_connect>
 808056c:	2000      	movs	r0, #0
 808056e:	f001 fa33 	bl	80819d8 <hal_timer_millis>
        while (_while() && !_condition()) {
 8080572:	f247 582f 	movw	r8, #29999	; 0x752f
        return hal_timer_millis(nullptr);
 8080576:	4604      	mov	r4, r0
        while (_while() && !_condition()) {
 8080578:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
 808057c:	2000      	movs	r0, #0
 808057e:	f001 fa2b 	bl	80819d8 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 8080582:	1b06      	subs	r6, r0, r4
 8080584:	eb61 070a 	sbc.w	r7, r1, sl
        while (_while() && !_condition()) {
 8080588:	45b9      	cmp	r9, r7
 808058a:	bf08      	it	eq
 808058c:	45b0      	cmpeq	r8, r6
 808058e:	d332      	bcc.n	80805f6 <_Z17connectToParticlev+0xae>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080590:	f001 fc22 	bl	8081dd8 <spark_cloud_flag_connected>
 8080594:	bb78      	cbnz	r0, 80805f6 <_Z17connectToParticlev+0xae>
            spark_process();
 8080596:	f001 fc0f 	bl	8081db8 <spark_process>
        while (_while() && !_condition()) {
 808059a:	e7ef      	b.n	808057c <_Z17connectToParticlev+0x34>
        network_on(*this, 0, 0, NULL);
 808059c:	4603      	mov	r3, r0
 808059e:	4602      	mov	r2, r0
 80805a0:	4601      	mov	r1, r0
 80805a2:	6868      	ldr	r0, [r5, #4]
 80805a4:	f001 fc80 	bl	8081ea8 <network_on>
        network_connect(*this, flags, 0, NULL);
 80805a8:	4623      	mov	r3, r4
 80805aa:	4622      	mov	r2, r4
 80805ac:	4621      	mov	r1, r4
 80805ae:	6868      	ldr	r0, [r5, #4]
 80805b0:	f001 fc5a 	bl	8081e68 <network_connect>
        return hal_timer_millis(nullptr);
 80805b4:	4620      	mov	r0, r4
 80805b6:	f001 fa0f 	bl	80819d8 <hal_timer_millis>
 80805ba:	4682      	mov	sl, r0
 80805bc:	2000      	movs	r0, #0
 80805be:	f001 fa0b 	bl	80819d8 <hal_timer_millis>
        while (_while() && !_condition()) {
 80805c2:	2300      	movs	r3, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80805c4:	ebb0 080a 	subs.w	r8, r0, sl
        while (_while() && !_condition()) {
 80805c8:	4a12      	ldr	r2, [pc, #72]	; (8080614 <_Z17connectToParticlev+0xcc>)
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80805ca:	eb61 0904 	sbc.w	r9, r1, r4
        while (_while() && !_condition()) {
 80805ce:	454b      	cmp	r3, r9
 80805d0:	bf08      	it	eq
 80805d2:	4542      	cmpeq	r2, r8
 80805d4:	d306      	bcc.n	80805e4 <_Z17connectToParticlev+0x9c>
    if(!waitFor(Cellular.ready,90000)) return false;         // Connect to cellular - give it 90 seconds
 80805d6:	4628      	mov	r0, r5
 80805d8:	f7ff fe88 	bl	80802ec <_ZN5spark13CellularClass5readyEv>
 80805dc:	b910      	cbnz	r0, 80805e4 <_Z17connectToParticlev+0x9c>
            spark_process();
 80805de:	f001 fbeb 	bl	8081db8 <spark_process>
        while (_while() && !_condition()) {
 80805e2:	e7eb      	b.n	80805bc <_Z17connectToParticlev+0x74>
 80805e4:	4809      	ldr	r0, [pc, #36]	; (808060c <_Z17connectToParticlev+0xc4>)
 80805e6:	f7ff fe81 	bl	80802ec <_ZN5spark13CellularClass5readyEv>
 80805ea:	2800      	cmp	r0, #0
 80805ec:	d1b4      	bne.n	8080558 <_Z17connectToParticlev+0x10>
 80805ee:	2400      	movs	r4, #0
}
 80805f0:	4620      	mov	r0, r4
 80805f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80805f6:	f001 fbef 	bl	8081dd8 <spark_cloud_flag_connected>
  if(!waitFor(Particle.connected,30000)) return false;     // Connect to Particle - give it 30 seconds
 80805fa:	4604      	mov	r4, r0
 80805fc:	2800      	cmp	r0, #0
 80805fe:	d0f6      	beq.n	80805ee <_Z17connectToParticlev+0xa6>
		return HAL_Timer_Get_Milli_Seconds();
 8080600:	f001 f9da 	bl	80819b8 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
 8080604:	6028      	str	r0, [r5, #0]
    		spark_process();
 8080606:	f001 fbd7 	bl	8081db8 <spark_process>
    }
 808060a:	e7f1      	b.n	80805f0 <_Z17connectToParticlev+0xa8>
 808060c:	2000019c 	.word	0x2000019c
 8080610:	200006dc 	.word	0x200006dc
 8080614:	00015f8f 	.word	0x00015f8f

08080618 <_Z12notConnectedv>:
bool notConnected() {
 8080618:	b508      	push	{r3, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
 808061a:	f001 fbdd 	bl	8081dd8 <spark_cloud_flag_connected>
  return !Particle.connected();                             // This is a requirement to use waitFor
 808061e:	f080 0001 	eor.w	r0, r0, #1
}
 8080622:	b2c0      	uxtb	r0, r0
 8080624:	bd08      	pop	{r3, pc}
	...

08080628 <_Z22disconnectFromParticlev>:
{
 8080628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
 808062c:	2400      	movs	r4, #0
 808062e:	b085      	sub	sp, #20
  Particle.disconnect();                                   // Disconnect from Particle in prep for sleep
 8080630:	a801      	add	r0, sp, #4
 8080632:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8080636:	f8ad 400c 	strh.w	r4, [sp, #12]
 808063a:	f001 fe8b 	bl	8082354 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
 808063e:	4620      	mov	r0, r4
 8080640:	f001 f9ca 	bl	80819d8 <hal_timer_millis>
        while (_while() && !_condition()) {
 8080644:	f242 780f 	movw	r8, #9999	; 0x270f
        return hal_timer_millis(nullptr);
 8080648:	4605      	mov	r5, r0
        while (_while() && !_condition()) {
 808064a:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
 808064e:	2000      	movs	r0, #0
 8080650:	f001 f9c2 	bl	80819d8 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 8080654:	1b46      	subs	r6, r0, r5
 8080656:	eb61 0704 	sbc.w	r7, r1, r4
        while (_while() && !_condition()) {
 808065a:	45b9      	cmp	r9, r7
 808065c:	bf08      	it	eq
 808065e:	45b0      	cmpeq	r8, r6
 8080660:	d305      	bcc.n	808066e <_Z22disconnectFromParticlev+0x46>
  waitFor(notConnected,10000);
 8080662:	f7ff ffd9 	bl	8080618 <_Z12notConnectedv>
 8080666:	b910      	cbnz	r0, 808066e <_Z22disconnectFromParticlev+0x46>
            spark_process();
 8080668:	f001 fba6 	bl	8081db8 <spark_process>
        while (_while() && !_condition()) {
 808066c:	e7ef      	b.n	808064e <_Z22disconnectFromParticlev+0x26>
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808066e:	4c09      	ldr	r4, [pc, #36]	; (8080694 <_Z22disconnectFromParticlev+0x6c>)
 8080670:	f7ff ffd2 	bl	8080618 <_Z12notConnectedv>
 8080674:	2200      	movs	r2, #0
 8080676:	2102      	movs	r1, #2
 8080678:	6860      	ldr	r0, [r4, #4]
 808067a:	f001 fc05 	bl	8081e88 <network_disconnect>
  delay(3000);
 808067e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8080682:	f001 fc99 	bl	8081fb8 <delay>
  Cellular.off();                                           // Turn off the cellular modem
 8080686:	4620      	mov	r0, r4
 8080688:	f7ff fe2a 	bl	80802e0 <_ZN5spark13CellularClass3offEv>
}
 808068c:	2001      	movs	r0, #1
 808068e:	b005      	add	sp, #20
 8080690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8080694:	2000019c 	.word	0x2000019c

08080698 <_Z12getLostPowerv>:
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
 8080698:	2200      	movs	r2, #0
  Particle.publish("Time",Time.timeStr(t), PRIVATE);
  lastPublish = millis();
  return 1;
}

bool getLostPower() {
 808069a:	b510      	push	{r4, lr}
 808069c:	b086      	sub	sp, #24
    const int ret = diag_get_source(id, &src, nullptr);
 808069e:	2018      	movs	r0, #24
 80806a0:	a902      	add	r1, sp, #8
    const diag_source* src = nullptr;
 80806a2:	9202      	str	r2, [sp, #8]
    const int ret = diag_get_source(id, &src, nullptr);
 80806a4:	f001 fb10 	bl	8081cc8 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
 80806a8:	b9b8      	cbnz	r0, 80806da <_Z12getLostPowerv+0x42>
        return ret;
    }
    return get(src, val);
 80806aa:	9c02      	ldr	r4, [sp, #8]
    SPARK_ASSERT(src && src->callback);
 80806ac:	b10c      	cbz	r4, 80806b2 <_Z12getLostPowerv+0x1a>
 80806ae:	6923      	ldr	r3, [r4, #16]
 80806b0:	b923      	cbnz	r3, 80806bc <_Z12getLostPowerv+0x24>
 80806b2:	2100      	movs	r1, #0
 80806b4:	200a      	movs	r0, #10
 80806b6:	4a0e      	ldr	r2, [pc, #56]	; (80806f0 <_Z12getLostPowerv+0x58>)
 80806b8:	f001 fae6 	bl	8081c88 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
 80806bc:	2300      	movs	r3, #0
 80806be:	f8ad 300e 	strh.w	r3, [sp, #14]
 80806c2:	230c      	movs	r3, #12
 80806c4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80806c8:	ab01      	add	r3, sp, #4
 80806ca:	9304      	str	r3, [sp, #16]
 80806cc:	2304      	movs	r3, #4
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
 80806ce:	2101      	movs	r1, #1
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
 80806d0:	9305      	str	r3, [sp, #20]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
 80806d2:	4620      	mov	r0, r4
 80806d4:	6923      	ldr	r3, [r4, #16]
 80806d6:	aa03      	add	r2, sp, #12
 80806d8:	4798      	blx	r3
    }

    int powerSource() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_POWER_SOURCE, val);
        if (r < 0) {
 80806da:	2800      	cmp	r0, #0
 80806dc:	db05      	blt.n	80806ea <_Z12getLostPowerv+0x52>
      POWER_SOURCE_BATTERY = 5
  } power_source_t;

  int powerSource = System.powerSource();

  if (powerSource == POWER_SOURCE_VIN) return 0;        // Return false if power is good
 80806de:	9801      	ldr	r0, [sp, #4]
 80806e0:	3801      	subs	r0, #1
 80806e2:	bf18      	it	ne
 80806e4:	2001      	movne	r0, #1
  else return 1;                                        // Return true otherwise 
}
 80806e6:	b006      	add	sp, #24
 80806e8:	bd10      	pop	{r4, pc}
  else return 1;                                        // Return true otherwise 
 80806ea:	2001      	movs	r0, #1
 80806ec:	e7fb      	b.n	80806e6 <_Z12getLostPowerv+0x4e>
 80806ee:	bf00      	nop
 80806f0:	080819a9 	.word	0x080819a9

080806f4 <_Z20meterParticlePublishv>:

bool meterParticlePublish(void)
{
 80806f4:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80806f6:	f001 f95f 	bl	80819b8 <HAL_Timer_Get_Milli_Seconds>
  if(millis() - lastPublish >= publishFrequency) return 1;
 80806fa:	4b05      	ldr	r3, [pc, #20]	; (8080710 <_Z20meterParticlePublishv+0x1c>)
 80806fc:	681b      	ldr	r3, [r3, #0]
 80806fe:	1ac0      	subs	r0, r0, r3
 8080700:	4b04      	ldr	r3, [pc, #16]	; (8080714 <_Z20meterParticlePublishv+0x20>)
 8080702:	681b      	ldr	r3, [r3, #0]
  else return 0;
}
 8080704:	4298      	cmp	r0, r3
 8080706:	bf34      	ite	cc
 8080708:	2000      	movcc	r0, #0
 808070a:	2001      	movcs	r0, #1
 808070c:	bd08      	pop	{r3, pc}
 808070e:	bf00      	nop
 8080710:	20000140 	.word	0x20000140
 8080714:	20000008 	.word	0x20000008

08080718 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>:
    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
 8080718:	b508      	push	{r3, lr}
    waitUntil(meterParticlePublish);
 808071a:	f7ff ffeb 	bl	80806f4 <_Z20meterParticlePublishv>
        while (_while() && !_condition()) {
 808071e:	b910      	cbnz	r0, 8080726 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0+0xe>
            spark_process();
 8080720:	f001 fb4a 	bl	8081db8 <spark_process>
        while (_while() && !_condition()) {
 8080724:	e7f9      	b.n	808071a <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0+0x2>
    }
 8080726:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 808072a:	f7ff bfe3 	b.w	80806f4 <_Z20meterParticlePublishv>
	...

08080730 <_Z15meterSampleRatev>:

bool meterSampleRate(void)
{
 8080730:	b510      	push	{r4, lr}
 8080732:	f001 f941 	bl	80819b8 <HAL_Timer_Get_Milli_Seconds>
  static unsigned long lastSample = 0;
  if(millis() - lastSample >= sampleFrequency) {
 8080736:	4c07      	ldr	r4, [pc, #28]	; (8080754 <_Z15meterSampleRatev+0x24>)
 8080738:	6823      	ldr	r3, [r4, #0]
 808073a:	1ac0      	subs	r0, r0, r3
 808073c:	4b06      	ldr	r3, [pc, #24]	; (8080758 <_Z15meterSampleRatev+0x28>)
 808073e:	681b      	ldr	r3, [r3, #0]
 8080740:	4298      	cmp	r0, r3
 8080742:	d304      	bcc.n	808074e <_Z15meterSampleRatev+0x1e>
 8080744:	f001 f938 	bl	80819b8 <HAL_Timer_Get_Milli_Seconds>
    lastSample = millis();
 8080748:	6020      	str	r0, [r4, #0]
 808074a:	2001      	movs	r0, #1
    return 1;
  } 
  else return 0;
}
 808074c:	bd10      	pop	{r4, pc}
  else return 0;
 808074e:	2000      	movs	r0, #0
 8080750:	e7fc      	b.n	808074c <_Z15meterSampleRatev+0x1c>
 8080752:	bf00      	nop
 8080754:	2000011c 	.word	0x2000011c
 8080758:	20000014 	.word	0x20000014

0808075c <_Z14fullModemResetv>:
 808075c:	2300      	movs	r3, #0

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
 808075e:	b530      	push	{r4, r5, lr}
 8080760:	b085      	sub	sp, #20

	Particle.disconnect(); 	                                         // Disconnect from the cloud
 8080762:	a801      	add	r0, sp, #4
 8080764:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8080768:	f8ad 300c 	strh.w	r3, [sp, #12]
 808076c:	f001 fdf2 	bl	8082354 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
 8080770:	f001 f922 	bl	80819b8 <HAL_Timer_Get_Milli_Seconds>
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 8080774:	f643 2597 	movw	r5, #14999	; 0x3a97
 8080778:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
 808077a:	f001 fb2d 	bl	8081dd8 <spark_cloud_flag_connected>
 808077e:	b140      	cbz	r0, 8080792 <_Z14fullModemResetv+0x36>
 8080780:	f001 f91a 	bl	80819b8 <HAL_Timer_Get_Milli_Seconds>
 8080784:	1b00      	subs	r0, r0, r4
 8080786:	42a8      	cmp	r0, r5
 8080788:	d803      	bhi.n	8080792 <_Z14fullModemResetv+0x36>
		delay(100);
 808078a:	2064      	movs	r0, #100	; 0x64
 808078c:	f001 fc14 	bl	8081fb8 <delay>
	while(Particle.connected() && millis() - startTime < 15000) {
 8080790:	e7f3      	b.n	808077a <_Z14fullModemResetv+0x1e>
	}
  Cellular.off();
 8080792:	4808      	ldr	r0, [pc, #32]	; (80807b4 <_Z14fullModemResetv+0x58>)
 8080794:	f7ff fda4 	bl	80802e0 <_ZN5spark13CellularClass3offEv>
  delay(10000);
 8080798:	f242 7010 	movw	r0, #10000	; 0x2710
 808079c:	f001 fc0c 	bl	8081fb8 <delay>
	System.sleep(SLEEP_MODE_DEEP, 10);
 80807a0:	4b05      	ldr	r3, [pc, #20]	; (80807b8 <_Z14fullModemResetv+0x5c>)
 80807a2:	220a      	movs	r2, #10
 80807a4:	2101      	movs	r1, #1
 80807a6:	681b      	ldr	r3, [r3, #0]
 80807a8:	a801      	add	r0, sp, #4
 80807aa:	f003 fdf5 	bl	8084398 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
 80807ae:	b005      	add	sp, #20
 80807b0:	bd30      	pop	{r4, r5, pc}
 80807b2:	bf00      	nop
 80807b4:	2000019c 	.word	0x2000019c
 80807b8:	20000114 	.word	0x20000114

080807bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80807bc:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80807be:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80807c0:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80807c2:	b17c      	cbz	r4, 80807e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80807c4:	6863      	ldr	r3, [r4, #4]
 80807c6:	3b01      	subs	r3, #1
 80807c8:	6063      	str	r3, [r4, #4]
 80807ca:	b95b      	cbnz	r3, 80807e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80807cc:	6823      	ldr	r3, [r4, #0]
 80807ce:	4620      	mov	r0, r4
 80807d0:	689b      	ldr	r3, [r3, #8]
 80807d2:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80807d4:	68a3      	ldr	r3, [r4, #8]
 80807d6:	3b01      	subs	r3, #1
 80807d8:	60a3      	str	r3, [r4, #8]
 80807da:	b91b      	cbnz	r3, 80807e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80807dc:	6823      	ldr	r3, [r4, #0]
 80807de:	4620      	mov	r0, r4
 80807e0:	68db      	ldr	r3, [r3, #12]
 80807e2:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80807e4:	4628      	mov	r0, r5
 80807e6:	bd38      	pop	{r3, r4, r5, pc}

080807e8 <_Z9ResetFRAMv>:


void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
 80807e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    byte tempControlReg = FRAMread8(CONTROLREGISTER);
 80807ec:	2007      	movs	r0, #7
 80807ee:	f7ff fd99 	bl	8080324 <_Z9FRAMread8j>
    Particle.publish("FRAM","Resetting in progress", PRIVATE);
 80807f2:	2300      	movs	r3, #0
 80807f4:	f88d 3000 	strb.w	r3, [sp]
 80807f8:	4b20      	ldr	r3, [pc, #128]	; (808087c <_Z9ResetFRAMv+0x94>)
 80807fa:	4a21      	ldr	r2, [pc, #132]	; (8080880 <_Z9ResetFRAMv+0x98>)
 80807fc:	781b      	ldrb	r3, [r3, #0]
 80807fe:	4921      	ldr	r1, [pc, #132]	; (8080884 <_Z9ResetFRAMv+0x9c>)
    byte tempControlReg = FRAMread8(CONTROLREGISTER);
 8080800:	4605      	mov	r5, r0
    Particle.publish("FRAM","Resetting in progress", PRIVATE);
 8080802:	a802      	add	r0, sp, #8
 8080804:	f7ff fd3a 	bl	808027c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080808:	a803      	add	r0, sp, #12
 808080a:	f7ff ffd7 	bl	80807bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (unsigned long i=8; i < 32768; i++) {  // Start at 8 to not overwrite permanent settings
 808080e:	2408      	movs	r4, #8
        FRAMwrite8(i,0x0);
        if (i==8192) Serial.println(F("25% done"));
        if (i==16384) Serial.println(F("50% done"));
        if (i==(24576)) Serial.println(F("75% done"));
        if (i==32767) Serial.println(F("Done"));
 8080810:	4e1d      	ldr	r6, [pc, #116]	; (8080888 <_Z9ResetFRAMv+0xa0>)
        if (i==(24576)) Serial.println(F("75% done"));
 8080812:	4f1e      	ldr	r7, [pc, #120]	; (808088c <_Z9ResetFRAMv+0xa4>)
        if (i==16384) Serial.println(F("50% done"));
 8080814:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8080894 <_Z9ResetFRAMv+0xac>
        FRAMwrite8(i,0x0);
 8080818:	2100      	movs	r1, #0
 808081a:	4620      	mov	r0, r4
 808081c:	f7ff fd88 	bl	8080330 <_Z10FRAMwrite8jh>
        if (i==8192) Serial.println(F("25% done"));
 8080820:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8080824:	d113      	bne.n	808084e <_Z9ResetFRAMv+0x66>
 8080826:	f003 ffc9 	bl	80847bc <_Z16_fetch_usbserialv>
 808082a:	4919      	ldr	r1, [pc, #100]	; (8080890 <_Z9ResetFRAMv+0xa8>)
        if (i==32767) Serial.println(F("Done"));
 808082c:	f003 fc2c 	bl	8084088 <_ZN5Print7printlnEPKc>
    for (unsigned long i=8; i < 32768; i++) {  // Start at 8 to not overwrite permanent settings
 8080830:	3401      	adds	r4, #1
 8080832:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8080836:	d1ef      	bne.n	8080818 <_Z9ResetFRAMv+0x30>
    }
    FRAMwrite8(CONTROLREGISTER,tempControlReg);   // Preserce the control register values
 8080838:	4629      	mov	r1, r5
 808083a:	2007      	movs	r0, #7
 808083c:	f7ff fd78 	bl	8080330 <_Z10FRAMwrite8jh>
    FRAMwrite8(VERSIONADDR,VERSIONNUMBER);  // Reset version to match #define value for sketch
 8080840:	2109      	movs	r1, #9
 8080842:	2000      	movs	r0, #0
 8080844:	f7ff fd74 	bl	8080330 <_Z10FRAMwrite8jh>
}
 8080848:	b004      	add	sp, #16
 808084a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (i==16384) Serial.println(F("50% done"));
 808084e:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8080852:	d103      	bne.n	808085c <_Z9ResetFRAMv+0x74>
 8080854:	f003 ffb2 	bl	80847bc <_Z16_fetch_usbserialv>
 8080858:	4641      	mov	r1, r8
 808085a:	e7e7      	b.n	808082c <_Z9ResetFRAMv+0x44>
        if (i==(24576)) Serial.println(F("75% done"));
 808085c:	f5b4 4fc0 	cmp.w	r4, #24576	; 0x6000
 8080860:	d103      	bne.n	808086a <_Z9ResetFRAMv+0x82>
 8080862:	f003 ffab 	bl	80847bc <_Z16_fetch_usbserialv>
 8080866:	4639      	mov	r1, r7
 8080868:	e7e0      	b.n	808082c <_Z9ResetFRAMv+0x44>
        if (i==32767) Serial.println(F("Done"));
 808086a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 808086e:	429c      	cmp	r4, r3
 8080870:	d1de      	bne.n	8080830 <_Z9ResetFRAMv+0x48>
 8080872:	f003 ffa3 	bl	80847bc <_Z16_fetch_usbserialv>
 8080876:	4631      	mov	r1, r6
 8080878:	e7d8      	b.n	808082c <_Z9ResetFRAMv+0x44>
 808087a:	bf00      	nop
 808087c:	20000118 	.word	0x20000118
 8080880:	08085fec 	.word	0x08085fec
 8080884:	080862bd 	.word	0x080862bd
 8080888:	0808601d 	.word	0x0808601d
 808088c:	08086014 	.word	0x08086014
 8080890:	08086002 	.word	0x08086002
 8080894:	0808600b 	.word	0x0808600b

08080898 <_Z9resetFRAM6String>:
{
 8080898:	b508      	push	{r3, lr}
 808089a:	4904      	ldr	r1, [pc, #16]	; (80808ac <_Z9resetFRAM6String+0x14>)
 808089c:	f003 fd00 	bl	80842a0 <_ZNK6String6equalsEPKc>
  if (command == "1")
 80808a0:	b110      	cbz	r0, 80808a8 <_Z9resetFRAM6String+0x10>
    ResetFRAM();
 80808a2:	f7ff ffa1 	bl	80807e8 <_Z9ResetFRAMv>
    return 1;
 80808a6:	2001      	movs	r0, #1
}
 80808a8:	bd08      	pop	{r3, pc}
 80808aa:	bf00      	nop
 80808ac:	08085fac 	.word	0x08085fac

080808b0 <_Z12resolveAlertv>:
  char data[128] = "";
 80808b0:	2100      	movs	r1, #0
{
 80808b2:	b510      	push	{r4, lr}
 80808b4:	b0a4      	sub	sp, #144	; 0x90
  char data[128] = "";
 80808b6:	227c      	movs	r2, #124	; 0x7c
 80808b8:	a805      	add	r0, sp, #20
 80808ba:	9104      	str	r1, [sp, #16]
 80808bc:	f005 f99d 	bl	8085bfa <memset>
  if (alertValue & 0b00000001) strcat(data,"Booster No Flow 1 - ");
 80808c0:	4b20      	ldr	r3, [pc, #128]	; (8080944 <_Z12resolveAlertv+0x94>)
 80808c2:	781c      	ldrb	r4, [r3, #0]
 80808c4:	07e2      	lsls	r2, r4, #31
 80808c6:	d503      	bpl.n	80808d0 <_Z12resolveAlertv+0x20>
 80808c8:	491f      	ldr	r1, [pc, #124]	; (8080948 <_Z12resolveAlertv+0x98>)
 80808ca:	a804      	add	r0, sp, #16
 80808cc:	f005 f9c2 	bl	8085c54 <strcat>
  if (alertValue & 0b00000010) strcat(data,"Booster No Flow 2 - ");
 80808d0:	07a3      	lsls	r3, r4, #30
 80808d2:	d503      	bpl.n	80808dc <_Z12resolveAlertv+0x2c>
 80808d4:	491d      	ldr	r1, [pc, #116]	; (808094c <_Z12resolveAlertv+0x9c>)
 80808d6:	a804      	add	r0, sp, #16
 80808d8:	f005 f9bc 	bl	8085c54 <strcat>
  if (alertValue & 0b00000100) strcat(data,"Storage Tank Low - ");
 80808dc:	0760      	lsls	r0, r4, #29
 80808de:	d503      	bpl.n	80808e8 <_Z12resolveAlertv+0x38>
 80808e0:	491b      	ldr	r1, [pc, #108]	; (8080950 <_Z12resolveAlertv+0xa0>)
 80808e2:	a804      	add	r0, sp, #16
 80808e4:	f005 f9b6 	bl	8085c54 <strcat>
  if (alertValue & 0b00001000) strcat(data,"Pump 1 Called - ");
 80808e8:	0721      	lsls	r1, r4, #28
 80808ea:	d503      	bpl.n	80808f4 <_Z12resolveAlertv+0x44>
 80808ec:	4919      	ldr	r1, [pc, #100]	; (8080954 <_Z12resolveAlertv+0xa4>)
 80808ee:	a804      	add	r0, sp, #16
 80808f0:	f005 f9b0 	bl	8085c54 <strcat>
  if (alertValue & 0b00010000) strcat(data,"Pump 2 Called - ");
 80808f4:	06e2      	lsls	r2, r4, #27
 80808f6:	d503      	bpl.n	8080900 <_Z12resolveAlertv+0x50>
 80808f8:	4917      	ldr	r1, [pc, #92]	; (8080958 <_Z12resolveAlertv+0xa8>)
 80808fa:	a804      	add	r0, sp, #16
 80808fc:	f005 f9aa 	bl	8085c54 <strcat>
  if (alertValue & 0b10000000) strcat(data,"Lost Power");
 8080900:	0623      	lsls	r3, r4, #24
 8080902:	d503      	bpl.n	808090c <_Z12resolveAlertv+0x5c>
 8080904:	4915      	ldr	r1, [pc, #84]	; (808095c <_Z12resolveAlertv+0xac>)
 8080906:	a804      	add	r0, sp, #16
 8080908:	f005 f9a4 	bl	8085c54 <strcat>
        return waitConditionWhile(_condition, []{ return true; });
 808090c:	f7ff ff04 	bl	8080718 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
  if(verboseMode) Particle.publish("Alerts",data,PRIVATE);
 8080910:	4b13      	ldr	r3, [pc, #76]	; (8080960 <_Z12resolveAlertv+0xb0>)
 8080912:	781b      	ldrb	r3, [r3, #0]
 8080914:	b163      	cbz	r3, 8080930 <_Z12resolveAlertv+0x80>
 8080916:	2300      	movs	r3, #0
 8080918:	f88d 3000 	strb.w	r3, [sp]
 808091c:	4b11      	ldr	r3, [pc, #68]	; (8080964 <_Z12resolveAlertv+0xb4>)
 808091e:	a802      	add	r0, sp, #8
 8080920:	781b      	ldrb	r3, [r3, #0]
 8080922:	4911      	ldr	r1, [pc, #68]	; (8080968 <_Z12resolveAlertv+0xb8>)
 8080924:	aa04      	add	r2, sp, #16
 8080926:	f7ff fca9 	bl	808027c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 808092a:	a803      	add	r0, sp, #12
 808092c:	f7ff ff46 	bl	80807bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Log.info(data);
 8080930:	a904      	add	r1, sp, #16
 8080932:	480e      	ldr	r0, [pc, #56]	; (808096c <_Z12resolveAlertv+0xbc>)
 8080934:	f7ff fcdf 	bl	80802f6 <_ZNK5spark6Logger4infoEPKcz>
 8080938:	f001 f83e 	bl	80819b8 <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
 808093c:	4b0c      	ldr	r3, [pc, #48]	; (8080970 <_Z12resolveAlertv+0xc0>)
 808093e:	6018      	str	r0, [r3, #0]
}
 8080940:	b024      	add	sp, #144	; 0x90
 8080942:	bd10      	pop	{r4, pc}
 8080944:	20000120 	.word	0x20000120
 8080948:	08086022 	.word	0x08086022
 808094c:	08086037 	.word	0x08086037
 8080950:	0808604c 	.word	0x0808604c
 8080954:	08086060 	.word	0x08086060
 8080958:	08086071 	.word	0x08086071
 808095c:	08086082 	.word	0x08086082
 8080960:	20000194 	.word	0x20000194
 8080964:	20000118 	.word	0x20000118
 8080968:	0808608d 	.word	0x0808608d
 808096c:	200001d8 	.word	0x200001d8
 8080970:	20000140 	.word	0x20000140

08080974 <_Z9sendEventv>:
{
 8080974:	b500      	push	{lr}
  snprintf(data, sizeof(data), "{\"alertValue\":%i, \"pumpMins\":%i, \"battery\":%i, \"temp\":%i, \"resets\":%i}",alertValue, dailyPumpingMins, stateOfCharge, temperatureF,resetCount);
 8080976:	4b14      	ldr	r3, [pc, #80]	; (80809c8 <_Z9sendEventv+0x54>)
{
 8080978:	b0c7      	sub	sp, #284	; 0x11c
  snprintf(data, sizeof(data), "{\"alertValue\":%i, \"pumpMins\":%i, \"battery\":%i, \"temp\":%i, \"resets\":%i}",alertValue, dailyPumpingMins, stateOfCharge, temperatureF,resetCount);
 808097a:	681b      	ldr	r3, [r3, #0]
 808097c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8080980:	9303      	str	r3, [sp, #12]
 8080982:	4b12      	ldr	r3, [pc, #72]	; (80809cc <_Z9sendEventv+0x58>)
 8080984:	4a12      	ldr	r2, [pc, #72]	; (80809d0 <_Z9sendEventv+0x5c>)
 8080986:	681b      	ldr	r3, [r3, #0]
 8080988:	a806      	add	r0, sp, #24
 808098a:	9302      	str	r3, [sp, #8]
 808098c:	4b11      	ldr	r3, [pc, #68]	; (80809d4 <_Z9sendEventv+0x60>)
 808098e:	681b      	ldr	r3, [r3, #0]
 8080990:	9301      	str	r3, [sp, #4]
 8080992:	4b11      	ldr	r3, [pc, #68]	; (80809d8 <_Z9sendEventv+0x64>)
 8080994:	681b      	ldr	r3, [r3, #0]
 8080996:	9300      	str	r3, [sp, #0]
 8080998:	4b10      	ldr	r3, [pc, #64]	; (80809dc <_Z9sendEventv+0x68>)
 808099a:	781b      	ldrb	r3, [r3, #0]
 808099c:	f001 fae4 	bl	8081f68 <snprintf>
  Particle.publish("Monitoring_Hourly", data, PRIVATE);
 80809a0:	2300      	movs	r3, #0
 80809a2:	f88d 3000 	strb.w	r3, [sp]
 80809a6:	4b0e      	ldr	r3, [pc, #56]	; (80809e0 <_Z9sendEventv+0x6c>)
 80809a8:	aa06      	add	r2, sp, #24
 80809aa:	781b      	ldrb	r3, [r3, #0]
 80809ac:	490d      	ldr	r1, [pc, #52]	; (80809e4 <_Z9sendEventv+0x70>)
 80809ae:	a804      	add	r0, sp, #16
 80809b0:	f7ff fc64 	bl	808027c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 80809b4:	a805      	add	r0, sp, #20
 80809b6:	f7ff ff01 	bl	80807bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  dataInFlight = true; // set the data inflight flag
 80809ba:	2201      	movs	r2, #1
 80809bc:	4b0a      	ldr	r3, [pc, #40]	; (80809e8 <_Z9sendEventv+0x74>)
 80809be:	701a      	strb	r2, [r3, #0]
}
 80809c0:	b047      	add	sp, #284	; 0x11c
 80809c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80809c6:	bf00      	nop
 80809c8:	20000178 	.word	0x20000178
 80809cc:	20000190 	.word	0x20000190
 80809d0:	08086094 	.word	0x08086094
 80809d4:	20000184 	.word	0x20000184
 80809d8:	20000134 	.word	0x20000134
 80809dc:	20000120 	.word	0x20000120
 80809e0:	20000118 	.word	0x20000118
 80809e4:	080860db 	.word	0x080860db
 80809e8:	20000138 	.word	0x20000138

080809ec <_Z14UbidotsHandlerPKcS0_>:
{
 80809ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (!data) {                                            // First check to see if there is any data
 80809ee:	460c      	mov	r4, r1
 80809f0:	b999      	cbnz	r1, 8080a1a <_Z14UbidotsHandlerPKcS0_+0x2e>
 80809f2:	f7ff fe91 	bl	8080718 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
    Particle.publish("Ubidots Hook", "No Data",PRIVATE);
 80809f6:	4b20      	ldr	r3, [pc, #128]	; (8080a78 <_Z14UbidotsHandlerPKcS0_+0x8c>)
 80809f8:	f88d 4000 	strb.w	r4, [sp]
 80809fc:	781b      	ldrb	r3, [r3, #0]
 80809fe:	4a1f      	ldr	r2, [pc, #124]	; (8080a7c <_Z14UbidotsHandlerPKcS0_+0x90>)
 8080a00:	491f      	ldr	r1, [pc, #124]	; (8080a80 <_Z14UbidotsHandlerPKcS0_+0x94>)
 8080a02:	a802      	add	r0, sp, #8
 8080a04:	f7ff fc3a 	bl	808027c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 8080a08:	a803      	add	r0, sp, #12
 8080a0a:	f7ff fed7 	bl	80807bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080a0e:	f000 ffd3 	bl	80819b8 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 8080a12:	4b1c      	ldr	r3, [pc, #112]	; (8080a84 <_Z14UbidotsHandlerPKcS0_+0x98>)
 8080a14:	6018      	str	r0, [r3, #0]
}
 8080a16:	b004      	add	sp, #16
 8080a18:	bd10      	pop	{r4, pc}
  int responseCode = atoi(data);                          // Response is only a single number thanks to Template
 8080a1a:	4608      	mov	r0, r1
 8080a1c:	f005 f8ba 	bl	8085b94 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
 8080a20:	38c8      	subs	r0, #200	; 0xc8
 8080a22:	2801      	cmp	r0, #1
 8080a24:	d819      	bhi.n	8080a5a <_Z14UbidotsHandlerPKcS0_+0x6e>
 8080a26:	f7ff fe77 	bl	8080718 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
    if(verboseMode) Particle.publish("State","Response Received",PRIVATE);
 8080a2a:	4b17      	ldr	r3, [pc, #92]	; (8080a88 <_Z14UbidotsHandlerPKcS0_+0x9c>)
 8080a2c:	781b      	ldrb	r3, [r3, #0]
 8080a2e:	b163      	cbz	r3, 8080a4a <_Z14UbidotsHandlerPKcS0_+0x5e>
 8080a30:	2300      	movs	r3, #0
 8080a32:	f88d 3000 	strb.w	r3, [sp]
 8080a36:	4b10      	ldr	r3, [pc, #64]	; (8080a78 <_Z14UbidotsHandlerPKcS0_+0x8c>)
 8080a38:	a802      	add	r0, sp, #8
 8080a3a:	781b      	ldrb	r3, [r3, #0]
 8080a3c:	4a13      	ldr	r2, [pc, #76]	; (8080a8c <_Z14UbidotsHandlerPKcS0_+0xa0>)
 8080a3e:	4914      	ldr	r1, [pc, #80]	; (8080a90 <_Z14UbidotsHandlerPKcS0_+0xa4>)
 8080a40:	f7ff fc1c 	bl	808027c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 8080a44:	a803      	add	r0, sp, #12
 8080a46:	f7ff feb9 	bl	80807bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080a4a:	f000 ffb5 	bl	80819b8 <HAL_Timer_Get_Milli_Seconds>
    dataInFlight = false;                                 // Data has been received
 8080a4e:	2200      	movs	r2, #0
    lastPublish = millis();
 8080a50:	4b0c      	ldr	r3, [pc, #48]	; (8080a84 <_Z14UbidotsHandlerPKcS0_+0x98>)
 8080a52:	6018      	str	r0, [r3, #0]
    dataInFlight = false;                                 // Data has been received
 8080a54:	4b0f      	ldr	r3, [pc, #60]	; (8080a94 <_Z14UbidotsHandlerPKcS0_+0xa8>)
 8080a56:	701a      	strb	r2, [r3, #0]
 8080a58:	e7dd      	b.n	8080a16 <_Z14UbidotsHandlerPKcS0_+0x2a>
  else Particle.publish("Ubidots Hook", data, PRIVATE);             // Publish the response code
 8080a5a:	2300      	movs	r3, #0
 8080a5c:	f88d 3000 	strb.w	r3, [sp]
 8080a60:	4b05      	ldr	r3, [pc, #20]	; (8080a78 <_Z14UbidotsHandlerPKcS0_+0x8c>)
 8080a62:	a802      	add	r0, sp, #8
 8080a64:	4622      	mov	r2, r4
 8080a66:	781b      	ldrb	r3, [r3, #0]
 8080a68:	4905      	ldr	r1, [pc, #20]	; (8080a80 <_Z14UbidotsHandlerPKcS0_+0x94>)
 8080a6a:	f7ff fc07 	bl	808027c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 8080a6e:	a803      	add	r0, sp, #12
 8080a70:	f7ff fea4 	bl	80807bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080a74:	e7cf      	b.n	8080a16 <_Z14UbidotsHandlerPKcS0_+0x2a>
 8080a76:	bf00      	nop
 8080a78:	20000118 	.word	0x20000118
 8080a7c:	080860ed 	.word	0x080860ed
 8080a80:	080860f5 	.word	0x080860f5
 8080a84:	20000140 	.word	0x20000140
 8080a88:	20000194 	.word	0x20000194
 8080a8c:	08086102 	.word	0x08086102
 8080a90:	08086304 	.word	0x08086304
 8080a94:	20000138 	.word	0x20000138

08080a98 <_Z16takeMeasurementsv>:
bool takeMeasurements() {
 8080a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  byte lastAlertValue = alertValue;                                             // Last value - so we can detect a change
 8080a9c:	4ca9      	ldr	r4, [pc, #676]	; (8080d44 <_Z16takeMeasurementsv+0x2ac>)
bool takeMeasurements() {
 8080a9e:	b0c7      	sub	sp, #284	; 0x11c
  controlRegister = FRAMread8(CONTROLREGISTER);                               // Check the control register
 8080aa0:	2007      	movs	r0, #7
 8080aa2:	f7ff fc3f 	bl	8080324 <_Z9FRAMread8j>
  byte lastAlertValue = alertValue;                                             // Last value - so we can detect a change
 8080aa6:	f894 b000 	ldrb.w	fp, [r4]
  alertValueInt = int(alertValue);
 8080aaa:	4ba7      	ldr	r3, [pc, #668]	; (8080d48 <_Z16takeMeasurementsv+0x2b0>)
  controlRegister = FRAMread8(CONTROLREGISTER);                               // Check the control register
 8080aac:	4ea7      	ldr	r6, [pc, #668]	; (8080d4c <_Z16takeMeasurementsv+0x2b4>)
  alertValueInt = int(alertValue);
 8080aae:	f8c3 b000 	str.w	fp, [r3]
  alertValue = 0;                                                               // Reset for each run through
 8080ab2:	2300      	movs	r3, #0
  controlRegister = FRAMread8(CONTROLREGISTER);                               // Check the control register
 8080ab4:	7030      	strb	r0, [r6, #0]
  if (Cellular.ready()) getSignalStrength();                                    // Test signal strength if the cellular modem is on and ready
 8080ab6:	48a6      	ldr	r0, [pc, #664]	; (8080d50 <_Z16takeMeasurementsv+0x2b8>)
  alertValue = 0;                                                               // Reset for each run through
 8080ab8:	7023      	strb	r3, [r4, #0]
  if (Cellular.ready()) getSignalStrength();                                    // Test signal strength if the cellular modem is on and ready
 8080aba:	f7ff fc17 	bl	80802ec <_ZN5spark13CellularClass5readyEv>
 8080abe:	46a2      	mov	sl, r4
 8080ac0:	b108      	cbz	r0, 8080ac6 <_Z16takeMeasurementsv+0x2e>
 8080ac2:	f7ff fcc7 	bl	8080454 <_Z17getSignalStrengthv>
  getTemperature();                                                             // Get Temperature at startup as well
 8080ac6:	f7ff fcff 	bl	80804c8 <_Z14getTemperaturev>
  stateOfCharge = int(batteryMonitor.getSoC());                                 // Percentage of full charge
 8080aca:	48a2      	ldr	r0, [pc, #648]	; (8080d54 <_Z16takeMeasurementsv+0x2bc>)
 8080acc:	f001 ff26 	bl	808291c <_ZN9FuelGauge6getSoCEv>
 8080ad0:	f004 ffda 	bl	8085a88 <__aeabi_f2iz>
 8080ad4:	4ba0      	ldr	r3, [pc, #640]	; (8080d58 <_Z16takeMeasurementsv+0x2c0>)
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8080ad6:	4da1      	ldr	r5, [pc, #644]	; (8080d5c <_Z16takeMeasurementsv+0x2c4>)
 8080ad8:	6018      	str	r0, [r3, #0]
 8080ada:	782b      	ldrb	r3, [r5, #0]
 8080adc:	4ca0      	ldr	r4, [pc, #640]	; (8080d60 <_Z16takeMeasurementsv+0x2c8>)
 8080ade:	f013 0f01 	tst.w	r3, #1
 8080ae2:	f3bf 8f5b 	dmb	ish
 8080ae6:	d109      	bne.n	8080afc <_Z16takeMeasurementsv+0x64>
 8080ae8:	4628      	mov	r0, r5
 8080aea:	f7ff faef 	bl	80800cc <__cxa_guard_acquire>
 8080aee:	b128      	cbz	r0, 8080afc <_Z16takeMeasurementsv+0x64>
 8080af0:	f000 ff82 	bl	80819f8 <HAL_Pin_Map>
 8080af4:	6020      	str	r0, [r4, #0]
 8080af6:	4628      	mov	r0, r5
 8080af8:	f7ff faed 	bl	80800d6 <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
}

inline int32_t pinReadFast(pin_t _pin)
{
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8080afc:	6823      	ldr	r3, [r4, #0]
 8080afe:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8080b02:	691f      	ldr	r7, [r3, #16]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8080b04:	782b      	ldrb	r3, [r5, #0]
 8080b06:	f3bf 8f5b 	dmb	ish
 8080b0a:	07d9      	lsls	r1, r3, #31
 8080b0c:	d409      	bmi.n	8080b22 <_Z16takeMeasurementsv+0x8a>
 8080b0e:	4893      	ldr	r0, [pc, #588]	; (8080d5c <_Z16takeMeasurementsv+0x2c4>)
 8080b10:	f7ff fadc 	bl	80800cc <__cxa_guard_acquire>
 8080b14:	b128      	cbz	r0, 8080b22 <_Z16takeMeasurementsv+0x8a>
 8080b16:	f000 ff6f 	bl	80819f8 <HAL_Pin_Map>
 8080b1a:	6020      	str	r0, [r4, #0]
 8080b1c:	488f      	ldr	r0, [pc, #572]	; (8080d5c <_Z16takeMeasurementsv+0x2c4>)
 8080b1e:	f7ff fada 	bl	80800d6 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8080b22:	6823      	ldr	r3, [r4, #0]
 8080b24:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
  if (!pinReadFast(anyOnDetectPin)) {
 8080b28:	423b      	tst	r3, r7
 8080b2a:	f040 80b4 	bne.w	8080c96 <_Z16takeMeasurementsv+0x1fe>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8080b2e:	782b      	ldrb	r3, [r5, #0]
 8080b30:	f3bf 8f5b 	dmb	ish
 8080b34:	07da      	lsls	r2, r3, #31
 8080b36:	d409      	bmi.n	8080b4c <_Z16takeMeasurementsv+0xb4>
 8080b38:	4888      	ldr	r0, [pc, #544]	; (8080d5c <_Z16takeMeasurementsv+0x2c4>)
 8080b3a:	f7ff fac7 	bl	80800cc <__cxa_guard_acquire>
 8080b3e:	b128      	cbz	r0, 8080b4c <_Z16takeMeasurementsv+0xb4>
 8080b40:	f000 ff5a 	bl	80819f8 <HAL_Pin_Map>
 8080b44:	6020      	str	r0, [r4, #0]
 8080b46:	4885      	ldr	r0, [pc, #532]	; (8080d5c <_Z16takeMeasurementsv+0x2c4>)
 8080b48:	f7ff fac5 	bl	80800d6 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8080b4c:	6823      	ldr	r3, [r4, #0]
 8080b4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8080b52:	691f      	ldr	r7, [r3, #16]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8080b54:	782b      	ldrb	r3, [r5, #0]
 8080b56:	f3bf 8f5b 	dmb	ish
 8080b5a:	07db      	lsls	r3, r3, #31
 8080b5c:	d409      	bmi.n	8080b72 <_Z16takeMeasurementsv+0xda>
 8080b5e:	487f      	ldr	r0, [pc, #508]	; (8080d5c <_Z16takeMeasurementsv+0x2c4>)
 8080b60:	f7ff fab4 	bl	80800cc <__cxa_guard_acquire>
 8080b64:	b128      	cbz	r0, 8080b72 <_Z16takeMeasurementsv+0xda>
 8080b66:	f000 ff47 	bl	80819f8 <HAL_Pin_Map>
 8080b6a:	6020      	str	r0, [r4, #0]
 8080b6c:	487b      	ldr	r0, [pc, #492]	; (8080d5c <_Z16takeMeasurementsv+0x2c4>)
 8080b6e:	f7ff fab2 	bl	80800d6 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8080b72:	6823      	ldr	r3, [r4, #0]
 8080b74:	f8b3 32c0 	ldrh.w	r3, [r3, #704]	; 0x2c0
    if (!pinReadFast(boosterNoFlow1Pin)) alertValue = alertValue | 0b00000001;  // Set the value for alertValue
 8080b78:	423b      	tst	r3, r7
 8080b7a:	bf02      	ittt	eq
 8080b7c:	f89a 3000 	ldrbeq.w	r3, [sl]
 8080b80:	f043 0301 	orreq.w	r3, r3, #1
 8080b84:	f88a 3000 	strbeq.w	r3, [sl]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8080b88:	782b      	ldrb	r3, [r5, #0]
 8080b8a:	f3bf 8f5b 	dmb	ish
 8080b8e:	07d8      	lsls	r0, r3, #31
 8080b90:	d409      	bmi.n	8080ba6 <_Z16takeMeasurementsv+0x10e>
 8080b92:	4872      	ldr	r0, [pc, #456]	; (8080d5c <_Z16takeMeasurementsv+0x2c4>)
 8080b94:	f7ff fa9a 	bl	80800cc <__cxa_guard_acquire>
 8080b98:	b128      	cbz	r0, 8080ba6 <_Z16takeMeasurementsv+0x10e>
 8080b9a:	f000 ff2d 	bl	80819f8 <HAL_Pin_Map>
 8080b9e:	6020      	str	r0, [r4, #0]
 8080ba0:	486e      	ldr	r0, [pc, #440]	; (8080d5c <_Z16takeMeasurementsv+0x2c4>)
 8080ba2:	f7ff fa98 	bl	80800d6 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8080ba6:	6823      	ldr	r3, [r4, #0]
 8080ba8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8080bac:	691f      	ldr	r7, [r3, #16]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8080bae:	782b      	ldrb	r3, [r5, #0]
 8080bb0:	f3bf 8f5b 	dmb	ish
 8080bb4:	07d9      	lsls	r1, r3, #31
 8080bb6:	d409      	bmi.n	8080bcc <_Z16takeMeasurementsv+0x134>
 8080bb8:	4868      	ldr	r0, [pc, #416]	; (8080d5c <_Z16takeMeasurementsv+0x2c4>)
 8080bba:	f7ff fa87 	bl	80800cc <__cxa_guard_acquire>
 8080bbe:	b128      	cbz	r0, 8080bcc <_Z16takeMeasurementsv+0x134>
 8080bc0:	f000 ff1a 	bl	80819f8 <HAL_Pin_Map>
 8080bc4:	6020      	str	r0, [r4, #0]
 8080bc6:	4865      	ldr	r0, [pc, #404]	; (8080d5c <_Z16takeMeasurementsv+0x2c4>)
 8080bc8:	f7ff fa85 	bl	80800d6 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8080bcc:	6823      	ldr	r3, [r4, #0]
 8080bce:	f8b3 32dc 	ldrh.w	r3, [r3, #732]	; 0x2dc
    if (!pinReadFast(boosterNoFlow2Pin)) alertValue = alertValue | 0b00000010;  // Set the value for alertValue
 8080bd2:	423b      	tst	r3, r7
 8080bd4:	bf02      	ittt	eq
 8080bd6:	f89a 3000 	ldrbeq.w	r3, [sl]
 8080bda:	f043 0302 	orreq.w	r3, r3, #2
 8080bde:	f88a 3000 	strbeq.w	r3, [sl]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8080be2:	782b      	ldrb	r3, [r5, #0]
 8080be4:	f3bf 8f5b 	dmb	ish
 8080be8:	07da      	lsls	r2, r3, #31
 8080bea:	d409      	bmi.n	8080c00 <_Z16takeMeasurementsv+0x168>
 8080bec:	485b      	ldr	r0, [pc, #364]	; (8080d5c <_Z16takeMeasurementsv+0x2c4>)
 8080bee:	f7ff fa6d 	bl	80800cc <__cxa_guard_acquire>
 8080bf2:	b128      	cbz	r0, 8080c00 <_Z16takeMeasurementsv+0x168>
 8080bf4:	f000 ff00 	bl	80819f8 <HAL_Pin_Map>
 8080bf8:	6020      	str	r0, [r4, #0]
 8080bfa:	4858      	ldr	r0, [pc, #352]	; (8080d5c <_Z16takeMeasurementsv+0x2c4>)
 8080bfc:	f7ff fa6b 	bl	80800d6 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8080c00:	6823      	ldr	r3, [r4, #0]
 8080c02:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8080c06:	691f      	ldr	r7, [r3, #16]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8080c08:	782b      	ldrb	r3, [r5, #0]
 8080c0a:	f3bf 8f5b 	dmb	ish
 8080c0e:	07db      	lsls	r3, r3, #31
 8080c10:	d409      	bmi.n	8080c26 <_Z16takeMeasurementsv+0x18e>
 8080c12:	4852      	ldr	r0, [pc, #328]	; (8080d5c <_Z16takeMeasurementsv+0x2c4>)
 8080c14:	f7ff fa5a 	bl	80800cc <__cxa_guard_acquire>
 8080c18:	b128      	cbz	r0, 8080c26 <_Z16takeMeasurementsv+0x18e>
 8080c1a:	f000 feed 	bl	80819f8 <HAL_Pin_Map>
 8080c1e:	6020      	str	r0, [r4, #0]
 8080c20:	484e      	ldr	r0, [pc, #312]	; (8080d5c <_Z16takeMeasurementsv+0x2c4>)
 8080c22:	f7ff fa58 	bl	80800d6 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8080c26:	6823      	ldr	r3, [r4, #0]
 8080c28:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
    if (!pinReadFast(storageTankLowPin)) alertValue = alertValue | 0b00000100;  // Set the value for alertValue
 8080c2c:	423b      	tst	r3, r7
 8080c2e:	bf02      	ittt	eq
 8080c30:	f89a 3000 	ldrbeq.w	r3, [sl]
 8080c34:	f043 0304 	orreq.w	r3, r3, #4
 8080c38:	f88a 3000 	strbeq.w	r3, [sl]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8080c3c:	782b      	ldrb	r3, [r5, #0]
 8080c3e:	f3bf 8f5b 	dmb	ish
 8080c42:	07d8      	lsls	r0, r3, #31
 8080c44:	d409      	bmi.n	8080c5a <_Z16takeMeasurementsv+0x1c2>
 8080c46:	4845      	ldr	r0, [pc, #276]	; (8080d5c <_Z16takeMeasurementsv+0x2c4>)
 8080c48:	f7ff fa40 	bl	80800cc <__cxa_guard_acquire>
 8080c4c:	b128      	cbz	r0, 8080c5a <_Z16takeMeasurementsv+0x1c2>
 8080c4e:	f000 fed3 	bl	80819f8 <HAL_Pin_Map>
 8080c52:	6020      	str	r0, [r4, #0]
 8080c54:	4841      	ldr	r0, [pc, #260]	; (8080d5c <_Z16takeMeasurementsv+0x2c4>)
 8080c56:	f7ff fa3e 	bl	80800d6 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8080c5a:	6823      	ldr	r3, [r4, #0]
 8080c5c:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8080c60:	691f      	ldr	r7, [r3, #16]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8080c62:	782b      	ldrb	r3, [r5, #0]
 8080c64:	f3bf 8f5b 	dmb	ish
 8080c68:	07d9      	lsls	r1, r3, #31
 8080c6a:	d409      	bmi.n	8080c80 <_Z16takeMeasurementsv+0x1e8>
 8080c6c:	483b      	ldr	r0, [pc, #236]	; (8080d5c <_Z16takeMeasurementsv+0x2c4>)
 8080c6e:	f7ff fa2d 	bl	80800cc <__cxa_guard_acquire>
 8080c72:	b128      	cbz	r0, 8080c80 <_Z16takeMeasurementsv+0x1e8>
 8080c74:	f000 fec0 	bl	80819f8 <HAL_Pin_Map>
 8080c78:	6020      	str	r0, [r4, #0]
 8080c7a:	4838      	ldr	r0, [pc, #224]	; (8080d5c <_Z16takeMeasurementsv+0x2c4>)
 8080c7c:	f7ff fa2b 	bl	80800d6 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8080c80:	6823      	ldr	r3, [r4, #0]
 8080c82:	f8b3 3314 	ldrh.w	r3, [r3, #788]	; 0x314
    if (!pinReadFast(pump1CalledPin)) alertValue = alertValue | 0b00001000;     // Set the value for alertValue
 8080c86:	423b      	tst	r3, r7
 8080c88:	bf02      	ittt	eq
 8080c8a:	f89a 3000 	ldrbeq.w	r3, [sl]
 8080c8e:	f043 0308 	orreq.w	r3, r3, #8
 8080c92:	f88a 3000 	strbeq.w	r3, [sl]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8080c96:	782b      	ldrb	r3, [r5, #0]
 8080c98:	f3bf 8f5b 	dmb	ish
 8080c9c:	07da      	lsls	r2, r3, #31
 8080c9e:	d409      	bmi.n	8080cb4 <_Z16takeMeasurementsv+0x21c>
 8080ca0:	482e      	ldr	r0, [pc, #184]	; (8080d5c <_Z16takeMeasurementsv+0x2c4>)
 8080ca2:	f7ff fa13 	bl	80800cc <__cxa_guard_acquire>
 8080ca6:	b128      	cbz	r0, 8080cb4 <_Z16takeMeasurementsv+0x21c>
 8080ca8:	f000 fea6 	bl	80819f8 <HAL_Pin_Map>
 8080cac:	6020      	str	r0, [r4, #0]
 8080cae:	482b      	ldr	r0, [pc, #172]	; (8080d5c <_Z16takeMeasurementsv+0x2c4>)
 8080cb0:	f7ff fa11 	bl	80800d6 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8080cb4:	6823      	ldr	r3, [r4, #0]
 8080cb6:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8080cba:	691f      	ldr	r7, [r3, #16]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8080cbc:	782b      	ldrb	r3, [r5, #0]
 8080cbe:	f3bf 8f5b 	dmb	ish
 8080cc2:	07db      	lsls	r3, r3, #31
 8080cc4:	d409      	bmi.n	8080cda <_Z16takeMeasurementsv+0x242>
 8080cc6:	4825      	ldr	r0, [pc, #148]	; (8080d5c <_Z16takeMeasurementsv+0x2c4>)
 8080cc8:	f7ff fa00 	bl	80800cc <__cxa_guard_acquire>
 8080ccc:	b128      	cbz	r0, 8080cda <_Z16takeMeasurementsv+0x242>
 8080cce:	f000 fe93 	bl	80819f8 <HAL_Pin_Map>
 8080cd2:	6020      	str	r0, [r4, #0]
 8080cd4:	4821      	ldr	r0, [pc, #132]	; (8080d5c <_Z16takeMeasurementsv+0x2c4>)
 8080cd6:	f7ff f9fe 	bl	80800d6 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8080cda:	6823      	ldr	r3, [r4, #0]
 8080cdc:	7831      	ldrb	r1, [r6, #0]
 8080cde:	f8b3 318c 	ldrh.w	r3, [r3, #396]	; 0x18c
  if (!pinReadFast(pump2CalledPin)) {
 8080ce2:	423b      	tst	r3, r7
 8080ce4:	f040 80ae 	bne.w	8080e44 <_Z16takeMeasurementsv+0x3ac>
    alertValue = alertValue | 0b00010000;                                      // Set the value for alertValue
 8080ce8:	f89a 3000 	ldrb.w	r3, [sl]
    if (controlRegister ^ 0b00000010) {                                        // This is a new pumping session
 8080cec:	2902      	cmp	r1, #2
    alertValue = alertValue | 0b00010000;                                      // Set the value for alertValue
 8080cee:	f043 0310 	orr.w	r3, r3, #16
 8080cf2:	f88a 3000 	strb.w	r3, [sl]
    if (controlRegister ^ 0b00000010) {                                        // This is a new pumping session
 8080cf6:	d010      	beq.n	8080d1a <_Z16takeMeasurementsv+0x282>
      pumpingStart = Time.now();
 8080cf8:	f003 fc3d 	bl	8084576 <_ZN9TimeClass3nowEv>
 8080cfc:	4602      	mov	r2, r0
 8080cfe:	4601      	mov	r1, r0
 8080d00:	17c3      	asrs	r3, r0, #31
 8080d02:	4818      	ldr	r0, [pc, #96]	; (8080d64 <_Z16takeMeasurementsv+0x2cc>)
 8080d04:	e9c0 2300 	strd	r2, r3, [r0]
      FRAMwrite32(CURRENTCOUNTSTIME,pumpingStart);                              // Write to FRAM in case of a reset
 8080d08:	200e      	movs	r0, #14
 8080d0a:	f7ff fb81 	bl	8080410 <_Z11FRAMwrite32im>
      FRAMwrite8(CONTROLREGISTER,controlRegister | 0b00000010);                 // Turn on the pumping bit
 8080d0e:	7831      	ldrb	r1, [r6, #0]
 8080d10:	2007      	movs	r0, #7
 8080d12:	f041 0102 	orr.w	r1, r1, #2
 8080d16:	f7ff fb0b 	bl	8080330 <_Z10FRAMwrite8jh>
  if (verboseMode) {
 8080d1a:	4b13      	ldr	r3, [pc, #76]	; (8080d68 <_Z16takeMeasurementsv+0x2d0>)
 8080d1c:	781b      	ldrb	r3, [r3, #0]
 8080d1e:	2b00      	cmp	r3, #0
 8080d20:	d07e      	beq.n	8080e20 <_Z16takeMeasurementsv+0x388>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8080d22:	782b      	ldrb	r3, [r5, #0]
 8080d24:	f3bf 8f5b 	dmb	ish
 8080d28:	07d8      	lsls	r0, r3, #31
 8080d2a:	d41f      	bmi.n	8080d6c <_Z16takeMeasurementsv+0x2d4>
 8080d2c:	480b      	ldr	r0, [pc, #44]	; (8080d5c <_Z16takeMeasurementsv+0x2c4>)
 8080d2e:	f7ff f9cd 	bl	80800cc <__cxa_guard_acquire>
 8080d32:	b1d8      	cbz	r0, 8080d6c <_Z16takeMeasurementsv+0x2d4>
 8080d34:	f000 fe60 	bl	80819f8 <HAL_Pin_Map>
 8080d38:	6020      	str	r0, [r4, #0]
 8080d3a:	4808      	ldr	r0, [pc, #32]	; (8080d5c <_Z16takeMeasurementsv+0x2c4>)
 8080d3c:	f7ff f9cb 	bl	80800d6 <__cxa_guard_release>
 8080d40:	e014      	b.n	8080d6c <_Z16takeMeasurementsv+0x2d4>
 8080d42:	bf00      	nop
 8080d44:	20000120 	.word	0x20000120
 8080d48:	20000124 	.word	0x20000124
 8080d4c:	20000130 	.word	0x20000130
 8080d50:	2000019c 	.word	0x2000019c
 8080d54:	20000128 	.word	0x20000128
 8080d58:	20000184 	.word	0x20000184
 8080d5c:	20000100 	.word	0x20000100
 8080d60:	20000104 	.word	0x20000104
 8080d64:	20000170 	.word	0x20000170
 8080d68:	20000194 	.word	0x20000194
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8080d6c:	6823      	ldr	r3, [r4, #0]
 8080d6e:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8080d72:	691e      	ldr	r6, [r3, #16]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8080d74:	782b      	ldrb	r3, [r5, #0]
 8080d76:	f3bf 8f5b 	dmb	ish
 8080d7a:	07d9      	lsls	r1, r3, #31
 8080d7c:	d409      	bmi.n	8080d92 <_Z16takeMeasurementsv+0x2fa>
 8080d7e:	4847      	ldr	r0, [pc, #284]	; (8080e9c <_Z16takeMeasurementsv+0x404>)
 8080d80:	f7ff f9a4 	bl	80800cc <__cxa_guard_acquire>
 8080d84:	b128      	cbz	r0, 8080d92 <_Z16takeMeasurementsv+0x2fa>
 8080d86:	f000 fe37 	bl	80819f8 <HAL_Pin_Map>
 8080d8a:	6020      	str	r0, [r4, #0]
 8080d8c:	4843      	ldr	r0, [pc, #268]	; (8080e9c <_Z16takeMeasurementsv+0x404>)
 8080d8e:	f7ff f9a2 	bl	80800d6 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8080d92:	6823      	ldr	r3, [r4, #0]
 8080d94:	f8b3 3314 	ldrh.w	r3, [r3, #788]	; 0x314
    snprintf(messageString, sizeof(messageString), "Pin values: pump 1: %s, pump 2: %s",  (!pinReadFast(pump1CalledPin))? "on":"off", !pinReadFast(pump2CalledPin)? "on":"off");
 8080d98:	4233      	tst	r3, r6
 8080d9a:	4b41      	ldr	r3, [pc, #260]	; (8080ea0 <_Z16takeMeasurementsv+0x408>)
 8080d9c:	4e41      	ldr	r6, [pc, #260]	; (8080ea4 <_Z16takeMeasurementsv+0x40c>)
 8080d9e:	bf18      	it	ne
 8080da0:	461e      	movne	r6, r3
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8080da2:	782b      	ldrb	r3, [r5, #0]
 8080da4:	f3bf 8f5b 	dmb	ish
 8080da8:	07da      	lsls	r2, r3, #31
 8080daa:	d409      	bmi.n	8080dc0 <_Z16takeMeasurementsv+0x328>
 8080dac:	483b      	ldr	r0, [pc, #236]	; (8080e9c <_Z16takeMeasurementsv+0x404>)
 8080dae:	f7ff f98d 	bl	80800cc <__cxa_guard_acquire>
 8080db2:	b128      	cbz	r0, 8080dc0 <_Z16takeMeasurementsv+0x328>
 8080db4:	f000 fe20 	bl	80819f8 <HAL_Pin_Map>
 8080db8:	6020      	str	r0, [r4, #0]
 8080dba:	4838      	ldr	r0, [pc, #224]	; (8080e9c <_Z16takeMeasurementsv+0x404>)
 8080dbc:	f7ff f98b 	bl	80800d6 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8080dc0:	6823      	ldr	r3, [r4, #0]
 8080dc2:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8080dc6:	691f      	ldr	r7, [r3, #16]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8080dc8:	782b      	ldrb	r3, [r5, #0]
 8080dca:	f3bf 8f5b 	dmb	ish
 8080dce:	07db      	lsls	r3, r3, #31
 8080dd0:	d409      	bmi.n	8080de6 <_Z16takeMeasurementsv+0x34e>
 8080dd2:	4832      	ldr	r0, [pc, #200]	; (8080e9c <_Z16takeMeasurementsv+0x404>)
 8080dd4:	f7ff f97a 	bl	80800cc <__cxa_guard_acquire>
 8080dd8:	b128      	cbz	r0, 8080de6 <_Z16takeMeasurementsv+0x34e>
 8080dda:	f000 fe0d 	bl	80819f8 <HAL_Pin_Map>
 8080dde:	6020      	str	r0, [r4, #0]
 8080de0:	482e      	ldr	r0, [pc, #184]	; (8080e9c <_Z16takeMeasurementsv+0x404>)
 8080de2:	f7ff f978 	bl	80800d6 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8080de6:	6823      	ldr	r3, [r4, #0]
 8080de8:	4a2d      	ldr	r2, [pc, #180]	; (8080ea0 <_Z16takeMeasurementsv+0x408>)
 8080dea:	f8b3 318c 	ldrh.w	r3, [r3, #396]	; 0x18c
 8080dee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8080df2:	423b      	tst	r3, r7
 8080df4:	4b2b      	ldr	r3, [pc, #172]	; (8080ea4 <_Z16takeMeasurementsv+0x40c>)
 8080df6:	bf18      	it	ne
 8080df8:	4613      	movne	r3, r2
 8080dfa:	a806      	add	r0, sp, #24
 8080dfc:	4a2a      	ldr	r2, [pc, #168]	; (8080ea8 <_Z16takeMeasurementsv+0x410>)
 8080dfe:	9300      	str	r3, [sp, #0]
 8080e00:	4633      	mov	r3, r6
 8080e02:	f001 f8b1 	bl	8081f68 <snprintf>
    Particle.publish("Test",messageString, PRIVATE);
 8080e06:	2300      	movs	r3, #0
 8080e08:	f88d 3000 	strb.w	r3, [sp]
 8080e0c:	4b27      	ldr	r3, [pc, #156]	; (8080eac <_Z16takeMeasurementsv+0x414>)
 8080e0e:	a804      	add	r0, sp, #16
 8080e10:	781b      	ldrb	r3, [r3, #0]
 8080e12:	4927      	ldr	r1, [pc, #156]	; (8080eb0 <_Z16takeMeasurementsv+0x418>)
 8080e14:	aa06      	add	r2, sp, #24
 8080e16:	f7ff fa31 	bl	808027c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 8080e1a:	a805      	add	r0, sp, #20
 8080e1c:	f7ff fcce 	bl	80807bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  if(getLostPower()) alertValue = alertValue | 0b10000000;                      // Set the value for alertValue
 8080e20:	f7ff fc3a 	bl	8080698 <_Z12getLostPowerv>
 8080e24:	b128      	cbz	r0, 8080e32 <_Z16takeMeasurementsv+0x39a>
 8080e26:	f89a 3000 	ldrb.w	r3, [sl]
 8080e2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8080e2e:	f88a 3000 	strb.w	r3, [sl]
  if (alertValue != lastAlertValue) return 1;
 8080e32:	f89a 0000 	ldrb.w	r0, [sl]
}
 8080e36:	ebb0 000b 	subs.w	r0, r0, fp
 8080e3a:	bf18      	it	ne
 8080e3c:	2001      	movne	r0, #1
 8080e3e:	b047      	add	sp, #284	; 0x11c
 8080e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (controlRegister & 0b00000010) {                                      // If the pump is off but the pumping flag is set
 8080e44:	078e      	lsls	r6, r1, #30
 8080e46:	f57f af68 	bpl.w	8080d1a <_Z16takeMeasurementsv+0x282>
    FRAMwrite8(CONTROLREGISTER,controlRegister ^ 0b00000010);                   // It is on and I want to turn the pumping bit off with an xor
 8080e4a:	f081 0102 	eor.w	r1, r1, #2
 8080e4e:	2007      	movs	r0, #7
 8080e50:	f7ff fa6e 	bl	8080330 <_Z10FRAMwrite8jh>
    time_t pumpingStop = Time.now();
 8080e54:	f003 fb8f 	bl	8084576 <_ZN9TimeClass3nowEv>
    dailyPumpingMins += difftime(pumpingStop,pumpingStart)/60;                 // Add to the total for the day
 8080e58:	4b16      	ldr	r3, [pc, #88]	; (8080eb4 <_Z16takeMeasurementsv+0x41c>)
 8080e5a:	17c1      	asrs	r1, r0, #31
 8080e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080e60:	f004 fe9c 	bl	8085b9c <difftime>
 8080e64:	4e14      	ldr	r6, [pc, #80]	; (8080eb8 <_Z16takeMeasurementsv+0x420>)
 8080e66:	4680      	mov	r8, r0
 8080e68:	6830      	ldr	r0, [r6, #0]
 8080e6a:	4689      	mov	r9, r1
 8080e6c:	f004 f824 	bl	8084eb8 <__aeabi_i2d>
 8080e70:	2200      	movs	r2, #0
 8080e72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8080e76:	4b11      	ldr	r3, [pc, #68]	; (8080ebc <_Z16takeMeasurementsv+0x424>)
 8080e78:	4640      	mov	r0, r8
 8080e7a:	4649      	mov	r1, r9
 8080e7c:	f004 f9b0 	bl	80851e0 <__aeabi_ddiv>
 8080e80:	4602      	mov	r2, r0
 8080e82:	460b      	mov	r3, r1
 8080e84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8080e88:	f003 feca 	bl	8084c20 <__adddf3>
 8080e8c:	f004 fa90 	bl	80853b0 <__aeabi_d2iz>
 8080e90:	4601      	mov	r1, r0
 8080e92:	6030      	str	r0, [r6, #0]
    FRAMwrite16(DAILYPUMPMINUTES,dailyPumpingMins);                             // Store it in FRAM in case of a reset
 8080e94:	2014      	movs	r0, #20
 8080e96:	f7ff fa65 	bl	8080364 <_Z11FRAMwrite16ji>
 8080e9a:	e73e      	b.n	8080d1a <_Z16takeMeasurementsv+0x282>
 8080e9c:	20000100 	.word	0x20000100
 8080ea0:	08086114 	.word	0x08086114
 8080ea4:	080861fa 	.word	0x080861fa
 8080ea8:	08086118 	.word	0x08086118
 8080eac:	20000118 	.word	0x20000118
 8080eb0:	0808613b 	.word	0x0808613b
 8080eb4:	20000170 	.word	0x20000170
 8080eb8:	20000134 	.word	0x20000134
 8080ebc:	404e0000 	.word	0x404e0000

08080ec0 <_Z14setVerboseMode6String>:
{
 8080ec0:	b530      	push	{r4, r5, lr}
 8080ec2:	4923      	ldr	r1, [pc, #140]	; (8080f50 <_Z14setVerboseMode6String+0x90>)
 8080ec4:	b085      	sub	sp, #20
 8080ec6:	4605      	mov	r5, r0
 8080ec8:	f003 f9ea 	bl	80842a0 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080ecc:	4604      	mov	r4, r0
 8080ece:	b318      	cbz	r0, 8080f18 <_Z14setVerboseMode6String+0x58>
    verboseMode = true;
 8080ed0:	2401      	movs	r4, #1
 8080ed2:	4b20      	ldr	r3, [pc, #128]	; (8080f54 <_Z14setVerboseMode6String+0x94>)
    FRAMread8(CONTROLREGISTER);
 8080ed4:	2007      	movs	r0, #7
    verboseMode = true;
 8080ed6:	701c      	strb	r4, [r3, #0]
    FRAMread8(CONTROLREGISTER);
 8080ed8:	f7ff fa24 	bl	8080324 <_Z9FRAMread8j>
    controlRegister = (0b00001000 | controlRegister);                    // Turn on verboseMode
 8080edc:	4b1e      	ldr	r3, [pc, #120]	; (8080f58 <_Z14setVerboseMode6String+0x98>)
    FRAMwrite8(CONTROLREGISTER,controlRegister);                        // Write it to the register
 8080ede:	2007      	movs	r0, #7
    controlRegister = (0b00001000 | controlRegister);                    // Turn on verboseMode
 8080ee0:	7819      	ldrb	r1, [r3, #0]
 8080ee2:	f041 0108 	orr.w	r1, r1, #8
 8080ee6:	7019      	strb	r1, [r3, #0]
    FRAMwrite8(CONTROLREGISTER,controlRegister);                        // Write it to the register
 8080ee8:	f7ff fa22 	bl	8080330 <_Z10FRAMwrite8jh>
 8080eec:	f7ff fc14 	bl	8080718 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
 8080ef0:	2300      	movs	r3, #0
 8080ef2:	f88d 3000 	strb.w	r3, [sp]
 8080ef6:	4b19      	ldr	r3, [pc, #100]	; (8080f5c <_Z14setVerboseMode6String+0x9c>)
 8080ef8:	4a19      	ldr	r2, [pc, #100]	; (8080f60 <_Z14setVerboseMode6String+0xa0>)
 8080efa:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
 8080efc:	4919      	ldr	r1, [pc, #100]	; (8080f64 <_Z14setVerboseMode6String+0xa4>)
 8080efe:	a802      	add	r0, sp, #8
 8080f00:	f7ff f9bc 	bl	808027c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 8080f04:	a803      	add	r0, sp, #12
 8080f06:	f7ff fc59 	bl	80807bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080f0a:	f000 fd55 	bl	80819b8 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 8080f0e:	4b16      	ldr	r3, [pc, #88]	; (8080f68 <_Z14setVerboseMode6String+0xa8>)
 8080f10:	6018      	str	r0, [r3, #0]
    return 1;
 8080f12:	2001      	movs	r0, #1
}
 8080f14:	b005      	add	sp, #20
 8080f16:	bd30      	pop	{r4, r5, pc}
 8080f18:	4628      	mov	r0, r5
 8080f1a:	4914      	ldr	r1, [pc, #80]	; (8080f6c <_Z14setVerboseMode6String+0xac>)
 8080f1c:	f003 f9c0 	bl	80842a0 <_ZNK6String6equalsEPKc>
  else if (command == "0")
 8080f20:	2800      	cmp	r0, #0
 8080f22:	d0f7      	beq.n	8080f14 <_Z14setVerboseMode6String+0x54>
    verboseMode = false;
 8080f24:	4b0b      	ldr	r3, [pc, #44]	; (8080f54 <_Z14setVerboseMode6String+0x94>)
    FRAMread8(CONTROLREGISTER);
 8080f26:	2007      	movs	r0, #7
    verboseMode = false;
 8080f28:	701c      	strb	r4, [r3, #0]
    FRAMread8(CONTROLREGISTER);
 8080f2a:	f7ff f9fb 	bl	8080324 <_Z9FRAMread8j>
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 8080f2e:	4b0a      	ldr	r3, [pc, #40]	; (8080f58 <_Z14setVerboseMode6String+0x98>)
    FRAMwrite8(CONTROLREGISTER,controlRegister);                        // Write it to the register
 8080f30:	2007      	movs	r0, #7
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 8080f32:	7819      	ldrb	r1, [r3, #0]
 8080f34:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 8080f38:	7019      	strb	r1, [r3, #0]
    FRAMwrite8(CONTROLREGISTER,controlRegister);                        // Write it to the register
 8080f3a:	f7ff f9f9 	bl	8080330 <_Z10FRAMwrite8jh>
 8080f3e:	f7ff fbeb 	bl	8080718 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
 8080f42:	4b06      	ldr	r3, [pc, #24]	; (8080f5c <_Z14setVerboseMode6String+0x9c>)
 8080f44:	f88d 4000 	strb.w	r4, [sp]
 8080f48:	781b      	ldrb	r3, [r3, #0]
 8080f4a:	4a09      	ldr	r2, [pc, #36]	; (8080f70 <_Z14setVerboseMode6String+0xb0>)
 8080f4c:	e7d6      	b.n	8080efc <_Z14setVerboseMode6String+0x3c>
 8080f4e:	bf00      	nop
 8080f50:	08085fac 	.word	0x08085fac
 8080f54:	20000194 	.word	0x20000194
 8080f58:	20000130 	.word	0x20000130
 8080f5c:	20000118 	.word	0x20000118
 8080f60:	08086140 	.word	0x08086140
 8080f64:	08086163 	.word	0x08086163
 8080f68:	20000140 	.word	0x20000140
 8080f6c:	08086151 	.word	0x08086151
 8080f70:	08086153 	.word	0x08086153

08080f74 <_Z15setPumpingState6String>:
{
 8080f74:	b530      	push	{r4, r5, lr}
 8080f76:	4925      	ldr	r1, [pc, #148]	; (808100c <_Z15setPumpingState6String+0x98>)
 8080f78:	b085      	sub	sp, #20
 8080f7a:	4605      	mov	r5, r0
 8080f7c:	f003 f990 	bl	80842a0 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080f80:	4604      	mov	r4, r0
 8080f82:	b320      	cbz	r0, 8080fce <_Z15setPumpingState6String+0x5a>
    alertValue = (0b00010000 | alertValue);                    // Turn on pump
 8080f84:	4a22      	ldr	r2, [pc, #136]	; (8081010 <_Z15setPumpingState6String+0x9c>)
    alertValueInt = int(alertValue);
 8080f86:	4c23      	ldr	r4, [pc, #140]	; (8081014 <_Z15setPumpingState6String+0xa0>)
    alertValue = (0b00010000 | alertValue);                    // Turn on pump
 8080f88:	7813      	ldrb	r3, [r2, #0]
 8080f8a:	f043 0310 	orr.w	r3, r3, #16
 8080f8e:	7013      	strb	r3, [r2, #0]
    alertValueInt = int(alertValue);
 8080f90:	6023      	str	r3, [r4, #0]
 8080f92:	f7ff fbc1 	bl	8080718 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
    Particle.publish("Mode","Turned on Pump Called",PRIVATE);
 8080f96:	2300      	movs	r3, #0
 8080f98:	f88d 3000 	strb.w	r3, [sp]
 8080f9c:	4b1e      	ldr	r3, [pc, #120]	; (8081018 <_Z15setPumpingState6String+0xa4>)
 8080f9e:	4a1f      	ldr	r2, [pc, #124]	; (808101c <_Z15setPumpingState6String+0xa8>)
 8080fa0:	491f      	ldr	r1, [pc, #124]	; (8081020 <_Z15setPumpingState6String+0xac>)
 8080fa2:	781b      	ldrb	r3, [r3, #0]
 8080fa4:	a802      	add	r0, sp, #8
 8080fa6:	f7ff f969 	bl	808027c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 8080faa:	a803      	add	r0, sp, #12
 8080fac:	f7ff fc06 	bl	80807bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Log.info("Pump called alerts = %i",alertValueInt);
 8080fb0:	6822      	ldr	r2, [r4, #0]
 8080fb2:	491c      	ldr	r1, [pc, #112]	; (8081024 <_Z15setPumpingState6String+0xb0>)
    Log.info("Pump cancelled alerts = %i",alertValueInt);
 8080fb4:	481c      	ldr	r0, [pc, #112]	; (8081028 <_Z15setPumpingState6String+0xb4>)
 8080fb6:	f7ff f99e 	bl	80802f6 <_ZNK5spark6Logger4infoEPKcz>
 8080fba:	f000 fcfd 	bl	80819b8 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 8080fbe:	4b1b      	ldr	r3, [pc, #108]	; (808102c <_Z15setPumpingState6String+0xb8>)
    state = REPORTING_STATE;
 8080fc0:	2204      	movs	r2, #4
    lastPublish = millis();
 8080fc2:	6018      	str	r0, [r3, #0]
    return 1;
 8080fc4:	2001      	movs	r0, #1
    state = REPORTING_STATE;
 8080fc6:	4b1a      	ldr	r3, [pc, #104]	; (8081030 <_Z15setPumpingState6String+0xbc>)
 8080fc8:	701a      	strb	r2, [r3, #0]
}
 8080fca:	b005      	add	sp, #20
 8080fcc:	bd30      	pop	{r4, r5, pc}
 8080fce:	4628      	mov	r0, r5
 8080fd0:	4918      	ldr	r1, [pc, #96]	; (8081034 <_Z15setPumpingState6String+0xc0>)
 8080fd2:	f003 f965 	bl	80842a0 <_ZNK6String6equalsEPKc>
  else if (command == "0")
 8080fd6:	2800      	cmp	r0, #0
 8080fd8:	d0f7      	beq.n	8080fca <_Z15setPumpingState6String+0x56>
    alertValue = (0b11101111 & alertValue);                    // Turn off pump
 8080fda:	4a0d      	ldr	r2, [pc, #52]	; (8081010 <_Z15setPumpingState6String+0x9c>)
    alertValueInt = (int)alertValue;
 8080fdc:	4d0d      	ldr	r5, [pc, #52]	; (8081014 <_Z15setPumpingState6String+0xa0>)
    alertValue = (0b11101111 & alertValue);                    // Turn off pump
 8080fde:	7813      	ldrb	r3, [r2, #0]
 8080fe0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8080fe4:	7013      	strb	r3, [r2, #0]
    alertValueInt = (int)alertValue;
 8080fe6:	602b      	str	r3, [r5, #0]
 8080fe8:	f7ff fb96 	bl	8080718 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
    Particle.publish("Mode","Cleared Pump Called",PRIVATE);
 8080fec:	4b0a      	ldr	r3, [pc, #40]	; (8081018 <_Z15setPumpingState6String+0xa4>)
 8080fee:	f88d 4000 	strb.w	r4, [sp]
 8080ff2:	4a11      	ldr	r2, [pc, #68]	; (8081038 <_Z15setPumpingState6String+0xc4>)
 8080ff4:	490a      	ldr	r1, [pc, #40]	; (8081020 <_Z15setPumpingState6String+0xac>)
 8080ff6:	781b      	ldrb	r3, [r3, #0]
 8080ff8:	a802      	add	r0, sp, #8
 8080ffa:	f7ff f93f 	bl	808027c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 8080ffe:	a803      	add	r0, sp, #12
 8081000:	f7ff fbdc 	bl	80807bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Log.info("Pump cancelled alerts = %i",alertValueInt);
 8081004:	682a      	ldr	r2, [r5, #0]
 8081006:	490d      	ldr	r1, [pc, #52]	; (808103c <_Z15setPumpingState6String+0xc8>)
 8081008:	e7d4      	b.n	8080fb4 <_Z15setPumpingState6String+0x40>
 808100a:	bf00      	nop
 808100c:	08085fac 	.word	0x08085fac
 8081010:	20000120 	.word	0x20000120
 8081014:	20000124 	.word	0x20000124
 8081018:	20000118 	.word	0x20000118
 808101c:	08086168 	.word	0x08086168
 8081020:	08086163 	.word	0x08086163
 8081024:	0808617e 	.word	0x0808617e
 8081028:	200001d8 	.word	0x200001d8
 808102c:	20000140 	.word	0x20000140
 8081030:	20000180 	.word	0x20000180
 8081034:	08086151 	.word	0x08086151
 8081038:	08086196 	.word	0x08086196
 808103c:	080861aa 	.word	0x080861aa

08081040 <_Z11setTimeZone6String>:
{
 8081040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081042:	b0cb      	sub	sp, #300	; 0x12c
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8081044:	220a      	movs	r2, #10
 8081046:	6800      	ldr	r0, [r0, #0]
 8081048:	a903      	add	r1, sp, #12
 808104a:	f004 ff11 	bl	8085e70 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 808104e:	b2c5      	uxtb	r5, r0
 8081050:	f105 030c 	add.w	r3, r5, #12
 8081054:	b2db      	uxtb	r3, r3
 8081056:	2b18      	cmp	r3, #24
 8081058:	d844      	bhi.n	80810e4 <_Z11setTimeZone6String+0xa4>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 808105a:	b244      	sxtb	r4, r0
  Time.zone((float)tempTimeZoneOffset);
 808105c:	4620      	mov	r0, r4
 808105e:	f004 faf9 	bl	8085654 <__aeabi_i2f>
 8081062:	f003 fa15 	bl	8084490 <_ZN9TimeClass4zoneEf>
  FRAMwrite8(TIMEZONE,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
 8081066:	4629      	mov	r1, r5
 8081068:	2004      	movs	r0, #4
 808106a:	f7ff f961 	bl	8080330 <_Z10FRAMwrite8jh>
  t = Time.now();
 808106e:	f003 fa82 	bl	8084576 <_ZN9TimeClass3nowEv>
        val_(0) {
 8081072:	2600      	movs	r6, #0
 8081074:	4f1c      	ldr	r7, [pc, #112]	; (80810e8 <_Z11setTimeZone6String+0xa8>)
 8081076:	17c1      	asrs	r1, r0, #31
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 8081078:	4623      	mov	r3, r4
  t = Time.now();
 808107a:	e9c7 0100 	strd	r0, r1, [r7]
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 808107e:	4a1b      	ldr	r2, [pc, #108]	; (80810ec <_Z11setTimeZone6String+0xac>)
 8081080:	f44f 7180 	mov.w	r1, #256	; 0x100
 8081084:	4d1a      	ldr	r5, [pc, #104]	; (80810f0 <_Z11setTimeZone6String+0xb0>)
 8081086:	a80a      	add	r0, sp, #40	; 0x28
 8081088:	f000 ff6e 	bl	8081f68 <snprintf>
 808108c:	f7ff fb44 	bl	8080718 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
  Particle.publish("Time",data, PRIVATE);
 8081090:	f88d 6000 	strb.w	r6, [sp]
 8081094:	4917      	ldr	r1, [pc, #92]	; (80810f4 <_Z11setTimeZone6String+0xb4>)
 8081096:	782b      	ldrb	r3, [r5, #0]
 8081098:	aa0a      	add	r2, sp, #40	; 0x28
 808109a:	a806      	add	r0, sp, #24
 808109c:	f7ff f8ee 	bl	808027c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 80810a0:	a807      	add	r0, sp, #28
 80810a2:	f7ff fb8b 	bl	80807bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80810a6:	f000 fc87 	bl	80819b8 <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
 80810aa:	4c13      	ldr	r4, [pc, #76]	; (80810f8 <_Z11setTimeZone6String+0xb8>)
 80810ac:	6020      	str	r0, [r4, #0]
 80810ae:	f7ff fb33 	bl	8080718 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
  Particle.publish("Time",Time.timeStr(t), PRIVATE);
 80810b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80810b6:	a806      	add	r0, sp, #24
 80810b8:	f003 fa08 	bl	80844cc <_ZN9TimeClass7timeStrEx>
 80810bc:	f88d 6000 	strb.w	r6, [sp]
 80810c0:	782b      	ldrb	r3, [r5, #0]
 80810c2:	9a06      	ldr	r2, [sp, #24]
 80810c4:	490b      	ldr	r1, [pc, #44]	; (80810f4 <_Z11setTimeZone6String+0xb4>)
 80810c6:	a804      	add	r0, sp, #16
 80810c8:	f7ff f8d8 	bl	808027c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 80810cc:	a805      	add	r0, sp, #20
 80810ce:	f7ff fb75 	bl	80807bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80810d2:	a806      	add	r0, sp, #24
 80810d4:	f003 f845 	bl	8084162 <_ZN6StringD1Ev>
 80810d8:	f000 fc6e 	bl	80819b8 <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
 80810dc:	6020      	str	r0, [r4, #0]
  return 1;
 80810de:	2001      	movs	r0, #1
}
 80810e0:	b04b      	add	sp, #300	; 0x12c
 80810e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 80810e4:	2000      	movs	r0, #0
 80810e6:	e7fb      	b.n	80810e0 <_Z11setTimeZone6String+0xa0>
 80810e8:	20000188 	.word	0x20000188
 80810ec:	080861c5 	.word	0x080861c5
 80810f0:	20000118 	.word	0x20000118
 80810f4:	080861d9 	.word	0x080861d9
 80810f8:	20000140 	.word	0x20000140

080810fc <_Z22publishStateTransitionv>:

void publishStateTransition(void) {                                     // Mainly for troubleshooting - publishes the transition between states
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 80810fc:	230e      	movs	r3, #14
void publishStateTransition(void) {                                     // Mainly for troubleshooting - publishes the transition between states
 80810fe:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 8081100:	4c19      	ldr	r4, [pc, #100]	; (8081168 <_Z22publishStateTransitionv+0x6c>)
 8081102:	491a      	ldr	r1, [pc, #104]	; (808116c <_Z22publishStateTransitionv+0x70>)
 8081104:	7822      	ldrb	r2, [r4, #0]
 8081106:	4d1a      	ldr	r5, [pc, #104]	; (8081170 <_Z22publishStateTransitionv+0x74>)
 8081108:	fb03 1202 	mla	r2, r3, r2, r1
 808110c:	7828      	ldrb	r0, [r5, #0]
void publishStateTransition(void) {                                     // Mainly for troubleshooting - publishes the transition between states
 808110e:	b08f      	sub	sp, #60	; 0x3c
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 8081110:	fb03 1300 	mla	r3, r3, r0, r1
 8081114:	9200      	str	r2, [sp, #0]
 8081116:	2128      	movs	r1, #40	; 0x28
 8081118:	4a16      	ldr	r2, [pc, #88]	; (8081174 <_Z22publishStateTransitionv+0x78>)
 808111a:	a804      	add	r0, sp, #16
 808111c:	f000 ff24 	bl	8081f68 <snprintf>
 8081120:	f000 fe5a 	bl	8081dd8 <spark_cloud_flag_connected>
  if(Particle.connected() && verboseMode) {
 8081124:	b188      	cbz	r0, 808114a <_Z22publishStateTransitionv+0x4e>
 8081126:	4b14      	ldr	r3, [pc, #80]	; (8081178 <_Z22publishStateTransitionv+0x7c>)
 8081128:	781b      	ldrb	r3, [r3, #0]
 808112a:	b173      	cbz	r3, 808114a <_Z22publishStateTransitionv+0x4e>
 808112c:	f7ff faf4 	bl	8080718 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
    waitUntil(meterParticlePublish);
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
 8081130:	2300      	movs	r3, #0
 8081132:	f88d 3000 	strb.w	r3, [sp]
 8081136:	4b11      	ldr	r3, [pc, #68]	; (808117c <_Z22publishStateTransitionv+0x80>)
 8081138:	a802      	add	r0, sp, #8
 808113a:	781b      	ldrb	r3, [r3, #0]
 808113c:	4910      	ldr	r1, [pc, #64]	; (8081180 <_Z22publishStateTransitionv+0x84>)
 808113e:	aa04      	add	r2, sp, #16
 8081140:	f7ff f89c 	bl	808027c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 8081144:	a803      	add	r0, sp, #12
 8081146:	f7ff fb39 	bl	80807bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  Log.info(stateTransitionString);
 808114a:	a904      	add	r1, sp, #16
 808114c:	480d      	ldr	r0, [pc, #52]	; (8081184 <_Z22publishStateTransitionv+0x88>)
 808114e:	f7ff f8d2 	bl	80802f6 <_ZNK5spark6Logger4infoEPKcz>
  Log.info("AlertValue = %i",alertValue);
 8081152:	4b0d      	ldr	r3, [pc, #52]	; (8081188 <_Z22publishStateTransitionv+0x8c>)
 8081154:	490d      	ldr	r1, [pc, #52]	; (808118c <_Z22publishStateTransitionv+0x90>)
 8081156:	781a      	ldrb	r2, [r3, #0]
 8081158:	480a      	ldr	r0, [pc, #40]	; (8081184 <_Z22publishStateTransitionv+0x88>)
 808115a:	f7ff f8cc 	bl	80802f6 <_ZNK5spark6Logger4infoEPKcz>
  oldState = state;
 808115e:	7823      	ldrb	r3, [r4, #0]
 8081160:	702b      	strb	r3, [r5, #0]
}
 8081162:	b00f      	add	sp, #60	; 0x3c
 8081164:	bd30      	pop	{r4, r5, pc}
 8081166:	bf00      	nop
 8081168:	20000180 	.word	0x20000180
 808116c:	20000018 	.word	0x20000018
 8081170:	2000016c 	.word	0x2000016c
 8081174:	080861de 	.word	0x080861de
 8081178:	20000194 	.word	0x20000194
 808117c:	20000118 	.word	0x20000118
 8081180:	080861ec 	.word	0x080861ec
 8081184:	200001d8 	.word	0x200001d8
 8081188:	20000120 	.word	0x20000120
 808118c:	080861fd 	.word	0x080861fd

08081190 <loop>:
{
 8081190:	b530      	push	{r4, r5, lr}
  switch(state) {
 8081192:	4c92      	ldr	r4, [pc, #584]	; (80813dc <loop+0x24c>)
{
 8081194:	b085      	sub	sp, #20
 8081196:	7823      	ldrb	r3, [r4, #0]
 8081198:	3b01      	subs	r3, #1
 808119a:	2b04      	cmp	r3, #4
 808119c:	d85e      	bhi.n	808125c <loop+0xcc>
 808119e:	e8df f013 	tbh	[pc, r3, lsl #1]
 80811a2:	00ee      	.short	0x00ee
 80811a4:	00390005 	.word	0x00390005
 80811a8:	00b40074 	.word	0x00b40074
    if (state != oldState) publishStateTransition();
 80811ac:	4b8c      	ldr	r3, [pc, #560]	; (80813e0 <loop+0x250>)
 80811ae:	781b      	ldrb	r3, [r3, #0]
 80811b0:	2b02      	cmp	r3, #2
 80811b2:	d001      	beq.n	80811b8 <loop+0x28>
 80811b4:	f7ff ffa2 	bl	80810fc <_Z22publishStateTransitionv>
    waitUntil(meterSampleRate);
 80811b8:	f7ff faba 	bl	8080730 <_Z15meterSampleRatev>
        while (_while() && !_condition()) {
 80811bc:	b910      	cbnz	r0, 80811c4 <loop+0x34>
            spark_process();
 80811be:	f000 fdfb 	bl	8081db8 <spark_process>
        while (_while() && !_condition()) {
 80811c2:	e7f9      	b.n	80811b8 <loop+0x28>
 80811c4:	f7ff fab4 	bl	8080730 <_Z15meterSampleRatev>
    if(takeMeasurements()) state = REPORTING_STATE;
 80811c8:	f7ff fc66 	bl	8080a98 <_Z16takeMeasurementsv>
 80811cc:	b108      	cbz	r0, 80811d2 <loop+0x42>
 80811ce:	2304      	movs	r3, #4
 80811d0:	7023      	strb	r3, [r4, #0]
    if (Time.hour() != currentHourlyPeriod) {
 80811d2:	f003 f9e1 	bl	8084598 <_ZN9TimeClass4hourEv>
 80811d6:	4b83      	ldr	r3, [pc, #524]	; (80813e4 <loop+0x254>)
 80811d8:	781b      	ldrb	r3, [r3, #0]
 80811da:	4298      	cmp	r0, r3
 80811dc:	d011      	beq.n	8081202 <loop+0x72>
      state = REPORTING_STATE;                                    // We want to report on the hour
 80811de:	2304      	movs	r3, #4
 80811e0:	7023      	strb	r3, [r4, #0]
      if (Time.hour() == 0) {                                     // Check to see if it is midnight
 80811e2:	f003 f9d9 	bl	8084598 <_ZN9TimeClass4hourEv>
 80811e6:	4605      	mov	r5, r0
 80811e8:	b958      	cbnz	r0, 8081202 <loop+0x72>
        dailyPumpingMins = 0;                                     // Reset each day.
 80811ea:	4b7f      	ldr	r3, [pc, #508]	; (80813e8 <loop+0x258>)
        FRAMwrite16(DAILYPUMPMINUTES,0);                          // And zero the value in FRAM
 80811ec:	4601      	mov	r1, r0
        dailyPumpingMins = 0;                                     // Reset each day.
 80811ee:	6018      	str	r0, [r3, #0]
        FRAMwrite16(DAILYPUMPMINUTES,0);                          // And zero the value in FRAM
 80811f0:	2014      	movs	r0, #20
 80811f2:	f7ff f8b7 	bl	8080364 <_Z11FRAMwrite16ji>
 80811f6:	f000 fdef 	bl	8081dd8 <spark_cloud_flag_connected>
        if (!connected()) {
 80811fa:	b110      	cbz	r0, 8081202 <loop+0x72>
        return spark_sync_time(NULL);
 80811fc:	4628      	mov	r0, r5
 80811fe:	f000 fe0b 	bl	8081e18 <spark_sync_time>
    if (stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE; // The battery is low - sleep
 8081202:	4b7a      	ldr	r3, [pc, #488]	; (80813ec <loop+0x25c>)
 8081204:	681a      	ldr	r2, [r3, #0]
 8081206:	4b7a      	ldr	r3, [pc, #488]	; (80813f0 <loop+0x260>)
 8081208:	681b      	ldr	r3, [r3, #0]
 808120a:	429a      	cmp	r2, r3
 808120c:	dc26      	bgt.n	808125c <loop+0xcc>
 808120e:	2303      	movs	r3, #3
        state = ERROR_STATE;
 8081210:	7023      	strb	r3, [r4, #0]
        break;
 8081212:	e023      	b.n	808125c <loop+0xcc>
      if (state != oldState) publishStateTransition();
 8081214:	4b72      	ldr	r3, [pc, #456]	; (80813e0 <loop+0x250>)
 8081216:	781b      	ldrb	r3, [r3, #0]
 8081218:	2b03      	cmp	r3, #3
 808121a:	d001      	beq.n	8081220 <loop+0x90>
 808121c:	f7ff ff6e 	bl	80810fc <_Z22publishStateTransitionv>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8081220:	f000 fdda 	bl	8081dd8 <spark_cloud_flag_connected>
      if (Particle.connected()) {
 8081224:	b108      	cbz	r0, 808122a <loop+0x9a>
        disconnectFromParticle();                               // If connected, we need to disconned and power down the modem
 8081226:	f7ff f9ff 	bl	8080628 <_Z22disconnectFromParticlev>
      ledState = false;
 808122a:	2400      	movs	r4, #0
 808122c:	4b71      	ldr	r3, [pc, #452]	; (80813f4 <loop+0x264>)
      digitalWrite(blueLED,LOW);                                // Turn off the LED
 808122e:	4621      	mov	r1, r4
 8081230:	2007      	movs	r0, #7
      ledState = false;
 8081232:	701c      	strb	r4, [r3, #0]
      digitalWrite(blueLED,LOW);                                // Turn off the LED
 8081234:	f003 fc37 	bl	8084aa6 <digitalWrite>
      digitalWrite(tmp36Shutdwn, LOW);                          // Turns off the temp sensor
 8081238:	4621      	mov	r1, r4
 808123a:	201d      	movs	r0, #29
 808123c:	f003 fc33 	bl	8084aa6 <digitalWrite>
      watchdogISR();                                            // Pet the watchdog
 8081240:	f7fe fffc 	bl	808023c <_Z11watchdogISRv>
      int secondsToHour = (60*(60 - Time.minute()));            // Time till the top of the hour
 8081244:	f003 f9b4 	bl	80845b0 <_ZN9TimeClass6minuteEv>
      System.sleep(SLEEP_MODE_DEEP,secondsToHour);              // Very deep sleep till the next hour - then resets
 8081248:	223c      	movs	r2, #60	; 0x3c
 808124a:	4b6b      	ldr	r3, [pc, #428]	; (80813f8 <loop+0x268>)
      int secondsToHour = (60*(60 - Time.minute()));            // Time till the top of the hour
 808124c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
      System.sleep(SLEEP_MODE_DEEP,secondsToHour);              // Very deep sleep till the next hour - then resets
 8081250:	4342      	muls	r2, r0
 8081252:	2101      	movs	r1, #1
 8081254:	681b      	ldr	r3, [r3, #0]
 8081256:	a802      	add	r0, sp, #8
 8081258:	f003 f89e 	bl	8084398 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
 808125c:	f000 fdbc 	bl	8081dd8 <spark_cloud_flag_connected>
  if (!Particle.connected() && (millis() - lastConnectionCheck > 30000)) {
 8081260:	b988      	cbnz	r0, 8081286 <loop+0xf6>
 8081262:	f000 fba9 	bl	80819b8 <HAL_Timer_Get_Milli_Seconds>
 8081266:	4c65      	ldr	r4, [pc, #404]	; (80813fc <loop+0x26c>)
 8081268:	6823      	ldr	r3, [r4, #0]
 808126a:	1ac0      	subs	r0, r0, r3
 808126c:	f247 5330 	movw	r3, #30000	; 0x7530
 8081270:	4298      	cmp	r0, r3
 8081272:	d908      	bls.n	8081286 <loop+0xf6>
        spark_cloud_flag_connect();
 8081274:	f000 fda8 	bl	8081dc8 <spark_cloud_flag_connect>
 8081278:	f000 fb9e 	bl	80819b8 <HAL_Timer_Get_Milli_Seconds>
    Log.info("Attempting to reconnect to Particle");
 808127c:	4960      	ldr	r1, [pc, #384]	; (8081400 <loop+0x270>)
    lastConnectionCheck = millis();
 808127e:	6020      	str	r0, [r4, #0]
    Log.info("Attempting to reconnect to Particle");
 8081280:	4860      	ldr	r0, [pc, #384]	; (8081404 <loop+0x274>)
 8081282:	f7ff f838 	bl	80802f6 <_ZNK5spark6Logger4infoEPKcz>
}
 8081286:	b005      	add	sp, #20
 8081288:	bd30      	pop	{r4, r5, pc}
    if (state != oldState) publishStateTransition();
 808128a:	4b55      	ldr	r3, [pc, #340]	; (80813e0 <loop+0x250>)
 808128c:	781b      	ldrb	r3, [r3, #0]
 808128e:	2b04      	cmp	r3, #4
 8081290:	d001      	beq.n	8081296 <loop+0x106>
 8081292:	f7ff ff33 	bl	80810fc <_Z22publishStateTransitionv>
    watchdogISR();                                    // Pet the watchdog once an hour
 8081296:	f7fe ffd1 	bl	808023c <_Z11watchdogISRv>
    pettingEnabled = false;                           // see this reporort cycle through
 808129a:	2300      	movs	r3, #0
 808129c:	4d5a      	ldr	r5, [pc, #360]	; (8081408 <loop+0x278>)
 808129e:	702b      	strb	r3, [r5, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80812a0:	f000 fd9a 	bl	8081dd8 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
 80812a4:	b940      	cbnz	r0, 80812b8 <loop+0x128>
      if (!connectToParticle()) {
 80812a6:	f7ff f94f 	bl	8080548 <_Z17connectToParticlev>
 80812aa:	b928      	cbnz	r0, 80812b8 <loop+0x128>
 80812ac:	f000 fb84 	bl	80819b8 <HAL_Timer_Get_Milli_Seconds>
        resetTimeStamp = millis();
 80812b0:	4b56      	ldr	r3, [pc, #344]	; (808140c <loop+0x27c>)
 80812b2:	6018      	str	r0, [r3, #0]
        state = ERROR_STATE;
 80812b4:	2301      	movs	r3, #1
 80812b6:	e7ab      	b.n	8081210 <loop+0x80>
    if (alertValue != 0) resolveAlert();
 80812b8:	4b55      	ldr	r3, [pc, #340]	; (8081410 <loop+0x280>)
 80812ba:	781b      	ldrb	r3, [r3, #0]
 80812bc:	b10b      	cbz	r3, 80812c2 <loop+0x132>
 80812be:	f7ff faf7 	bl	80808b0 <_Z12resolveAlertv>
    sendEvent();
 80812c2:	f7ff fb57 	bl	8080974 <_Z9sendEventv>
 80812c6:	f000 fb77 	bl	80819b8 <HAL_Timer_Get_Milli_Seconds>
    webhookTimeStamp = millis();
 80812ca:	4b52      	ldr	r3, [pc, #328]	; (8081414 <loop+0x284>)
 80812cc:	6018      	str	r0, [r3, #0]
    currentHourlyPeriod = Time.hour();                // Change the time period since we have reported for this one
 80812ce:	f003 f963 	bl	8084598 <_ZN9TimeClass4hourEv>
 80812d2:	4b44      	ldr	r3, [pc, #272]	; (80813e4 <loop+0x254>)
 80812d4:	7018      	strb	r0, [r3, #0]
        return waitConditionWhile(_condition, []{ return true; });
 80812d6:	f7ff fa1f 	bl	8080718 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
    if (verboseMode) Particle.publish("State","Waiting for Response",PRIVATE);
 80812da:	4b4f      	ldr	r3, [pc, #316]	; (8081418 <loop+0x288>)
 80812dc:	781b      	ldrb	r3, [r3, #0]
 80812de:	b163      	cbz	r3, 80812fa <loop+0x16a>
 80812e0:	2300      	movs	r3, #0
 80812e2:	f88d 3000 	strb.w	r3, [sp]
 80812e6:	4b4d      	ldr	r3, [pc, #308]	; (808141c <loop+0x28c>)
 80812e8:	a802      	add	r0, sp, #8
 80812ea:	781b      	ldrb	r3, [r3, #0]
 80812ec:	4a4c      	ldr	r2, [pc, #304]	; (8081420 <loop+0x290>)
 80812ee:	494d      	ldr	r1, [pc, #308]	; (8081424 <loop+0x294>)
 80812f0:	f7fe ffc4 	bl	808027c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 80812f4:	a803      	add	r0, sp, #12
 80812f6:	f7ff fa61 	bl	80807bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80812fa:	f000 fb5d 	bl	80819b8 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 80812fe:	4b4a      	ldr	r3, [pc, #296]	; (8081428 <loop+0x298>)
 8081300:	6018      	str	r0, [r3, #0]
    pettingEnabled = true;
 8081302:	2301      	movs	r3, #1
 8081304:	702b      	strb	r3, [r5, #0]
    state = RESP_WAIT_STATE;                            // Wait for Response
 8081306:	2305      	movs	r3, #5
 8081308:	e782      	b.n	8081210 <loop+0x80>
    if (state != oldState) publishStateTransition();
 808130a:	4b35      	ldr	r3, [pc, #212]	; (80813e0 <loop+0x250>)
 808130c:	781b      	ldrb	r3, [r3, #0]
 808130e:	2b05      	cmp	r3, #5
 8081310:	d001      	beq.n	8081316 <loop+0x186>
 8081312:	f7ff fef3 	bl	80810fc <_Z22publishStateTransitionv>
    if (!dataInFlight)                                  // Response received
 8081316:	4b45      	ldr	r3, [pc, #276]	; (808142c <loop+0x29c>)
 8081318:	781d      	ldrb	r5, [r3, #0]
 808131a:	b9bd      	cbnz	r5, 808134c <loop+0x1bc>
      state = IDLE_STATE;
 808131c:	2302      	movs	r3, #2
 808131e:	7023      	strb	r3, [r4, #0]
 8081320:	f7ff f9fa 	bl	8080718 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
      if (verboseMode) Particle.publish("State","Idle",PRIVATE);
 8081324:	4b3c      	ldr	r3, [pc, #240]	; (8081418 <loop+0x288>)
 8081326:	781b      	ldrb	r3, [r3, #0]
 8081328:	b15b      	cbz	r3, 8081342 <loop+0x1b2>
 808132a:	4b3c      	ldr	r3, [pc, #240]	; (808141c <loop+0x28c>)
 808132c:	f88d 5000 	strb.w	r5, [sp]
 8081330:	781b      	ldrb	r3, [r3, #0]
 8081332:	4a3f      	ldr	r2, [pc, #252]	; (8081430 <loop+0x2a0>)
 8081334:	a802      	add	r0, sp, #8
 8081336:	493b      	ldr	r1, [pc, #236]	; (8081424 <loop+0x294>)
 8081338:	f7fe ffa0 	bl	808027c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 808133c:	a803      	add	r0, sp, #12
 808133e:	f7ff fa3d 	bl	80807bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081342:	f000 fb39 	bl	80819b8 <HAL_Timer_Get_Milli_Seconds>
      lastPublish = millis();
 8081346:	4b38      	ldr	r3, [pc, #224]	; (8081428 <loop+0x298>)
 8081348:	6018      	str	r0, [r3, #0]
 808134a:	e787      	b.n	808125c <loop+0xcc>
 808134c:	f000 fb34 	bl	80819b8 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp >= webhookWait) {                                         // If it takes too long - will need to reset
 8081350:	4b30      	ldr	r3, [pc, #192]	; (8081414 <loop+0x284>)
 8081352:	681b      	ldr	r3, [r3, #0]
 8081354:	1ac0      	subs	r0, r0, r3
 8081356:	4b37      	ldr	r3, [pc, #220]	; (8081434 <loop+0x2a4>)
 8081358:	681b      	ldr	r3, [r3, #0]
 808135a:	4298      	cmp	r0, r3
 808135c:	f4ff af7e 	bcc.w	808125c <loop+0xcc>
 8081360:	f000 fb2a 	bl	80819b8 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 8081364:	4b29      	ldr	r3, [pc, #164]	; (808140c <loop+0x27c>)
 8081366:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;  // Response timed out
 8081368:	2301      	movs	r3, #1
 808136a:	7023      	strb	r3, [r4, #0]
 808136c:	f7ff f9d4 	bl	8080718 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
      Particle.publish("State","Response Timeout Error",PRIVATE);
 8081370:	2300      	movs	r3, #0
 8081372:	f88d 3000 	strb.w	r3, [sp]
 8081376:	4b29      	ldr	r3, [pc, #164]	; (808141c <loop+0x28c>)
 8081378:	4a2f      	ldr	r2, [pc, #188]	; (8081438 <loop+0x2a8>)
 808137a:	781b      	ldrb	r3, [r3, #0]
 808137c:	e7da      	b.n	8081334 <loop+0x1a4>
      if (state != oldState) publishStateTransition();
 808137e:	4b18      	ldr	r3, [pc, #96]	; (80813e0 <loop+0x250>)
 8081380:	781b      	ldrb	r3, [r3, #0]
 8081382:	2b01      	cmp	r3, #1
 8081384:	d001      	beq.n	808138a <loop+0x1fa>
 8081386:	f7ff feb9 	bl	80810fc <_Z22publishStateTransitionv>
 808138a:	f000 fb15 	bl	80819b8 <HAL_Timer_Get_Milli_Seconds>
      if (millis() - resetTimeStamp >= resetWait)
 808138e:	4b1f      	ldr	r3, [pc, #124]	; (808140c <loop+0x27c>)
 8081390:	681b      	ldr	r3, [r3, #0]
 8081392:	1ac0      	subs	r0, r0, r3
 8081394:	4b29      	ldr	r3, [pc, #164]	; (808143c <loop+0x2ac>)
 8081396:	681b      	ldr	r3, [r3, #0]
 8081398:	4298      	cmp	r0, r3
 808139a:	f4ff af5f 	bcc.w	808125c <loop+0xcc>
 808139e:	2400      	movs	r4, #0
        Particle.publish("State","ERROR_STATE - Resetting",PRIVATE);
 80813a0:	4b1e      	ldr	r3, [pc, #120]	; (808141c <loop+0x28c>)
 80813a2:	f88d 4000 	strb.w	r4, [sp]
 80813a6:	781b      	ldrb	r3, [r3, #0]
 80813a8:	4a25      	ldr	r2, [pc, #148]	; (8081440 <loop+0x2b0>)
 80813aa:	491e      	ldr	r1, [pc, #120]	; (8081424 <loop+0x294>)
 80813ac:	a802      	add	r0, sp, #8
 80813ae:	f7fe ff65 	bl	808027c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 80813b2:	a803      	add	r0, sp, #12
 80813b4:	f7ff fa02 	bl	80807bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);                                          // Delay so publish can finish
 80813b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80813bc:	f000 fdfc 	bl	8081fb8 <delay>
        if (resetCount <= 3)  System.reset();                 // Today, only way out is reset
 80813c0:	4b20      	ldr	r3, [pc, #128]	; (8081444 <loop+0x2b4>)
 80813c2:	681b      	ldr	r3, [r3, #0]
 80813c4:	2b03      	cmp	r3, #3
 80813c6:	dc02      	bgt.n	80813ce <loop+0x23e>
 80813c8:	f002 ffe3 	bl	8084392 <_ZN11SystemClass5resetEv>
 80813cc:	e746      	b.n	808125c <loop+0xcc>
          FRAMwrite8(RESETCOUNT,0);                           // Zero the ResetCount
 80813ce:	4621      	mov	r1, r4
 80813d0:	2002      	movs	r0, #2
 80813d2:	f7fe ffad 	bl	8080330 <_Z10FRAMwrite8jh>
          fullModemReset();                                   // Full Modem reset and reboot
 80813d6:	f7ff f9c1 	bl	808075c <_Z14fullModemResetv>
 80813da:	e73f      	b.n	808125c <loop+0xcc>
 80813dc:	20000180 	.word	0x20000180
 80813e0:	2000016c 	.word	0x2000016c
 80813e4:	20000131 	.word	0x20000131
 80813e8:	20000134 	.word	0x20000134
 80813ec:	20000184 	.word	0x20000184
 80813f0:	20000000 	.word	0x20000000
 80813f4:	20000144 	.word	0x20000144
 80813f8:	20000114 	.word	0x20000114
 80813fc:	2000013c 	.word	0x2000013c
 8081400:	08086256 	.word	0x08086256
 8081404:	200001d8 	.word	0x200001d8
 8081408:	20000004 	.word	0x20000004
 808140c:	2000017c 	.word	0x2000017c
 8081410:	20000120 	.word	0x20000120
 8081414:	20000198 	.word	0x20000198
 8081418:	20000194 	.word	0x20000194
 808141c:	20000118 	.word	0x20000118
 8081420:	0808620d 	.word	0x0808620d
 8081424:	08086304 	.word	0x08086304
 8081428:	20000140 	.word	0x20000140
 808142c:	20000138 	.word	0x20000138
 8081430:	08086222 	.word	0x08086222
 8081434:	20000088 	.word	0x20000088
 8081438:	08086227 	.word	0x08086227
 808143c:	20000010 	.word	0x20000010
 8081440:	0808623e 	.word	0x0808623e
 8081444:	20000178 	.word	0x20000178

08081448 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 8081448:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 808144a:	2614      	movs	r6, #20
 808144c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 8081450:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 8081452:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 8081456:	42ae      	cmp	r6, r5
 8081458:	d004      	beq.n	8081464 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 808145a:	4628      	mov	r0, r5
 808145c:	f002 fe81 	bl	8084162 <_ZN6StringD1Ev>
 8081460:	3514      	adds	r5, #20
 8081462:	e7f8      	b.n	8081456 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 8081464:	6820      	ldr	r0, [r4, #0]
 8081466:	f000 fd67 	bl	8081f38 <free>
    AllocatorT::free(data_);
}
 808146a:	4620      	mov	r0, r4
 808146c:	bd70      	pop	{r4, r5, r6, pc}
	...

08081470 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>:
    static inline bool function(const T &name, Types ... args)
 8081470:	4602      	mov	r2, r0
        return register_function(call_raw_user_function, (void*)func, funcKey);
 8081472:	4801      	ldr	r0, [pc, #4]	; (8081478 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_+0x8>)
 8081474:	f000 bf5d 	b.w	8082332 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8081478:	08082307 	.word	0x08082307

0808147c <setup>:
{
 808147c:	b530      	push	{r4, r5, lr}
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 808147e:	2400      	movs	r4, #0
 8081480:	b0a9      	sub	sp, #164	; 0xa4
  delay(1000);                                                    // Give serial time to come up
 8081482:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8081486:	f000 fd97 	bl	8081fb8 <delay>
  pinMode(boosterNoFlow1Pin,INPUT);                               // Voltage Sensor Interrupt pin
 808148a:	2100      	movs	r1, #0
 808148c:	2019      	movs	r0, #25
 808148e:	f003 faf9 	bl	8084a84 <pinMode>
  pinMode(boosterNoFlow2Pin,INPUT);                               // Voltage Sensor Interrupt pin
 8081492:	2100      	movs	r1, #0
 8081494:	201a      	movs	r0, #26
 8081496:	f003 faf5 	bl	8084a84 <pinMode>
  pinMode(storageTankLowPin,INPUT);                               // Voltage Sensor Interrupt pin
 808149a:	2100      	movs	r1, #0
 808149c:	201b      	movs	r0, #27
 808149e:	f003 faf1 	bl	8084a84 <pinMode>
  pinMode(pump1CalledPin,INPUT);                                  // Voltage Sensor Interrupt pin
 80814a2:	2100      	movs	r1, #0
 80814a4:	201c      	movs	r0, #28
 80814a6:	f003 faed 	bl	8084a84 <pinMode>
  pinMode(pump2CalledPin,INPUT);                                  // Voltage Sensor Interrupt pin
 80814aa:	2100      	movs	r1, #0
 80814ac:	200e      	movs	r0, #14
 80814ae:	f003 fae9 	bl	8084a84 <pinMode>
  pinMode(wakeUpPin,INPUT);                                       // This pin is active HIGH
 80814b2:	2100      	movs	r1, #0
 80814b4:	2011      	movs	r0, #17
 80814b6:	f003 fae5 	bl	8084a84 <pinMode>
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input
 80814ba:	2100      	movs	r1, #0
 80814bc:	2005      	movs	r0, #5
 80814be:	f003 fae1 	bl	8084a84 <pinMode>
  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
 80814c2:	2101      	movs	r1, #1
 80814c4:	2007      	movs	r0, #7
 80814c6:	f003 fadd 	bl	8084a84 <pinMode>
  pinMode(tmp36Shutdwn,OUTPUT);                                   // Supports shutting down the TMP-36 to save juice
 80814ca:	2101      	movs	r1, #1
 80814cc:	201d      	movs	r0, #29
 80814ce:	f003 fad9 	bl	8084a84 <pinMode>
  digitalWrite(tmp36Shutdwn, HIGH);                               // Turns on the temp sensor
 80814d2:	2101      	movs	r1, #1
 80814d4:	201d      	movs	r0, #29
 80814d6:	f003 fae6 	bl	8084aa6 <digitalWrite>
  pinMode(donePin,OUTPUT);                                        // Allows us to pet the watchdog
 80814da:	2101      	movs	r1, #1
 80814dc:	2006      	movs	r0, #6
 80814de:	f003 fad1 	bl	8084a84 <pinMode>
  watchdogISR();                                                  // Pet the watchdog
 80814e2:	f7fe feab 	bl	808023c <_Z11watchdogISRv>
  pinMode(hardResetPin,OUTPUT);                                   // For a hard reset active HIGH
 80814e6:	2101      	movs	r1, #1
 80814e8:	2004      	movs	r0, #4
 80814ea:	f003 facb 	bl	8084a84 <pinMode>
    static String deviceID(void) { return spark_deviceID(); }
 80814ee:	a804      	add	r0, sp, #16
 80814f0:	f000 fc7a 	bl	8081de8 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
 80814f4:	2300      	movs	r3, #0
 80814f6:	227d      	movs	r2, #125	; 0x7d
 80814f8:	a908      	add	r1, sp, #32
 80814fa:	a804      	add	r0, sp, #16
 80814fc:	f002 fee2 	bl	80842c4 <_ZNK6String8getBytesEPhjj>
 8081500:	4623      	mov	r3, r4
 8081502:	4622      	mov	r2, r4
 8081504:	4970      	ldr	r1, [pc, #448]	; (80816c8 <setup+0x24c>)
 8081506:	e9cd 4400 	strd	r4, r4, [sp]
 808150a:	a808      	add	r0, sp, #32
 808150c:	f000 fc7c 	bl	8081e08 <spark_subscribe>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 8081510:	4623      	mov	r3, r4
 8081512:	2202      	movs	r2, #2
 8081514:	496d      	ldr	r1, [pc, #436]	; (80816cc <setup+0x250>)
 8081516:	486e      	ldr	r0, [pc, #440]	; (80816d0 <setup+0x254>)
 8081518:	f000 fc3e 	bl	8081d98 <spark_variable>
 808151c:	4623      	mov	r3, r4
 808151e:	2204      	movs	r2, #4
 8081520:	496c      	ldr	r1, [pc, #432]	; (80816d4 <setup+0x258>)
 8081522:	486d      	ldr	r0, [pc, #436]	; (80816d8 <setup+0x25c>)
 8081524:	f000 fc38 	bl	8081d98 <spark_variable>
 8081528:	4623      	mov	r3, r4
 808152a:	2202      	movs	r2, #2
 808152c:	496b      	ldr	r1, [pc, #428]	; (80816dc <setup+0x260>)
 808152e:	486c      	ldr	r0, [pc, #432]	; (80816e0 <setup+0x264>)
 8081530:	f000 fc32 	bl	8081d98 <spark_variable>
 8081534:	4623      	mov	r3, r4
 8081536:	2202      	movs	r2, #2
 8081538:	496a      	ldr	r1, [pc, #424]	; (80816e4 <setup+0x268>)
 808153a:	486b      	ldr	r0, [pc, #428]	; (80816e8 <setup+0x26c>)
 808153c:	f000 fc2c 	bl	8081d98 <spark_variable>
 8081540:	496a      	ldr	r1, [pc, #424]	; (80816ec <setup+0x270>)
 8081542:	4623      	mov	r3, r4
 8081544:	2204      	movs	r2, #4
 8081546:	6809      	ldr	r1, [r1, #0]
 8081548:	4869      	ldr	r0, [pc, #420]	; (80816f0 <setup+0x274>)
 808154a:	f000 fc25 	bl	8081d98 <spark_variable>
 808154e:	4623      	mov	r3, r4
 8081550:	2202      	movs	r2, #2
 8081552:	4968      	ldr	r1, [pc, #416]	; (80816f4 <setup+0x278>)
 8081554:	4868      	ldr	r0, [pc, #416]	; (80816f8 <setup+0x27c>)
 8081556:	f000 fc1f 	bl	8081d98 <spark_variable>
 808155a:	4623      	mov	r3, r4
 808155c:	2202      	movs	r2, #2
 808155e:	4967      	ldr	r1, [pc, #412]	; (80816fc <setup+0x280>)
 8081560:	4867      	ldr	r0, [pc, #412]	; (8081700 <setup+0x284>)
 8081562:	f000 fc19 	bl	8081d98 <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 8081566:	4a67      	ldr	r2, [pc, #412]	; (8081704 <setup+0x288>)
 8081568:	4967      	ldr	r1, [pc, #412]	; (8081708 <setup+0x28c>)
 808156a:	4868      	ldr	r0, [pc, #416]	; (808170c <setup+0x290>)
 808156c:	f000 fee1 	bl	8082332 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  Particle.function("Reset-Counts",resetCounts);
 8081570:	4967      	ldr	r1, [pc, #412]	; (8081710 <setup+0x294>)
 8081572:	4868      	ldr	r0, [pc, #416]	; (8081714 <setup+0x298>)
 8081574:	f7ff ff7c 	bl	8081470 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
 8081578:	4a67      	ldr	r2, [pc, #412]	; (8081718 <setup+0x29c>)
 808157a:	4968      	ldr	r1, [pc, #416]	; (808171c <setup+0x2a0>)
 808157c:	4863      	ldr	r0, [pc, #396]	; (808170c <setup+0x290>)
 808157e:	f000 fed8 	bl	8082332 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8081582:	4a67      	ldr	r2, [pc, #412]	; (8081720 <setup+0x2a4>)
 8081584:	4967      	ldr	r1, [pc, #412]	; (8081724 <setup+0x2a8>)
 8081586:	4861      	ldr	r0, [pc, #388]	; (808170c <setup+0x290>)
 8081588:	f000 fed3 	bl	8082332 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  Particle.function("Verbose-Mode",setVerboseMode);
 808158c:	4966      	ldr	r1, [pc, #408]	; (8081728 <setup+0x2ac>)
 808158e:	4867      	ldr	r0, [pc, #412]	; (808172c <setup+0x2b0>)
 8081590:	f7ff ff6e 	bl	8081470 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Timezone",setTimeZone);
 8081594:	4966      	ldr	r1, [pc, #408]	; (8081730 <setup+0x2b4>)
 8081596:	4867      	ldr	r0, [pc, #412]	; (8081734 <setup+0x2b8>)
 8081598:	f7ff ff6a 	bl	8081470 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetPumpState",setPumpingState);
 808159c:	4966      	ldr	r1, [pc, #408]	; (8081738 <setup+0x2bc>)
 808159e:	4867      	ldr	r0, [pc, #412]	; (808173c <setup+0x2c0>)
 80815a0:	f7ff ff66 	bl	8081470 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
  if (!fram.begin()) {                                                  // You can stick the new i2c addr in here, e.g. begin(0x51);
 80815a4:	2150      	movs	r1, #80	; 0x50
 80815a6:	4866      	ldr	r0, [pc, #408]	; (8081740 <setup+0x2c4>)
 80815a8:	f7fe fe19 	bl	80801de <_ZN17Adafruit_FRAM_I2C5beginEh>
 80815ac:	4d65      	ldr	r5, [pc, #404]	; (8081744 <setup+0x2c8>)
 80815ae:	2800      	cmp	r0, #0
 80815b0:	d176      	bne.n	80816a0 <setup+0x224>
 80815b2:	f000 fa01 	bl	80819b8 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 80815b6:	4b64      	ldr	r3, [pc, #400]	; (8081748 <setup+0x2cc>)
 80815b8:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;   // Resetting did not fix the issue
 80815ba:	2301      	movs	r3, #1
 80815bc:	702b      	strb	r3, [r5, #0]
  resetCount = FRAMread8(RESETCOUNT);                                   // Retrive system recount data from FRAM
 80815be:	2002      	movs	r0, #2
 80815c0:	f7fe feb0 	bl	8080324 <_Z9FRAMread8j>
        int reason = RESET_REASON_NONE;
 80815c4:	2200      	movs	r2, #0
 80815c6:	4c45      	ldr	r4, [pc, #276]	; (80816dc <setup+0x260>)
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80815c8:	4611      	mov	r1, r2
 80815ca:	6020      	str	r0, [r4, #0]
 80815cc:	a802      	add	r0, sp, #8
        int reason = RESET_REASON_NONE;
 80815ce:	9202      	str	r2, [sp, #8]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80815d0:	f000 f9da 	bl	8081988 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80815d4:	9b02      	ldr	r3, [sp, #8]
  if (System.resetReason() == RESET_REASON_PIN_RESET)                   // Check to see if we are starting from a pin reset
 80815d6:	2b14      	cmp	r3, #20
 80815d8:	d106      	bne.n	80815e8 <setup+0x16c>
    resetCount++;
 80815da:	6821      	ldr	r1, [r4, #0]
    FRAMwrite8(RESETCOUNT,static_cast<uint8_t>(resetCount));            // If so, store incremented number - watchdog must have done This
 80815dc:	2002      	movs	r0, #2
    resetCount++;
 80815de:	3101      	adds	r1, #1
 80815e0:	6021      	str	r1, [r4, #0]
    FRAMwrite8(RESETCOUNT,static_cast<uint8_t>(resetCount));            // If so, store incremented number - watchdog must have done This
 80815e2:	b2c9      	uxtb	r1, r1
 80815e4:	f7fe fea4 	bl	8080330 <_Z10FRAMwrite8jh>
  if (resetCount >=6) {                                                 // If we get to resetCount 4, we are resetting without entering the main loop
 80815e8:	6823      	ldr	r3, [r4, #0]
 80815ea:	2b05      	cmp	r3, #5
 80815ec:	dd05      	ble.n	80815fa <setup+0x17e>
    FRAMwrite8(RESETCOUNT,4);                                            // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
 80815ee:	2104      	movs	r1, #4
 80815f0:	2002      	movs	r0, #2
 80815f2:	f7fe fe9d 	bl	8080330 <_Z10FRAMwrite8jh>
    fullModemReset();                                                   // This will reset the modem and the device will reboot
 80815f6:	f7ff f8b1 	bl	808075c <_Z14fullModemResetv>
  int8_t tempTimeZoneOffset = FRAMread8(TIMEZONE);                  // Load Time zone data from FRAM
 80815fa:	2004      	movs	r0, #4
 80815fc:	f7fe fe92 	bl	8080324 <_Z9FRAMread8j>
  if (tempTimeZoneOffset > -12 && tempTimeZoneOffset < 12) Time.zone((float)tempTimeZoneOffset);
 8081600:	f100 030b 	add.w	r3, r0, #11
 8081604:	b2db      	uxtb	r3, r3
 8081606:	2b16      	cmp	r3, #22
 8081608:	d85c      	bhi.n	80816c4 <setup+0x248>
 808160a:	b240      	sxtb	r0, r0
 808160c:	f004 f822 	bl	8085654 <__aeabi_i2f>
  else Time.zone(-5);                                               // Defaults to EST if invalid value in FRAM
 8081610:	f002 ff3e 	bl	8084490 <_ZN9TimeClass4zoneEf>
  controlRegister = FRAMread8(CONTROLREGISTER);                         // Read the Control Register for system modes so they stick even after reset
 8081614:	2007      	movs	r0, #7
 8081616:	f7fe fe85 	bl	8080324 <_Z9FRAMread8j>
 808161a:	4c4c      	ldr	r4, [pc, #304]	; (808174c <setup+0x2d0>)
  verboseMode = (0b00001000 & controlRegister);                         // verboseMode
 808161c:	4b4c      	ldr	r3, [pc, #304]	; (8081750 <setup+0x2d4>)
  controlRegister = FRAMread8(CONTROLREGISTER);                         // Read the Control Register for system modes so they stick even after reset
 808161e:	7020      	strb	r0, [r4, #0]
  verboseMode = (0b00001000 & controlRegister);                         // verboseMode
 8081620:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8081624:	7018      	strb	r0, [r3, #0]
  dailyPumpingMins = FRAMread16(DAILYPUMPMINUTES);                      // Reload so we don't loose track
 8081626:	2014      	movs	r0, #20
 8081628:	f7fe fe8a 	bl	8080340 <_Z10FRAMread16j>
 808162c:	4b33      	ldr	r3, [pc, #204]	; (80816fc <setup+0x280>)
 808162e:	6018      	str	r0, [r3, #0]
  if (controlRegister & 0b00000010) {                                   // This means we reset while pumpting
 8081630:	7823      	ldrb	r3, [r4, #0]
 8081632:	079b      	lsls	r3, r3, #30
 8081634:	d506      	bpl.n	8081644 <setup+0x1c8>
    pumpingStart = FRAMread32(CURRENTCOUNTSTIME);                       // Reload the pumping start time
 8081636:	200e      	movs	r0, #14
 8081638:	f7fe fec6 	bl	80803c8 <_Z10FRAMread32m>
 808163c:	2200      	movs	r2, #0
 808163e:	4b45      	ldr	r3, [pc, #276]	; (8081754 <setup+0x2d8>)
 8081640:	6018      	str	r0, [r3, #0]
 8081642:	605a      	str	r2, [r3, #4]
  stateOfCharge = int(batteryMonitor.getSoC());                         // Percentage of full charge
 8081644:	4844      	ldr	r0, [pc, #272]	; (8081758 <setup+0x2dc>)
 8081646:	f001 f969 	bl	808291c <_ZN9FuelGauge6getSoCEv>
 808164a:	f004 fa1d 	bl	8085a88 <__aeabi_f2iz>
 808164e:	4b29      	ldr	r3, [pc, #164]	; (80816f4 <setup+0x278>)
 8081650:	6018      	str	r0, [r3, #0]
  if (stateOfCharge > lowBattLimit) connectToParticle();                // If not low battery, we can connect
 8081652:	4b42      	ldr	r3, [pc, #264]	; (808175c <setup+0x2e0>)
 8081654:	681b      	ldr	r3, [r3, #0]
 8081656:	4298      	cmp	r0, r3
 8081658:	dd01      	ble.n	808165e <setup+0x1e2>
 808165a:	f7fe ff75 	bl	8080548 <_Z17connectToParticlev>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);   // The watchdog timer will signal us and we have to respond
 808165e:	2400      	movs	r4, #0
 8081660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8081664:	2201      	movs	r2, #1
 8081666:	493e      	ldr	r1, [pc, #248]	; (8081760 <setup+0x2e4>)
 8081668:	9400      	str	r4, [sp, #0]
 808166a:	2011      	movs	r0, #17
 808166c:	f001 fa2a 	bl	8082ac4 <_Z15attachInterrupttPFvvE13InterruptModeah>
  if (state != ERROR_STATE) state = IDLE_STATE;                         // IDLE unless error from above code
 8081670:	782b      	ldrb	r3, [r5, #0]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
 8081672:	f64e 2160 	movw	r1, #60000	; 0xea60
 8081676:	2b01      	cmp	r3, #1
 8081678:	bf1c      	itt	ne
 808167a:	2302      	movne	r3, #2
 808167c:	702b      	strbne	r3, [r5, #0]
        conn_prop.size = sizeof(conn_prop);
 808167e:	2308      	movs	r3, #8
 8081680:	f8ad 3008 	strh.w	r3, [sp, #8]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
 8081684:	2301      	movs	r3, #1
 8081686:	9303      	str	r3, [sp, #12]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
 8081688:	2300      	movs	r3, #0
 808168a:	aa02      	add	r2, sp, #8
 808168c:	4618      	mov	r0, r3
        particle::protocol::connection_properties_t conn_prop = {0};
 808168e:	f8ad 400a 	strh.w	r4, [sp, #10]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
 8081692:	f000 fbd1 	bl	8081e38 <spark_set_connection_property>
  String deviceID = System.deviceID();                                // Multiple Electrons share the same hook - keeps things straight
 8081696:	a804      	add	r0, sp, #16
 8081698:	f002 fd63 	bl	8084162 <_ZN6StringD1Ev>
}
 808169c:	b029      	add	sp, #164	; 0xa4
 808169e:	bd30      	pop	{r4, r5, pc}
  else if (FRAMread8(VERSIONADDR) != VERSIONNUMBER) {                   // Check to see if the memory map in the sketch matches the data on the chip
 80816a0:	4620      	mov	r0, r4
 80816a2:	f7fe fe3f 	bl	8080324 <_Z9FRAMread8j>
 80816a6:	2809      	cmp	r0, #9
 80816a8:	d089      	beq.n	80815be <setup+0x142>
    ResetFRAM();                                                        // Reset the FRAM to correct the issue
 80816aa:	f7ff f89d 	bl	80807e8 <_Z9ResetFRAMv>
    if (FRAMread8(VERSIONADDR) != VERSIONNUMBER) {
 80816ae:	4620      	mov	r0, r4
 80816b0:	f7fe fe38 	bl	8080324 <_Z9FRAMread8j>
 80816b4:	2809      	cmp	r0, #9
 80816b6:	f47f af7c 	bne.w	80815b2 <setup+0x136>
      FRAMwrite8(CONTROLREGISTER,0);                                    // Need to reset so not in low power or low battery mode
 80816ba:	4621      	mov	r1, r4
 80816bc:	2007      	movs	r0, #7
 80816be:	f7fe fe37 	bl	8080330 <_Z10FRAMwrite8jh>
 80816c2:	e77c      	b.n	80815be <setup+0x142>
  else Time.zone(-5);                                               // Defaults to EST if invalid value in FRAM
 80816c4:	4827      	ldr	r0, [pc, #156]	; (8081764 <setup+0x2e8>)
 80816c6:	e7a3      	b.n	8081610 <setup+0x194>
 80816c8:	080809ed 	.word	0x080809ed
 80816cc:	20000124 	.word	0x20000124
 80816d0:	0808608d 	.word	0x0808608d
 80816d4:	40024000 	.word	0x40024000
 80816d8:	0808627a 	.word	0x0808627a
 80816dc:	20000178 	.word	0x20000178
 80816e0:	08086281 	.word	0x08086281
 80816e4:	20000190 	.word	0x20000190
 80816e8:	0808628c 	.word	0x0808628c
 80816ec:	2000000c 	.word	0x2000000c
 80816f0:	08086298 	.word	0x08086298
 80816f4:	20000184 	.word	0x20000184
 80816f8:	080862a0 	.word	0x080862a0
 80816fc:	20000134 	.word	0x20000134
 8081700:	080862ab 	.word	0x080862ab
 8081704:	080862b7 	.word	0x080862b7
 8081708:	08080899 	.word	0x08080899
 808170c:	08082307 	.word	0x08082307
 8081710:	0808038d 	.word	0x0808038d
 8081714:	080862c2 	.word	0x080862c2
 8081718:	080862cf 	.word	0x080862cf
 808171c:	08080261 	.word	0x08080261
 8081720:	080862da 	.word	0x080862da
 8081724:	08080221 	.word	0x08080221
 8081728:	08080ec1 	.word	0x08080ec1
 808172c:	080862e3 	.word	0x080862e3
 8081730:	08081041 	.word	0x08081041
 8081734:	080862f0 	.word	0x080862f0
 8081738:	08080f75 	.word	0x08080f75
 808173c:	080862fd 	.word	0x080862fd
 8081740:	20000139 	.word	0x20000139
 8081744:	20000180 	.word	0x20000180
 8081748:	2000017c 	.word	0x2000017c
 808174c:	20000130 	.word	0x20000130
 8081750:	20000194 	.word	0x20000194
 8081754:	20000170 	.word	0x20000170
 8081758:	20000128 	.word	0x20000128
 808175c:	20000000 	.word	0x20000000
 8081760:	0808023d 	.word	0x0808023d
 8081764:	c0a00000 	.word	0xc0a00000

08081768 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 8081768:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 808176a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808176c:	4604      	mov	r4, r0
 808176e:	460d      	mov	r5, r1
 8081770:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 8081772:	d916      	bls.n	80817a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 8081774:	4290      	cmp	r0, r2
 8081776:	d215      	bcs.n	80817a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 8081778:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 808177c:	1a75      	subs	r5, r6, r1
 808177e:	f1a1 0714 	sub.w	r7, r1, #20
 8081782:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 8081784:	42b7      	cmp	r7, r6
 8081786:	d01c      	beq.n	80817c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 8081788:	b12c      	cbz	r4, 8081796 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 808178a:	4631      	mov	r1, r6
 808178c:	4620      	mov	r0, r4
 808178e:	f002 fd62 	bl	8084256 <_ZN6StringC1EOS_>
 8081792:	7c33      	ldrb	r3, [r6, #16]
 8081794:	7423      	strb	r3, [r4, #16]
 8081796:	4630      	mov	r0, r6
 8081798:	f002 fce3 	bl	8084162 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 808179c:	3e14      	subs	r6, #20
 808179e:	3c14      	subs	r4, #20
 80817a0:	e7f0      	b.n	8081784 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 80817a2:	d00e      	beq.n	80817c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 80817a4:	42b5      	cmp	r5, r6
 80817a6:	d00c      	beq.n	80817c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 80817a8:	b12c      	cbz	r4, 80817b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 80817aa:	4629      	mov	r1, r5
 80817ac:	4620      	mov	r0, r4
 80817ae:	f002 fd52 	bl	8084256 <_ZN6StringC1EOS_>
 80817b2:	7c2b      	ldrb	r3, [r5, #16]
 80817b4:	7423      	strb	r3, [r4, #16]
 80817b6:	4628      	mov	r0, r5
 80817b8:	f002 fcd3 	bl	8084162 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 80817bc:	3514      	adds	r5, #20
 80817be:	3414      	adds	r4, #20
 80817c0:	e7f0      	b.n	80817a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 80817c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080817c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 80817c4:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80817c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 80817ca:	e9c0 3300 	strd	r3, r3, [r0]
 80817ce:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80817d0:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80817d2:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80817d4:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80817d6:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80817d8:	dd24      	ble.n	8081824 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 80817da:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 80817de:	fb08 f007 	mul.w	r0, r8, r7
 80817e2:	f000 fba1 	bl	8081f28 <malloc>
            if (!d) {
 80817e6:	4605      	mov	r5, r0
 80817e8:	b1e0      	cbz	r0, 8081824 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 80817ea:	e9d4 1200 	ldrd	r1, r2, [r4]
 80817ee:	fb08 1202 	mla	r2, r8, r2, r1
 80817f2:	f7ff ffb9 	bl	8081768 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 80817f6:	6820      	ldr	r0, [r4, #0]
 80817f8:	f000 fb9e 	bl	8081f38 <free>
        data_ = d;
 80817fc:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 80817fe:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 8081800:	e9d6 7300 	ldrd	r7, r3, [r6]
 8081804:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 8081808:	45b8      	cmp	r8, r7
 808180a:	d009      	beq.n	8081820 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 808180c:	4639      	mov	r1, r7
 808180e:	4628      	mov	r0, r5
 8081810:	f002 fd3b 	bl	808428a <_ZN6StringC1ERKS_>
 8081814:	7c3b      	ldrb	r3, [r7, #16]
 8081816:	3514      	adds	r5, #20
 8081818:	f805 3c04 	strb.w	r3, [r5, #-4]
 808181c:	3714      	adds	r7, #20
 808181e:	e7f3      	b.n	8081808 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 8081820:	6873      	ldr	r3, [r6, #4]
 8081822:	6063      	str	r3, [r4, #4]
}
 8081824:	4620      	mov	r0, r4
 8081826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0808182c <_GLOBAL__sub_I_fram>:
}
 808182c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        val_(val) {
 8081830:	2400      	movs	r4, #0
 8081832:	2601      	movs	r6, #1
 8081834:	4b2d      	ldr	r3, [pc, #180]	; (80818ec <_GLOBAL__sub_I_fram+0xc0>)
 8081836:	b08c      	sub	sp, #48	; 0x30
 8081838:	601c      	str	r4, [r3, #0]
 808183a:	4b2d      	ldr	r3, [pc, #180]	; (80818f0 <_GLOBAL__sub_I_fram+0xc4>)
Adafruit_FRAM_I2C fram = Adafruit_FRAM_I2C(); // Init the FRAM
 808183c:	482d      	ldr	r0, [pc, #180]	; (80818f4 <_GLOBAL__sub_I_fram+0xc8>)
 808183e:	701e      	strb	r6, [r3, #0]
 8081840:	f7fe fc50 	bl	80800e4 <_ZN17Adafruit_FRAM_I2CC1Ev>
        capacity_(0) {
 8081844:	e9cd 4400 	strd	r4, r4, [sp]
 8081848:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 808184a:	f002 ffb7 	bl	80847bc <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 808184e:	4d2a      	ldr	r5, [pc, #168]	; (80818f8 <_GLOBAL__sub_I_fram+0xcc>)
 8081850:	4607      	mov	r7, r0
 8081852:	46a8      	mov	r8, r5
 8081854:	4669      	mov	r1, sp
 8081856:	a803      	add	r0, sp, #12
 8081858:	f7ff ffb4 	bl	80817c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 808185c:	a903      	add	r1, sp, #12
 808185e:	a806      	add	r0, sp, #24
 8081860:	f7ff ffb0 	bl	80817c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 8081864:	4b25      	ldr	r3, [pc, #148]	; (80818fc <_GLOBAL__sub_I_fram+0xd0>)
 8081866:	a906      	add	r1, sp, #24
 8081868:	f848 3b04 	str.w	r3, [r8], #4
 808186c:	a809      	add	r0, sp, #36	; 0x24
 808186e:	f7ff ffa9 	bl	80817c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 8081872:	aa09      	add	r2, sp, #36	; 0x24
 8081874:	211e      	movs	r1, #30
 8081876:	4640      	mov	r0, r8
 8081878:	f002 f83a 	bl	80838f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 808187c:	a809      	add	r0, sp, #36	; 0x24
 808187e:	f7ff fde3 	bl	8081448 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 8081882:	a806      	add	r0, sp, #24
 8081884:	f7ff fde0 	bl	8081448 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8081888:	4b1d      	ldr	r3, [pc, #116]	; (8081900 <_GLOBAL__sub_I_fram+0xd4>)
 808188a:	a803      	add	r0, sp, #12
 808188c:	602b      	str	r3, [r5, #0]
 808188e:	622f      	str	r7, [r5, #32]
 8081890:	f7ff fdda 	bl	8081448 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8081894:	4b1b      	ldr	r3, [pc, #108]	; (8081904 <_GLOBAL__sub_I_fram+0xd8>)
 8081896:	602b      	str	r3, [r5, #0]
        Serial.begin();
 8081898:	f002 ff90 	bl	80847bc <_Z16_fetch_usbserialv>
 808189c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80818a0:	f002 ff6e 	bl	8084780 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 80818a4:	f001 fcbc 	bl	8083220 <_ZN5spark10LogManager8instanceEv>
 80818a8:	4629      	mov	r1, r5
 80818aa:	f001 ffb4 	bl	8083816 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
 80818ae:	4668      	mov	r0, sp
 80818b0:	f7ff fdca 	bl	8081448 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
              error_(SYSTEM_ERROR_NONE) {
 80818b4:	4b14      	ldr	r3, [pc, #80]	; (8081908 <_GLOBAL__sub_I_fram+0xdc>)
    SleepResult() {}
 80818b6:	4a15      	ldr	r2, [pc, #84]	; (808190c <_GLOBAL__sub_I_fram+0xe0>)
              error_(SYSTEM_ERROR_NONE) {
 80818b8:	601c      	str	r4, [r3, #0]
 80818ba:	809c      	strh	r4, [r3, #4]
    SleepResult() {}
 80818bc:	719c      	strb	r4, [r3, #6]
 80818be:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 80818c0:	2002      	movs	r0, #2
 80818c2:	f000 fa13 	bl	8081cec <set_system_mode>
SYSTEM_THREAD(ENABLED);         // Means my code will not be held up by Particle processes.
 80818c6:	4621      	mov	r1, r4
 80818c8:	4630      	mov	r0, r6
 80818ca:	f000 fa27 	bl	8081d1c <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
 80818ce:	4631      	mov	r1, r6
 80818d0:	2004      	movs	r0, #4
 80818d2:	f000 f851 	bl	8081978 <HAL_Feature_Set>
FuelGauge batteryMonitor;       // Prototype for the fuel gauge (included in Particle core library)
 80818d6:	4621      	mov	r1, r4
 80818d8:	480d      	ldr	r0, [pc, #52]	; (8081910 <_GLOBAL__sub_I_fram+0xe4>)
 80818da:	f000 ffd1 	bl	8082880 <_ZN9FuelGaugeC1Eb>
PMIC power;                      //Initalize the PMIC class so you can call the Power Management functions below.
 80818de:	4621      	mov	r1, r4
 80818e0:	480c      	ldr	r0, [pc, #48]	; (8081914 <_GLOBAL__sub_I_fram+0xe8>)
 80818e2:	f002 fb94 	bl	808400e <_ZN4PMICC1Eb>
}
 80818e6:	b00c      	add	sp, #48	; 0x30
 80818e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80818ec:	20000114 	.word	0x20000114
 80818f0:	20000118 	.word	0x20000118
 80818f4:	20000139 	.word	0x20000139
 80818f8:	20000148 	.word	0x20000148
 80818fc:	08086314 	.word	0x08086314
 8081900:	080864d0 	.word	0x080864d0
 8081904:	0808632c 	.word	0x0808632c
 8081908:	20000108 	.word	0x20000108
 808190c:	ffff0000 	.word	0xffff0000
 8081910:	20000128 	.word	0x20000128
 8081914:	2000016d 	.word	0x2000016d

08081918 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8081918:	b508      	push	{r3, lr}
 808191a:	4b02      	ldr	r3, [pc, #8]	; (8081924 <inet_gethostbyname+0xc>)
 808191c:	681b      	ldr	r3, [r3, #0]
 808191e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081920:	9301      	str	r3, [sp, #4]
 8081922:	bd08      	pop	{r3, pc}
 8081924:	08060020 	.word	0x08060020

08081928 <cellular_signal>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
 8081928:	b508      	push	{r3, lr}
 808192a:	4b02      	ldr	r3, [pc, #8]	; (8081934 <cellular_signal+0xc>)
 808192c:	681b      	ldr	r3, [r3, #0]
 808192e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081930:	9301      	str	r3, [sp, #4]
 8081932:	bd08      	pop	{r3, pc}
 8081934:	08060020 	.word	0x08060020

08081938 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 8081938:	b508      	push	{r3, lr}
 808193a:	4b02      	ldr	r3, [pc, #8]	; (8081944 <os_mutex_recursive_create+0xc>)
 808193c:	681b      	ldr	r3, [r3, #0]
 808193e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081940:	9301      	str	r3, [sp, #4]
 8081942:	bd08      	pop	{r3, pc}
 8081944:	080401d0 	.word	0x080401d0

08081948 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 8081948:	b508      	push	{r3, lr}
 808194a:	4b02      	ldr	r3, [pc, #8]	; (8081954 <os_mutex_recursive_destroy+0xc>)
 808194c:	681b      	ldr	r3, [r3, #0]
 808194e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081950:	9301      	str	r3, [sp, #4]
 8081952:	bd08      	pop	{r3, pc}
 8081954:	080401d0 	.word	0x080401d0

08081958 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 8081958:	b508      	push	{r3, lr}
 808195a:	4b02      	ldr	r3, [pc, #8]	; (8081964 <os_mutex_recursive_lock+0xc>)
 808195c:	681b      	ldr	r3, [r3, #0]
 808195e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8081960:	9301      	str	r3, [sp, #4]
 8081962:	bd08      	pop	{r3, pc}
 8081964:	080401d0 	.word	0x080401d0

08081968 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 8081968:	b508      	push	{r3, lr}
 808196a:	4b02      	ldr	r3, [pc, #8]	; (8081974 <os_mutex_recursive_unlock+0xc>)
 808196c:	681b      	ldr	r3, [r3, #0]
 808196e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081970:	9301      	str	r3, [sp, #4]
 8081972:	bd08      	pop	{r3, pc}
 8081974:	080401d0 	.word	0x080401d0

08081978 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 8081978:	b508      	push	{r3, lr}
 808197a:	4b02      	ldr	r3, [pc, #8]	; (8081984 <HAL_Feature_Set+0xc>)
 808197c:	681b      	ldr	r3, [r3, #0]
 808197e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8081980:	9301      	str	r3, [sp, #4]
 8081982:	bd08      	pop	{r3, pc}
 8081984:	080401b8 	.word	0x080401b8

08081988 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 8081988:	b508      	push	{r3, lr}
 808198a:	4b02      	ldr	r3, [pc, #8]	; (8081994 <HAL_Core_Get_Last_Reset_Info+0xc>)
 808198c:	681b      	ldr	r3, [r3, #0]
 808198e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8081990:	9301      	str	r3, [sp, #4]
 8081992:	bd08      	pop	{r3, pc}
 8081994:	080401b8 	.word	0x080401b8

08081998 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8081998:	b508      	push	{r3, lr}
 808199a:	4b02      	ldr	r3, [pc, #8]	; (80819a4 <HAL_RNG_GetRandomNumber+0xc>)
 808199c:	681b      	ldr	r3, [r3, #0]
 808199e:	685b      	ldr	r3, [r3, #4]
 80819a0:	9301      	str	r3, [sp, #4]
 80819a2:	bd08      	pop	{r3, pc}
 80819a4:	0804019c 	.word	0x0804019c

080819a8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80819a8:	b508      	push	{r3, lr}
 80819aa:	4b02      	ldr	r3, [pc, #8]	; (80819b4 <HAL_Delay_Microseconds+0xc>)
 80819ac:	681b      	ldr	r3, [r3, #0]
 80819ae:	68db      	ldr	r3, [r3, #12]
 80819b0:	9301      	str	r3, [sp, #4]
 80819b2:	bd08      	pop	{r3, pc}
 80819b4:	0804019c 	.word	0x0804019c

080819b8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80819b8:	b508      	push	{r3, lr}
 80819ba:	4b02      	ldr	r3, [pc, #8]	; (80819c4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80819bc:	681b      	ldr	r3, [r3, #0]
 80819be:	695b      	ldr	r3, [r3, #20]
 80819c0:	9301      	str	r3, [sp, #4]
 80819c2:	bd08      	pop	{r3, pc}
 80819c4:	0804019c 	.word	0x0804019c

080819c8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80819c8:	b508      	push	{r3, lr}
 80819ca:	4b02      	ldr	r3, [pc, #8]	; (80819d4 <hal_rtc_time_is_valid+0xc>)
 80819cc:	681b      	ldr	r3, [r3, #0]
 80819ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80819d0:	9301      	str	r3, [sp, #4]
 80819d2:	bd08      	pop	{r3, pc}
 80819d4:	0804019c 	.word	0x0804019c

080819d8 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 80819d8:	b508      	push	{r3, lr}
 80819da:	4b02      	ldr	r3, [pc, #8]	; (80819e4 <hal_timer_millis+0xc>)
 80819dc:	681b      	ldr	r3, [r3, #0]
 80819de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80819e0:	9301      	str	r3, [sp, #4]
 80819e2:	bd08      	pop	{r3, pc}
 80819e4:	0804019c 	.word	0x0804019c

080819e8 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80819e8:	b508      	push	{r3, lr}
 80819ea:	4b02      	ldr	r3, [pc, #8]	; (80819f4 <hal_rtc_get_time+0xc>)
 80819ec:	681b      	ldr	r3, [r3, #0]
 80819ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80819f0:	9301      	str	r3, [sp, #4]
 80819f2:	bd08      	pop	{r3, pc}
 80819f4:	0804019c 	.word	0x0804019c

080819f8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80819f8:	b508      	push	{r3, lr}
 80819fa:	4b02      	ldr	r3, [pc, #8]	; (8081a04 <HAL_Pin_Map+0xc>)
 80819fc:	681b      	ldr	r3, [r3, #0]
 80819fe:	681b      	ldr	r3, [r3, #0]
 8081a00:	9301      	str	r3, [sp, #4]
 8081a02:	bd08      	pop	{r3, pc}
 8081a04:	080401b0 	.word	0x080401b0

08081a08 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 8081a08:	b508      	push	{r3, lr}
 8081a0a:	4b02      	ldr	r3, [pc, #8]	; (8081a14 <HAL_Validate_Pin_Function+0xc>)
 8081a0c:	681b      	ldr	r3, [r3, #0]
 8081a0e:	685b      	ldr	r3, [r3, #4]
 8081a10:	9301      	str	r3, [sp, #4]
 8081a12:	bd08      	pop	{r3, pc}
 8081a14:	080401b0 	.word	0x080401b0

08081a18 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8081a18:	b508      	push	{r3, lr}
 8081a1a:	4b02      	ldr	r3, [pc, #8]	; (8081a24 <HAL_Pin_Mode+0xc>)
 8081a1c:	681b      	ldr	r3, [r3, #0]
 8081a1e:	689b      	ldr	r3, [r3, #8]
 8081a20:	9301      	str	r3, [sp, #4]
 8081a22:	bd08      	pop	{r3, pc}
 8081a24:	080401b0 	.word	0x080401b0

08081a28 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8081a28:	b508      	push	{r3, lr}
 8081a2a:	4b02      	ldr	r3, [pc, #8]	; (8081a34 <HAL_Get_Pin_Mode+0xc>)
 8081a2c:	681b      	ldr	r3, [r3, #0]
 8081a2e:	68db      	ldr	r3, [r3, #12]
 8081a30:	9301      	str	r3, [sp, #4]
 8081a32:	bd08      	pop	{r3, pc}
 8081a34:	080401b0 	.word	0x080401b0

08081a38 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8081a38:	b508      	push	{r3, lr}
 8081a3a:	4b02      	ldr	r3, [pc, #8]	; (8081a44 <HAL_GPIO_Write+0xc>)
 8081a3c:	681b      	ldr	r3, [r3, #0]
 8081a3e:	691b      	ldr	r3, [r3, #16]
 8081a40:	9301      	str	r3, [sp, #4]
 8081a42:	bd08      	pop	{r3, pc}
 8081a44:	080401b0 	.word	0x080401b0

08081a48 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 8081a48:	b508      	push	{r3, lr}
 8081a4a:	4b02      	ldr	r3, [pc, #8]	; (8081a54 <HAL_Interrupts_Attach+0xc>)
 8081a4c:	681b      	ldr	r3, [r3, #0]
 8081a4e:	699b      	ldr	r3, [r3, #24]
 8081a50:	9301      	str	r3, [sp, #4]
 8081a52:	bd08      	pop	{r3, pc}
 8081a54:	080401b0 	.word	0x080401b0

08081a58 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 8081a58:	b508      	push	{r3, lr}
 8081a5a:	4b02      	ldr	r3, [pc, #8]	; (8081a64 <HAL_Interrupts_Detach+0xc>)
 8081a5c:	681b      	ldr	r3, [r3, #0]
 8081a5e:	69db      	ldr	r3, [r3, #28]
 8081a60:	9301      	str	r3, [sp, #4]
 8081a62:	bd08      	pop	{r3, pc}
 8081a64:	080401b0 	.word	0x080401b0

08081a68 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 8081a68:	b508      	push	{r3, lr}
 8081a6a:	4b02      	ldr	r3, [pc, #8]	; (8081a74 <hal_adc_read+0xc>)
 8081a6c:	681b      	ldr	r3, [r3, #0]
 8081a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081a70:	9301      	str	r3, [sp, #4]
 8081a72:	bd08      	pop	{r3, pc}
 8081a74:	080401b0 	.word	0x080401b0

08081a78 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 8081a78:	b508      	push	{r3, lr}
 8081a7a:	4b02      	ldr	r3, [pc, #8]	; (8081a84 <hal_i2c_begin+0xc>)
 8081a7c:	681b      	ldr	r3, [r3, #0]
 8081a7e:	68db      	ldr	r3, [r3, #12]
 8081a80:	9301      	str	r3, [sp, #4]
 8081a82:	bd08      	pop	{r3, pc}
 8081a84:	080401ac 	.word	0x080401ac

08081a88 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 8081a88:	b508      	push	{r3, lr}
 8081a8a:	4b02      	ldr	r3, [pc, #8]	; (8081a94 <hal_i2c_begin_transmission+0xc>)
 8081a8c:	681b      	ldr	r3, [r3, #0]
 8081a8e:	699b      	ldr	r3, [r3, #24]
 8081a90:	9301      	str	r3, [sp, #4]
 8081a92:	bd08      	pop	{r3, pc}
 8081a94:	080401ac 	.word	0x080401ac

08081a98 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 8081a98:	b508      	push	{r3, lr}
 8081a9a:	4b02      	ldr	r3, [pc, #8]	; (8081aa4 <hal_i2c_end_transmission+0xc>)
 8081a9c:	681b      	ldr	r3, [r3, #0]
 8081a9e:	69db      	ldr	r3, [r3, #28]
 8081aa0:	9301      	str	r3, [sp, #4]
 8081aa2:	bd08      	pop	{r3, pc}
 8081aa4:	080401ac 	.word	0x080401ac

08081aa8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 8081aa8:	b508      	push	{r3, lr}
 8081aaa:	4b02      	ldr	r3, [pc, #8]	; (8081ab4 <hal_i2c_write+0xc>)
 8081aac:	681b      	ldr	r3, [r3, #0]
 8081aae:	6a1b      	ldr	r3, [r3, #32]
 8081ab0:	9301      	str	r3, [sp, #4]
 8081ab2:	bd08      	pop	{r3, pc}
 8081ab4:	080401ac 	.word	0x080401ac

08081ab8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 8081ab8:	b508      	push	{r3, lr}
 8081aba:	4b02      	ldr	r3, [pc, #8]	; (8081ac4 <hal_i2c_available+0xc>)
 8081abc:	681b      	ldr	r3, [r3, #0]
 8081abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081ac0:	9301      	str	r3, [sp, #4]
 8081ac2:	bd08      	pop	{r3, pc}
 8081ac4:	080401ac 	.word	0x080401ac

08081ac8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 8081ac8:	b508      	push	{r3, lr}
 8081aca:	4b02      	ldr	r3, [pc, #8]	; (8081ad4 <hal_i2c_read+0xc>)
 8081acc:	681b      	ldr	r3, [r3, #0]
 8081ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081ad0:	9301      	str	r3, [sp, #4]
 8081ad2:	bd08      	pop	{r3, pc}
 8081ad4:	080401ac 	.word	0x080401ac

08081ad8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 8081ad8:	b508      	push	{r3, lr}
 8081ada:	4b02      	ldr	r3, [pc, #8]	; (8081ae4 <hal_i2c_peek+0xc>)
 8081adc:	681b      	ldr	r3, [r3, #0]
 8081ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081ae0:	9301      	str	r3, [sp, #4]
 8081ae2:	bd08      	pop	{r3, pc}
 8081ae4:	080401ac 	.word	0x080401ac

08081ae8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 8081ae8:	b508      	push	{r3, lr}
 8081aea:	4b02      	ldr	r3, [pc, #8]	; (8081af4 <hal_i2c_flush+0xc>)
 8081aec:	681b      	ldr	r3, [r3, #0]
 8081aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081af0:	9301      	str	r3, [sp, #4]
 8081af2:	bd08      	pop	{r3, pc}
 8081af4:	080401ac 	.word	0x080401ac

08081af8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 8081af8:	b508      	push	{r3, lr}
 8081afa:	4b02      	ldr	r3, [pc, #8]	; (8081b04 <hal_i2c_is_enabled+0xc>)
 8081afc:	681b      	ldr	r3, [r3, #0]
 8081afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081b00:	9301      	str	r3, [sp, #4]
 8081b02:	bd08      	pop	{r3, pc}
 8081b04:	080401ac 	.word	0x080401ac

08081b08 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 8081b08:	b508      	push	{r3, lr}
 8081b0a:	4b02      	ldr	r3, [pc, #8]	; (8081b14 <hal_i2c_init+0xc>)
 8081b0c:	681b      	ldr	r3, [r3, #0]
 8081b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081b10:	9301      	str	r3, [sp, #4]
 8081b12:	bd08      	pop	{r3, pc}
 8081b14:	080401ac 	.word	0x080401ac

08081b18 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
 8081b18:	b508      	push	{r3, lr}
 8081b1a:	4b02      	ldr	r3, [pc, #8]	; (8081b24 <hal_i2c_lock+0xc>)
 8081b1c:	681b      	ldr	r3, [r3, #0]
 8081b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081b20:	9301      	str	r3, [sp, #4]
 8081b22:	bd08      	pop	{r3, pc}
 8081b24:	080401ac 	.word	0x080401ac

08081b28 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
 8081b28:	b508      	push	{r3, lr}
 8081b2a:	4b02      	ldr	r3, [pc, #8]	; (8081b34 <hal_i2c_unlock+0xc>)
 8081b2c:	681b      	ldr	r3, [r3, #0]
 8081b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8081b30:	9301      	str	r3, [sp, #4]
 8081b32:	bd08      	pop	{r3, pc}
 8081b34:	080401ac 	.word	0x080401ac

08081b38 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 8081b38:	b508      	push	{r3, lr}
 8081b3a:	4b02      	ldr	r3, [pc, #8]	; (8081b44 <hal_i2c_request_ex+0xc>)
 8081b3c:	681b      	ldr	r3, [r3, #0]
 8081b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8081b40:	9301      	str	r3, [sp, #4]
 8081b42:	bd08      	pop	{r3, pc}
 8081b44:	080401ac 	.word	0x080401ac

08081b48 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 8081b48:	b508      	push	{r3, lr}
 8081b4a:	4b02      	ldr	r3, [pc, #8]	; (8081b54 <hal_spi_init+0xc>)
 8081b4c:	681b      	ldr	r3, [r3, #0]
 8081b4e:	69db      	ldr	r3, [r3, #28]
 8081b50:	9301      	str	r3, [sp, #4]
 8081b52:	bd08      	pop	{r3, pc}
 8081b54:	080401b4 	.word	0x080401b4

08081b58 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 8081b58:	b508      	push	{r3, lr}
 8081b5a:	4b02      	ldr	r3, [pc, #8]	; (8081b64 <hal_spi_is_enabled+0xc>)
 8081b5c:	681b      	ldr	r3, [r3, #0]
 8081b5e:	6a1b      	ldr	r3, [r3, #32]
 8081b60:	9301      	str	r3, [sp, #4]
 8081b62:	bd08      	pop	{r3, pc}
 8081b64:	080401b4 	.word	0x080401b4

08081b68 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 8081b68:	b508      	push	{r3, lr}
 8081b6a:	4b02      	ldr	r3, [pc, #8]	; (8081b74 <hal_usart_init+0xc>)
 8081b6c:	681b      	ldr	r3, [r3, #0]
 8081b6e:	699b      	ldr	r3, [r3, #24]
 8081b70:	9301      	str	r3, [sp, #4]
 8081b72:	bd08      	pop	{r3, pc}
 8081b74:	080401c4 	.word	0x080401c4

08081b78 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 8081b78:	b508      	push	{r3, lr}
 8081b7a:	4b02      	ldr	r3, [pc, #8]	; (8081b84 <hal_usart_end+0xc>)
 8081b7c:	681b      	ldr	r3, [r3, #0]
 8081b7e:	6a1b      	ldr	r3, [r3, #32]
 8081b80:	9301      	str	r3, [sp, #4]
 8081b82:	bd08      	pop	{r3, pc}
 8081b84:	080401c4 	.word	0x080401c4

08081b88 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 8081b88:	b508      	push	{r3, lr}
 8081b8a:	4b02      	ldr	r3, [pc, #8]	; (8081b94 <hal_usart_write+0xc>)
 8081b8c:	681b      	ldr	r3, [r3, #0]
 8081b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081b90:	9301      	str	r3, [sp, #4]
 8081b92:	bd08      	pop	{r3, pc}
 8081b94:	080401c4 	.word	0x080401c4

08081b98 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 8081b98:	b508      	push	{r3, lr}
 8081b9a:	4b02      	ldr	r3, [pc, #8]	; (8081ba4 <hal_usart_available+0xc>)
 8081b9c:	681b      	ldr	r3, [r3, #0]
 8081b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081ba0:	9301      	str	r3, [sp, #4]
 8081ba2:	bd08      	pop	{r3, pc}
 8081ba4:	080401c4 	.word	0x080401c4

08081ba8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 8081ba8:	b508      	push	{r3, lr}
 8081baa:	4b02      	ldr	r3, [pc, #8]	; (8081bb4 <hal_usart_read+0xc>)
 8081bac:	681b      	ldr	r3, [r3, #0]
 8081bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081bb0:	9301      	str	r3, [sp, #4]
 8081bb2:	bd08      	pop	{r3, pc}
 8081bb4:	080401c4 	.word	0x080401c4

08081bb8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 8081bb8:	b508      	push	{r3, lr}
 8081bba:	4b02      	ldr	r3, [pc, #8]	; (8081bc4 <hal_usart_peek+0xc>)
 8081bbc:	681b      	ldr	r3, [r3, #0]
 8081bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081bc0:	9301      	str	r3, [sp, #4]
 8081bc2:	bd08      	pop	{r3, pc}
 8081bc4:	080401c4 	.word	0x080401c4

08081bc8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 8081bc8:	b508      	push	{r3, lr}
 8081bca:	4b02      	ldr	r3, [pc, #8]	; (8081bd4 <hal_usart_flush+0xc>)
 8081bcc:	681b      	ldr	r3, [r3, #0]
 8081bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081bd0:	9301      	str	r3, [sp, #4]
 8081bd2:	bd08      	pop	{r3, pc}
 8081bd4:	080401c4 	.word	0x080401c4

08081bd8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 8081bd8:	b508      	push	{r3, lr}
 8081bda:	4b02      	ldr	r3, [pc, #8]	; (8081be4 <hal_usart_is_enabled+0xc>)
 8081bdc:	681b      	ldr	r3, [r3, #0]
 8081bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8081be0:	9301      	str	r3, [sp, #4]
 8081be2:	bd08      	pop	{r3, pc}
 8081be4:	080401c4 	.word	0x080401c4

08081be8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 8081be8:	b508      	push	{r3, lr}
 8081bea:	4b02      	ldr	r3, [pc, #8]	; (8081bf4 <hal_usart_available_data_for_write+0xc>)
 8081bec:	681b      	ldr	r3, [r3, #0]
 8081bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081bf0:	9301      	str	r3, [sp, #4]
 8081bf2:	bd08      	pop	{r3, pc}
 8081bf4:	080401c4 	.word	0x080401c4

08081bf8 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 8081bf8:	b508      	push	{r3, lr}
 8081bfa:	4b02      	ldr	r3, [pc, #8]	; (8081c04 <hal_usart_begin_config+0xc>)
 8081bfc:	681b      	ldr	r3, [r3, #0]
 8081bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8081c00:	9301      	str	r3, [sp, #4]
 8081c02:	bd08      	pop	{r3, pc}
 8081c04:	080401c4 	.word	0x080401c4

08081c08 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8081c08:	b508      	push	{r3, lr}
 8081c0a:	4b02      	ldr	r3, [pc, #8]	; (8081c14 <HAL_USB_USART_Init+0xc>)
 8081c0c:	681b      	ldr	r3, [r3, #0]
 8081c0e:	681b      	ldr	r3, [r3, #0]
 8081c10:	9301      	str	r3, [sp, #4]
 8081c12:	bd08      	pop	{r3, pc}
 8081c14:	0806001c 	.word	0x0806001c

08081c18 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 8081c18:	b508      	push	{r3, lr}
 8081c1a:	4b02      	ldr	r3, [pc, #8]	; (8081c24 <HAL_USB_USART_Begin+0xc>)
 8081c1c:	681b      	ldr	r3, [r3, #0]
 8081c1e:	685b      	ldr	r3, [r3, #4]
 8081c20:	9301      	str	r3, [sp, #4]
 8081c22:	bd08      	pop	{r3, pc}
 8081c24:	0806001c 	.word	0x0806001c

08081c28 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 8081c28:	b508      	push	{r3, lr}
 8081c2a:	4b02      	ldr	r3, [pc, #8]	; (8081c34 <HAL_USB_USART_End+0xc>)
 8081c2c:	681b      	ldr	r3, [r3, #0]
 8081c2e:	689b      	ldr	r3, [r3, #8]
 8081c30:	9301      	str	r3, [sp, #4]
 8081c32:	bd08      	pop	{r3, pc}
 8081c34:	0806001c 	.word	0x0806001c

08081c38 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8081c38:	b508      	push	{r3, lr}
 8081c3a:	4b02      	ldr	r3, [pc, #8]	; (8081c44 <HAL_USB_USART_Available_Data+0xc>)
 8081c3c:	681b      	ldr	r3, [r3, #0]
 8081c3e:	691b      	ldr	r3, [r3, #16]
 8081c40:	9301      	str	r3, [sp, #4]
 8081c42:	bd08      	pop	{r3, pc}
 8081c44:	0806001c 	.word	0x0806001c

08081c48 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8081c48:	b508      	push	{r3, lr}
 8081c4a:	4b02      	ldr	r3, [pc, #8]	; (8081c54 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8081c4c:	681b      	ldr	r3, [r3, #0]
 8081c4e:	695b      	ldr	r3, [r3, #20]
 8081c50:	9301      	str	r3, [sp, #4]
 8081c52:	bd08      	pop	{r3, pc}
 8081c54:	0806001c 	.word	0x0806001c

08081c58 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081c58:	b508      	push	{r3, lr}
 8081c5a:	4b02      	ldr	r3, [pc, #8]	; (8081c64 <HAL_USB_USART_Receive_Data+0xc>)
 8081c5c:	681b      	ldr	r3, [r3, #0]
 8081c5e:	699b      	ldr	r3, [r3, #24]
 8081c60:	9301      	str	r3, [sp, #4]
 8081c62:	bd08      	pop	{r3, pc}
 8081c64:	0806001c 	.word	0x0806001c

08081c68 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081c68:	b508      	push	{r3, lr}
 8081c6a:	4b02      	ldr	r3, [pc, #8]	; (8081c74 <HAL_USB_USART_Send_Data+0xc>)
 8081c6c:	681b      	ldr	r3, [r3, #0]
 8081c6e:	69db      	ldr	r3, [r3, #28]
 8081c70:	9301      	str	r3, [sp, #4]
 8081c72:	bd08      	pop	{r3, pc}
 8081c74:	0806001c 	.word	0x0806001c

08081c78 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8081c78:	b508      	push	{r3, lr}
 8081c7a:	4b02      	ldr	r3, [pc, #8]	; (8081c84 <HAL_USB_USART_Flush_Data+0xc>)
 8081c7c:	681b      	ldr	r3, [r3, #0]
 8081c7e:	6a1b      	ldr	r3, [r3, #32]
 8081c80:	9301      	str	r3, [sp, #4]
 8081c82:	bd08      	pop	{r3, pc}
 8081c84:	0806001c 	.word	0x0806001c

08081c88 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 8081c88:	b508      	push	{r3, lr}
 8081c8a:	4b02      	ldr	r3, [pc, #8]	; (8081c94 <panic_+0xc>)
 8081c8c:	681b      	ldr	r3, [r3, #0]
 8081c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081c90:	9301      	str	r3, [sp, #4]
 8081c92:	bd08      	pop	{r3, pc}
 8081c94:	080201a0 	.word	0x080201a0

08081c98 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 8081c98:	b508      	push	{r3, lr}
 8081c9a:	4b02      	ldr	r3, [pc, #8]	; (8081ca4 <log_message_v+0xc>)
 8081c9c:	681b      	ldr	r3, [r3, #0]
 8081c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081ca0:	9301      	str	r3, [sp, #4]
 8081ca2:	bd08      	pop	{r3, pc}
 8081ca4:	080201a0 	.word	0x080201a0

08081ca8 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 8081ca8:	b508      	push	{r3, lr}
 8081caa:	4b02      	ldr	r3, [pc, #8]	; (8081cb4 <log_level_name+0xc>)
 8081cac:	681b      	ldr	r3, [r3, #0]
 8081cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8081cb0:	9301      	str	r3, [sp, #4]
 8081cb2:	bd08      	pop	{r3, pc}
 8081cb4:	080201a0 	.word	0x080201a0

08081cb8 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 8081cb8:	b508      	push	{r3, lr}
 8081cba:	4b02      	ldr	r3, [pc, #8]	; (8081cc4 <log_set_callbacks+0xc>)
 8081cbc:	681b      	ldr	r3, [r3, #0]
 8081cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8081cc0:	9301      	str	r3, [sp, #4]
 8081cc2:	bd08      	pop	{r3, pc}
 8081cc4:	080201a0 	.word	0x080201a0

08081cc8 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
 8081cc8:	b508      	push	{r3, lr}
 8081cca:	4b03      	ldr	r3, [pc, #12]	; (8081cd8 <diag_get_source+0x10>)
 8081ccc:	681b      	ldr	r3, [r3, #0]
 8081cce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8081cd2:	9301      	str	r3, [sp, #4]
 8081cd4:	bd08      	pop	{r3, pc}
 8081cd6:	0000      	.short	0x0000
 8081cd8:	080201a0 	.word	0x080201a0

08081cdc <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8081cdc:	b508      	push	{r3, lr}
 8081cde:	4b02      	ldr	r3, [pc, #8]	; (8081ce8 <system_mode+0xc>)
 8081ce0:	681b      	ldr	r3, [r3, #0]
 8081ce2:	681b      	ldr	r3, [r3, #0]
 8081ce4:	9301      	str	r3, [sp, #4]
 8081ce6:	bd08      	pop	{r3, pc}
 8081ce8:	080401a4 	.word	0x080401a4

08081cec <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8081cec:	b508      	push	{r3, lr}
 8081cee:	4b02      	ldr	r3, [pc, #8]	; (8081cf8 <set_system_mode+0xc>)
 8081cf0:	681b      	ldr	r3, [r3, #0]
 8081cf2:	685b      	ldr	r3, [r3, #4]
 8081cf4:	9301      	str	r3, [sp, #4]
 8081cf6:	bd08      	pop	{r3, pc}
 8081cf8:	080401a4 	.word	0x080401a4

08081cfc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8081cfc:	b508      	push	{r3, lr}
 8081cfe:	4b02      	ldr	r3, [pc, #8]	; (8081d08 <system_delay_ms+0xc>)
 8081d00:	681b      	ldr	r3, [r3, #0]
 8081d02:	695b      	ldr	r3, [r3, #20]
 8081d04:	9301      	str	r3, [sp, #4]
 8081d06:	bd08      	pop	{r3, pc}
 8081d08:	080401a4 	.word	0x080401a4

08081d0c <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 8081d0c:	b508      	push	{r3, lr}
 8081d0e:	4b02      	ldr	r3, [pc, #8]	; (8081d18 <system_sleep+0xc>)
 8081d10:	681b      	ldr	r3, [r3, #0]
 8081d12:	699b      	ldr	r3, [r3, #24]
 8081d14:	9301      	str	r3, [sp, #4]
 8081d16:	bd08      	pop	{r3, pc}
 8081d18:	080401a4 	.word	0x080401a4

08081d1c <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8081d1c:	b508      	push	{r3, lr}
 8081d1e:	4b02      	ldr	r3, [pc, #8]	; (8081d28 <system_thread_set_state+0xc>)
 8081d20:	681b      	ldr	r3, [r3, #0]
 8081d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081d24:	9301      	str	r3, [sp, #4]
 8081d26:	bd08      	pop	{r3, pc}
 8081d28:	080401a4 	.word	0x080401a4

08081d2c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8081d2c:	b508      	push	{r3, lr}
 8081d2e:	4b02      	ldr	r3, [pc, #8]	; (8081d38 <application_thread_current+0xc>)
 8081d30:	681b      	ldr	r3, [r3, #0]
 8081d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8081d34:	9301      	str	r3, [sp, #4]
 8081d36:	bd08      	pop	{r3, pc}
 8081d38:	080401a4 	.word	0x080401a4

08081d3c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8081d3c:	b508      	push	{r3, lr}
 8081d3e:	4b02      	ldr	r3, [pc, #8]	; (8081d48 <application_thread_invoke+0xc>)
 8081d40:	681b      	ldr	r3, [r3, #0]
 8081d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081d44:	9301      	str	r3, [sp, #4]
 8081d46:	bd08      	pop	{r3, pc}
 8081d48:	080401a4 	.word	0x080401a4

08081d4c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8081d4c:	b508      	push	{r3, lr}
 8081d4e:	4b02      	ldr	r3, [pc, #8]	; (8081d58 <system_thread_get_state+0xc>)
 8081d50:	681b      	ldr	r3, [r3, #0]
 8081d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081d54:	9301      	str	r3, [sp, #4]
 8081d56:	bd08      	pop	{r3, pc}
 8081d58:	080401a4 	.word	0x080401a4

08081d5c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8081d5c:	b508      	push	{r3, lr}
 8081d5e:	4b03      	ldr	r3, [pc, #12]	; (8081d6c <system_ctrl_set_app_request_handler+0x10>)
 8081d60:	681b      	ldr	r3, [r3, #0]
 8081d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8081d66:	9301      	str	r3, [sp, #4]
 8081d68:	bd08      	pop	{r3, pc}
 8081d6a:	0000      	.short	0x0000
 8081d6c:	080401a4 	.word	0x080401a4

08081d70 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8081d70:	b508      	push	{r3, lr}
 8081d72:	4b03      	ldr	r3, [pc, #12]	; (8081d80 <system_ctrl_set_result+0x10>)
 8081d74:	681b      	ldr	r3, [r3, #0]
 8081d76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8081d7a:	9301      	str	r3, [sp, #4]
 8081d7c:	bd08      	pop	{r3, pc}
 8081d7e:	0000      	.short	0x0000
 8081d80:	080401a4 	.word	0x080401a4

08081d84 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 8081d84:	b508      	push	{r3, lr}
 8081d86:	4b03      	ldr	r3, [pc, #12]	; (8081d94 <system_reset+0x10>)
 8081d88:	681b      	ldr	r3, [r3, #0]
 8081d8a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8081d8e:	9301      	str	r3, [sp, #4]
 8081d90:	bd08      	pop	{r3, pc}
 8081d92:	0000      	.short	0x0000
 8081d94:	080401a4 	.word	0x080401a4

08081d98 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 8081d98:	b508      	push	{r3, lr}
 8081d9a:	4b02      	ldr	r3, [pc, #8]	; (8081da4 <spark_variable+0xc>)
 8081d9c:	681b      	ldr	r3, [r3, #0]
 8081d9e:	681b      	ldr	r3, [r3, #0]
 8081da0:	9301      	str	r3, [sp, #4]
 8081da2:	bd08      	pop	{r3, pc}
 8081da4:	080401cc 	.word	0x080401cc

08081da8 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8081da8:	b508      	push	{r3, lr}
 8081daa:	4b02      	ldr	r3, [pc, #8]	; (8081db4 <spark_function+0xc>)
 8081dac:	681b      	ldr	r3, [r3, #0]
 8081dae:	685b      	ldr	r3, [r3, #4]
 8081db0:	9301      	str	r3, [sp, #4]
 8081db2:	bd08      	pop	{r3, pc}
 8081db4:	080401cc 	.word	0x080401cc

08081db8 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8081db8:	b508      	push	{r3, lr}
 8081dba:	4b02      	ldr	r3, [pc, #8]	; (8081dc4 <spark_process+0xc>)
 8081dbc:	681b      	ldr	r3, [r3, #0]
 8081dbe:	689b      	ldr	r3, [r3, #8]
 8081dc0:	9301      	str	r3, [sp, #4]
 8081dc2:	bd08      	pop	{r3, pc}
 8081dc4:	080401cc 	.word	0x080401cc

08081dc8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8081dc8:	b508      	push	{r3, lr}
 8081dca:	4b02      	ldr	r3, [pc, #8]	; (8081dd4 <spark_cloud_flag_connect+0xc>)
 8081dcc:	681b      	ldr	r3, [r3, #0]
 8081dce:	68db      	ldr	r3, [r3, #12]
 8081dd0:	9301      	str	r3, [sp, #4]
 8081dd2:	bd08      	pop	{r3, pc}
 8081dd4:	080401cc 	.word	0x080401cc

08081dd8 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8081dd8:	b508      	push	{r3, lr}
 8081dda:	4b02      	ldr	r3, [pc, #8]	; (8081de4 <spark_cloud_flag_connected+0xc>)
 8081ddc:	681b      	ldr	r3, [r3, #0]
 8081dde:	695b      	ldr	r3, [r3, #20]
 8081de0:	9301      	str	r3, [sp, #4]
 8081de2:	bd08      	pop	{r3, pc}
 8081de4:	080401cc 	.word	0x080401cc

08081de8 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 8081de8:	b508      	push	{r3, lr}
 8081dea:	4b02      	ldr	r3, [pc, #8]	; (8081df4 <spark_deviceID+0xc>)
 8081dec:	681b      	ldr	r3, [r3, #0]
 8081dee:	69db      	ldr	r3, [r3, #28]
 8081df0:	9301      	str	r3, [sp, #4]
 8081df2:	bd08      	pop	{r3, pc}
 8081df4:	080401cc 	.word	0x080401cc

08081df8 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8081df8:	b508      	push	{r3, lr}
 8081dfa:	4b02      	ldr	r3, [pc, #8]	; (8081e04 <spark_send_event+0xc>)
 8081dfc:	681b      	ldr	r3, [r3, #0]
 8081dfe:	6a1b      	ldr	r3, [r3, #32]
 8081e00:	9301      	str	r3, [sp, #4]
 8081e02:	bd08      	pop	{r3, pc}
 8081e04:	080401cc 	.word	0x080401cc

08081e08 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 8081e08:	b508      	push	{r3, lr}
 8081e0a:	4b02      	ldr	r3, [pc, #8]	; (8081e14 <spark_subscribe+0xc>)
 8081e0c:	681b      	ldr	r3, [r3, #0]
 8081e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081e10:	9301      	str	r3, [sp, #4]
 8081e12:	bd08      	pop	{r3, pc}
 8081e14:	080401cc 	.word	0x080401cc

08081e18 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 8081e18:	b508      	push	{r3, lr}
 8081e1a:	4b02      	ldr	r3, [pc, #8]	; (8081e24 <spark_sync_time+0xc>)
 8081e1c:	681b      	ldr	r3, [r3, #0]
 8081e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081e20:	9301      	str	r3, [sp, #4]
 8081e22:	bd08      	pop	{r3, pc}
 8081e24:	080401cc 	.word	0x080401cc

08081e28 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8081e28:	b508      	push	{r3, lr}
 8081e2a:	4b02      	ldr	r3, [pc, #8]	; (8081e34 <spark_sync_time_pending+0xc>)
 8081e2c:	681b      	ldr	r3, [r3, #0]
 8081e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081e30:	9301      	str	r3, [sp, #4]
 8081e32:	bd08      	pop	{r3, pc}
 8081e34:	080401cc 	.word	0x080401cc

08081e38 <spark_set_connection_property>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
 8081e38:	b508      	push	{r3, lr}
 8081e3a:	4b02      	ldr	r3, [pc, #8]	; (8081e44 <spark_set_connection_property+0xc>)
 8081e3c:	681b      	ldr	r3, [r3, #0]
 8081e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8081e40:	9301      	str	r3, [sp, #4]
 8081e42:	bd08      	pop	{r3, pc}
 8081e44:	080401cc 	.word	0x080401cc

08081e48 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8081e48:	b508      	push	{r3, lr}
 8081e4a:	4b02      	ldr	r3, [pc, #8]	; (8081e54 <spark_set_random_seed_from_cloud_handler+0xc>)
 8081e4c:	681b      	ldr	r3, [r3, #0]
 8081e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081e50:	9301      	str	r3, [sp, #4]
 8081e52:	bd08      	pop	{r3, pc}
 8081e54:	080401cc 	.word	0x080401cc

08081e58 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 8081e58:	b508      	push	{r3, lr}
 8081e5a:	4b02      	ldr	r3, [pc, #8]	; (8081e64 <spark_cloud_disconnect+0xc>)
 8081e5c:	681b      	ldr	r3, [r3, #0]
 8081e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081e60:	9301      	str	r3, [sp, #4]
 8081e62:	bd08      	pop	{r3, pc}
 8081e64:	080401cc 	.word	0x080401cc

08081e68 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8081e68:	b508      	push	{r3, lr}
 8081e6a:	4b02      	ldr	r3, [pc, #8]	; (8081e74 <network_connect+0xc>)
 8081e6c:	681b      	ldr	r3, [r3, #0]
 8081e6e:	685b      	ldr	r3, [r3, #4]
 8081e70:	9301      	str	r3, [sp, #4]
 8081e72:	bd08      	pop	{r3, pc}
 8081e74:	080401c8 	.word	0x080401c8

08081e78 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8081e78:	b508      	push	{r3, lr}
 8081e7a:	4b02      	ldr	r3, [pc, #8]	; (8081e84 <network_connecting+0xc>)
 8081e7c:	681b      	ldr	r3, [r3, #0]
 8081e7e:	689b      	ldr	r3, [r3, #8]
 8081e80:	9301      	str	r3, [sp, #4]
 8081e82:	bd08      	pop	{r3, pc}
 8081e84:	080401c8 	.word	0x080401c8

08081e88 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8081e88:	b508      	push	{r3, lr}
 8081e8a:	4b02      	ldr	r3, [pc, #8]	; (8081e94 <network_disconnect+0xc>)
 8081e8c:	681b      	ldr	r3, [r3, #0]
 8081e8e:	68db      	ldr	r3, [r3, #12]
 8081e90:	9301      	str	r3, [sp, #4]
 8081e92:	bd08      	pop	{r3, pc}
 8081e94:	080401c8 	.word	0x080401c8

08081e98 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8081e98:	b508      	push	{r3, lr}
 8081e9a:	4b02      	ldr	r3, [pc, #8]	; (8081ea4 <network_ready+0xc>)
 8081e9c:	681b      	ldr	r3, [r3, #0]
 8081e9e:	691b      	ldr	r3, [r3, #16]
 8081ea0:	9301      	str	r3, [sp, #4]
 8081ea2:	bd08      	pop	{r3, pc}
 8081ea4:	080401c8 	.word	0x080401c8

08081ea8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8081ea8:	b508      	push	{r3, lr}
 8081eaa:	4b02      	ldr	r3, [pc, #8]	; (8081eb4 <network_on+0xc>)
 8081eac:	681b      	ldr	r3, [r3, #0]
 8081eae:	695b      	ldr	r3, [r3, #20]
 8081eb0:	9301      	str	r3, [sp, #4]
 8081eb2:	bd08      	pop	{r3, pc}
 8081eb4:	080401c8 	.word	0x080401c8

08081eb8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8081eb8:	b508      	push	{r3, lr}
 8081eba:	4b02      	ldr	r3, [pc, #8]	; (8081ec4 <network_off+0xc>)
 8081ebc:	681b      	ldr	r3, [r3, #0]
 8081ebe:	699b      	ldr	r3, [r3, #24]
 8081ec0:	9301      	str	r3, [sp, #4]
 8081ec2:	bd08      	pop	{r3, pc}
 8081ec4:	080401c8 	.word	0x080401c8

08081ec8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8081ec8:	b508      	push	{r3, lr}
 8081eca:	4b02      	ldr	r3, [pc, #8]	; (8081ed4 <network_listen+0xc>)
 8081ecc:	681b      	ldr	r3, [r3, #0]
 8081ece:	69db      	ldr	r3, [r3, #28]
 8081ed0:	9301      	str	r3, [sp, #4]
 8081ed2:	bd08      	pop	{r3, pc}
 8081ed4:	080401c8 	.word	0x080401c8

08081ed8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8081ed8:	b508      	push	{r3, lr}
 8081eda:	4b02      	ldr	r3, [pc, #8]	; (8081ee4 <network_listening+0xc>)
 8081edc:	681b      	ldr	r3, [r3, #0]
 8081ede:	6a1b      	ldr	r3, [r3, #32]
 8081ee0:	9301      	str	r3, [sp, #4]
 8081ee2:	bd08      	pop	{r3, pc}
 8081ee4:	080401c8 	.word	0x080401c8

08081ee8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8081ee8:	b508      	push	{r3, lr}
 8081eea:	4b02      	ldr	r3, [pc, #8]	; (8081ef4 <network_set_listen_timeout+0xc>)
 8081eec:	681b      	ldr	r3, [r3, #0]
 8081eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081ef0:	9301      	str	r3, [sp, #4]
 8081ef2:	bd08      	pop	{r3, pc}
 8081ef4:	080401c8 	.word	0x080401c8

08081ef8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8081ef8:	b508      	push	{r3, lr}
 8081efa:	4b02      	ldr	r3, [pc, #8]	; (8081f04 <network_get_listen_timeout+0xc>)
 8081efc:	681b      	ldr	r3, [r3, #0]
 8081efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081f00:	9301      	str	r3, [sp, #4]
 8081f02:	bd08      	pop	{r3, pc}
 8081f04:	080401c8 	.word	0x080401c8

08081f08 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 8081f08:	b508      	push	{r3, lr}
 8081f0a:	4b02      	ldr	r3, [pc, #8]	; (8081f14 <network_is_on+0xc>)
 8081f0c:	681b      	ldr	r3, [r3, #0]
 8081f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081f10:	9301      	str	r3, [sp, #4]
 8081f12:	bd08      	pop	{r3, pc}
 8081f14:	080401c8 	.word	0x080401c8

08081f18 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 8081f18:	b508      	push	{r3, lr}
 8081f1a:	4b02      	ldr	r3, [pc, #8]	; (8081f24 <network_is_off+0xc>)
 8081f1c:	681b      	ldr	r3, [r3, #0]
 8081f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081f20:	9301      	str	r3, [sp, #4]
 8081f22:	bd08      	pop	{r3, pc}
 8081f24:	080401c8 	.word	0x080401c8

08081f28 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8081f28:	b508      	push	{r3, lr}
 8081f2a:	4b02      	ldr	r3, [pc, #8]	; (8081f34 <malloc+0xc>)
 8081f2c:	681b      	ldr	r3, [r3, #0]
 8081f2e:	681b      	ldr	r3, [r3, #0]
 8081f30:	9301      	str	r3, [sp, #4]
 8081f32:	bd08      	pop	{r3, pc}
 8081f34:	080401a0 	.word	0x080401a0

08081f38 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8081f38:	b508      	push	{r3, lr}
 8081f3a:	4b02      	ldr	r3, [pc, #8]	; (8081f44 <free+0xc>)
 8081f3c:	681b      	ldr	r3, [r3, #0]
 8081f3e:	685b      	ldr	r3, [r3, #4]
 8081f40:	9301      	str	r3, [sp, #4]
 8081f42:	bd08      	pop	{r3, pc}
 8081f44:	080401a0 	.word	0x080401a0

08081f48 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8081f48:	b508      	push	{r3, lr}
 8081f4a:	4b02      	ldr	r3, [pc, #8]	; (8081f54 <realloc+0xc>)
 8081f4c:	681b      	ldr	r3, [r3, #0]
 8081f4e:	689b      	ldr	r3, [r3, #8]
 8081f50:	9301      	str	r3, [sp, #4]
 8081f52:	bd08      	pop	{r3, pc}
 8081f54:	080401a0 	.word	0x080401a0

08081f58 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 8081f58:	b508      	push	{r3, lr}
 8081f5a:	4b02      	ldr	r3, [pc, #8]	; (8081f64 <siprintf+0xc>)
 8081f5c:	681b      	ldr	r3, [r3, #0]
 8081f5e:	691b      	ldr	r3, [r3, #16]
 8081f60:	9301      	str	r3, [sp, #4]
 8081f62:	bd08      	pop	{r3, pc}
 8081f64:	080401a0 	.word	0x080401a0

08081f68 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8081f68:	b508      	push	{r3, lr}
 8081f6a:	4b02      	ldr	r3, [pc, #8]	; (8081f74 <snprintf+0xc>)
 8081f6c:	681b      	ldr	r3, [r3, #0]
 8081f6e:	69db      	ldr	r3, [r3, #28]
 8081f70:	9301      	str	r3, [sp, #4]
 8081f72:	bd08      	pop	{r3, pc}
 8081f74:	080401a0 	.word	0x080401a0

08081f78 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 8081f78:	b508      	push	{r3, lr}
 8081f7a:	4b02      	ldr	r3, [pc, #8]	; (8081f84 <vsnprintf+0xc>)
 8081f7c:	681b      	ldr	r3, [r3, #0]
 8081f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081f80:	9301      	str	r3, [sp, #4]
 8081f82:	bd08      	pop	{r3, pc}
 8081f84:	080401a0 	.word	0x080401a0

08081f88 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8081f88:	b508      	push	{r3, lr}
 8081f8a:	4b02      	ldr	r3, [pc, #8]	; (8081f94 <abort+0xc>)
 8081f8c:	681b      	ldr	r3, [r3, #0]
 8081f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081f90:	9301      	str	r3, [sp, #4]
 8081f92:	bd08      	pop	{r3, pc}
 8081f94:	080401a0 	.word	0x080401a0

08081f98 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8081f98:	b508      	push	{r3, lr}
 8081f9a:	4b02      	ldr	r3, [pc, #8]	; (8081fa4 <_malloc_r+0xc>)
 8081f9c:	681b      	ldr	r3, [r3, #0]
 8081f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081fa0:	9301      	str	r3, [sp, #4]
 8081fa2:	bd08      	pop	{r3, pc}
 8081fa4:	080401a0 	.word	0x080401a0

08081fa8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 8081fa8:	b508      	push	{r3, lr}
 8081faa:	4b02      	ldr	r3, [pc, #8]	; (8081fb4 <newlib_impure_ptr_callback+0xc>)
 8081fac:	681b      	ldr	r3, [r3, #0]
 8081fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081fb0:	9301      	str	r3, [sp, #4]
 8081fb2:	bd08      	pop	{r3, pc}
 8081fb4:	080401a0 	.word	0x080401a0

08081fb8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8081fb8:	2100      	movs	r1, #0
 8081fba:	f7ff be9f 	b.w	8081cfc <system_delay_ms>

08081fbe <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8081fbe:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081fc0:	6883      	ldr	r3, [r0, #8]
 8081fc2:	4604      	mov	r4, r0
 8081fc4:	b90b      	cbnz	r3, 8081fca <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8081fc6:	f002 fe21 	bl	8084c0c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081fca:	68c3      	ldr	r3, [r0, #12]
 8081fcc:	4798      	blx	r3
      if (_M_manager)
 8081fce:	68a3      	ldr	r3, [r4, #8]
 8081fd0:	b11b      	cbz	r3, 8081fda <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081fd2:	2203      	movs	r2, #3
 8081fd4:	4621      	mov	r1, r4
 8081fd6:	4620      	mov	r0, r4
 8081fd8:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8081fda:	4620      	mov	r0, r4
}
 8081fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 8081fe0:	2110      	movs	r1, #16
 8081fe2:	f002 be0d 	b.w	8084c00 <_ZdlPvj>

08081fe6 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8081fe6:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 8081fe8:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 8081fea:	b085      	sub	sp, #20
 8081fec:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081fee:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 8081ff0:	460f      	mov	r7, r1
 8081ff2:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8081ff4:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081ff6:	f003 fe80 	bl	8085cfa <strlen>
 8081ffa:	687b      	ldr	r3, [r7, #4]
 8081ffc:	b281      	uxth	r1, r0
 8081ffe:	9600      	str	r6, [sp, #0]
 8082000:	4628      	mov	r0, r5
 8082002:	aa03      	add	r2, sp, #12
 8082004:	f7ff fc88 	bl	8081918 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082008:	b130      	cbz	r0, 8082018 <_ZN5spark13CellularClass7resolveEPKc+0x32>
 808200a:	4631      	mov	r1, r6
 808200c:	4620      	mov	r0, r4
 808200e:	f000 fdb5 	bl	8082b7c <_ZN9IPAddressC1Em>
    }
 8082012:	4620      	mov	r0, r4
 8082014:	b005      	add	sp, #20
 8082016:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082018:	4620      	mov	r0, r4
 808201a:	a903      	add	r1, sp, #12
 808201c:	f000 fda6 	bl	8082b6c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 8082020:	e7f7      	b.n	8082012 <_ZN5spark13CellularClass7resolveEPKc+0x2c>

08082022 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 8082022:	2200      	movs	r2, #0
 8082024:	6840      	ldr	r0, [r0, #4]
 8082026:	4611      	mov	r1, r2
 8082028:	f7ff bf56 	b.w	8081ed8 <network_listening>

0808202c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 808202c:	2200      	movs	r2, #0
 808202e:	6840      	ldr	r0, [r0, #4]
 8082030:	4611      	mov	r1, r2
 8082032:	f7ff bf61 	b.w	8081ef8 <network_get_listen_timeout>

08082036 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 8082036:	2200      	movs	r2, #0
 8082038:	6840      	ldr	r0, [r0, #4]
 808203a:	f7ff bf55 	b.w	8081ee8 <network_set_listen_timeout>

0808203e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 808203e:	2200      	movs	r2, #0
 8082040:	6840      	ldr	r0, [r0, #4]
 8082042:	f081 0101 	eor.w	r1, r1, #1
 8082046:	f7ff bf3f 	b.w	8081ec8 <network_listen>

0808204a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 808204a:	2300      	movs	r3, #0
 808204c:	6840      	ldr	r0, [r0, #4]
 808204e:	461a      	mov	r2, r3
 8082050:	4619      	mov	r1, r3
 8082052:	f7ff bf29 	b.w	8081ea8 <network_on>

08082056 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 8082056:	2200      	movs	r2, #0
 8082058:	6840      	ldr	r0, [r0, #4]
 808205a:	4611      	mov	r1, r2
 808205c:	f7ff bf0c 	b.w	8081e78 <network_connecting>

08082060 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8082060:	2200      	movs	r2, #0
 8082062:	2102      	movs	r1, #2
 8082064:	6840      	ldr	r0, [r0, #4]
 8082066:	f7ff bf0f 	b.w	8081e88 <network_disconnect>

0808206a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 808206a:	2300      	movs	r3, #0
 808206c:	6840      	ldr	r0, [r0, #4]
 808206e:	461a      	mov	r2, r3
 8082070:	f7ff befa 	b.w	8081e68 <network_connect>

08082074 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 8082074:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
 8082076:	2500      	movs	r5, #0
 8082078:	2618      	movs	r6, #24
 808207a:	460f      	mov	r7, r1
 808207c:	4b19      	ldr	r3, [pc, #100]	; (80820e4 <_ZN5spark13CellularClass4RSSIEv+0x70>)
 808207e:	4632      	mov	r2, r6
 8082080:	6003      	str	r3, [r0, #0]
 8082082:	3330      	adds	r3, #48	; 0x30
 8082084:	4629      	mov	r1, r5
 8082086:	e9c0 5502 	strd	r5, r5, [r0, #8]
 808208a:	b089      	sub	sp, #36	; 0x24
 808208c:	6043      	str	r3, [r0, #4]
 808208e:	4604      	mov	r4, r0
 8082090:	3010      	adds	r0, #16
 8082092:	f003 fdb2 	bl	8085bfa <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 8082096:	462a      	mov	r2, r5
 8082098:	4629      	mov	r1, r5
 808209a:	6878      	ldr	r0, [r7, #4]
 808209c:	f7ff fefc 	bl	8081e98 <network_ready>
 80820a0:	b918      	cbnz	r0, 80820aa <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
 80820a2:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
 80820a4:	4620      	mov	r0, r4
 80820a6:	b009      	add	sp, #36	; 0x24
 80820a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
 80820aa:	4629      	mov	r1, r5
 80820ac:	4632      	mov	r2, r6
 80820ae:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
 80820b0:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
 80820b4:	f003 fda1 	bl	8085bfa <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 80820b8:	4668      	mov	r0, sp
 80820ba:	a902      	add	r1, sp, #8
        sigext.size = sizeof(sigext);
 80820bc:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 80820c0:	f7ff fc32 	bl	8081928 <cellular_signal>
 80820c4:	b110      	cbz	r0, 80820cc <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
 80820c6:	2301      	movs	r3, #1
 80820c8:	60a3      	str	r3, [r4, #8]
            return sig;
 80820ca:	e7eb      	b.n	80820a4 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
 80820cc:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
 80820ce:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
 80820d0:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
 80820d2:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
 80820d4:	b90b      	cbnz	r3, 80820da <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
 80820d6:	2302      	movs	r3, #2
 80820d8:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
 80820da:	4620      	mov	r0, r4
 80820dc:	a902      	add	r1, sp, #8
 80820de:	f000 f8b8 	bl	8082252 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
 80820e2:	e7df      	b.n	80820a4 <_ZN5spark13CellularClass4RSSIEv+0x30>
 80820e4:	080863a8 	.word	0x080863a8

080820e8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 80820e8:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 80820ea:	2428      	movs	r4, #40	; 0x28
 80820ec:	4b07      	ldr	r3, [pc, #28]	; (808210c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 80820ee:	4622      	mov	r2, r4
 80820f0:	4618      	mov	r0, r3
 80820f2:	2100      	movs	r1, #0
 80820f4:	f003 fd81 	bl	8085bfa <memset>
        cid = -1;
 80820f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80820fc:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80820fe:	2204      	movs	r2, #4
 8082100:	4b03      	ldr	r3, [pc, #12]	; (8082110 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 8082102:	8004      	strh	r4, [r0, #0]
 8082104:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8082106:	4a03      	ldr	r2, [pc, #12]	; (8082114 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 8082108:	601a      	str	r2, [r3, #0]
 808210a:	bd10      	pop	{r4, pc}
 808210c:	200001a4 	.word	0x200001a4
 8082110:	2000019c 	.word	0x2000019c
 8082114:	0808636c 	.word	0x0808636c

08082118 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 8082118:	4770      	bx	lr

0808211a <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 808211a:	7d00      	ldrb	r0, [r0, #20]
 808211c:	4770      	bx	lr

0808211e <_ZNK14CellularSignal7isValidEv>:
    return n;
}
#pragma GCC diagnostic pop

bool CellularSignal::isValid() const
{
 808211e:	4603      	mov	r3, r0
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
 8082120:	7d00      	ldrb	r0, [r0, #20]
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
 8082122:	b170      	cbz	r0, 8082142 <_ZNK14CellularSignal7isValidEv+0x24>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
 8082124:	699a      	ldr	r2, [r3, #24]
 8082126:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 808212a:	d007      	beq.n	808213c <_ZNK14CellularSignal7isValidEv+0x1e>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
 808212c:	2802      	cmp	r0, #2
 808212e:	d007      	beq.n	8082140 <_ZNK14CellularSignal7isValidEv+0x22>
#if (PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION)
            // U-blox GSM radios may not always support quality as it depends on the packet switching mode
            // at the time of network connection, which is not possible to query. For now, we will return "true"
            // for GSM Electrons and will not check if quality is actually supported / valid.
            // Hence, `isValid()` can return "true" for invalid signal value. To add a note in docs.
            (sig_.rat == NET_ACCESS_TECHNOLOGY_GSM || sig_.qual != std::numeric_limits<int32_t>::min()));
 8082130:	6a18      	ldr	r0, [r3, #32]
 8082132:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
 8082136:	bf18      	it	ne
 8082138:	2001      	movne	r0, #1
 808213a:	4770      	bx	lr
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
 808213c:	2000      	movs	r0, #0
 808213e:	4770      	bx	lr
 8082140:	2001      	movs	r0, #1
#else
            sig_.qual != std::numeric_limits<int32_t>::min());
#endif
}
 8082142:	4770      	bx	lr

08082144 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
 8082144:	6803      	ldr	r3, [r0, #0]
 8082146:	6a1b      	ldr	r3, [r3, #32]
 8082148:	4718      	bx	r3

0808214a <_ZN14CellularSignalD0Ev>:
 808214a:	b510      	push	{r4, lr}
 808214c:	4604      	mov	r4, r0
 808214e:	2128      	movs	r1, #40	; 0x28
 8082150:	f002 fd56 	bl	8084c00 <_ZdlPvj>
 8082154:	4620      	mov	r0, r4
 8082156:	bd10      	pop	{r4, pc}

08082158 <_ZNK14CellularSignal11getStrengthEv>:
{
 8082158:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 808215a:	7d03      	ldrb	r3, [r0, #20]
 808215c:	b15b      	cbz	r3, 8082176 <_ZNK14CellularSignal11getStrengthEv+0x1e>
 808215e:	69c0      	ldr	r0, [r0, #28]
 8082160:	2800      	cmp	r0, #0
 8082162:	db08      	blt.n	8082176 <_ZNK14CellularSignal11getStrengthEv+0x1e>
        return (float)sig_.strength / 65535.0f * 100.0f;
 8082164:	f003 fa76 	bl	8085654 <__aeabi_i2f>
 8082168:	4904      	ldr	r1, [pc, #16]	; (808217c <_ZNK14CellularSignal11getStrengthEv+0x24>)
 808216a:	f003 fb7b 	bl	8085864 <__aeabi_fdiv>
 808216e:	4904      	ldr	r1, [pc, #16]	; (8082180 <_ZNK14CellularSignal11getStrengthEv+0x28>)
 8082170:	f003 fac4 	bl	80856fc <__aeabi_fmul>
}
 8082174:	bd08      	pop	{r3, pc}
    return -1.0f;
 8082176:	4803      	ldr	r0, [pc, #12]	; (8082184 <_ZNK14CellularSignal11getStrengthEv+0x2c>)
 8082178:	e7fc      	b.n	8082174 <_ZNK14CellularSignal11getStrengthEv+0x1c>
 808217a:	bf00      	nop
 808217c:	477fff00 	.word	0x477fff00
 8082180:	42c80000 	.word	0x42c80000
 8082184:	bf800000 	.word	0xbf800000

08082188 <_ZNK14CellularSignal16getStrengthValueEv>:
{
 8082188:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 808218a:	7d03      	ldrb	r3, [r0, #20]
 808218c:	b14b      	cbz	r3, 80821a2 <_ZNK14CellularSignal16getStrengthValueEv+0x1a>
 808218e:	6980      	ldr	r0, [r0, #24]
 8082190:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8082194:	d005      	beq.n	80821a2 <_ZNK14CellularSignal16getStrengthValueEv+0x1a>
        return (float)sig_.rssi / 100.0f;
 8082196:	f003 fa5d 	bl	8085654 <__aeabi_i2f>
 808219a:	4903      	ldr	r1, [pc, #12]	; (80821a8 <_ZNK14CellularSignal16getStrengthValueEv+0x20>)
 808219c:	f003 fb62 	bl	8085864 <__aeabi_fdiv>
}
 80821a0:	bd08      	pop	{r3, pc}
    return 0.0f;
 80821a2:	2000      	movs	r0, #0
 80821a4:	e7fc      	b.n	80821a0 <_ZNK14CellularSignal16getStrengthValueEv+0x18>
 80821a6:	bf00      	nop
 80821a8:	42c80000 	.word	0x42c80000

080821ac <_ZNK14CellularSignal10getQualityEv>:
{
 80821ac:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 80821ae:	7d03      	ldrb	r3, [r0, #20]
 80821b0:	b15b      	cbz	r3, 80821ca <_ZNK14CellularSignal10getQualityEv+0x1e>
 80821b2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80821b4:	2800      	cmp	r0, #0
 80821b6:	db08      	blt.n	80821ca <_ZNK14CellularSignal10getQualityEv+0x1e>
        return (float)sig_.quality / 65535.0f * 100.0f;
 80821b8:	f003 fa4c 	bl	8085654 <__aeabi_i2f>
 80821bc:	4904      	ldr	r1, [pc, #16]	; (80821d0 <_ZNK14CellularSignal10getQualityEv+0x24>)
 80821be:	f003 fb51 	bl	8085864 <__aeabi_fdiv>
 80821c2:	4904      	ldr	r1, [pc, #16]	; (80821d4 <_ZNK14CellularSignal10getQualityEv+0x28>)
 80821c4:	f003 fa9a 	bl	80856fc <__aeabi_fmul>
}
 80821c8:	bd08      	pop	{r3, pc}
    return -1.0f;
 80821ca:	4803      	ldr	r0, [pc, #12]	; (80821d8 <_ZNK14CellularSignal10getQualityEv+0x2c>)
 80821cc:	e7fc      	b.n	80821c8 <_ZNK14CellularSignal10getQualityEv+0x1c>
 80821ce:	bf00      	nop
 80821d0:	477fff00 	.word	0x477fff00
 80821d4:	42c80000 	.word	0x42c80000
 80821d8:	bf800000 	.word	0xbf800000

080821dc <_ZNK14CellularSignal15getQualityValueEv>:
{
 80821dc:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 80821de:	7d03      	ldrb	r3, [r0, #20]
 80821e0:	b14b      	cbz	r3, 80821f6 <_ZNK14CellularSignal15getQualityValueEv+0x1a>
 80821e2:	6a00      	ldr	r0, [r0, #32]
 80821e4:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80821e8:	d005      	beq.n	80821f6 <_ZNK14CellularSignal15getQualityValueEv+0x1a>
        return (float)sig_.qual / 100.0f;
 80821ea:	f003 fa33 	bl	8085654 <__aeabi_i2f>
 80821ee:	4903      	ldr	r1, [pc, #12]	; (80821fc <_ZNK14CellularSignal15getQualityValueEv+0x20>)
 80821f0:	f003 fb38 	bl	8085864 <__aeabi_fdiv>
}
 80821f4:	bd08      	pop	{r3, pc}
    return 0.0f;
 80821f6:	2000      	movs	r0, #0
 80821f8:	e7fc      	b.n	80821f4 <_ZNK14CellularSignal15getQualityValueEv+0x18>
 80821fa:	bf00      	nop
 80821fc:	42c80000 	.word	0x42c80000

08082200 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
 8082200:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 8082202:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
 8082204:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
 8082206:	da0a      	bge.n	808221e <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
 8082208:	212d      	movs	r1, #45	; 0x2d
 808220a:	f001 ff2e 	bl	808406a <_ZN5Print5printEc>
 808220e:	4605      	mov	r5, r0
            val = -n;
 8082210:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 8082212:	220a      	movs	r2, #10
 8082214:	4630      	mov	r0, r6
 8082216:	f001 ff41 	bl	808409c <_ZN5Print11printNumberEmh>
    }
}
 808221a:	4428      	add	r0, r5
 808221c:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
 808221e:	4621      	mov	r1, r4
        size_t t = 0;
 8082220:	2500      	movs	r5, #0
 8082222:	e7f6      	b.n	8082212 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

08082224 <_ZNK14CellularSignal7printToER5Print>:
{
 8082224:	b570      	push	{r4, r5, r6, lr}
 8082226:	460c      	mov	r4, r1
 8082228:	4605      	mov	r5, r0
 808222a:	6881      	ldr	r1, [r0, #8]
 808222c:	4620      	mov	r0, r4
 808222e:	f7ff ffe7 	bl	8082200 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print(',');
 8082232:	212c      	movs	r1, #44	; 0x2c
 8082234:	4606      	mov	r6, r0
 8082236:	4620      	mov	r0, r4
 8082238:	f001 ff17 	bl	808406a <_ZN5Print5printEc>
 808223c:	68e9      	ldr	r1, [r5, #12]
 808223e:	4406      	add	r6, r0
size_t Print::print(T n, int base)
 8082240:	4620      	mov	r0, r4
 8082242:	f7ff ffdd 	bl	8082200 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
}
 8082246:	4430      	add	r0, r6
 8082248:	bd70      	pop	{r4, r5, r6, pc}

0808224a <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 808224a:	f1a0 0004 	sub.w	r0, r0, #4
 808224e:	f7ff bfe9 	b.w	8082224 <_ZNK14CellularSignal7printToER5Print>

08082252 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
 8082252:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 8082254:	460d      	mov	r5, r1
 8082256:	f100 0410 	add.w	r4, r0, #16
 808225a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808225c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 808225e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8082262:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8082266:	2001      	movs	r0, #1
 8082268:	bd30      	pop	{r4, r5, pc}

0808226a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808226a:	4770      	bx	lr

0808226c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 808226c:	2000      	movs	r0, #0
 808226e:	4770      	bx	lr

08082270 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8082270:	b510      	push	{r4, lr}
 8082272:	4604      	mov	r4, r0
 8082274:	2110      	movs	r1, #16
 8082276:	f002 fcc3 	bl	8084c00 <_ZdlPvj>
 808227a:	4620      	mov	r0, r4
 808227c:	bd10      	pop	{r4, pc}

0808227e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 808227e:	b508      	push	{r3, lr}
      { delete this; }
 8082280:	f7ff fff6 	bl	8082270 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8082284:	bd08      	pop	{r3, pc}

08082286 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 8082286:	b510      	push	{r4, lr}
      if (_M_manager)
 8082288:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 808228a:	4604      	mov	r4, r0
      if (_M_manager)
 808228c:	b113      	cbz	r3, 8082294 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808228e:	2203      	movs	r2, #3
 8082290:	4601      	mov	r1, r0
 8082292:	4798      	blx	r3
    }
 8082294:	4620      	mov	r0, r4
 8082296:	bd10      	pop	{r4, pc}

08082298 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8082298:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 808229a:	b530      	push	{r4, r5, lr}
        type_(type) {
 808229c:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80822a0:	6002      	str	r2, [r0, #0]
 80822a2:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80822a4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80822a6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80822a8:	680c      	ldr	r4, [r1, #0]
 80822aa:	8085      	strh	r5, [r0, #4]
 80822ac:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80822ae:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80822b0:	bd30      	pop	{r4, r5, pc}

080822b2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80822b2:	b510      	push	{r4, lr}
 80822b4:	4604      	mov	r4, r0
    free((void*)msg_);
 80822b6:	6800      	ldr	r0, [r0, #0]
 80822b8:	f7ff fe3e 	bl	8081f38 <free>
}
 80822bc:	4620      	mov	r0, r4
 80822be:	bd10      	pop	{r4, pc}

080822c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80822c0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80822c2:	68c4      	ldr	r4, [r0, #12]
 80822c4:	b1f4      	cbz	r4, 8082304 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80822c6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80822c8:	2b02      	cmp	r3, #2
 80822ca:	d103      	bne.n	80822d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80822cc:	f104 000c 	add.w	r0, r4, #12
 80822d0:	f7ff ffef 	bl	80822b2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80822d4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80822d6:	b135      	cbz	r5, 80822e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80822d8:	4628      	mov	r0, r5
 80822da:	f7ff ffd4 	bl	8082286 <_ZNSt14_Function_baseD1Ev>
 80822de:	2110      	movs	r1, #16
 80822e0:	4628      	mov	r0, r5
 80822e2:	f002 fc8d 	bl	8084c00 <_ZdlPvj>
 80822e6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80822e8:	b135      	cbz	r5, 80822f8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80822ea:	4628      	mov	r0, r5
 80822ec:	f7ff ffcb 	bl	8082286 <_ZNSt14_Function_baseD1Ev>
 80822f0:	2110      	movs	r1, #16
 80822f2:	4628      	mov	r0, r5
 80822f4:	f002 fc84 	bl	8084c00 <_ZdlPvj>
 80822f8:	4620      	mov	r0, r4
 80822fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80822fe:	2114      	movs	r1, #20
 8082300:	f002 bc7e 	b.w	8084c00 <_ZdlPvj>
 8082304:	bd38      	pop	{r3, r4, r5, pc}

08082306 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8082306:	b510      	push	{r4, lr}
 8082308:	b088      	sub	sp, #32
 808230a:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 808230c:	4668      	mov	r0, sp
 808230e:	f001 ff72 	bl	80841f6 <_ZN6StringC1EPKc>
    return (*fn)(p);
 8082312:	4669      	mov	r1, sp
 8082314:	a804      	add	r0, sp, #16
 8082316:	f001 ffb8 	bl	808428a <_ZN6StringC1ERKS_>
 808231a:	a804      	add	r0, sp, #16
 808231c:	47a0      	blx	r4
 808231e:	4604      	mov	r4, r0
 8082320:	a804      	add	r0, sp, #16
 8082322:	f001 ff1e 	bl	8084162 <_ZN6StringD1Ev>
    String p(param);
 8082326:	4668      	mov	r0, sp
 8082328:	f001 ff1b 	bl	8084162 <_ZN6StringD1Ev>
}
 808232c:	4620      	mov	r0, r4
 808232e:	b008      	add	sp, #32
 8082330:	bd10      	pop	{r4, pc}

08082332 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8082332:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 8082334:	2300      	movs	r3, #0
         size = sizeof(*this);
 8082336:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 8082338:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 808233c:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 808233e:	4669      	mov	r1, sp
 8082340:	461a      	mov	r2, r3
 8082342:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 8082344:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 8082348:	f8ad 4000 	strh.w	r4, [sp]
 808234c:	f7ff fd2c 	bl	8081da8 <spark_function>
}
 8082350:	b004      	add	sp, #16
 8082352:	bd10      	pop	{r4, pc}

08082354 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 8082354:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
 8082356:	230c      	movs	r3, #12
    spark_cloud_disconnect_options opts = {};
 8082358:	2100      	movs	r1, #0
    opts.size = sizeof(opts);
 808235a:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
 808235e:	6803      	ldr	r3, [r0, #0]
    spark_cloud_disconnect_options opts = {};
 8082360:	f8ad 100d 	strh.w	r1, [sp, #13]
    opts.flags = flags_;
 8082364:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
 8082368:	7a03      	ldrb	r3, [r0, #8]
    spark_cloud_disconnect_options opts = {};
 808236a:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.graceful = graceful_;
 808236e:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
 8082372:	6843      	ldr	r3, [r0, #4]
 8082374:	9302      	str	r3, [sp, #8]
    opts.clear_session = clearSession_;
 8082376:	7a43      	ldrb	r3, [r0, #9]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 8082378:	a801      	add	r0, sp, #4
    opts.clear_session = clearSession_;
 808237a:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 808237e:	f7ff fd6b 	bl	8081e58 <spark_cloud_disconnect>
}
 8082382:	b005      	add	sp, #20
 8082384:	f85d fb04 	ldr.w	pc, [sp], #4

08082388 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 8082388:	680b      	ldr	r3, [r1, #0]
 808238a:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 808238c:	b113      	cbz	r3, 8082394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 808238e:	685a      	ldr	r2, [r3, #4]
 8082390:	3201      	adds	r2, #1
 8082392:	605a      	str	r2, [r3, #4]
      }
 8082394:	4770      	bx	lr

08082396 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8082396:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082398:	460e      	mov	r6, r1
 808239a:	4604      	mov	r4, r0
 808239c:	f856 3b04 	ldr.w	r3, [r6], #4
 80823a0:	460d      	mov	r5, r1
 80823a2:	a801      	add	r0, sp, #4
 80823a4:	4631      	mov	r1, r6
 80823a6:	9300      	str	r3, [sp, #0]
 80823a8:	f7ff ffee 	bl	8082388 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80823ac:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80823ae:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80823b0:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80823b2:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80823b4:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80823b6:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80823b8:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80823ba:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80823bc:	f7fe f9fe 	bl	80807bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80823c0:	4630      	mov	r0, r6
 80823c2:	f7fe f9fb 	bl	80807bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80823c6:	4628      	mov	r0, r5
 80823c8:	2108      	movs	r1, #8
 80823ca:	f002 fc19 	bl	8084c00 <_ZdlPvj>
        return p;
    }
 80823ce:	4620      	mov	r0, r4
 80823d0:	b002      	add	sp, #8
 80823d2:	bd70      	pop	{r4, r5, r6, pc}

080823d4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 80823d4:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80823d6:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80823d8:	460b      	mov	r3, r1
 80823da:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80823dc:	c803      	ldmia	r0, {r0, r1}
 80823de:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80823e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80823e6:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80823ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80823ee:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80823f2:	b002      	add	sp, #8
 80823f4:	bd10      	pop	{r4, pc}

080823f6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 80823f6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80823f8:	b510      	push	{r4, lr}
      if (_M_empty())
 80823fa:	b90a      	cbnz	r2, 8082400 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80823fc:	f002 fc06 	bl	8084c0c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082400:	68c3      	ldr	r3, [r0, #12]
    }
 8082402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082406:	4718      	bx	r3

08082408 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082408:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 808240a:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 808240c:	f100 0110 	add.w	r1, r0, #16
 8082410:	f7ff fff1 	bl	80823f6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 8082414:	bd08      	pop	{r3, pc}

08082416 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 8082416:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 8082418:	b510      	push	{r4, lr}
      if (_M_empty())
 808241a:	b90a      	cbnz	r2, 8082420 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 808241c:	f002 fbf6 	bl	8084c0c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082420:	68c3      	ldr	r3, [r0, #12]
    }
 8082422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082426:	4718      	bx	r3

08082428 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082428:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 808242a:	6800      	ldr	r0, [r0, #0]
 808242c:	f100 0110 	add.w	r1, r0, #16
 8082430:	f7ff fff1 	bl	8082416 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 8082434:	bd08      	pop	{r3, pc}
	...

08082438 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 8082438:	b538      	push	{r3, r4, r5, lr}
 808243a:	2300      	movs	r3, #0
 808243c:	4604      	mov	r4, r0
 808243e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082440:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 8082442:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082444:	f7fd fe31 	bl	80800aa <_Znwj>
 8082448:	b128      	cbz	r0, 8082456 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 808244a:	2301      	movs	r3, #1
 808244c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 8082450:	4b02      	ldr	r3, [pc, #8]	; (808245c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8082452:	60c5      	str	r5, [r0, #12]
 8082454:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082456:	6020      	str	r0, [r4, #0]
	}
 8082458:	4620      	mov	r0, r4
 808245a:	bd38      	pop	{r3, r4, r5, pc}
 808245c:	080863e4 	.word	0x080863e4

08082460 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 8082460:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8082462:	2300      	movs	r3, #0
 8082464:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8082466:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8082468:	4604      	mov	r4, r0
 808246a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 808246c:	b12b      	cbz	r3, 808247a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808246e:	2202      	movs	r2, #2
 8082470:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8082472:	68eb      	ldr	r3, [r5, #12]
 8082474:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8082476:	68ab      	ldr	r3, [r5, #8]
 8082478:	60a3      	str	r3, [r4, #8]
    }
 808247a:	4620      	mov	r0, r4
 808247c:	bd38      	pop	{r3, r4, r5, pc}
	...

08082480 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 8082480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082482:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8082484:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 8082486:	4668      	mov	r0, sp
 8082488:	f7ff ff06 	bl	8082298 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 808248c:	f04f 0302 	mov.w	r3, #2
 8082490:	e8d4 2f4f 	ldrexb	r2, [r4]
 8082494:	2a00      	cmp	r2, #0
 8082496:	d103      	bne.n	80824a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 8082498:	e8c4 3f41 	strexb	r1, r3, [r4]
 808249c:	2900      	cmp	r1, #0
 808249e:	d1f7      	bne.n	8082490 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80824a0:	d125      	bne.n	80824ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80824a2:	f104 050c 	add.w	r5, r4, #12
 80824a6:	4669      	mov	r1, sp
 80824a8:	4628      	mov	r0, r5
 80824aa:	f7ff fef5 	bl	8082298 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80824ae:	2301      	movs	r3, #1
 80824b0:	f3bf 8f5b 	dmb	ish
 80824b4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80824b6:	2000      	movs	r0, #0
 80824b8:	f3bf 8f5b 	dmb	ish
 80824bc:	f104 0308 	add.w	r3, r4, #8
 80824c0:	e853 6f00 	ldrex	r6, [r3]
 80824c4:	e843 0200 	strex	r2, r0, [r3]
 80824c8:	2a00      	cmp	r2, #0
 80824ca:	d1f9      	bne.n	80824c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80824cc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80824d0:	b16e      	cbz	r6, 80824ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80824d2:	f7ff fc2b 	bl	8081d2c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80824d6:	b178      	cbz	r0, 80824f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80824d8:	4629      	mov	r1, r5
 80824da:	4630      	mov	r0, r6
 80824dc:	f7ff ff8b 	bl	80823f6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80824e0:	4630      	mov	r0, r6
 80824e2:	f7ff fed0 	bl	8082286 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80824e6:	2110      	movs	r1, #16
 80824e8:	4630      	mov	r0, r6
 80824ea:	f002 fb89 	bl	8084c00 <_ZdlPvj>
        p_->setError(std::move(error));
 80824ee:	4668      	mov	r0, sp
 80824f0:	f7ff fedf 	bl	80822b2 <_ZN8particle5ErrorD1Ev>
    }
 80824f4:	b009      	add	sp, #36	; 0x24
 80824f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80824f8:	4631      	mov	r1, r6
 80824fa:	a802      	add	r0, sp, #8
 80824fc:	f7ff ffb0 	bl	8082460 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 8082500:	68e0      	ldr	r0, [r4, #12]
 8082502:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8082506:	b108      	cbz	r0, 808250c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 8082508:	f003 fbdc 	bl	8085cc4 <strdup>
        type_(type) {
 808250c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808250e:	2010      	movs	r0, #16
 8082510:	f8ad 501c 	strh.w	r5, [sp, #28]
 8082514:	f7fd fdc9 	bl	80800aa <_Znwj>
 8082518:	4605      	mov	r5, r0
 808251a:	b1e8      	cbz	r0, 8082558 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 808251c:	2700      	movs	r7, #0
 808251e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082520:	2018      	movs	r0, #24
 8082522:	f7fd fdc2 	bl	80800aa <_Znwj>
 8082526:	4604      	mov	r4, r0
 8082528:	b188      	cbz	r0, 808254e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 808252a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 808252c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 808252e:	a802      	add	r0, sp, #8
 8082530:	f7ff ff50 	bl	80823d4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082534:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8082536:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8082538:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808253a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 808253c:	9204      	str	r2, [sp, #16]
 808253e:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8082540:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8082542:	60e3      	str	r3, [r4, #12]
 8082544:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 8082548:	9205      	str	r2, [sp, #20]
 808254a:	f7ff fea5 	bl	8082298 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 808254e:	4b08      	ldr	r3, [pc, #32]	; (8082570 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082550:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8082552:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8082554:	4b07      	ldr	r3, [pc, #28]	; (8082574 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 8082556:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 8082558:	a806      	add	r0, sp, #24
 808255a:	f7ff feaa 	bl	80822b2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 808255e:	a802      	add	r0, sp, #8
 8082560:	f7ff fe91 	bl	8082286 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8082564:	2200      	movs	r2, #0
 8082566:	4629      	mov	r1, r5
 8082568:	4803      	ldr	r0, [pc, #12]	; (8082578 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 808256a:	f7ff fbe7 	bl	8081d3c <application_thread_invoke>
 808256e:	e7b7      	b.n	80824e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 8082570:	08082409 	.word	0x08082409
 8082574:	080826a1 	.word	0x080826a1
 8082578:	08081fbf 	.word	0x08081fbf

0808257c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 808257c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8082580:	b08a      	sub	sp, #40	; 0x28
 8082582:	4605      	mov	r5, r0
 8082584:	460c      	mov	r4, r1
 8082586:	4617      	mov	r7, r2
 8082588:	4698      	mov	r8, r3
 808258a:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808258e:	f7ff fc23 	bl	8081dd8 <spark_cloud_flag_connected>
 8082592:	ae07      	add	r6, sp, #28
    if (!connected()) {
 8082594:	4682      	mov	sl, r0
 8082596:	bb38      	cbnz	r0, 80825e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 8082598:	f64f 732e 	movw	r3, #65326	; 0xff2e
 808259c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808259e:	a905      	add	r1, sp, #20
 80825a0:	4630      	mov	r0, r6
 80825a2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80825a6:	f7ff fe77 	bl	8082298 <_ZN8particle5ErrorC1EOS0_>
 80825aa:	2014      	movs	r0, #20
 80825ac:	f7fd fd7d 	bl	80800aa <_Znwj>
 80825b0:	4604      	mov	r4, r0
 80825b2:	b148      	cbz	r0, 80825c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80825b4:	2302      	movs	r3, #2
 80825b6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80825b8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80825ba:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80825be:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80825c0:	4631      	mov	r1, r6
 80825c2:	300c      	adds	r0, #12
 80825c4:	f7ff fe68 	bl	8082298 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80825c8:	4628      	mov	r0, r5
	: __shared_count(__p)
 80825ca:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80825cc:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80825d0:	f7ff ff32 	bl	8082438 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80825d4:	4630      	mov	r0, r6
 80825d6:	f7ff fe6c 	bl	80822b2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80825da:	a805      	add	r0, sp, #20
 80825dc:	f7ff fe69 	bl	80822b2 <_ZN8particle5ErrorD1Ev>
}
 80825e0:	4628      	mov	r0, r5
 80825e2:	b00a      	add	sp, #40	; 0x28
 80825e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80825e8:	230c      	movs	r3, #12
 80825ea:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80825ee:	2014      	movs	r0, #20
 80825f0:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80825f4:	9307      	str	r3, [sp, #28]
 80825f6:	f7fd fd58 	bl	80800aa <_Znwj>
 80825fa:	4601      	mov	r1, r0
 80825fc:	b128      	cbz	r0, 808260a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80825fe:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 8082602:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8082606:	f880 a001 	strb.w	sl, [r0, #1]
 808260a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 808260c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 808260e:	f7ff ff13 	bl	8082438 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 8082612:	4b22      	ldr	r3, [pc, #136]	; (808269c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8082614:	2008      	movs	r0, #8
 8082616:	9308      	str	r3, [sp, #32]
 8082618:	f7fd fd47 	bl	80800aa <_Znwj>
 808261c:	4682      	mov	sl, r0
 808261e:	b128      	cbz	r0, 808262c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082620:	9b03      	ldr	r3, [sp, #12]
 8082622:	a904      	add	r1, sp, #16
 8082624:	f840 3b04 	str.w	r3, [r0], #4
 8082628:	f7ff feae 	bl	8082388 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808262c:	4642      	mov	r2, r8
 808262e:	4639      	mov	r1, r7
 8082630:	4620      	mov	r0, r4
 8082632:	9600      	str	r6, [sp, #0]
 8082634:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 8082638:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808263c:	f7ff fbdc 	bl	8081df8 <spark_send_event>
 8082640:	b9b8      	cbnz	r0, 8082672 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 8082642:	9b03      	ldr	r3, [sp, #12]
 8082644:	785b      	ldrb	r3, [r3, #1]
 8082646:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 808264a:	b993      	cbnz	r3, 8082672 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 808264c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 8082650:	a905      	add	r1, sp, #20
 8082652:	a803      	add	r0, sp, #12
 8082654:	9205      	str	r2, [sp, #20]
 8082656:	f8ad 3018 	strh.w	r3, [sp, #24]
 808265a:	f7ff ff11 	bl	8082480 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808265e:	a805      	add	r0, sp, #20
 8082660:	f7ff fe27 	bl	80822b2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8082664:	a805      	add	r0, sp, #20
 8082666:	9909      	ldr	r1, [sp, #36]	; 0x24
 8082668:	f7ff fe95 	bl	8082396 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 808266c:	a806      	add	r0, sp, #24
 808266e:	f7fe f8a5 	bl	80807bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082672:	9b03      	ldr	r3, [sp, #12]
 8082674:	a904      	add	r1, sp, #16
 8082676:	a806      	add	r0, sp, #24
 8082678:	9305      	str	r3, [sp, #20]
 808267a:	f7ff fe85 	bl	8082388 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 808267e:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8082680:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8082682:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 8082684:	2300      	movs	r3, #0
	_M_pi = __tmp;
 8082686:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 8082688:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 808268a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 808268c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 808268e:	f7fe f895 	bl	80807bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082692:	a804      	add	r0, sp, #16
 8082694:	f7fe f892 	bl	80807bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 8082698:	e7a2      	b.n	80825e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 808269a:	bf00      	nop
 808269c:	08082765 	.word	0x08082765

080826a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80826a0:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80826a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80826a4:	4605      	mov	r5, r0
	  switch (__op)
 80826a6:	d007      	beq.n	80826b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80826a8:	2a03      	cmp	r2, #3
 80826aa:	d018      	beq.n	80826de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80826ac:	2a01      	cmp	r2, #1
 80826ae:	d101      	bne.n	80826b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80826b0:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80826b2:	6003      	str	r3, [r0, #0]
	}
 80826b4:	2000      	movs	r0, #0
 80826b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80826b8:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80826ba:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80826bc:	f7fd fcf5 	bl	80800aa <_Znwj>
 80826c0:	4604      	mov	r4, r0
 80826c2:	b150      	cbz	r0, 80826da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80826c4:	4631      	mov	r1, r6
 80826c6:	f7ff fecb 	bl	8082460 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80826ca:	6930      	ldr	r0, [r6, #16]
 80826cc:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80826d0:	b108      	cbz	r0, 80826d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80826d2:	f003 faf7 	bl	8085cc4 <strdup>
        type_(type) {
 80826d6:	6120      	str	r0, [r4, #16]
 80826d8:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80826da:	602c      	str	r4, [r5, #0]
	}
 80826dc:	e7ea      	b.n	80826b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80826de:	6804      	ldr	r4, [r0, #0]
 80826e0:	2c00      	cmp	r4, #0
 80826e2:	d0e7      	beq.n	80826b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80826e4:	f104 0010 	add.w	r0, r4, #16
 80826e8:	f7ff fde3 	bl	80822b2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80826ec:	4620      	mov	r0, r4
 80826ee:	f7ff fdca 	bl	8082286 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80826f2:	2118      	movs	r1, #24
 80826f4:	4620      	mov	r0, r4
 80826f6:	f002 fa83 	bl	8084c00 <_ZdlPvj>
 80826fa:	e7db      	b.n	80826b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080826fc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80826fc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80826fe:	2300      	movs	r3, #0
 8082700:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8082702:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8082704:	4604      	mov	r4, r0
 8082706:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8082708:	b12b      	cbz	r3, 8082716 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808270a:	2202      	movs	r2, #2
 808270c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808270e:	68eb      	ldr	r3, [r5, #12]
 8082710:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8082712:	68ab      	ldr	r3, [r5, #8]
 8082714:	60a3      	str	r3, [r4, #8]
    }
 8082716:	4620      	mov	r0, r4
 8082718:	bd38      	pop	{r3, r4, r5, pc}

0808271a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 808271a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808271c:	b570      	push	{r4, r5, r6, lr}
 808271e:	4604      	mov	r4, r0
	  switch (__op)
 8082720:	d007      	beq.n	8082732 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 8082722:	2a03      	cmp	r2, #3
 8082724:	d012      	beq.n	808274c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 8082726:	2a01      	cmp	r2, #1
 8082728:	d101      	bne.n	808272e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 808272a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808272c:	6003      	str	r3, [r0, #0]
	}
 808272e:	2000      	movs	r0, #0
 8082730:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8082732:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 8082734:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8082736:	f7fd fcb8 	bl	80800aa <_Znwj>
 808273a:	4605      	mov	r5, r0
 808273c:	b120      	cbz	r0, 8082748 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 808273e:	4631      	mov	r1, r6
 8082740:	f7ff ffdc 	bl	80826fc <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8082744:	7c33      	ldrb	r3, [r6, #16]
 8082746:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 8082748:	6025      	str	r5, [r4, #0]
	}
 808274a:	e7f0      	b.n	808272e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 808274c:	6804      	ldr	r4, [r0, #0]
 808274e:	2c00      	cmp	r4, #0
 8082750:	d0ed      	beq.n	808272e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 8082752:	4620      	mov	r0, r4
 8082754:	f7ff fd97 	bl	8082286 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8082758:	2114      	movs	r1, #20
 808275a:	4620      	mov	r0, r4
 808275c:	f002 fa50 	bl	8084c00 <_ZdlPvj>
 8082760:	e7e5      	b.n	808272e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

08082764 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8082764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082766:	4604      	mov	r4, r0
 8082768:	b089      	sub	sp, #36	; 0x24
 808276a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 808276c:	a801      	add	r0, sp, #4
 808276e:	4611      	mov	r1, r2
 8082770:	f7ff fe11 	bl	8082396 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8082774:	b1a4      	cbz	r4, 80827a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 8082776:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8082778:	b11d      	cbz	r5, 8082782 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 808277a:	4628      	mov	r0, r5
 808277c:	f003 faa2 	bl	8085cc4 <strdup>
 8082780:	4605      	mov	r5, r0
 8082782:	a801      	add	r0, sp, #4
 8082784:	a903      	add	r1, sp, #12
        type_(type) {
 8082786:	9503      	str	r5, [sp, #12]
 8082788:	f8ad 4010 	strh.w	r4, [sp, #16]
 808278c:	f7ff fe78 	bl	8082480 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8082790:	a803      	add	r0, sp, #12
 8082792:	f7ff fd8e 	bl	80822b2 <_ZN8particle5ErrorD1Ev>
 8082796:	a802      	add	r0, sp, #8
 8082798:	f7fe f810 	bl	80807bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 808279c:	b009      	add	sp, #36	; 0x24
 808279e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80827a0:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80827a2:	9d01      	ldr	r5, [sp, #4]
 80827a4:	e8d5 2f4f 	ldrexb	r2, [r5]
 80827a8:	2a00      	cmp	r2, #0
 80827aa:	d103      	bne.n	80827b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80827ac:	e8c5 3f41 	strexb	r1, r3, [r5]
 80827b0:	2900      	cmp	r1, #0
 80827b2:	d1f7      	bne.n	80827a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80827b4:	d1ef      	bne.n	8082796 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80827b6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80827b8:	f3bf 8f5b 	dmb	ish
 80827bc:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80827be:	f3bf 8f5b 	dmb	ish
 80827c2:	1d2b      	adds	r3, r5, #4
 80827c4:	e853 6f00 	ldrex	r6, [r3]
 80827c8:	e843 4200 	strex	r2, r4, [r3]
 80827cc:	2a00      	cmp	r2, #0
 80827ce:	d1f9      	bne.n	80827c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80827d0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80827d4:	2e00      	cmp	r6, #0
 80827d6:	d0de      	beq.n	8082796 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80827d8:	4620      	mov	r0, r4
 80827da:	f7ff faa7 	bl	8081d2c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80827de:	4607      	mov	r7, r0
 80827e0:	b160      	cbz	r0, 80827fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80827e2:	4630      	mov	r0, r6
 80827e4:	f105 010c 	add.w	r1, r5, #12
 80827e8:	f7ff fe15 	bl	8082416 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80827ec:	4630      	mov	r0, r6
 80827ee:	f7ff fd4a 	bl	8082286 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80827f2:	2110      	movs	r1, #16
 80827f4:	4630      	mov	r0, r6
 80827f6:	f002 fa03 	bl	8084c00 <_ZdlPvj>
 80827fa:	e7cc      	b.n	8082796 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80827fc:	4631      	mov	r1, r6
 80827fe:	a803      	add	r0, sp, #12
 8082800:	f7ff ff7c 	bl	80826fc <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8082804:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8082806:	2010      	movs	r0, #16
 8082808:	f88d 301c 	strb.w	r3, [sp, #28]
 808280c:	f7fd fc4d 	bl	80800aa <_Znwj>
 8082810:	4605      	mov	r5, r0
 8082812:	b1d0      	cbz	r0, 808284a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 8082814:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082816:	2014      	movs	r0, #20
 8082818:	f7fd fc47 	bl	80800aa <_Znwj>
 808281c:	4604      	mov	r4, r0
 808281e:	b178      	cbz	r0, 8082840 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 8082820:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8082822:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8082824:	a803      	add	r0, sp, #12
 8082826:	f7ff fdd5 	bl	80823d4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808282a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 808282c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808282e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082830:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 8082832:	9205      	str	r2, [sp, #20]
 8082834:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8082836:	60e3      	str	r3, [r4, #12]
 8082838:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 808283c:	9206      	str	r2, [sp, #24]
 808283e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 8082840:	4b06      	ldr	r3, [pc, #24]	; (808285c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082842:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8082844:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8082846:	4b06      	ldr	r3, [pc, #24]	; (8082860 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 8082848:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 808284a:	a803      	add	r0, sp, #12
 808284c:	f7ff fd1b 	bl	8082286 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8082850:	2200      	movs	r2, #0
 8082852:	4629      	mov	r1, r5
 8082854:	4803      	ldr	r0, [pc, #12]	; (8082864 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 8082856:	f7ff fa71 	bl	8081d3c <application_thread_invoke>
 808285a:	e7c7      	b.n	80827ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 808285c:	08082429 	.word	0x08082429
 8082860:	0808271b 	.word	0x0808271b
 8082864:	08081fbf 	.word	0x08081fbf

08082868 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
 8082868:	6800      	ldr	r0, [r0, #0]
 808286a:	f000 b917 	b.w	8082a9c <_ZN7TwoWire4lockEv>

0808286e <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 808286e:	b510      	push	{r4, lr}
 8082870:	4604      	mov	r4, r0
      lock_(_lock) {
 8082872:	6001      	str	r1, [r0, #0]
 8082874:	7102      	strb	r2, [r0, #4]
    if (lock_) {
 8082876:	b10a      	cbz	r2, 808287c <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 8082878:	f7ff fff6 	bl	8082868 <_ZN9FuelGauge4lockEv>
}
 808287c:	4620      	mov	r0, r4
 808287e:	bd10      	pop	{r4, pc}

08082880 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
 8082880:	b538      	push	{r3, r4, r5, lr}
 8082882:	4604      	mov	r4, r0
 8082884:	460d      	mov	r5, r1
            return &Wire3;
 8082886:	f002 f989 	bl	8084b9c <_Z20__fetch_global_Wire3v>
        : FuelGauge(*fuelWireInstance(), _lock)
 808288a:	462a      	mov	r2, r5
            return &Wire3;
 808288c:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
 808288e:	4620      	mov	r0, r4
 8082890:	f7ff ffed 	bl	808286e <_ZN9FuelGaugeC1ER7TwoWireb>
}
 8082894:	4620      	mov	r0, r4
 8082896:	bd38      	pop	{r3, r4, r5, pc}

08082898 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
 8082898:	6800      	ldr	r0, [r0, #0]
 808289a:	f000 b908 	b.w	8082aae <_ZN7TwoWire6unlockEv>

0808289e <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 808289e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80828a2:	4604      	mov	r4, r0
 80828a4:	460d      	mov	r5, r1
 80828a6:	4617      	mov	r7, r2
 80828a8:	461e      	mov	r6, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
 80828aa:	f7ff ffdd 	bl	8082868 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80828ae:	2336      	movs	r3, #54	; 0x36
 80828b0:	f88d 3000 	strb.w	r3, [sp]
 80828b4:	2300      	movs	r3, #0
 80828b6:	f04f 0801 	mov.w	r8, #1
 80828ba:	9301      	str	r3, [sp, #4]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
 80828bc:	230a      	movs	r3, #10
    i2c_.beginTransmission(config);
 80828be:	4669      	mov	r1, sp
 80828c0:	6820      	ldr	r0, [r4, #0]
 80828c2:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80828c4:	f88d 8008 	strb.w	r8, [sp, #8]
 80828c8:	f000 f8c9 	bl	8082a5e <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
 80828cc:	6820      	ldr	r0, [r4, #0]
 80828ce:	4629      	mov	r1, r5
 80828d0:	6803      	ldr	r3, [r0, #0]
 80828d2:	689b      	ldr	r3, [r3, #8]
 80828d4:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
 80828d6:	4641      	mov	r1, r8
 80828d8:	6820      	ldr	r0, [r4, #0]
 80828da:	f000 f8d8 	bl	8082a8e <_ZN7TwoWire15endTransmissionEh>
 80828de:	4605      	mov	r5, r0
 80828e0:	b140      	cbz	r0, 80828f4 <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
 80828e2:	f06f 059f 	mvn.w	r5, #159	; 0x9f

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 80828e6:	4620      	mov	r0, r4
 80828e8:	f7ff ffd6 	bl	8082898 <_ZN9FuelGauge6unlockEv>
}
 80828ec:	4628      	mov	r0, r5
 80828ee:	b004      	add	sp, #16
 80828f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
 80828f4:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
 80828f6:	4669      	mov	r1, sp
 80828f8:	6820      	ldr	r0, [r4, #0]
 80828fa:	9301      	str	r3, [sp, #4]
 80828fc:	f000 f87c 	bl	80829f8 <_ZN7TwoWire11requestFromERK16WireTransmission>
 8082900:	2802      	cmp	r0, #2
 8082902:	d1ee      	bne.n	80828e2 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
 8082904:	6820      	ldr	r0, [r4, #0]
 8082906:	6803      	ldr	r3, [r0, #0]
 8082908:	695b      	ldr	r3, [r3, #20]
 808290a:	4798      	blx	r3
 808290c:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
 808290e:	6820      	ldr	r0, [r4, #0]
 8082910:	6803      	ldr	r3, [r0, #0]
 8082912:	695b      	ldr	r3, [r3, #20]
 8082914:	4798      	blx	r3
 8082916:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
 8082918:	e7e5      	b.n	80828e6 <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>
	...

0808291c <_ZN9FuelGauge6getSoCEv>:
    byte MSB = 0;
 808291c:	2300      	movs	r3, #0
float FuelGauge::getSoC() {
 808291e:	b513      	push	{r0, r1, r4, lr}
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 8082920:	2104      	movs	r1, #4
    byte MSB = 0;
 8082922:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
 8082926:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 808292a:	f10d 0206 	add.w	r2, sp, #6
 808292e:	f10d 0307 	add.w	r3, sp, #7
 8082932:	f7ff ffb4 	bl	808289e <_ZN9FuelGauge12readRegisterEhRhS0_>
 8082936:	b9a0      	cbnz	r0, 8082962 <_ZN9FuelGauge6getSoCEv+0x46>
        float decimal = LSB / 256.0;
 8082938:	f89d 0007 	ldrb.w	r0, [sp, #7]
 808293c:	f002 fabc 	bl	8084eb8 <__aeabi_i2d>
 8082940:	2200      	movs	r2, #0
 8082942:	4b09      	ldr	r3, [pc, #36]	; (8082968 <_ZN9FuelGauge6getSoCEv+0x4c>)
 8082944:	f002 fb22 	bl	8084f8c <__aeabi_dmul>
 8082948:	f002 fd7a 	bl	8085440 <__aeabi_d2f>
 808294c:	4604      	mov	r4, r0
        return MSB + decimal;
 808294e:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8082952:	f002 fe7f 	bl	8085654 <__aeabi_i2f>
 8082956:	4601      	mov	r1, r0
 8082958:	4620      	mov	r0, r4
 808295a:	f002 fdc7 	bl	80854ec <__addsf3>
}
 808295e:	b002      	add	sp, #8
 8082960:	bd10      	pop	{r4, pc}
        return -1.0f;
 8082962:	4802      	ldr	r0, [pc, #8]	; (808296c <_ZN9FuelGauge6getSoCEv+0x50>)
 8082964:	e7fb      	b.n	808295e <_ZN9FuelGauge6getSoCEv+0x42>
 8082966:	bf00      	nop
 8082968:	3f700000 	.word	0x3f700000
 808296c:	bf800000 	.word	0xbf800000

08082970 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 8082970:	4770      	bx	lr

08082972 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8082972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082974:	4606      	mov	r6, r0
 8082976:	4615      	mov	r5, r2
 8082978:	460c      	mov	r4, r1
 808297a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808297c:	42bc      	cmp	r4, r7
 808297e:	d006      	beq.n	808298e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8082980:	6833      	ldr	r3, [r6, #0]
 8082982:	4630      	mov	r0, r6
 8082984:	689b      	ldr	r3, [r3, #8]
 8082986:	f814 1b01 	ldrb.w	r1, [r4], #1
 808298a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 808298c:	e7f6      	b.n	808297c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 808298e:	4628      	mov	r0, r5
 8082990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082992 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 8082992:	2200      	movs	r2, #0
 8082994:	7c00      	ldrb	r0, [r0, #16]
 8082996:	f7ff b887 	b.w	8081aa8 <hal_i2c_write>

0808299a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 808299a:	2100      	movs	r1, #0
 808299c:	7c00      	ldrb	r0, [r0, #16]
 808299e:	f7ff b88b 	b.w	8081ab8 <hal_i2c_available>

080829a2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80829a2:	2100      	movs	r1, #0
 80829a4:	7c00      	ldrb	r0, [r0, #16]
 80829a6:	f7ff b88f 	b.w	8081ac8 <hal_i2c_read>

080829aa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80829aa:	2100      	movs	r1, #0
 80829ac:	7c00      	ldrb	r0, [r0, #16]
 80829ae:	f7ff b893 	b.w	8081ad8 <hal_i2c_peek>

080829b2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80829b2:	2100      	movs	r1, #0
 80829b4:	7c00      	ldrb	r0, [r0, #16]
 80829b6:	f7ff b897 	b.w	8081ae8 <hal_i2c_flush>

080829ba <_ZN7TwoWireD0Ev>:
 80829ba:	b510      	push	{r4, lr}
 80829bc:	4604      	mov	r4, r0
 80829be:	2114      	movs	r1, #20
 80829c0:	f002 f91e 	bl	8084c00 <_ZdlPvj>
 80829c4:	4620      	mov	r0, r4
 80829c6:	bd10      	pop	{r4, pc}

080829c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80829c8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80829ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80829ce:	4604      	mov	r4, r0
 80829d0:	4608      	mov	r0, r1
 80829d2:	2100      	movs	r1, #0
 80829d4:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80829d8:	4b03      	ldr	r3, [pc, #12]	; (80829e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80829da:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80829dc:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80829de:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80829e0:	f7ff f892 	bl	8081b08 <hal_i2c_init>
}
 80829e4:	4620      	mov	r0, r4
 80829e6:	bd10      	pop	{r4, pc}
 80829e8:	08086400 	.word	0x08086400

080829ec <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80829ec:	2300      	movs	r3, #0
 80829ee:	7c00      	ldrb	r0, [r0, #16]
 80829f0:	461a      	mov	r2, r3
 80829f2:	4619      	mov	r1, r3
 80829f4:	f7ff b840 	b.w	8081a78 <hal_i2c_begin>

080829f8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80829f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 80829fa:	2200      	movs	r2, #0
 80829fc:	2314      	movs	r3, #20
 80829fe:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8082a02:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 8082a06:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 8082a08:	7c00      	ldrb	r0, [r0, #16]
 8082a0a:	f88d 3008 	strb.w	r3, [sp, #8]
 8082a0e:	684b      	ldr	r3, [r1, #4]
 8082a10:	9303      	str	r3, [sp, #12]
 8082a12:	68cb      	ldr	r3, [r1, #12]
 8082a14:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 8082a16:	7a0b      	ldrb	r3, [r1, #8]
 8082a18:	a901      	add	r1, sp, #4
 8082a1a:	9305      	str	r3, [sp, #20]
 8082a1c:	f7ff f88c 	bl	8081b38 <hal_i2c_request_ex>
}
 8082a20:	b007      	add	sp, #28
 8082a22:	f85d fb04 	ldr.w	pc, [sp], #4

08082a26 <_ZN7TwoWire11requestFromEhjh>:
{
 8082a26:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 8082a28:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8082a2a:	f88d 1000 	strb.w	r1, [sp]
 8082a2e:	f04f 0164 	mov.w	r1, #100	; 0x64
 8082a32:	bf18      	it	ne
 8082a34:	2301      	movne	r3, #1
 8082a36:	9103      	str	r1, [sp, #12]
 8082a38:	4669      	mov	r1, sp
    size_ = size;
 8082a3a:	9201      	str	r2, [sp, #4]
 8082a3c:	f88d 3008 	strb.w	r3, [sp, #8]
 8082a40:	f7ff ffda 	bl	80829f8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 8082a44:	b005      	add	sp, #20
 8082a46:	f85d fb04 	ldr.w	pc, [sp], #4

08082a4a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 8082a4a:	2301      	movs	r3, #1
 8082a4c:	f7ff bfeb 	b.w	8082a26 <_ZN7TwoWire11requestFromEhjh>

08082a50 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 8082a50:	2200      	movs	r2, #0
 8082a52:	7c00      	ldrb	r0, [r0, #16]
 8082a54:	f7ff b818 	b.w	8081a88 <hal_i2c_begin_transmission>

08082a58 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 8082a58:	b2c9      	uxtb	r1, r1
 8082a5a:	f7ff bff9 	b.w	8082a50 <_ZN7TwoWire17beginTransmissionEh>

08082a5e <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
 8082a5e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 8082a60:	2200      	movs	r2, #0
 8082a62:	460b      	mov	r3, r1
 8082a64:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8082a68:	2214      	movs	r2, #20
 8082a6a:	f8ad 2004 	strh.w	r2, [sp, #4]
    };
 8082a6e:	685a      	ldr	r2, [r3, #4]
      .address = address_,
 8082a70:	7809      	ldrb	r1, [r1, #0]
    };
 8082a72:	9203      	str	r2, [sp, #12]
 8082a74:	68da      	ldr	r2, [r3, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 8082a76:	7a1b      	ldrb	r3, [r3, #8]
    };
 8082a78:	9204      	str	r2, [sp, #16]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
 8082a7a:	7c00      	ldrb	r0, [r0, #16]
 8082a7c:	aa01      	add	r2, sp, #4
 8082a7e:	f88d 1008 	strb.w	r1, [sp, #8]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 8082a82:	9305      	str	r3, [sp, #20]
 8082a84:	f7ff f800 	bl	8081a88 <hal_i2c_begin_transmission>
}
 8082a88:	b007      	add	sp, #28
 8082a8a:	f85d fb04 	ldr.w	pc, [sp], #4

08082a8e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 8082a8e:	2200      	movs	r2, #0
 8082a90:	7c00      	ldrb	r0, [r0, #16]
 8082a92:	f7ff b801 	b.w	8081a98 <hal_i2c_end_transmission>

08082a96 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 8082a96:	2101      	movs	r1, #1
 8082a98:	f7ff bff9 	b.w	8082a8e <_ZN7TwoWire15endTransmissionEh>

08082a9c <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 8082a9c:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
 8082a9e:	2100      	movs	r1, #0
 8082aa0:	7c00      	ldrb	r0, [r0, #16]
 8082aa2:	f7ff f839 	bl	8081b18 <hal_i2c_lock>
}
 8082aa6:	fab0 f080 	clz	r0, r0
 8082aaa:	0940      	lsrs	r0, r0, #5
 8082aac:	bd08      	pop	{r3, pc}

08082aae <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 8082aae:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
 8082ab0:	2100      	movs	r1, #0
 8082ab2:	7c00      	ldrb	r0, [r0, #16]
 8082ab4:	f7ff f838 	bl	8081b28 <hal_i2c_unlock>
}
 8082ab8:	fab0 f080 	clz	r0, r0
 8082abc:	0940      	lsrs	r0, r0, #5
 8082abe:	bd08      	pop	{r3, pc}

08082ac0 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 8082ac0:	4700      	bx	r0
	...

08082ac4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 8082ac4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 8082ac8:	2400      	movs	r4, #0
{
 8082aca:	461d      	mov	r5, r3
 8082acc:	460f      	mov	r7, r1
 8082ace:	4690      	mov	r8, r2
 8082ad0:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
 8082ad2:	f7fe ffc1 	bl	8081a58 <HAL_Interrupts_Detach>
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8082ad6:	2304      	movs	r3, #4
  if (priority >= 0) {
 8082ad8:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8082ada:	f88d 300c 	strb.w	r3, [sp, #12]
    extra.IRQChannelSubPriority = subpriority;
 8082ade:	bfa8      	it	ge
 8082ae0:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    HAL_InterruptExtraConfiguration extra = {0};
 8082ae4:	f8ad 400d 	strh.w	r4, [sp, #13]
 8082ae8:	f88d 400f 	strb.w	r4, [sp, #15]
    return &extra;
 8082aec:	bfa4      	itt	ge
 8082aee:	ac03      	addge	r4, sp, #12
    extra.IRQChannelSubPriority = subpriority;
 8082af0:	f88d 300e 	strbge.w	r3, [sp, #14]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8082af4:	463a      	mov	r2, r7
 8082af6:	4643      	mov	r3, r8
 8082af8:	4630      	mov	r0, r6
 8082afa:	4906      	ldr	r1, [pc, #24]	; (8082b14 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
 8082afc:	9400      	str	r4, [sp, #0]
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 8082afe:	bfa8      	it	ge
 8082b00:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8082b04:	f7fe ffa0 	bl	8081a48 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 8082b08:	fab0 f080 	clz	r0, r0
 8082b0c:	0940      	lsrs	r0, r0, #5
 8082b0e:	b004      	add	sp, #16
 8082b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082b14:	08082ac1 	.word	0x08082ac1

08082b18 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8082b18:	4770      	bx	lr

08082b1a <_ZN9IPAddressD0Ev>:
 8082b1a:	b510      	push	{r4, lr}
 8082b1c:	4604      	mov	r4, r0
 8082b1e:	2108      	movs	r1, #8
 8082b20:	f002 f86e 	bl	8084c00 <_ZdlPvj>
 8082b24:	4620      	mov	r0, r4
 8082b26:	bd10      	pop	{r4, pc}

08082b28 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8082b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082b2a:	460e      	mov	r6, r1
 8082b2c:	2400      	movs	r4, #0
 8082b2e:	f100 0708 	add.w	r7, r0, #8
 8082b32:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 8082b34:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 8082b38:	220a      	movs	r2, #10
 8082b3a:	4630      	mov	r0, r6
 8082b3c:	f001 faae 	bl	808409c <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8082b40:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8082b42:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 8082b44:	d101      	bne.n	8082b4a <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 8082b46:	4620      	mov	r0, r4
 8082b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 8082b4a:	2c00      	cmp	r4, #0
 8082b4c:	d0f2      	beq.n	8082b34 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8082b4e:	212e      	movs	r1, #46	; 0x2e
 8082b50:	4630      	mov	r0, r6
 8082b52:	f001 fa8a 	bl	808406a <_ZN5Print5printEc>
 8082b56:	4404      	add	r4, r0
 8082b58:	e7ec      	b.n	8082b34 <_ZNK9IPAddress7printToER5Print+0xc>
	...

08082b5c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 8082b5c:	4a02      	ldr	r2, [pc, #8]	; (8082b68 <_ZN9IPAddressC1Ev+0xc>)
 8082b5e:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8082b60:	2200      	movs	r2, #0
 8082b62:	6042      	str	r2, [r0, #4]
}
 8082b64:	4770      	bx	lr
 8082b66:	bf00      	nop
 8082b68:	08086428 	.word	0x08086428

08082b6c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 8082b6c:	4a02      	ldr	r2, [pc, #8]	; (8082b78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8082b6e:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 8082b70:	680a      	ldr	r2, [r1, #0]
 8082b72:	6042      	str	r2, [r0, #4]
}
 8082b74:	4770      	bx	lr
 8082b76:	bf00      	nop
 8082b78:	08086428 	.word	0x08086428

08082b7c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 8082b7c:	4a01      	ldr	r2, [pc, #4]	; (8082b84 <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 8082b7e:	e9c0 2100 	strd	r2, r1, [r0]
}
 8082b82:	4770      	bx	lr
 8082b84:	08086428 	.word	0x08086428

08082b88 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 8082b88:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8082b8a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8082b8e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8082b92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8082b96:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 8082b9a:	6044      	str	r4, [r0, #4]
}
 8082b9c:	bd10      	pop	{r4, pc}
	...

08082ba0 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8082ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082ba2:	4d04      	ldr	r5, [pc, #16]	; (8082bb4 <_ZN9IPAddressC1Ehhhh+0x14>)
 8082ba4:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8082ba6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8082baa:	9500      	str	r5, [sp, #0]
 8082bac:	f7ff ffec 	bl	8082b88 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8082bb0:	b003      	add	sp, #12
 8082bb2:	bd30      	pop	{r4, r5, pc}
 8082bb4:	08086428 	.word	0x08086428

08082bb8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 8082bb8:	2201      	movs	r2, #1
 8082bba:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 8082bbe:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8082bc2:	4618      	mov	r0, r3
 8082bc4:	2901      	cmp	r1, #1
 8082bc6:	d108      	bne.n	8082bda <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 8082bc8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8082bcc:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 8082bd0:	3a01      	subs	r2, #1
 8082bd2:	f103 0310 	add.w	r3, r3, #16
 8082bd6:	d1f2      	bne.n	8082bbe <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 8082bd8:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 8082bda:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 8082bdc:	bf04      	itt	eq
 8082bde:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 8082be2:	1852      	addeq	r2, r2, r1
 8082be4:	e7f4      	b.n	8082bd0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

08082be6 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 8082be6:	b40e      	push	{r1, r2, r3}
 8082be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082bec:	b087      	sub	sp, #28
 8082bee:	af00      	add	r7, sp, #0
 8082bf0:	f107 0534 	add.w	r5, r7, #52	; 0x34
 8082bf4:	f855 8b04 	ldr.w	r8, [r5], #4
 8082bf8:	4604      	mov	r4, r0
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 8082bfa:	462b      	mov	r3, r5
 8082bfc:	4642      	mov	r2, r8
 8082bfe:	2110      	movs	r1, #16
 8082c00:	f107 0008 	add.w	r0, r7, #8
    va_start(args, fmt);
 8082c04:	607d      	str	r5, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 8082c06:	f7ff f9b7 	bl	8081f78 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 8082c0a:	280f      	cmp	r0, #15
 8082c0c:	d91b      	bls.n	8082c46 <_ZN5spark10JSONWriter6printfEPKcz+0x60>
        char buf[n + 1]; // Use larger buffer
 8082c0e:	f100 0308 	add.w	r3, r0, #8
 8082c12:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 8082c16:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 8082c18:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 8082c1c:	4642      	mov	r2, r8
 8082c1e:	1c41      	adds	r1, r0, #1
 8082c20:	462b      	mov	r3, r5
 8082c22:	4668      	mov	r0, sp
        va_start(args, fmt);
 8082c24:	607d      	str	r5, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 8082c26:	f7ff f9a7 	bl	8081f78 <vsnprintf>
        if (n > 0) {
 8082c2a:	1e02      	subs	r2, r0, #0
 8082c2c:	dd04      	ble.n	8082c38 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
 8082c2e:	6823      	ldr	r3, [r4, #0]
 8082c30:	4669      	mov	r1, sp
 8082c32:	4620      	mov	r0, r4
 8082c34:	689b      	ldr	r3, [r3, #8]
 8082c36:	4798      	blx	r3
 8082c38:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 8082c3a:	371c      	adds	r7, #28
 8082c3c:	46bd      	mov	sp, r7
 8082c3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8082c42:	b003      	add	sp, #12
 8082c44:	4770      	bx	lr
    } else if (n > 0) {
 8082c46:	2800      	cmp	r0, #0
 8082c48:	d0f7      	beq.n	8082c3a <_ZN5spark10JSONWriter6printfEPKcz+0x54>
        write(buf, n);
 8082c4a:	6823      	ldr	r3, [r4, #0]
 8082c4c:	4602      	mov	r2, r0
 8082c4e:	689b      	ldr	r3, [r3, #8]
 8082c50:	4620      	mov	r0, r4
 8082c52:	f107 0108 	add.w	r1, r7, #8
 8082c56:	4798      	blx	r3
}
 8082c58:	e7ef      	b.n	8082c3a <_ZN5spark10JSONWriter6printfEPKcz+0x54>

08082c5a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
 8082c5a:	b510      	push	{r4, lr}
 8082c5c:	4604      	mov	r4, r0
          _M_dispose();
 8082c5e:	6803      	ldr	r3, [r0, #0]
 8082c60:	689b      	ldr	r3, [r3, #8]
 8082c62:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8082c64:	68a3      	ldr	r3, [r4, #8]
 8082c66:	3b01      	subs	r3, #1
 8082c68:	60a3      	str	r3, [r4, #8]
 8082c6a:	b92b      	cbnz	r3, 8082c78 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
 8082c6c:	6823      	ldr	r3, [r4, #0]
 8082c6e:	4620      	mov	r0, r4
    }
 8082c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 8082c74:	68db      	ldr	r3, [r3, #12]
 8082c76:	4718      	bx	r3
    }
 8082c78:	bd10      	pop	{r4, pc}

08082c7a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 8082c7a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 8082c7c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 8082c7e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 8082c82:	2201      	movs	r2, #1
 8082c84:	689b      	ldr	r3, [r3, #8]
 8082c86:	f10d 0107 	add.w	r1, sp, #7
 8082c8a:	4798      	blx	r3
}
 8082c8c:	b003      	add	sp, #12
 8082c8e:	f85d fb04 	ldr.w	pc, [sp], #4

08082c92 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
 8082c92:	b538      	push	{r3, r4, r5, lr}
 8082c94:	680b      	ldr	r3, [r1, #0]
 8082c96:	4604      	mov	r4, r0
 8082c98:	6003      	str	r3, [r0, #0]
 8082c9a:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 8082c9c:	6843      	ldr	r3, [r0, #4]
 8082c9e:	429d      	cmp	r5, r3
 8082ca0:	d00c      	beq.n	8082cbc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
 8082ca2:	b115      	cbz	r5, 8082caa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
 8082ca4:	686b      	ldr	r3, [r5, #4]
 8082ca6:	3301      	adds	r3, #1
 8082ca8:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 8082caa:	6860      	ldr	r0, [r4, #4]
 8082cac:	b128      	cbz	r0, 8082cba <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
 8082cae:	6843      	ldr	r3, [r0, #4]
 8082cb0:	3b01      	subs	r3, #1
 8082cb2:	6043      	str	r3, [r0, #4]
 8082cb4:	b90b      	cbnz	r3, 8082cba <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
 8082cb6:	f7ff ffd0 	bl	8082c5a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
 8082cba:	6065      	str	r5, [r4, #4]
    class __shared_ptr
 8082cbc:	4620      	mov	r0, r4
 8082cbe:	bd38      	pop	{r3, r4, r5, pc}

08082cc0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 8082cc0:	460b      	mov	r3, r1
 8082cc2:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 8082cc4:	2200      	movs	r2, #0
 8082cc6:	b510      	push	{r4, lr}
 8082cc8:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 8082cca:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 8082cce:	6083      	str	r3, [r0, #8]
    if (t) {
 8082cd0:	b90b      	cbnz	r3, 8082cd6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 8082cd2:	4620      	mov	r0, r4
 8082cd4:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 8082cd6:	f7ff ffdc 	bl	8082c92 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
 8082cda:	e7fa      	b.n	8082cd2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

08082cdc <_ZNK5spark9JSONValue4typeEv>:
spark::JSONType spark::JSONValue::type() const {
 8082cdc:	4603      	mov	r3, r0
    if (!t_) {
 8082cde:	6880      	ldr	r0, [r0, #8]
 8082ce0:	b320      	cbz	r0, 8082d2c <_ZNK5spark9JSONValue4typeEv+0x50>
    switch (t_->type) {
 8082ce2:	7802      	ldrb	r2, [r0, #0]
 8082ce4:	2a03      	cmp	r2, #3
 8082ce6:	d81a      	bhi.n	8082d1e <_ZNK5spark9JSONValue4typeEv+0x42>
 8082ce8:	e8df f002 	tbb	[pc, r2]
 8082cec:	1b021704 	.word	0x1b021704
 8082cf0:	2005      	movs	r0, #5
 8082cf2:	4770      	bx	lr
        const char c = d_->json[t_->start];
 8082cf4:	681b      	ldr	r3, [r3, #0]
 8082cf6:	685a      	ldr	r2, [r3, #4]
 8082cf8:	6843      	ldr	r3, [r0, #4]
 8082cfa:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 8082cfc:	282d      	cmp	r0, #45	; 0x2d
 8082cfe:	d012      	beq.n	8082d26 <_ZNK5spark9JSONValue4typeEv+0x4a>
 8082d00:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8082d04:	2b09      	cmp	r3, #9
 8082d06:	d90e      	bls.n	8082d26 <_ZNK5spark9JSONValue4typeEv+0x4a>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 8082d08:	2874      	cmp	r0, #116	; 0x74
 8082d0a:	d00e      	beq.n	8082d2a <_ZNK5spark9JSONValue4typeEv+0x4e>
 8082d0c:	2866      	cmp	r0, #102	; 0x66
 8082d0e:	d00c      	beq.n	8082d2a <_ZNK5spark9JSONValue4typeEv+0x4e>
        return JSON_TYPE_INVALID;
 8082d10:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 8082d14:	4258      	negs	r0, r3
 8082d16:	4158      	adcs	r0, r3
 8082d18:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 8082d1a:	2006      	movs	r0, #6
 8082d1c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 8082d1e:	2000      	movs	r0, #0
 8082d20:	4770      	bx	lr
        return JSON_TYPE_STRING;
 8082d22:	2004      	movs	r0, #4
 8082d24:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 8082d26:	2003      	movs	r0, #3
 8082d28:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 8082d2a:	2002      	movs	r0, #2
}
 8082d2c:	4770      	bx	lr

08082d2e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 8082d2e:	b510      	push	{r4, lr}
 8082d30:	4604      	mov	r4, r0
    switch (type()) {
 8082d32:	f7ff ffd3 	bl	8082cdc <_ZNK5spark9JSONValue4typeEv>
 8082d36:	2802      	cmp	r0, #2
 8082d38:	d00e      	beq.n	8082d58 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 8082d3a:	1ec3      	subs	r3, r0, #3
 8082d3c:	b2db      	uxtb	r3, r3
 8082d3e:	2b01      	cmp	r3, #1
 8082d40:	d814      	bhi.n	8082d6c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 8082d42:	6822      	ldr	r2, [r4, #0]
 8082d44:	68a3      	ldr	r3, [r4, #8]
 8082d46:	6850      	ldr	r0, [r2, #4]
 8082d48:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 8082d4a:	220a      	movs	r2, #10
}
 8082d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 8082d50:	2100      	movs	r1, #0
 8082d52:	4418      	add	r0, r3
 8082d54:	f003 b88c 	b.w	8085e70 <strtol>
        const char* const s = d_->json + t_->start;
 8082d58:	6822      	ldr	r2, [r4, #0]
 8082d5a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 8082d5c:	6852      	ldr	r2, [r2, #4]
 8082d5e:	685b      	ldr	r3, [r3, #4]
 8082d60:	5cd0      	ldrb	r0, [r2, r3]
 8082d62:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 8082d66:	4258      	negs	r0, r3
 8082d68:	4158      	adcs	r0, r3
}
 8082d6a:	bd10      	pop	{r4, pc}
    switch (type()) {
 8082d6c:	2000      	movs	r0, #0
 8082d6e:	e7fc      	b.n	8082d6a <_ZNK5spark9JSONValue5toIntEv+0x3c>

08082d70 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 8082d70:	460b      	mov	r3, r1
 8082d72:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 8082d74:	2200      	movs	r2, #0
 8082d76:	b510      	push	{r4, lr}
 8082d78:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 8082d7a:	e9c0 2200 	strd	r2, r2, [r0]
        n_(0) {
 8082d7e:	480d      	ldr	r0, [pc, #52]	; (8082db4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 8082d80:	e9c4 0202 	strd	r0, r2, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 8082d84:	b1a3      	cbz	r3, 8082db0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
 8082d86:	781a      	ldrb	r2, [r3, #0]
 8082d88:	2a03      	cmp	r2, #3
 8082d8a:	d006      	beq.n	8082d9a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
 8082d8c:	b982      	cbnz	r2, 8082db0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 8082d8e:	680a      	ldr	r2, [r1, #0]
 8082d90:	6850      	ldr	r0, [r2, #4]
 8082d92:	685a      	ldr	r2, [r3, #4]
 8082d94:	5c82      	ldrb	r2, [r0, r2]
 8082d96:	2a6e      	cmp	r2, #110	; 0x6e
 8082d98:	d007      	beq.n	8082daa <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3a>
            s_ = d->json + t->start;
 8082d9a:	680a      	ldr	r2, [r1, #0]
 8082d9c:	6858      	ldr	r0, [r3, #4]
 8082d9e:	6852      	ldr	r2, [r2, #4]
            n_ = t->end - t->start;
 8082da0:	689b      	ldr	r3, [r3, #8]
            s_ = d->json + t->start;
 8082da2:	4402      	add	r2, r0
            n_ = t->end - t->start;
 8082da4:	1a1b      	subs	r3, r3, r0
            s_ = d->json + t->start;
 8082da6:	60a2      	str	r2, [r4, #8]
            n_ = t->end - t->start;
 8082da8:	60e3      	str	r3, [r4, #12]
 8082daa:	4620      	mov	r0, r4
 8082dac:	f7ff ff71 	bl	8082c92 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 8082db0:	4620      	mov	r0, r4
 8082db2:	bd10      	pop	{r4, pc}
 8082db4:	0808649a 	.word	0x0808649a

08082db8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 8082db8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 8082dba:	2500      	movs	r5, #0
 8082dbc:	460b      	mov	r3, r1
 8082dbe:	4604      	mov	r4, r0
 8082dc0:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 8082dc2:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 8082dc6:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8082dca:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 8082dce:	b14b      	cbz	r3, 8082de4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 8082dd0:	781a      	ldrb	r2, [r3, #0]
 8082dd2:	2a01      	cmp	r2, #1
 8082dd4:	d106      	bne.n	8082de4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 8082dd6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 8082dda:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 8082ddc:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 8082dde:	6143      	str	r3, [r0, #20]
 8082de0:	f7ff ff57 	bl	8082c92 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 8082de4:	4620      	mov	r0, r4
 8082de6:	bd38      	pop	{r3, r4, r5, pc}

08082de8 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 8082de8:	b510      	push	{r4, lr}
    if (!n_) {
 8082dea:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 8082dec:	4604      	mov	r4, r0
    if (!n_) {
 8082dee:	b163      	cbz	r3, 8082e0a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 8082df0:	6880      	ldr	r0, [r0, #8]
    --n_;
 8082df2:	3b01      	subs	r3, #1
    k_ = t_; // Name
 8082df4:	60e0      	str	r0, [r4, #12]
    ++t_;
 8082df6:	3010      	adds	r0, #16
 8082df8:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 8082dfa:	6120      	str	r0, [r4, #16]
    --n_;
 8082dfc:	6163      	str	r3, [r4, #20]
    if (n_) {
 8082dfe:	b113      	cbz	r3, 8082e06 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 8082e00:	f7ff feda 	bl	8082bb8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 8082e04:	60a0      	str	r0, [r4, #8]
    return true;
 8082e06:	2001      	movs	r0, #1
 8082e08:	e000      	b.n	8082e0c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 8082e0a:	4618      	mov	r0, r3
}
 8082e0c:	bd10      	pop	{r4, pc}

08082e0e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 8082e0e:	b510      	push	{r4, lr}
    write('}');
 8082e10:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 8082e12:	4604      	mov	r4, r0
    write('}');
 8082e14:	f7ff ff31 	bl	8082c7a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 8082e18:	2301      	movs	r3, #1
}
 8082e1a:	4620      	mov	r0, r4
    state_ = NEXT;
 8082e1c:	7123      	strb	r3, [r4, #4]
}
 8082e1e:	bd10      	pop	{r4, pc}

08082e20 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 8082e20:	b508      	push	{r3, lr}
    switch (state_) {
 8082e22:	7903      	ldrb	r3, [r0, #4]
 8082e24:	2b01      	cmp	r3, #1
 8082e26:	d002      	beq.n	8082e2e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 8082e28:	2b02      	cmp	r3, #2
 8082e2a:	d004      	beq.n	8082e36 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 8082e2c:	bd08      	pop	{r3, pc}
        write(',');
 8082e2e:	212c      	movs	r1, #44	; 0x2c
        write(':');
 8082e30:	f7ff ff23 	bl	8082c7a <_ZN5spark10JSONWriter5writeEc>
}
 8082e34:	e7fa      	b.n	8082e2c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 8082e36:	213a      	movs	r1, #58	; 0x3a
 8082e38:	e7fa      	b.n	8082e30 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

08082e3a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 8082e3a:	b510      	push	{r4, lr}
 8082e3c:	4604      	mov	r4, r0
    writeSeparator();
 8082e3e:	f7ff ffef 	bl	8082e20 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 8082e42:	4620      	mov	r0, r4
 8082e44:	217b      	movs	r1, #123	; 0x7b
 8082e46:	f7ff ff18 	bl	8082c7a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 8082e4a:	2300      	movs	r3, #0
}
 8082e4c:	4620      	mov	r0, r4
    state_ = BEGIN;
 8082e4e:	7123      	strb	r3, [r4, #4]
}
 8082e50:	bd10      	pop	{r4, pc}
	...

08082e54 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 8082e54:	b538      	push	{r3, r4, r5, lr}
 8082e56:	4604      	mov	r4, r0
 8082e58:	460d      	mov	r5, r1
    writeSeparator();
 8082e5a:	f7ff ffe1 	bl	8082e20 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 8082e5e:	6823      	ldr	r3, [r4, #0]
 8082e60:	4620      	mov	r0, r4
 8082e62:	462a      	mov	r2, r5
 8082e64:	68db      	ldr	r3, [r3, #12]
 8082e66:	4903      	ldr	r1, [pc, #12]	; (8082e74 <_ZN5spark10JSONWriter5valueEi+0x20>)
 8082e68:	4798      	blx	r3
    state_ = NEXT;
 8082e6a:	2301      	movs	r3, #1
}
 8082e6c:	4620      	mov	r0, r4
    state_ = NEXT;
 8082e6e:	7123      	strb	r3, [r4, #4]
}
 8082e70:	bd38      	pop	{r3, r4, r5, pc}
 8082e72:	bf00      	nop
 8082e74:	08086434 	.word	0x08086434

08082e78 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 8082e78:	b538      	push	{r3, r4, r5, lr}
 8082e7a:	4604      	mov	r4, r0
 8082e7c:	460d      	mov	r5, r1
    writeSeparator();
 8082e7e:	f7ff ffcf 	bl	8082e20 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 8082e82:	6823      	ldr	r3, [r4, #0]
 8082e84:	4620      	mov	r0, r4
 8082e86:	462a      	mov	r2, r5
 8082e88:	68db      	ldr	r3, [r3, #12]
 8082e8a:	4903      	ldr	r1, [pc, #12]	; (8082e98 <_ZN5spark10JSONWriter5valueEj+0x20>)
 8082e8c:	4798      	blx	r3
    state_ = NEXT;
 8082e8e:	2301      	movs	r3, #1
}
 8082e90:	4620      	mov	r0, r4
    state_ = NEXT;
 8082e92:	7123      	strb	r3, [r4, #4]
}
 8082e94:	bd38      	pop	{r3, r4, r5, pc}
 8082e96:	bf00      	nop
 8082e98:	08086437 	.word	0x08086437

08082e9c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 8082e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082ea0:	460d      	mov	r5, r1
 8082ea2:	4617      	mov	r7, r2
    write('"');
 8082ea4:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 8082ea6:	4604      	mov	r4, r0
    write('"');
 8082ea8:	f7ff fee7 	bl	8082c7a <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
 8082eac:	4629      	mov	r1, r5
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 8082eae:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8082f48 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
    const char* const end = str + size;
 8082eb2:	442f      	add	r7, r5
    while (s != end) {
 8082eb4:	42bd      	cmp	r5, r7
 8082eb6:	462a      	mov	r2, r5
 8082eb8:	d038      	beq.n	8082f2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
 8082eba:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 8082ebe:	2e22      	cmp	r6, #34	; 0x22
 8082ec0:	d003      	beq.n	8082eca <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 8082ec2:	2e5c      	cmp	r6, #92	; 0x5c
 8082ec4:	d001      	beq.n	8082eca <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 8082ec6:	2e1f      	cmp	r6, #31
 8082ec8:	d8f4      	bhi.n	8082eb4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 8082eca:	6823      	ldr	r3, [r4, #0]
 8082ecc:	1a52      	subs	r2, r2, r1
 8082ece:	4620      	mov	r0, r4
 8082ed0:	689b      	ldr	r3, [r3, #8]
 8082ed2:	4798      	blx	r3
            write('\\');
 8082ed4:	215c      	movs	r1, #92	; 0x5c
 8082ed6:	4620      	mov	r0, r4
 8082ed8:	f7ff fecf 	bl	8082c7a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 8082edc:	2e0d      	cmp	r6, #13
 8082ede:	d80a      	bhi.n	8082ef6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
 8082ee0:	2e07      	cmp	r6, #7
 8082ee2:	d91c      	bls.n	8082f1e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 8082ee4:	f1a6 0308 	sub.w	r3, r6, #8
 8082ee8:	2b05      	cmp	r3, #5
 8082eea:	d818      	bhi.n	8082f1e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 8082eec:	e8df f003 	tbb	[pc, r3]
 8082ef0:	17110f0d 	.word	0x17110f0d
 8082ef4:	1513      	.short	0x1513
 8082ef6:	2e22      	cmp	r6, #34	; 0x22
 8082ef8:	d001      	beq.n	8082efe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 8082efa:	2e5c      	cmp	r6, #92	; 0x5c
 8082efc:	d10f      	bne.n	8082f1e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
 8082efe:	4631      	mov	r1, r6
                write('b');
 8082f00:	4620      	mov	r0, r4
 8082f02:	f7ff feba 	bl	8082c7a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 8082f06:	4629      	mov	r1, r5
    while (s != end) {
 8082f08:	e7d4      	b.n	8082eb4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 8082f0a:	2162      	movs	r1, #98	; 0x62
 8082f0c:	e7f8      	b.n	8082f00 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
 8082f0e:	2174      	movs	r1, #116	; 0x74
 8082f10:	e7f6      	b.n	8082f00 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
 8082f12:	216e      	movs	r1, #110	; 0x6e
 8082f14:	e7f4      	b.n	8082f00 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
 8082f16:	2166      	movs	r1, #102	; 0x66
 8082f18:	e7f2      	b.n	8082f00 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
 8082f1a:	2172      	movs	r1, #114	; 0x72
 8082f1c:	e7f0      	b.n	8082f00 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
 8082f1e:	6823      	ldr	r3, [r4, #0]
 8082f20:	4632      	mov	r2, r6
 8082f22:	4641      	mov	r1, r8
 8082f24:	4620      	mov	r0, r4
 8082f26:	68db      	ldr	r3, [r3, #12]
 8082f28:	4798      	blx	r3
                break;
 8082f2a:	e7ec      	b.n	8082f06 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
 8082f2c:	428d      	cmp	r5, r1
 8082f2e:	d004      	beq.n	8082f3a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
 8082f30:	6823      	ldr	r3, [r4, #0]
 8082f32:	4620      	mov	r0, r4
 8082f34:	689b      	ldr	r3, [r3, #8]
 8082f36:	1a6a      	subs	r2, r5, r1
 8082f38:	4798      	blx	r3
    }
    write('"');
 8082f3a:	2122      	movs	r1, #34	; 0x22
 8082f3c:	4620      	mov	r0, r4
 8082f3e:	f7ff fe9c 	bl	8082c7a <_ZN5spark10JSONWriter5writeEc>
}
 8082f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082f46:	bf00      	nop
 8082f48:	0808643a 	.word	0x0808643a

08082f4c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 8082f4c:	b570      	push	{r4, r5, r6, lr}
 8082f4e:	4604      	mov	r4, r0
 8082f50:	460d      	mov	r5, r1
 8082f52:	4616      	mov	r6, r2
    writeSeparator();
 8082f54:	f7ff ff64 	bl	8082e20 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 8082f58:	4620      	mov	r0, r4
 8082f5a:	4632      	mov	r2, r6
 8082f5c:	4629      	mov	r1, r5
 8082f5e:	f7ff ff9d 	bl	8082e9c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 8082f62:	2302      	movs	r3, #2
}
 8082f64:	4620      	mov	r0, r4
    state_ = VALUE;
 8082f66:	7123      	strb	r3, [r4, #4]
}
 8082f68:	bd70      	pop	{r4, r5, r6, pc}

08082f6a <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 8082f6a:	b570      	push	{r4, r5, r6, lr}
 8082f6c:	4604      	mov	r4, r0
 8082f6e:	460d      	mov	r5, r1
 8082f70:	4616      	mov	r6, r2
    writeSeparator();
 8082f72:	f7ff ff55 	bl	8082e20 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 8082f76:	4620      	mov	r0, r4
 8082f78:	4632      	mov	r2, r6
 8082f7a:	4629      	mov	r1, r5
 8082f7c:	f7ff ff8e 	bl	8082e9c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 8082f80:	2301      	movs	r3, #1
}
 8082f82:	4620      	mov	r0, r4
    state_ = NEXT;
 8082f84:	7123      	strb	r3, [r4, #4]
}
 8082f86:	bd70      	pop	{r4, r5, r6, pc}

08082f88 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 8082f88:	6880      	ldr	r0, [r0, #8]
 8082f8a:	6803      	ldr	r3, [r0, #0]
 8082f8c:	68db      	ldr	r3, [r3, #12]
 8082f8e:	4718      	bx	r3

08082f90 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 8082f90:	4770      	bx	lr

08082f92 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 8082f92:	4608      	mov	r0, r1
 8082f94:	b111      	cbz	r1, 8082f9c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 8082f96:	680b      	ldr	r3, [r1, #0]
 8082f98:	685b      	ldr	r3, [r3, #4]
 8082f9a:	4718      	bx	r3
}
 8082f9c:	4770      	bx	lr

08082f9e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 8082f9e:	4770      	bx	lr

08082fa0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 8082fa0:	4770      	bx	lr

08082fa2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 8082fa2:	4770      	bx	lr

08082fa4 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 8082fa4:	4770      	bx	lr

08082fa6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 8082fa6:	b538      	push	{r3, r4, r5, lr}
 8082fa8:	4604      	mov	r4, r0
 8082faa:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 8082fac:	6800      	ldr	r0, [r0, #0]
 8082fae:	212e      	movs	r1, #46	; 0x2e
 8082fb0:	f002 fe6c 	bl	8085c8c <strchrnul>
    size = s - category;
 8082fb4:	6823      	ldr	r3, [r4, #0]
    const char *s = strchrnul(category, '.');
 8082fb6:	4602      	mov	r2, r0
    size = s - category;
 8082fb8:	1ac0      	subs	r0, r0, r3
 8082fba:	6028      	str	r0, [r5, #0]
    if (size) {
 8082fbc:	b120      	cbz	r0, 8082fc8 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x22>
        if (*s) {
 8082fbe:	7813      	ldrb	r3, [r2, #0]
 8082fc0:	b103      	cbz	r3, 8082fc4 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1e>
            ++s;
 8082fc2:	3201      	adds	r2, #1
 8082fc4:	6820      	ldr	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8082fc6:	6022      	str	r2, [r4, #0]
}
 8082fc8:	bd38      	pop	{r3, r4, r5, pc}

08082fca <_ZN5spark16JSONStreamWriterD0Ev>:
 8082fca:	b510      	push	{r4, lr}
 8082fcc:	4604      	mov	r4, r0
 8082fce:	210c      	movs	r1, #12
 8082fd0:	f001 fe16 	bl	8084c00 <_ZdlPvj>
 8082fd4:	4620      	mov	r0, r4
 8082fd6:	bd10      	pop	{r4, pc}

08082fd8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 8082fd8:	b510      	push	{r4, lr}
 8082fda:	4604      	mov	r4, r0
 8082fdc:	2104      	movs	r1, #4
 8082fde:	f001 fe0f 	bl	8084c00 <_ZdlPvj>
 8082fe2:	4620      	mov	r0, r4
 8082fe4:	bd10      	pop	{r4, pc}

08082fe6 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 8082fe6:	b510      	push	{r4, lr}
 8082fe8:	4604      	mov	r4, r0
 8082fea:	2104      	movs	r1, #4
 8082fec:	f001 fe08 	bl	8084c00 <_ZdlPvj>
 8082ff0:	4620      	mov	r0, r4
 8082ff2:	bd10      	pop	{r4, pc}

08082ff4 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 8082ff4:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 8082ff6:	f002 fe53 	bl	8085ca0 <strcmp>
}
 8082ffa:	fab0 f080 	clz	r0, r0
 8082ffe:	0940      	lsrs	r0, r0, #5
 8083000:	bd08      	pop	{r3, pc}

08083002 <__tcf_1>:
 8083002:	4770      	bx	lr

08083004 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 8083004:	b510      	push	{r4, lr}
 8083006:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
 8083008:	f001 fbd8 	bl	80847bc <_Z16_fetch_usbserialv>
 808300c:	4284      	cmp	r4, r0
 808300e:	d105      	bne.n	808301c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 8083010:	f001 fbd4 	bl	80847bc <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 8083014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        USBSerial1.end();
 8083018:	f001 bbb6 	b.w	8084788 <_ZN9USBSerial3endEv>
    if (stream == &USBSerial1) {
 808301c:	f001 fc08 	bl	8084830 <_Z17_fetch_usbserial1v>
 8083020:	4284      	cmp	r4, r0
 8083022:	d102      	bne.n	808302a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x26>
        USBSerial1.end();
 8083024:	f001 fc04 	bl	8084830 <_Z17_fetch_usbserial1v>
 8083028:	e7f4      	b.n	8083014 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x10>
    if (stream == &Serial1) {
 808302a:	f001 fb33 	bl	8084694 <_Z22__fetch_global_Serial1v>
 808302e:	4284      	cmp	r4, r0
 8083030:	d105      	bne.n	808303e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
        Serial1.end();
 8083032:	f001 fb2f 	bl	8084694 <_Z22__fetch_global_Serial1v>
}
 8083036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 808303a:	f001 bb28 	b.w	808468e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 808303e:	b12c      	cbz	r4, 808304c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x48>
 8083040:	6823      	ldr	r3, [r4, #0]
 8083042:	4620      	mov	r0, r4
}
 8083044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8083048:	685b      	ldr	r3, [r3, #4]
 808304a:	4718      	bx	r3
 808304c:	bd10      	pop	{r4, pc}

0808304e <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 808304e:	b538      	push	{r3, r4, r5, lr}
 8083050:	4605      	mov	r5, r0
    return value(val, strlen(val));
 8083052:	4608      	mov	r0, r1
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 8083054:	460c      	mov	r4, r1
    return value(val, strlen(val));
 8083056:	f002 fe50 	bl	8085cfa <strlen>
 808305a:	4621      	mov	r1, r4
 808305c:	4602      	mov	r2, r0
 808305e:	4628      	mov	r0, r5
}
 8083060:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return value(val, strlen(val));
 8083064:	f7ff bf81 	b.w	8082f6a <_ZN5spark10JSONWriter5valueEPKcj>

08083068 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 8083068:	b570      	push	{r4, r5, r6, lr}
 808306a:	4604      	mov	r4, r0
    write(str, strlen(str));
 808306c:	4608      	mov	r0, r1
inline void spark::StreamLogHandler::write(const char *str) {
 808306e:	460d      	mov	r5, r1
    write(str, strlen(str));
 8083070:	f002 fe43 	bl	8085cfa <strlen>
 8083074:	6823      	ldr	r3, [r4, #0]
 8083076:	4602      	mov	r2, r0
 8083078:	4629      	mov	r1, r5
 808307a:	4620      	mov	r0, r4
}
 808307c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    write(str, strlen(str));
 8083080:	68db      	ldr	r3, [r3, #12]
 8083082:	4718      	bx	r3

08083084 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 8083084:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 8083086:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 8083088:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 808308c:	2201      	movs	r2, #1
 808308e:	68db      	ldr	r3, [r3, #12]
 8083090:	f10d 0107 	add.w	r1, sp, #7
 8083094:	4798      	blx	r3
}
 8083096:	b003      	add	sp, #12
 8083098:	f85d fb04 	ldr.w	pc, [sp], #4

0808309c <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
 808309c:	b40e      	push	{r1, r2, r3}
 808309e:	b503      	push	{r0, r1, lr}
 80830a0:	ab03      	add	r3, sp, #12
 80830a2:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
 80830a6:	2100      	movs	r1, #0
 80830a8:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
 80830aa:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
 80830ac:	f001 f813 	bl	80840d6 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
 80830b0:	b002      	add	sp, #8
 80830b2:	f85d eb04 	ldr.w	lr, [sp], #4
 80830b6:	b003      	add	sp, #12
 80830b8:	4770      	bx	lr
	...

080830bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80830bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 80830c0:	f04f 0814 	mov.w	r8, #20
 80830c4:	e9d0 9500 	ldrd	r9, r5, [r0]
 80830c8:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 80830ca:	464c      	mov	r4, r9
 80830cc:	fb08 f505 	mul.w	r5, r8, r5
 80830d0:	9300      	str	r3, [sp, #0]
 80830d2:	10ab      	asrs	r3, r5, #2
 80830d4:	4d17      	ldr	r5, [pc, #92]	; (8083134 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 80830d6:	435d      	muls	r5, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 80830d8:	2d00      	cmp	r5, #0
 80830da:	dd23      	ble.n	8083124 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
 80830dc:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 80830de:	fb08 f006 	mul.w	r0, r8, r6
 80830e2:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 80830e6:	f8ba b004 	ldrh.w	fp, [sl, #4]
 80830ea:	463a      	mov	r2, r7
 80830ec:	455f      	cmp	r7, fp
 80830ee:	bf28      	it	cs
 80830f0:	465a      	movcs	r2, fp
 80830f2:	5820      	ldr	r0, [r4, r0]
 80830f4:	9101      	str	r1, [sp, #4]
 80830f6:	f002 fe08 	bl	8085d0a <strncmp>
                if (cmp == 0) {
 80830fa:	2301      	movs	r3, #1
 80830fc:	9901      	ldr	r1, [sp, #4]
 80830fe:	b978      	cbnz	r0, 8083120 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
 8083100:	455f      	cmp	r7, fp
 8083102:	d103      	bne.n	808310c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 8083104:	9a00      	ldr	r2, [sp, #0]
 8083106:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 8083108:	4635      	mov	r5, r6
 808310a:	e7e5      	b.n	80830d8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
 808310c:	bf8c      	ite	hi
 808310e:	2001      	movhi	r0, #1
 8083110:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 8083112:	2800      	cmp	r0, #0
 8083114:	d0f8      	beq.n	8083108 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 8083116:	1bae      	subs	r6, r5, r6
	      ++__first;
 8083118:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
 808311c:	3e01      	subs	r6, #1
 808311e:	e7f3      	b.n	8083108 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
 8083120:	0fc0      	lsrs	r0, r0, #31
 8083122:	e7f6      	b.n	8083112 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
 8083124:	eba4 0409 	sub.w	r4, r4, r9
}
 8083128:	4802      	ldr	r0, [pc, #8]	; (8083134 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 808312a:	10a4      	asrs	r4, r4, #2
 808312c:	4360      	muls	r0, r4
 808312e:	b003      	add	sp, #12
 8083130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8083134:	cccccccd 	.word	0xcccccccd

08083138 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 8083138:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 808313a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 808313c:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 808313e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 8083140:	b303      	cbz	r3, 8083184 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 8083142:	b1f9      	cbz	r1, 8083184 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 8083144:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 8083146:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 808314a:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 808314c:	a903      	add	r1, sp, #12
 808314e:	a801      	add	r0, sp, #4
 8083150:	f7ff ff29 	bl	8082fa6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 8083154:	4601      	mov	r1, r0
 8083156:	b1a8      	cbz	r0, 8083184 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 8083158:	f10d 030b 	add.w	r3, sp, #11
 808315c:	4620      	mov	r0, r4
 808315e:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 8083160:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 8083164:	f7ff ffaa 	bl	80830bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 8083168:	f89d 300b 	ldrb.w	r3, [sp, #11]
 808316c:	b153      	cbz	r3, 8083184 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 808316e:	2314      	movs	r3, #20
 8083170:	6824      	ldr	r4, [r4, #0]
 8083172:	fb03 4400 	mla	r4, r3, r0, r4
            if (node.level >= 0) {
 8083176:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 808317a:	3408      	adds	r4, #8
            if (node.level >= 0) {
 808317c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 808317e:	bfa8      	it	ge
 8083180:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
 8083182:	e7e3      	b.n	808314c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 8083184:	4630      	mov	r0, r6
 8083186:	b004      	add	sp, #16
 8083188:	bd70      	pop	{r4, r5, r6, pc}
	...

0808318c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 808318c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 808318e:	4c09      	ldr	r4, [pc, #36]	; (80831b4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 8083190:	7823      	ldrb	r3, [r4, #0]
 8083192:	f3bf 8f5b 	dmb	ish
 8083196:	07db      	lsls	r3, r3, #31
 8083198:	d409      	bmi.n	80831ae <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
 808319a:	4620      	mov	r0, r4
 808319c:	f7fc ff96 	bl	80800cc <__cxa_guard_acquire>
 80831a0:	b128      	cbz	r0, 80831ae <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
 80831a2:	4620      	mov	r0, r4
 80831a4:	f7fc ff97 	bl	80800d6 <__cxa_guard_release>
 80831a8:	4803      	ldr	r0, [pc, #12]	; (80831b8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 80831aa:	f002 fced 	bl	8085b88 <atexit>
}
 80831ae:	4803      	ldr	r0, [pc, #12]	; (80831bc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
 80831b0:	bd10      	pop	{r4, pc}
 80831b2:	bf00      	nop
 80831b4:	200001d0 	.word	0x200001d0
 80831b8:	08082f9f 	.word	0x08082f9f
 80831bc:	2000008c 	.word	0x2000008c

080831c0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 80831c0:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 80831c2:	4c09      	ldr	r4, [pc, #36]	; (80831e8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 80831c4:	7823      	ldrb	r3, [r4, #0]
 80831c6:	f3bf 8f5b 	dmb	ish
 80831ca:	07db      	lsls	r3, r3, #31
 80831cc:	d409      	bmi.n	80831e2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
 80831ce:	4620      	mov	r0, r4
 80831d0:	f7fc ff7c 	bl	80800cc <__cxa_guard_acquire>
 80831d4:	b128      	cbz	r0, 80831e2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
 80831d6:	4620      	mov	r0, r4
 80831d8:	f7fc ff7d 	bl	80800d6 <__cxa_guard_release>
 80831dc:	4803      	ldr	r0, [pc, #12]	; (80831ec <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 80831de:	f002 fcd3 	bl	8085b88 <atexit>
    return &factory;
}
 80831e2:	4803      	ldr	r0, [pc, #12]	; (80831f0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
 80831e4:	bd10      	pop	{r4, pc}
 80831e6:	bf00      	nop
 80831e8:	200001d4 	.word	0x200001d4
 80831ec:	08083003 	.word	0x08083003
 80831f0:	20000090 	.word	0x20000090

080831f4 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 80831f4:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 80831f6:	2500      	movs	r5, #0
 80831f8:	4604      	mov	r4, r0
 80831fa:	e9c0 5500 	strd	r5, r5, [r0]
 80831fe:	e9c0 5504 	strd	r5, r5, [r0, #16]
 8083202:	6085      	str	r5, [r0, #8]
 8083204:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 8083206:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
 808320a:	f7fe fb95 	bl	8081938 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 808320e:	f7ff ffbd 	bl	808318c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 8083212:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 8083214:	f7ff ffd4 	bl	80831c0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 8083218:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 808321a:	6220      	str	r0, [r4, #32]
}
 808321c:	4620      	mov	r0, r4
 808321e:	bd38      	pop	{r3, r4, r5, pc}

08083220 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 8083220:	b510      	push	{r4, lr}
    static LogManager mgr;
 8083222:	4c0a      	ldr	r4, [pc, #40]	; (808324c <_ZN5spark10LogManager8instanceEv+0x2c>)
 8083224:	7823      	ldrb	r3, [r4, #0]
 8083226:	f3bf 8f5b 	dmb	ish
 808322a:	07db      	lsls	r3, r3, #31
 808322c:	d40c      	bmi.n	8083248 <_ZN5spark10LogManager8instanceEv+0x28>
 808322e:	4620      	mov	r0, r4
 8083230:	f7fc ff4c 	bl	80800cc <__cxa_guard_acquire>
 8083234:	b140      	cbz	r0, 8083248 <_ZN5spark10LogManager8instanceEv+0x28>
 8083236:	4806      	ldr	r0, [pc, #24]	; (8083250 <_ZN5spark10LogManager8instanceEv+0x30>)
 8083238:	f7ff ffdc 	bl	80831f4 <_ZN5spark10LogManagerC1Ev>
 808323c:	4620      	mov	r0, r4
 808323e:	f7fc ff4a 	bl	80800d6 <__cxa_guard_release>
 8083242:	4804      	ldr	r0, [pc, #16]	; (8083254 <_ZN5spark10LogManager8instanceEv+0x34>)
 8083244:	f002 fca0 	bl	8085b88 <atexit>
    return &mgr;
}
 8083248:	4801      	ldr	r0, [pc, #4]	; (8083250 <_ZN5spark10LogManager8instanceEv+0x30>)
 808324a:	bd10      	pop	{r4, pc}
 808324c:	200001cc 	.word	0x200001cc
 8083250:	200001dc 	.word	0x200001dc
 8083254:	0808371d 	.word	0x0808371d

08083258 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 8083258:	2300      	movs	r3, #0
 808325a:	4a02      	ldr	r2, [pc, #8]	; (8083264 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 808325c:	4902      	ldr	r1, [pc, #8]	; (8083268 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 808325e:	4803      	ldr	r0, [pc, #12]	; (808326c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 8083260:	f7fe bd2a 	b.w	8081cb8 <log_set_callbacks>
 8083264:	080835a9 	.word	0x080835a9
 8083268:	08083535 	.word	0x08083535
 808326c:	080834b5 	.word	0x080834b5

08083270 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 8083270:	2300      	movs	r3, #0
 8083272:	461a      	mov	r2, r3
 8083274:	4619      	mov	r1, r3
 8083276:	4618      	mov	r0, r3
 8083278:	f7fe bd1e 	b.w	8081cb8 <log_set_callbacks>

0808327c <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 808327c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808327e:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 8083280:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8083282:	f851 3b04 	ldr.w	r3, [r1], #4
 8083286:	a801      	add	r0, sp, #4
 8083288:	9300      	str	r3, [sp, #0]
 808328a:	f7ff f87d 	bl	8082388 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 808328e:	466a      	mov	r2, sp
 8083290:	4629      	mov	r1, r5
 8083292:	4620      	mov	r0, r4
 8083294:	f7ff fd14 	bl	8082cc0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 8083298:	a801      	add	r0, sp, #4
 808329a:	f7fd fa8f 	bl	80807bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 808329e:	4620      	mov	r0, r4
 80832a0:	b003      	add	sp, #12
 80832a2:	bd30      	pop	{r4, r5, pc}

080832a4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 80832a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80832a6:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 80832a8:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80832aa:	f851 3b04 	ldr.w	r3, [r1], #4
 80832ae:	a801      	add	r0, sp, #4
 80832b0:	9300      	str	r3, [sp, #0]
 80832b2:	f7ff f869 	bl	8082388 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80832b6:	466a      	mov	r2, sp
 80832b8:	4629      	mov	r1, r5
 80832ba:	4620      	mov	r0, r4
 80832bc:	f7ff fd7c 	bl	8082db8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80832c0:	a801      	add	r0, sp, #4
 80832c2:	f7fd fa7b 	bl	80807bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80832c6:	4620      	mov	r0, r4
 80832c8:	b003      	add	sp, #12
 80832ca:	bd30      	pop	{r4, r5, pc}

080832cc <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 80832cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80832ce:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 80832d0:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80832d2:	f851 3b04 	ldr.w	r3, [r1], #4
 80832d6:	a801      	add	r0, sp, #4
 80832d8:	9300      	str	r3, [sp, #0]
 80832da:	f7ff f855 	bl	8082388 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80832de:	466a      	mov	r2, sp
 80832e0:	4629      	mov	r1, r5
 80832e2:	4620      	mov	r0, r4
 80832e4:	f7ff fd44 	bl	8082d70 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80832e8:	a801      	add	r0, sp, #4
 80832ea:	f7fd fa67 	bl	80807bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80832ee:	4620      	mov	r0, r4
 80832f0:	b003      	add	sp, #12
 80832f2:	bd30      	pop	{r4, r5, pc}

080832f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 80832f4:	b570      	push	{r4, r5, r6, lr}
 80832f6:	b08a      	sub	sp, #40	; 0x28
 80832f8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 80832fa:	4601      	mov	r1, r0
 80832fc:	a804      	add	r0, sp, #16
 80832fe:	f7ff ffd1 	bl	80832a4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 8083302:	4e14      	ldr	r6, [pc, #80]	; (8083354 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 8083304:	a804      	add	r0, sp, #16
 8083306:	f7ff fd6f 	bl	8082de8 <_ZN5spark18JSONObjectIterator4nextEv>
 808330a:	b1e8      	cbz	r0, 8083348 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 808330c:	4668      	mov	r0, sp
 808330e:	a904      	add	r1, sp, #16
 8083310:	f7ff ffdc 	bl	80832cc <_ZNK5spark18JSONObjectIterator4nameEv>
 8083314:	4631      	mov	r1, r6
 8083316:	9802      	ldr	r0, [sp, #8]
 8083318:	f7ff fe6c 	bl	8082ff4 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 808331c:	4604      	mov	r4, r0
 808331e:	b110      	cbz	r0, 8083326 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 8083320:	1e2c      	subs	r4, r5, #0
 8083322:	bf18      	it	ne
 8083324:	2401      	movne	r4, #1
 8083326:	a801      	add	r0, sp, #4
 8083328:	f7fd fa48 	bl	80807bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808332c:	2c00      	cmp	r4, #0
 808332e:	d0e9      	beq.n	8083304 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 8083330:	4668      	mov	r0, sp
 8083332:	a904      	add	r1, sp, #16
 8083334:	f7ff ffa2 	bl	808327c <_ZNK5spark18JSONObjectIterator5valueEv>
 8083338:	4668      	mov	r0, sp
 808333a:	f7ff fcf8 	bl	8082d2e <_ZNK5spark9JSONValue5toIntEv>
 808333e:	6028      	str	r0, [r5, #0]
 8083340:	a801      	add	r0, sp, #4
 8083342:	f7fd fa3b 	bl	80807bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8083346:	e7dd      	b.n	8083304 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 8083348:	a805      	add	r0, sp, #20
 808334a:	f7fd fa37 	bl	80807bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 808334e:	b00a      	add	sp, #40	; 0x28
 8083350:	bd70      	pop	{r4, r5, r6, pc}
 8083352:	bf00      	nop
 8083354:	08086440 	.word	0x08086440

08083358 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 8083358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808335a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 808335c:	4919      	ldr	r1, [pc, #100]	; (80833c4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6c>)
 808335e:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 8083360:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 8083362:	f002 fc9d 	bl	8085ca0 <strcmp>
 8083366:	b948      	cbnz	r0, 808337c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
 8083368:	f001 fa28 	bl	80847bc <_Z16_fetch_usbserialv>
 808336c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8083370:	f001 fa06 	bl	8084780 <_ZN9USBSerial5beginEl>
        return &Serial;
 8083374:	f001 fa22 	bl	80847bc <_Z16_fetch_usbserialv>
}
 8083378:	b003      	add	sp, #12
 808337a:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "USBSerial1") == 0) {
 808337c:	4620      	mov	r0, r4
 808337e:	4912      	ldr	r1, [pc, #72]	; (80833c8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x70>)
 8083380:	f002 fc8e 	bl	8085ca0 <strcmp>
 8083384:	b940      	cbnz	r0, 8083398 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x40>
        USBSerial1.begin();
 8083386:	f001 fa53 	bl	8084830 <_Z17_fetch_usbserial1v>
 808338a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 808338e:	f001 f9f7 	bl	8084780 <_ZN9USBSerial5beginEl>
        return &USBSerial1;
 8083392:	f001 fa4d 	bl	8084830 <_Z17_fetch_usbserial1v>
 8083396:	e7ef      	b.n	8083378 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    if (strcmp(type, "Serial1") == 0) {
 8083398:	4620      	mov	r0, r4
 808339a:	490c      	ldr	r1, [pc, #48]	; (80833cc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x74>)
 808339c:	f002 fc80 	bl	8085ca0 <strcmp>
 80833a0:	b970      	cbnz	r0, 80833c0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x68>
        int baud = 9600;
 80833a2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 80833a6:	a901      	add	r1, sp, #4
 80833a8:	4628      	mov	r0, r5
        int baud = 9600;
 80833aa:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 80833ac:	f7ff ffa2 	bl	80832f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 80833b0:	f001 f970 	bl	8084694 <_Z22__fetch_global_Serial1v>
 80833b4:	9901      	ldr	r1, [sp, #4]
 80833b6:	f001 f967 	bl	8084688 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 80833ba:	f001 f96b 	bl	8084694 <_Z22__fetch_global_Serial1v>
 80833be:	e7db      	b.n	8083378 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
 80833c0:	2000      	movs	r0, #0
 80833c2:	e7d9      	b.n	8083378 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
 80833c4:	08086445 	.word	0x08086445
 80833c8:	0808644c 	.word	0x0808644c
 80833cc:	0808644f 	.word	0x0808644f

080833d0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 80833d0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 80833d2:	2614      	movs	r6, #20
 80833d4:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 80833d8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80833da:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80833de:	42ae      	cmp	r6, r5
 80833e0:	d005      	beq.n	80833ee <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 80833e2:	f105 0008 	add.w	r0, r5, #8
 80833e6:	f7ff fff3 	bl	80833d0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80833ea:	3514      	adds	r5, #20
 80833ec:	e7f7      	b.n	80833de <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 80833ee:	6820      	ldr	r0, [r4, #0]
 80833f0:	f7fe fda2 	bl	8081f38 <free>
}
 80833f4:	4620      	mov	r0, r4
 80833f6:	bd70      	pop	{r4, r5, r6, pc}

080833f8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 80833f8:	b570      	push	{r4, r5, r6, lr}
 80833fa:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80833fc:	e9d0 5300 	ldrd	r5, r3, [r0]
 8083400:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 8083404:	42ae      	cmp	r6, r5
 8083406:	d004      	beq.n	8083412 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 8083408:	4628      	mov	r0, r5
 808340a:	f000 feaa 	bl	8084162 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 808340e:	3510      	adds	r5, #16
 8083410:	e7f8      	b.n	8083404 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 8083412:	6820      	ldr	r0, [r4, #0]
 8083414:	f7fe fd90 	bl	8081f38 <free>
}
 8083418:	4620      	mov	r0, r4
 808341a:	bd70      	pop	{r4, r5, r6, pc}

0808341c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 808341c:	b510      	push	{r4, lr}
 808341e:	4604      	mov	r4, r0
 8083420:	300c      	adds	r0, #12
 8083422:	f7ff ffd5 	bl	80833d0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 8083426:	4620      	mov	r0, r4
 8083428:	f7ff ffe6 	bl	80833f8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 808342c:	4620      	mov	r0, r4
 808342e:	bd10      	pop	{r4, pc}

08083430 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 8083430:	b510      	push	{r4, lr}
 8083432:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 8083434:	4b03      	ldr	r3, [pc, #12]	; (8083444 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 8083436:	f840 3b04 	str.w	r3, [r0], #4
 808343a:	f7ff ffef 	bl	808341c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 808343e:	4620      	mov	r0, r4
 8083440:	bd10      	pop	{r4, pc}
 8083442:	bf00      	nop
 8083444:	08086314 	.word	0x08086314

08083448 <_ZN5spark16StreamLogHandlerD0Ev>:
 8083448:	b510      	push	{r4, lr}
 808344a:	4604      	mov	r4, r0
 808344c:	f7ff fff0 	bl	8083430 <_ZN5spark16StreamLogHandlerD1Ev>
 8083450:	4620      	mov	r0, r4
 8083452:	2124      	movs	r1, #36	; 0x24
 8083454:	f001 fbd4 	bl	8084c00 <_ZdlPvj>
 8083458:	4620      	mov	r0, r4
 808345a:	bd10      	pop	{r4, pc}

0808345c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 808345c:	b510      	push	{r4, lr}
 808345e:	4604      	mov	r4, r0
 8083460:	4b02      	ldr	r3, [pc, #8]	; (808346c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 8083462:	6003      	str	r3, [r0, #0]
 8083464:	f7ff ffe4 	bl	8083430 <_ZN5spark16StreamLogHandlerD1Ev>
 8083468:	4620      	mov	r0, r4
 808346a:	bd10      	pop	{r4, pc}
 808346c:	080864e8 	.word	0x080864e8

08083470 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 8083470:	b510      	push	{r4, lr}
 8083472:	4604      	mov	r4, r0
 8083474:	f7ff fff2 	bl	808345c <_ZN5spark20JSONStreamLogHandlerD1Ev>
 8083478:	4620      	mov	r0, r4
 808347a:	2124      	movs	r1, #36	; 0x24
 808347c:	f001 fbc0 	bl	8084c00 <_ZdlPvj>
 8083480:	4620      	mov	r0, r4
 8083482:	bd10      	pop	{r4, pc}

08083484 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 8083484:	2200      	movs	r2, #0
 8083486:	e9c0 2200 	strd	r2, r2, [r0]
 808348a:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 808348c:	b510      	push	{r4, lr}
      __a = _GLIBCXX_MOVE(__b);
 808348e:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8083490:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 8083492:	6004      	str	r4, [r0, #0]
 8083494:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8083496:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 8083498:	6044      	str	r4, [r0, #4]
 808349a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808349c:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 808349e:	6084      	str	r4, [r0, #8]
}
 80834a0:	bd10      	pop	{r4, pc}

080834a2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
 80834a2:	b510      	push	{r4, lr}
 80834a4:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 80834a6:	6803      	ldr	r3, [r0, #0]
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80834a8:	6818      	ldr	r0, [r3, #0]
 80834aa:	f7fe fa5d 	bl	8081968 <os_mutex_recursive_unlock>
 80834ae:	4620      	mov	r0, r4
 80834b0:	bd10      	pop	{r4, pc}
	...

080834b4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 80834b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80834b8:	b087      	sub	sp, #28
 80834ba:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 80834bc:	4b1c      	ldr	r3, [pc, #112]	; (8083530 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 80834be:	4680      	mov	r8, r0
 80834c0:	685b      	ldr	r3, [r3, #4]
 80834c2:	4689      	mov	r9, r1
 80834c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80834c8:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80834ca:	b96b      	cbnz	r3, 80834e8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 80834cc:	f7ff fea8 	bl	8083220 <_ZN5spark10LogManager8instanceEv>
 80834d0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80834d2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 80834d6:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80834d8:	9305      	str	r3, [sp, #20]
 80834da:	f7fe fa3d 	bl	8081958 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
 80834de:	7b23      	ldrb	r3, [r4, #12]
 80834e0:	b12b      	cbz	r3, 80834ee <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 80834e2:	a805      	add	r0, sp, #20
 80834e4:	f7ff ffdd 	bl	80834a2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 80834e8:	b007      	add	sp, #28
 80834ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80834ee:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 80834f0:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 80834f4:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 80834f6:	e9d4 5300 	ldrd	r5, r3, [r4]
 80834fa:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80834fe:	45aa      	cmp	sl, r5
 8083500:	d012      	beq.n	8083528 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 8083502:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 8083506:	4631      	mov	r1, r6
 8083508:	1d38      	adds	r0, r7, #4
 808350a:	f7ff fe15 	bl	8083138 <_ZNK5spark6detail9LogFilter5levelEPKc>
 808350e:	4581      	cmp	r9, r0
 8083510:	d3f5      	bcc.n	80834fe <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 8083512:	9a03      	ldr	r2, [sp, #12]
 8083514:	683b      	ldr	r3, [r7, #0]
 8083516:	9200      	str	r2, [sp, #0]
 8083518:	f8d3 b008 	ldr.w	fp, [r3, #8]
 808351c:	464a      	mov	r2, r9
 808351e:	4633      	mov	r3, r6
 8083520:	4641      	mov	r1, r8
 8083522:	4638      	mov	r0, r7
 8083524:	47d8      	blx	fp
 8083526:	e7ea      	b.n	80834fe <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 8083528:	2300      	movs	r3, #0
 808352a:	7323      	strb	r3, [r4, #12]
 808352c:	e7d9      	b.n	80834e2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 808352e:	bf00      	nop
 8083530:	e000ed00 	.word	0xe000ed00

08083534 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 8083534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8083538:	469b      	mov	fp, r3
 808353a:	4b1a      	ldr	r3, [pc, #104]	; (80835a4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 808353c:	4680      	mov	r8, r0
 808353e:	685b      	ldr	r3, [r3, #4]
 8083540:	4689      	mov	r9, r1
 8083542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8083546:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
 8083548:	b96b      	cbnz	r3, 8083566 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 808354a:	f7ff fe69 	bl	8083220 <_ZN5spark10LogManager8instanceEv>
 808354e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 8083550:	f100 0324 	add.w	r3, r0, #36	; 0x24
 8083554:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8083556:	9301      	str	r3, [sp, #4]
 8083558:	f7fe f9fe 	bl	8081958 <os_mutex_recursive_lock>
        if (that->isActive()) {
 808355c:	7b23      	ldrb	r3, [r4, #12]
 808355e:	b12b      	cbz	r3, 808356c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 8083560:	a801      	add	r0, sp, #4
 8083562:	f7ff ff9e 	bl	80834a2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 8083566:	b003      	add	sp, #12
 8083568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 808356c:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 808356e:	b2f6      	uxtb	r6, r6
 8083570:	7323      	strb	r3, [r4, #12]
 8083572:	e9d4 5300 	ldrd	r5, r3, [r4]
 8083576:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 808357a:	4555      	cmp	r5, sl
 808357c:	d00e      	beq.n	808359c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 808357e:	f855 7b04 	ldr.w	r7, [r5], #4
 8083582:	4659      	mov	r1, fp
 8083584:	1d38      	adds	r0, r7, #4
 8083586:	f7ff fdd7 	bl	8083138 <_ZNK5spark6detail9LogFilter5levelEPKc>
 808358a:	4286      	cmp	r6, r0
 808358c:	d3f5      	bcc.n	808357a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 808358e:	683b      	ldr	r3, [r7, #0]
 8083590:	464a      	mov	r2, r9
 8083592:	4641      	mov	r1, r8
 8083594:	4638      	mov	r0, r7
 8083596:	68db      	ldr	r3, [r3, #12]
 8083598:	4798      	blx	r3
 808359a:	e7ee      	b.n	808357a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 808359c:	2300      	movs	r3, #0
 808359e:	7323      	strb	r3, [r4, #12]
 80835a0:	e7de      	b.n	8083560 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 80835a2:	bf00      	nop
 80835a4:	e000ed00 	.word	0xe000ed00

080835a8 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 80835a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80835ac:	4b16      	ldr	r3, [pc, #88]	; (8083608 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 80835ae:	4605      	mov	r5, r0
 80835b0:	685b      	ldr	r3, [r3, #4]
 80835b2:	460f      	mov	r7, r1
 80835b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (HAL_IsISR()) {
 80835b8:	bb1b      	cbnz	r3, 8083602 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 80835ba:	f7ff fe31 	bl	8083220 <_ZN5spark10LogManager8instanceEv>
 80835be:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80835c0:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80835c4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80835c6:	9301      	str	r3, [sp, #4]
 80835c8:	f7fe f9c6 	bl	8081958 <os_mutex_recursive_lock>
 80835cc:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 80835d0:	2446      	movs	r4, #70	; 0x46
 80835d2:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80835d6:	45b0      	cmp	r8, r6
 80835d8:	d109      	bne.n	80835ee <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 80835da:	a801      	add	r0, sp, #4
 80835dc:	f7ff ff61 	bl	80834a2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 80835e0:	42a5      	cmp	r5, r4
 80835e2:	bfb4      	ite	lt
 80835e4:	2000      	movlt	r0, #0
 80835e6:	2001      	movge	r0, #1
}
 80835e8:	b002      	add	sp, #8
 80835ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 80835ee:	f856 0b04 	ldr.w	r0, [r6], #4
 80835f2:	4639      	mov	r1, r7
 80835f4:	3004      	adds	r0, #4
 80835f6:	f7ff fd9f 	bl	8083138 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 80835fa:	4284      	cmp	r4, r0
 80835fc:	bfa8      	it	ge
 80835fe:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 8083600:	e7e9      	b.n	80835d6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 8083602:	2000      	movs	r0, #0
 8083604:	e7f0      	b.n	80835e8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 8083606:	bf00      	nop
 8083608:	e000ed00 	.word	0xe000ed00

0808360c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 808360c:	460b      	mov	r3, r1
 808360e:	b570      	push	{r4, r5, r6, lr}
 8083610:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 8083612:	c805      	ldmia	r0, {r0, r2}
 8083614:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 8083618:	4282      	cmp	r2, r0
 808361a:	d007      	beq.n	808362c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x20>
 808361c:	4601      	mov	r1, r0
            if (*p == value) {
 808361e:	681d      	ldr	r5, [r3, #0]
 8083620:	f851 6b04 	ldr.w	r6, [r1], #4
 8083624:	42ae      	cmp	r6, r5
 8083626:	d003      	beq.n	8083630 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
 8083628:	4608      	mov	r0, r1
 808362a:	e7f5      	b.n	8083618 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
        return false;
 808362c:	2000      	movs	r0, #0
}
 808362e:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
 8083630:	1a52      	subs	r2, r2, r1
 8083632:	f002 fac8 	bl	8085bc6 <memmove>
    --size_;
 8083636:	6863      	ldr	r3, [r4, #4]
    return true;
 8083638:	2001      	movs	r0, #1
    --size_;
 808363a:	3b01      	subs	r3, #1
 808363c:	6063      	str	r3, [r4, #4]
    return true;
 808363e:	e7f6      	b.n	808362e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>

08083640 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 8083640:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8083642:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 8083644:	f100 0324 	add.w	r3, r0, #36	; 0x24
 8083648:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 808364a:	9101      	str	r1, [sp, #4]
 808364c:	9303      	str	r3, [sp, #12]
 808364e:	f7fe f983 	bl	8081958 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 8083652:	4620      	mov	r0, r4
 8083654:	a901      	add	r1, sp, #4
 8083656:	f7ff ffd9 	bl	808360c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 808365a:	b118      	cbz	r0, 8083664 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 808365c:	6863      	ldr	r3, [r4, #4]
 808365e:	b90b      	cbnz	r3, 8083664 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 8083660:	f7ff fe06 	bl	8083270 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 8083664:	a803      	add	r0, sp, #12
 8083666:	f7ff ff1c 	bl	80834a2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 808366a:	b004      	add	sp, #16
 808366c:	bd10      	pop	{r4, pc}

0808366e <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 808366e:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 8083670:	b570      	push	{r4, r5, r6, lr}
 8083672:	4604      	mov	r4, r0
 8083674:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 8083678:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 808367c:	42ae      	cmp	r6, r5
 808367e:	d015      	beq.n	80836ac <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 8083680:	4620      	mov	r0, r4
 8083682:	f105 0110 	add.w	r1, r5, #16
 8083686:	f7ff ffc1 	bl	808360c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 808368a:	6863      	ldr	r3, [r4, #4]
 808368c:	b90b      	cbnz	r3, 8083692 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 808368e:	f7ff fdef 	bl	8083270 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 8083692:	69e0      	ldr	r0, [r4, #28]
 8083694:	6929      	ldr	r1, [r5, #16]
 8083696:	6803      	ldr	r3, [r0, #0]
 8083698:	68db      	ldr	r3, [r3, #12]
 808369a:	4798      	blx	r3
        if (h.stream) {
 808369c:	6969      	ldr	r1, [r5, #20]
 808369e:	b119      	cbz	r1, 80836a8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 80836a0:	6a20      	ldr	r0, [r4, #32]
 80836a2:	6803      	ldr	r3, [r0, #0]
 80836a4:	68db      	ldr	r3, [r3, #12]
 80836a6:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 80836a8:	3518      	adds	r5, #24
 80836aa:	e7e7      	b.n	808367c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 80836ac:	2618      	movs	r6, #24
 80836ae:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 80836b2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80836b6:	42ae      	cmp	r6, r5
 80836b8:	d004      	beq.n	80836c4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 80836ba:	4628      	mov	r0, r5
 80836bc:	f000 fd51 	bl	8084162 <_ZN6StringD1Ev>
 80836c0:	3518      	adds	r5, #24
 80836c2:	e7f8      	b.n	80836b6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 80836c4:	2300      	movs	r3, #0
 80836c6:	6163      	str	r3, [r4, #20]
}
 80836c8:	bd70      	pop	{r4, r5, r6, pc}

080836ca <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 80836ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80836cc:	4604      	mov	r4, r0
    resetSystemCallbacks();
 80836ce:	f7ff fdcf 	bl	8083270 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80836d2:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80836d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80836d8:	9301      	str	r3, [sp, #4]
 80836da:	f7fe f93d 	bl	8081958 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
 80836de:	4620      	mov	r0, r4
 80836e0:	f7ff ffc5 	bl	808366e <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 80836e4:	a801      	add	r0, sp, #4
 80836e6:	f7ff fedc 	bl	80834a2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 80836ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80836ec:	b108      	cbz	r0, 80836f2 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 80836ee:	f7fe f92b 	bl	8081948 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 80836f2:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 80836f6:	2618      	movs	r6, #24
 80836f8:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80836fc:	42ae      	cmp	r6, r5
 80836fe:	d004      	beq.n	808370a <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 8083700:	4628      	mov	r0, r5
 8083702:	f000 fd2e 	bl	8084162 <_ZN6StringD1Ev>
 8083706:	3518      	adds	r5, #24
 8083708:	e7f8      	b.n	80836fc <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 808370a:	6920      	ldr	r0, [r4, #16]
 808370c:	f7fe fc14 	bl	8081f38 <free>
 8083710:	6820      	ldr	r0, [r4, #0]
 8083712:	f7fe fc11 	bl	8081f38 <free>
}
 8083716:	4620      	mov	r0, r4
 8083718:	b002      	add	sp, #8
 808371a:	bd70      	pop	{r4, r5, r6, pc}

0808371c <__tcf_2>:
    static LogManager mgr;
 808371c:	4801      	ldr	r0, [pc, #4]	; (8083724 <__tcf_2+0x8>)
 808371e:	f7ff bfd4 	b.w	80836ca <_ZN5spark10LogManagerD1Ev>
 8083722:	bf00      	nop
 8083724:	200001dc 	.word	0x200001dc

08083728 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 8083728:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 808372a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808372c:	4606      	mov	r6, r0
 808372e:	460c      	mov	r4, r1
 8083730:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 8083732:	d927      	bls.n	8083784 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
 8083734:	4290      	cmp	r0, r2
 8083736:	d226      	bcs.n	8083786 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
        capacity_(0) {
 8083738:	2600      	movs	r6, #0
            --end;
 808373a:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
 808373e:	1a6c      	subs	r4, r5, r1
 8083740:	f1a1 0714 	sub.w	r7, r1, #20
 8083744:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 8083746:	42af      	cmp	r7, r5
 8083748:	d03d      	beq.n	80837c6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
 808374a:	b1a4      	cbz	r4, 8083776 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
 808374c:	682b      	ldr	r3, [r5, #0]
 808374e:	6023      	str	r3, [r4, #0]
 8083750:	88ab      	ldrh	r3, [r5, #4]
 8083752:	80a3      	strh	r3, [r4, #4]
 8083754:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
        capacity_(0) {
 8083758:	e9c4 6602 	strd	r6, r6, [r4, #8]
 808375c:	6126      	str	r6, [r4, #16]
 808375e:	80e3      	strh	r3, [r4, #6]
 8083760:	68ab      	ldr	r3, [r5, #8]
 8083762:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8083764:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8083766:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 8083768:	68ea      	ldr	r2, [r5, #12]
 808376a:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808376c:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808376e:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 8083770:	692a      	ldr	r2, [r5, #16]
 8083772:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8083774:	612b      	str	r3, [r5, #16]
 8083776:	f105 0008 	add.w	r0, r5, #8
 808377a:	f7ff fe29 	bl	80833d0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 808377e:	3d14      	subs	r5, #20
 8083780:	3c14      	subs	r4, #20
 8083782:	e7e0      	b.n	8083746 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
 8083784:	d01f      	beq.n	80837c6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
 8083786:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
 8083788:	42ac      	cmp	r4, r5
 808378a:	d01c      	beq.n	80837c6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
 808378c:	b1a6      	cbz	r6, 80837b8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
 808378e:	6823      	ldr	r3, [r4, #0]
 8083790:	6033      	str	r3, [r6, #0]
 8083792:	88a3      	ldrh	r3, [r4, #4]
 8083794:	80b3      	strh	r3, [r6, #4]
 8083796:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
        capacity_(0) {
 808379a:	e9c6 7702 	strd	r7, r7, [r6, #8]
 808379e:	6137      	str	r7, [r6, #16]
 80837a0:	80f3      	strh	r3, [r6, #6]
      __a = _GLIBCXX_MOVE(__b);
 80837a2:	68a3      	ldr	r3, [r4, #8]
 80837a4:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80837a6:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80837a8:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
 80837aa:	68e2      	ldr	r2, [r4, #12]
 80837ac:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80837ae:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80837b0:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
 80837b2:	6922      	ldr	r2, [r4, #16]
 80837b4:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80837b6:	6123      	str	r3, [r4, #16]
 80837b8:	f104 0008 	add.w	r0, r4, #8
 80837bc:	f7ff fe08 	bl	80833d0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 80837c0:	3414      	adds	r4, #20
 80837c2:	3614      	adds	r6, #20
 80837c4:	e7e0      	b.n	8083788 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
 80837c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080837c8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80837c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80837ca:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 80837ce:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80837d0:	4604      	mov	r4, r0
 80837d2:	460e      	mov	r6, r1
 80837d4:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80837d6:	db0d      	blt.n	80837f4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
 80837d8:	3501      	adds	r5, #1
        if (n > 0) {
 80837da:	2d00      	cmp	r5, #0
 80837dc:	6800      	ldr	r0, [r0, #0]
 80837de:	dd04      	ble.n	80837ea <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
 80837e0:	00a9      	lsls	r1, r5, #2
 80837e2:	f7fe fbb1 	bl	8081f48 <realloc>
            if (!d) {
 80837e6:	b918      	cbnz	r0, 80837f0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
 80837e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 80837ea:	f7fe fba5 	bl	8081f38 <free>
        T* d = nullptr;
 80837ee:	2000      	movs	r0, #0
        data_ = d;
 80837f0:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 80837f2:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
 80837f4:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
 80837f6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 80837f8:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
 80837fc:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 80837fe:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
 8083802:	1d08      	adds	r0, r1, #4
 8083804:	f002 f9df 	bl	8085bc6 <memmove>
    new(p) T(std::move(value));
 8083808:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
 808380c:	6863      	ldr	r3, [r4, #4]
    return true;
 808380e:	2001      	movs	r0, #1
    ++size_;
 8083810:	3301      	adds	r3, #1
 8083812:	6063      	str	r3, [r4, #4]
    return true;
 8083814:	e7e8      	b.n	80837e8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

08083816 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 8083816:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8083818:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 808381a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 808381e:	6a40      	ldr	r0, [r0, #36]	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
 8083820:	460d      	mov	r5, r1
 8083822:	9301      	str	r3, [sp, #4]
 8083824:	f7fe f898 	bl	8081958 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
 8083828:	e9d4 3100 	ldrd	r3, r1, [r4]
 808382c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
 8083830:	4283      	cmp	r3, r0
 8083832:	461a      	mov	r2, r3
 8083834:	d00a      	beq.n	808384c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 8083836:	6812      	ldr	r2, [r2, #0]
 8083838:	3304      	adds	r3, #4
 808383a:	42aa      	cmp	r2, r5
 808383c:	d1f8      	bne.n	8083830 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
 808383e:	a801      	add	r0, sp, #4
 8083840:	f7ff fe2f 	bl	80834a2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
 8083844:	2500      	movs	r5, #0
}
 8083846:	4628      	mov	r0, r5
 8083848:	b003      	add	sp, #12
 808384a:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
 808384c:	462a      	mov	r2, r5
 808384e:	4620      	mov	r0, r4
 8083850:	f7ff ffba 	bl	80837c8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 8083854:	4605      	mov	r5, r0
 8083856:	2800      	cmp	r0, #0
 8083858:	d0f1      	beq.n	808383e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 808385a:	6863      	ldr	r3, [r4, #4]
 808385c:	2b01      	cmp	r3, #1
 808385e:	d101      	bne.n	8083864 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 8083860:	f7ff fcfa 	bl	8083258 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 8083864:	a801      	add	r0, sp, #4
 8083866:	f7ff fe1c 	bl	80834a2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 808386a:	e7ec      	b.n	8083846 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

0808386c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 808386c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 808386e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8083870:	4604      	mov	r4, r0
 8083872:	460d      	mov	r5, r1
 8083874:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 8083876:	d914      	bls.n	80838a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 8083878:	4290      	cmp	r0, r2
 808387a:	d213      	bcs.n	80838a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 808387c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 8083880:	1a75      	subs	r5, r6, r1
 8083882:	f1a1 0710 	sub.w	r7, r1, #16
 8083886:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 8083888:	42b7      	cmp	r7, r6
 808388a:	d018      	beq.n	80838be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 808388c:	b11c      	cbz	r4, 8083896 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 808388e:	4631      	mov	r1, r6
 8083890:	4620      	mov	r0, r4
 8083892:	f000 fce0 	bl	8084256 <_ZN6StringC1EOS_>
                end->~T();
 8083896:	4630      	mov	r0, r6
 8083898:	f000 fc63 	bl	8084162 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 808389c:	3e10      	subs	r6, #16
 808389e:	3c10      	subs	r4, #16
 80838a0:	e7f2      	b.n	8083888 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 80838a2:	d00c      	beq.n	80838be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 80838a4:	42b5      	cmp	r5, r6
 80838a6:	d00a      	beq.n	80838be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 80838a8:	b11c      	cbz	r4, 80838b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 80838aa:	4629      	mov	r1, r5
 80838ac:	4620      	mov	r0, r4
 80838ae:	f000 fcd2 	bl	8084256 <_ZN6StringC1EOS_>
                p->~T();
 80838b2:	4628      	mov	r0, r5
 80838b4:	f000 fc55 	bl	8084162 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 80838b8:	3510      	adds	r5, #16
 80838ba:	3410      	adds	r4, #16
 80838bc:	e7f2      	b.n	80838a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 80838be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080838c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 80838c0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 80838c2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 80838c4:	4605      	mov	r5, r0
        if (n > 0) {
 80838c6:	dd11      	ble.n	80838ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 80838c8:	0130      	lsls	r0, r6, #4
 80838ca:	f7fe fb2d 	bl	8081f28 <malloc>
            if (!d) {
 80838ce:	4604      	mov	r4, r0
 80838d0:	b158      	cbz	r0, 80838ea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 80838d2:	e9d5 1200 	ldrd	r1, r2, [r5]
 80838d6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80838da:	f7ff ffc7 	bl	808386c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 80838de:	6828      	ldr	r0, [r5, #0]
 80838e0:	f7fe fb2a 	bl	8081f38 <free>
        return true;
 80838e4:	2001      	movs	r0, #1
        data_ = d;
 80838e6:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 80838e8:	60ae      	str	r6, [r5, #8]
    }
 80838ea:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 80838ec:	2400      	movs	r4, #0
 80838ee:	e7f6      	b.n	80838de <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

080838f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80838f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80838f4:	4691      	mov	r9, r2
        capacity_(0) {
 80838f6:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80838f8:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80838fa:	b097      	sub	sp, #92	; 0x5c
 80838fc:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
 80838fe:	f8d9 1004 	ldr.w	r1, [r9, #4]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 8083902:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 8083904:	4299      	cmp	r1, r3
        capacity_(0) {
 8083906:	e9c0 3300 	strd	r3, r3, [r0]
 808390a:	e9c0 3302 	strd	r3, r3, [r0, #8]
 808390e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8083912:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 8083916:	7602      	strb	r2, [r0, #24]
 8083918:	930c      	str	r3, [sp, #48]	; 0x30
    if (n > capacity_ && !realloc(n)) {
 808391a:	dc23      	bgt.n	8083964 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 808391c:	e9d9 5700 	ldrd	r5, r7, [r9]
 8083920:	2314      	movs	r3, #20
 8083922:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 8083926:	42af      	cmp	r7, r5
 8083928:	d03b      	beq.n	80839a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 808392a:	4629      	mov	r1, r5
 808392c:	a80d      	add	r0, sp, #52	; 0x34
 808392e:	f000 fc92 	bl	8084256 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 8083932:	a90d      	add	r1, sp, #52	; 0x34
 8083934:	a811      	add	r0, sp, #68	; 0x44
 8083936:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8083938:	f000 fc8d 	bl	8084256 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 808393c:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 8083940:	4299      	cmp	r1, r3
 8083942:	da1b      	bge.n	808397c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 8083944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
 8083946:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
 8083948:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 808394c:	4631      	mov	r1, r6
 808394e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8083952:	f106 0010 	add.w	r0, r6, #16
 8083956:	f7ff ff89 	bl	808386c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 808395a:	b9ee      	cbnz	r6, 8083998 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 808395c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 808395e:	3301      	adds	r3, #1
 8083960:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
 8083962:	e011      	b.n	8083988 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 8083964:	a80a      	add	r0, sp, #40	; 0x28
 8083966:	f7ff ffab 	bl	80838c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 808396a:	2800      	cmp	r0, #0
 808396c:	d1d6      	bne.n	808391c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
 808396e:	a80a      	add	r0, sp, #40	; 0x28
 8083970:	f7ff fd42 	bl	80833f8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 8083974:	4620      	mov	r0, r4
 8083976:	b017      	add	sp, #92	; 0x5c
 8083978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 808397c:	3101      	adds	r1, #1
 808397e:	a80a      	add	r0, sp, #40	; 0x28
 8083980:	f7ff ff9e 	bl	80838c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 8083984:	2800      	cmp	r0, #0
 8083986:	d1dd      	bne.n	8083944 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 8083988:	a811      	add	r0, sp, #68	; 0x44
 808398a:	f000 fbea 	bl	8084162 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 808398e:	a80d      	add	r0, sp, #52	; 0x34
 8083990:	f000 fbe7 	bl	8084162 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 8083994:	3514      	adds	r5, #20
 8083996:	e7c6      	b.n	8083926 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 8083998:	4630      	mov	r0, r6
 808399a:	a911      	add	r1, sp, #68	; 0x44
 808399c:	f000 fc5b 	bl	8084256 <_ZN6StringC1EOS_>
 80839a0:	e7dc      	b.n	808395c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 80839a2:	2600      	movs	r6, #0
 80839a4:	f04f 0a14 	mov.w	sl, #20
        size_t size = 0; // Name length
 80839a8:	4637      	mov	r7, r6
 80839aa:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
 80839ae:	960f      	str	r6, [sp, #60]	; 0x3c
    for (int i = 0; i < cats.size(); ++i) {
 80839b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80839b4:	429e      	cmp	r6, r3
 80839b6:	f280 8097 	bge.w	8083ae8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
 80839ba:	0133      	lsls	r3, r6, #4
 80839bc:	58d3      	ldr	r3, [r2, r3]
 80839be:	9308      	str	r3, [sp, #32]
        if (!category) {
 80839c0:	b90b      	cbnz	r3, 80839c6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
 80839c2:	3601      	adds	r6, #1
 80839c4:	e7f4      	b.n	80839b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
 80839c6:	fb0a f306 	mul.w	r3, sl, r6
 80839ca:	9709      	str	r7, [sp, #36]	; 0x24
 80839cc:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
 80839ce:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
 80839d0:	a909      	add	r1, sp, #36	; 0x24
 80839d2:	a808      	add	r0, sp, #32
 80839d4:	f7ff fae7 	bl	8082fa6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80839d8:	4683      	mov	fp, r0
 80839da:	2800      	cmp	r0, #0
 80839dc:	d0f1      	beq.n	80839c2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
 80839de:	4601      	mov	r1, r0
 80839e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80839e2:	4628      	mov	r0, r5
 80839e4:	f10d 031f 	add.w	r3, sp, #31
            bool found = false;
 80839e8:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 80839ec:	f7ff fb66 	bl	80830bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80839f0:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 80839f4:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80839f6:	f1b8 0f00 	cmp.w	r8, #0
 80839fa:	d166      	bne.n	8083aca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
 80839fc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8083a00:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
            level(-1) {
 8083a04:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 8083a08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8083a0c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8083a10:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8083a14:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8083a18:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 8083a1c:	4293      	cmp	r3, r2
 8083a1e:	db1a      	blt.n	8083a56 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
 8083a20:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
 8083a24:	f1bb 0f00 	cmp.w	fp, #0
 8083a28:	dd4a      	ble.n	8083ac0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
 8083a2a:	fb0a f00b 	mul.w	r0, sl, fp
 8083a2e:	f7fe fa7b 	bl	8081f28 <malloc>
            if (!d) {
 8083a32:	9004      	str	r0, [sp, #16]
 8083a34:	2800      	cmp	r0, #0
 8083a36:	d045      	beq.n	8083ac4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
 8083a38:	e9d5 1200 	ldrd	r1, r2, [r5]
 8083a3c:	fb0a 1202 	mla	r2, sl, r2, r1
 8083a40:	f7ff fe72 	bl	8083728 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
 8083a44:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
 8083a46:	6828      	ldr	r0, [r5, #0]
 8083a48:	9304      	str	r3, [sp, #16]
 8083a4a:	f7fe fa75 	bl	8081f38 <free>
        data_ = d;
 8083a4e:	9b04      	ldr	r3, [sp, #16]
        capacity_ = n;
 8083a50:	f8c5 b008 	str.w	fp, [r5, #8]
        data_ = d;
 8083a54:	602b      	str	r3, [r5, #0]
    T* const p = data_ + i;
 8083a56:	9b01      	ldr	r3, [sp, #4]
 8083a58:	f8d5 b000 	ldr.w	fp, [r5]
 8083a5c:	fb0a f303 	mul.w	r3, sl, r3
    move(p + 1, p, data_ + size_);
 8083a60:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
 8083a62:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
 8083a66:	f101 0014 	add.w	r0, r1, #20
 8083a6a:	fb0a b202 	mla	r2, sl, r2, fp
 8083a6e:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
 8083a70:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
 8083a72:	f7ff fe59 	bl	8083728 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 8083a76:	9904      	ldr	r1, [sp, #16]
 8083a78:	b1a9      	cbz	r1, 8083aa6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
 8083a7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8083a7c:	9b05      	ldr	r3, [sp, #20]
 8083a7e:	f84b 2003 	str.w	r2, [fp, r3]
 8083a82:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8083a86:	808b      	strh	r3, [r1, #4]
 8083a88:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
        capacity_(0) {
 8083a8c:	e9c1 7702 	strd	r7, r7, [r1, #8]
 8083a90:	610f      	str	r7, [r1, #16]
 8083a92:	80cb      	strh	r3, [r1, #6]
      __a = _GLIBCXX_MOVE(__b);
 8083a94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8083a96:	608b      	str	r3, [r1, #8]
 8083a98:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
 8083a9a:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
 8083a9c:	60cb      	str	r3, [r1, #12]
 8083a9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
 8083aa0:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
 8083aa2:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8083aa4:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
 8083aa6:	686b      	ldr	r3, [r5, #4]
 8083aa8:	3301      	adds	r3, #1
 8083aaa:	606b      	str	r3, [r5, #4]
 8083aac:	a813      	add	r0, sp, #76	; 0x4c
 8083aae:	f7ff fc8f 	bl	80833d0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 8083ab2:	f1b8 0f00 	cmp.w	r8, #0
 8083ab6:	d008      	beq.n	8083aca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
 8083ab8:	a80d      	add	r0, sp, #52	; 0x34
 8083aba:	f7ff fc89 	bl	80833d0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 8083abe:	e756      	b.n	808396e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 8083ac0:	4643      	mov	r3, r8
 8083ac2:	e7c0      	b.n	8083a46 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 8083ac4:	f04f 0801 	mov.w	r8, #1
 8083ac8:	e7f0      	b.n	8083aac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
 8083aca:	9b01      	ldr	r3, [sp, #4]
 8083acc:	682d      	ldr	r5, [r5, #0]
 8083ace:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
 8083ad2:	9b08      	ldr	r3, [sp, #32]
 8083ad4:	781b      	ldrb	r3, [r3, #0]
 8083ad6:	b92b      	cbnz	r3, 8083ae4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
 8083ad8:	f8d9 3000 	ldr.w	r3, [r9]
 8083adc:	9a02      	ldr	r2, [sp, #8]
 8083ade:	4413      	add	r3, r2
 8083ae0:	7c1b      	ldrb	r3, [r3, #16]
 8083ae2:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 8083ae4:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 8083ae6:	e773      	b.n	80839d0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8083ae8:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 8083aea:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8083aec:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 8083aee:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8083af0:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8083af2:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
 8083af4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 8083af6:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8083af8:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 8083afa:	60a2      	str	r2, [r4, #8]
 8083afc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 8083afe:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8083b00:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 8083b02:	60e2      	str	r2, [r4, #12]
 8083b04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
 8083b06:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8083b08:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 8083b0a:	6122      	str	r2, [r4, #16]
 8083b0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
 8083b0e:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
 8083b10:	9b03      	ldr	r3, [sp, #12]
 8083b12:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
 8083b14:	6162      	str	r2, [r4, #20]
 8083b16:	7623      	strb	r3, [r4, #24]
 8083b18:	e7ce      	b.n	8083ab8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

08083b1c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 8083b1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
 8083b1e:	4605      	mov	r5, r0
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 8083b20:	460e      	mov	r6, r1
 8083b22:	4604      	mov	r4, r0
        filter_(level, filters) {
 8083b24:	4b08      	ldr	r3, [pc, #32]	; (8083b48 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
 8083b26:	4611      	mov	r1, r2
 8083b28:	f845 3b04 	str.w	r3, [r5], #4
 8083b2c:	a801      	add	r0, sp, #4
 8083b2e:	f7fd fe49 	bl	80817c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 8083b32:	4631      	mov	r1, r6
 8083b34:	aa01      	add	r2, sp, #4
 8083b36:	4628      	mov	r0, r5
 8083b38:	f7ff feda 	bl	80838f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8083b3c:	a801      	add	r0, sp, #4
 8083b3e:	f7fd fc83 	bl	8081448 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 8083b42:	4620      	mov	r0, r4
 8083b44:	b004      	add	sp, #16
 8083b46:	bd70      	pop	{r4, r5, r6, pc}
 8083b48:	08086314 	.word	0x08086314

08083b4c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 8083b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8083b4e:	460f      	mov	r7, r1
 8083b50:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 8083b52:	4638      	mov	r0, r7
 8083b54:	4925      	ldr	r1, [pc, #148]	; (8083bec <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
 8083b56:	4616      	mov	r6, r2
 8083b58:	461d      	mov	r5, r3
 8083b5a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 8083b5c:	f002 f8a0 	bl	8085ca0 <strcmp>
 8083b60:	bb00      	cbnz	r0, 8083ba4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
 8083b62:	b1e4      	cbz	r4, 8083b9e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 8083b64:	4629      	mov	r1, r5
 8083b66:	4668      	mov	r0, sp
 8083b68:	f7ff fc8c 	bl	8083484 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 8083b6c:	2024      	movs	r0, #36	; 0x24
 8083b6e:	4920      	ldr	r1, [pc, #128]	; (8083bf0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 8083b70:	f001 f848 	bl	8084c04 <_ZnwjRKSt9nothrow_t>
 8083b74:	4605      	mov	r5, r0
 8083b76:	b170      	cbz	r0, 8083b96 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 8083b78:	4669      	mov	r1, sp
 8083b7a:	a803      	add	r0, sp, #12
 8083b7c:	f7fd fe22 	bl	80817c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 8083b80:	4631      	mov	r1, r6
 8083b82:	aa03      	add	r2, sp, #12
 8083b84:	4628      	mov	r0, r5
 8083b86:	f7ff ffc9 	bl	8083b1c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8083b8a:	a803      	add	r0, sp, #12
 8083b8c:	f7fd fc5c 	bl	8081448 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
 8083b90:	4b18      	ldr	r3, [pc, #96]	; (8083bf4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
 8083b92:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
 8083b94:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 8083b96:	4668      	mov	r0, sp
 8083b98:	f7fd fc56 	bl	8081448 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8083b9c:	462c      	mov	r4, r5
}
 8083b9e:	4620      	mov	r0, r4
 8083ba0:	b007      	add	sp, #28
 8083ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 8083ba4:	4638      	mov	r0, r7
 8083ba6:	4914      	ldr	r1, [pc, #80]	; (8083bf8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
 8083ba8:	f002 f87a 	bl	8085ca0 <strcmp>
 8083bac:	b9e0      	cbnz	r0, 8083be8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
 8083bae:	2c00      	cmp	r4, #0
 8083bb0:	d0f5      	beq.n	8083b9e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 8083bb2:	4629      	mov	r1, r5
 8083bb4:	4668      	mov	r0, sp
 8083bb6:	f7ff fc65 	bl	8083484 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 8083bba:	2024      	movs	r0, #36	; 0x24
 8083bbc:	490c      	ldr	r1, [pc, #48]	; (8083bf0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 8083bbe:	f001 f821 	bl	8084c04 <_ZnwjRKSt9nothrow_t>
 8083bc2:	4605      	mov	r5, r0
 8083bc4:	2800      	cmp	r0, #0
 8083bc6:	d0e6      	beq.n	8083b96 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 8083bc8:	4669      	mov	r1, sp
 8083bca:	a803      	add	r0, sp, #12
 8083bcc:	f7fd fdfa 	bl	80817c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 8083bd0:	4631      	mov	r1, r6
 8083bd2:	aa03      	add	r2, sp, #12
 8083bd4:	4628      	mov	r0, r5
 8083bd6:	f7ff ffa1 	bl	8083b1c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8083bda:	a803      	add	r0, sp, #12
 8083bdc:	f7fd fc34 	bl	8081448 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8083be0:	4b06      	ldr	r3, [pc, #24]	; (8083bfc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
 8083be2:	622c      	str	r4, [r5, #32]
 8083be4:	602b      	str	r3, [r5, #0]
}
 8083be6:	e7d6      	b.n	8083b96 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
 8083be8:	2400      	movs	r4, #0
 8083bea:	e7d8      	b.n	8083b9e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
 8083bec:	08086457 	.word	0x08086457
 8083bf0:	080865e0 	.word	0x080865e0
 8083bf4:	080864e8 	.word	0x080864e8
 8083bf8:	0808645b 	.word	0x0808645b
 8083bfc:	080864d0 	.word	0x080864d0

08083c00 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 8083c00:	4b01      	ldr	r3, [pc, #4]	; (8083c08 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8083c02:	4a02      	ldr	r2, [pc, #8]	; (8083c0c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8083c04:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 8083c06:	4770      	bx	lr
 8083c08:	200001d8 	.word	0x200001d8
 8083c0c:	0808646c 	.word	0x0808646c

08083c10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8083c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8083c14:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 8083c16:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8083c1a:	4604      	mov	r4, r0
 8083c1c:	460e      	mov	r6, r1
 8083c1e:	4617      	mov	r7, r2
 8083c20:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 8083c22:	f000 fdcb 	bl	80847bc <_Z16_fetch_usbserialv>
 8083c26:	4581      	cmp	r9, r0
 8083c28:	d04d      	beq.n	8083cc6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 8083c2a:	792b      	ldrb	r3, [r5, #4]
 8083c2c:	0719      	lsls	r1, r3, #28
 8083c2e:	d504      	bpl.n	8083c3a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 8083c30:	4620      	mov	r0, r4
 8083c32:	696a      	ldr	r2, [r5, #20]
 8083c34:	4954      	ldr	r1, [pc, #336]	; (8083d88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 8083c36:	f7ff fa31 	bl	808309c <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 8083c3a:	f1b8 0f00 	cmp.w	r8, #0
 8083c3e:	d00d      	beq.n	8083c5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 8083c40:	215b      	movs	r1, #91	; 0x5b
 8083c42:	4620      	mov	r0, r4
 8083c44:	f7ff fa1e 	bl	8083084 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 8083c48:	4641      	mov	r1, r8
 8083c4a:	4620      	mov	r0, r4
 8083c4c:	f7ff fa0c 	bl	8083068 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 8083c50:	6823      	ldr	r3, [r4, #0]
 8083c52:	2202      	movs	r2, #2
 8083c54:	4620      	mov	r0, r4
 8083c56:	68db      	ldr	r3, [r3, #12]
 8083c58:	494c      	ldr	r1, [pc, #304]	; (8083d8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 8083c5a:	4798      	blx	r3
    if (attr.has_file) {
 8083c5c:	792b      	ldrb	r3, [r5, #4]
 8083c5e:	07da      	lsls	r2, r3, #31
 8083c60:	d524      	bpl.n	8083cac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 8083c62:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 8083c66:	212f      	movs	r1, #47	; 0x2f
 8083c68:	4640      	mov	r0, r8
 8083c6a:	f002 f873 	bl	8085d54 <strrchr>
    if (s1) {
 8083c6e:	b108      	cbz	r0, 8083c74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 8083c70:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 8083c74:	4641      	mov	r1, r8
 8083c76:	4620      	mov	r0, r4
 8083c78:	f7ff f9f6 	bl	8083068 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 8083c7c:	792b      	ldrb	r3, [r5, #4]
 8083c7e:	079b      	lsls	r3, r3, #30
 8083c80:	d508      	bpl.n	8083c94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 8083c82:	213a      	movs	r1, #58	; 0x3a
 8083c84:	4620      	mov	r0, r4
 8083c86:	f7ff f9fd 	bl	8083084 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 8083c8a:	4620      	mov	r0, r4
 8083c8c:	68ea      	ldr	r2, [r5, #12]
 8083c8e:	4940      	ldr	r1, [pc, #256]	; (8083d90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 8083c90:	f7ff fa04 	bl	808309c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 8083c94:	792a      	ldrb	r2, [r5, #4]
 8083c96:	6823      	ldr	r3, [r4, #0]
 8083c98:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 8083c9c:	4620      	mov	r0, r4
            write(", ", 2);
 8083c9e:	f04f 0202 	mov.w	r2, #2
 8083ca2:	68db      	ldr	r3, [r3, #12]
 8083ca4:	bf14      	ite	ne
 8083ca6:	493b      	ldrne	r1, [pc, #236]	; (8083d94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 8083ca8:	493b      	ldreq	r1, [pc, #236]	; (8083d98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 8083caa:	4798      	blx	r3
    if (attr.has_function) {
 8083cac:	792b      	ldrb	r3, [r5, #4]
 8083cae:	0758      	lsls	r0, r3, #29
 8083cb0:	d51d      	bpl.n	8083cee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 8083cb2:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 8083cb4:	460b      	mov	r3, r1
 8083cb6:	461a      	mov	r2, r3
    for (; *s; ++s) {
 8083cb8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8083cbc:	b160      	cbz	r0, 8083cd8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 8083cbe:	2820      	cmp	r0, #32
 8083cc0:	d108      	bne.n	8083cd4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 8083cc2:	4619      	mov	r1, r3
 8083cc4:	e7f7      	b.n	8083cb6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 8083cc6:	4835      	ldr	r0, [pc, #212]	; (8083d9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 8083cc8:	f000 f967 	bl	8083f9a <_ZN5spark12NetworkClass9listeningEv>
 8083ccc:	2800      	cmp	r0, #0
 8083cce:	d0ac      	beq.n	8083c2a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 8083cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 8083cd4:	2828      	cmp	r0, #40	; 0x28
 8083cd6:	d1ee      	bne.n	8083cb6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 8083cd8:	6823      	ldr	r3, [r4, #0]
 8083cda:	1a52      	subs	r2, r2, r1
 8083cdc:	4620      	mov	r0, r4
 8083cde:	68db      	ldr	r3, [r3, #12]
 8083ce0:	4798      	blx	r3
        write("(): ", 4);
 8083ce2:	6823      	ldr	r3, [r4, #0]
 8083ce4:	2204      	movs	r2, #4
 8083ce6:	4620      	mov	r0, r4
 8083ce8:	68db      	ldr	r3, [r3, #12]
 8083cea:	492d      	ldr	r1, [pc, #180]	; (8083da0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 8083cec:	4798      	blx	r3
    return log_level_name(level, nullptr);
 8083cee:	2100      	movs	r1, #0
 8083cf0:	4638      	mov	r0, r7
 8083cf2:	f7fd ffd9 	bl	8081ca8 <log_level_name>
 8083cf6:	4601      	mov	r1, r0
    write(s);
 8083cf8:	4620      	mov	r0, r4
 8083cfa:	f7ff f9b5 	bl	8083068 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 8083cfe:	6823      	ldr	r3, [r4, #0]
 8083d00:	2202      	movs	r2, #2
 8083d02:	4620      	mov	r0, r4
 8083d04:	68db      	ldr	r3, [r3, #12]
 8083d06:	4924      	ldr	r1, [pc, #144]	; (8083d98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 8083d08:	4798      	blx	r3
    if (msg) {
 8083d0a:	b11e      	cbz	r6, 8083d14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 8083d0c:	4631      	mov	r1, r6
 8083d0e:	4620      	mov	r0, r4
 8083d10:	f7ff f9aa 	bl	8083068 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 8083d14:	792b      	ldrb	r3, [r5, #4]
 8083d16:	f013 0f30 	tst.w	r3, #48	; 0x30
 8083d1a:	d02c      	beq.n	8083d76 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 8083d1c:	6823      	ldr	r3, [r4, #0]
 8083d1e:	4921      	ldr	r1, [pc, #132]	; (8083da4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 8083d20:	68db      	ldr	r3, [r3, #12]
 8083d22:	2202      	movs	r2, #2
 8083d24:	4620      	mov	r0, r4
 8083d26:	4798      	blx	r3
        if (attr.has_code) {
 8083d28:	792b      	ldrb	r3, [r5, #4]
 8083d2a:	06d9      	lsls	r1, r3, #27
 8083d2c:	d50a      	bpl.n	8083d44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 8083d2e:	6823      	ldr	r3, [r4, #0]
 8083d30:	2207      	movs	r2, #7
 8083d32:	4620      	mov	r0, r4
 8083d34:	491c      	ldr	r1, [pc, #112]	; (8083da8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 8083d36:	68db      	ldr	r3, [r3, #12]
 8083d38:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 8083d3a:	4620      	mov	r0, r4
 8083d3c:	69aa      	ldr	r2, [r5, #24]
 8083d3e:	491b      	ldr	r1, [pc, #108]	; (8083dac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 8083d40:	f7ff f9ac 	bl	808309c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 8083d44:	792b      	ldrb	r3, [r5, #4]
 8083d46:	069a      	lsls	r2, r3, #26
 8083d48:	d511      	bpl.n	8083d6e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 8083d4a:	06db      	lsls	r3, r3, #27
 8083d4c:	d505      	bpl.n	8083d5a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 8083d4e:	6823      	ldr	r3, [r4, #0]
 8083d50:	2202      	movs	r2, #2
 8083d52:	4620      	mov	r0, r4
 8083d54:	68db      	ldr	r3, [r3, #12]
 8083d56:	490f      	ldr	r1, [pc, #60]	; (8083d94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 8083d58:	4798      	blx	r3
            write("details = ", 10);
 8083d5a:	6823      	ldr	r3, [r4, #0]
 8083d5c:	4620      	mov	r0, r4
 8083d5e:	4914      	ldr	r1, [pc, #80]	; (8083db0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 8083d60:	220a      	movs	r2, #10
 8083d62:	68db      	ldr	r3, [r3, #12]
 8083d64:	4798      	blx	r3
            write(attr.details);
 8083d66:	4620      	mov	r0, r4
 8083d68:	69e9      	ldr	r1, [r5, #28]
 8083d6a:	f7ff f97d 	bl	8083068 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 8083d6e:	215d      	movs	r1, #93	; 0x5d
 8083d70:	4620      	mov	r0, r4
 8083d72:	f7ff f987 	bl	8083084 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 8083d76:	6823      	ldr	r3, [r4, #0]
 8083d78:	4620      	mov	r0, r4
}
 8083d7a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 8083d7e:	2202      	movs	r2, #2
 8083d80:	68db      	ldr	r3, [r3, #12]
 8083d82:	490c      	ldr	r1, [pc, #48]	; (8083db4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 8083d84:	4718      	bx	r3
 8083d86:	bf00      	nop
 8083d88:	08086470 	.word	0x08086470
 8083d8c:	08086477 	.word	0x08086477
 8083d90:	08086434 	.word	0x08086434
 8083d94:	0808647a 	.word	0x0808647a
 8083d98:	0808647f 	.word	0x0808647f
 8083d9c:	20000204 	.word	0x20000204
 8083da0:	0808647d 	.word	0x0808647d
 8083da4:	08086482 	.word	0x08086482
 8083da8:	08086485 	.word	0x08086485
 8083dac:	0808620a 	.word	0x0808620a
 8083db0:	0808648d 	.word	0x0808648d
 8083db4:	08086498 	.word	0x08086498

08083db8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8083db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8083dbc:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
 8083dbe:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8083dc2:	4605      	mov	r5, r0
 8083dc4:	460f      	mov	r7, r1
 8083dc6:	4690      	mov	r8, r2
 8083dc8:	461e      	mov	r6, r3
 8083dca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 8083dcc:	f000 fcf6 	bl	80847bc <_Z16_fetch_usbserialv>
 8083dd0:	4581      	cmp	r9, r0
 8083dd2:	d105      	bne.n	8083de0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 8083dd4:	4849      	ldr	r0, [pc, #292]	; (8083efc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 8083dd6:	f000 f8e0 	bl	8083f9a <_ZN5spark12NetworkClass9listeningEv>
 8083dda:	2800      	cmp	r0, #0
 8083ddc:	f040 808a 	bne.w	8083ef4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 8083de0:	f04f 0900 	mov.w	r9, #0
    JSONStreamWriter json(*this->stream());
 8083de4:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 8083de6:	4a46      	ldr	r2, [pc, #280]	; (8083f00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 8083de8:	a801      	add	r0, sp, #4
 8083dea:	9201      	str	r2, [sp, #4]
 8083dec:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 8083dee:	f88d 9008 	strb.w	r9, [sp, #8]
 8083df2:	f7ff f822 	bl	8082e3a <_ZN5spark10JSONWriter11beginObjectEv>
 8083df6:	4649      	mov	r1, r9
 8083df8:	4640      	mov	r0, r8
 8083dfa:	f7fd ff55 	bl	8081ca8 <log_level_name>
 8083dfe:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 8083e00:	4940      	ldr	r1, [pc, #256]	; (8083f04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 8083e02:	2201      	movs	r2, #1
 8083e04:	a801      	add	r0, sp, #4
 8083e06:	f7ff f8a1 	bl	8082f4c <_ZN5spark10JSONWriter4nameEPKcj>
 8083e0a:	4641      	mov	r1, r8
 8083e0c:	f7ff f91f 	bl	808304e <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 8083e10:	b13f      	cbz	r7, 8083e22 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 8083e12:	493d      	ldr	r1, [pc, #244]	; (8083f08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 8083e14:	2201      	movs	r2, #1
 8083e16:	a801      	add	r0, sp, #4
 8083e18:	f7ff f898 	bl	8082f4c <_ZN5spark10JSONWriter4nameEPKcj>
 8083e1c:	4639      	mov	r1, r7
 8083e1e:	f7ff f916 	bl	808304e <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 8083e22:	b13e      	cbz	r6, 8083e34 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 8083e24:	4939      	ldr	r1, [pc, #228]	; (8083f0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 8083e26:	2201      	movs	r2, #1
 8083e28:	a801      	add	r0, sp, #4
 8083e2a:	f7ff f88f 	bl	8082f4c <_ZN5spark10JSONWriter4nameEPKcj>
 8083e2e:	4631      	mov	r1, r6
 8083e30:	f7ff f90d 	bl	808304e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 8083e34:	7923      	ldrb	r3, [r4, #4]
 8083e36:	07df      	lsls	r7, r3, #31
 8083e38:	d50e      	bpl.n	8083e58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 8083e3a:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 8083e3c:	212f      	movs	r1, #47	; 0x2f
 8083e3e:	4630      	mov	r0, r6
 8083e40:	f001 ff88 	bl	8085d54 <strrchr>
    if (s1) {
 8083e44:	b100      	cbz	r0, 8083e48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 8083e46:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 8083e48:	4931      	ldr	r1, [pc, #196]	; (8083f10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 8083e4a:	2201      	movs	r2, #1
 8083e4c:	a801      	add	r0, sp, #4
 8083e4e:	f7ff f87d 	bl	8082f4c <_ZN5spark10JSONWriter4nameEPKcj>
 8083e52:	4631      	mov	r1, r6
 8083e54:	f7ff f8fb 	bl	808304e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 8083e58:	7923      	ldrb	r3, [r4, #4]
 8083e5a:	079e      	lsls	r6, r3, #30
 8083e5c:	d507      	bpl.n	8083e6e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 8083e5e:	492d      	ldr	r1, [pc, #180]	; (8083f14 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 8083e60:	2202      	movs	r2, #2
 8083e62:	a801      	add	r0, sp, #4
 8083e64:	f7ff f872 	bl	8082f4c <_ZN5spark10JSONWriter4nameEPKcj>
 8083e68:	68e1      	ldr	r1, [r4, #12]
 8083e6a:	f7fe fff3 	bl	8082e54 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 8083e6e:	7923      	ldrb	r3, [r4, #4]
 8083e70:	0758      	lsls	r0, r3, #29
 8083e72:	d514      	bpl.n	8083e9e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 8083e74:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 8083e76:	4633      	mov	r3, r6
 8083e78:	461f      	mov	r7, r3
    for (; *s; ++s) {
 8083e7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8083e7e:	b12a      	cbz	r2, 8083e8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 8083e80:	2a20      	cmp	r2, #32
 8083e82:	d101      	bne.n	8083e88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 8083e84:	461e      	mov	r6, r3
 8083e86:	e7f7      	b.n	8083e78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 8083e88:	2a28      	cmp	r2, #40	; 0x28
 8083e8a:	d1f5      	bne.n	8083e78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 8083e8c:	2202      	movs	r2, #2
 8083e8e:	4922      	ldr	r1, [pc, #136]	; (8083f18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 8083e90:	a801      	add	r0, sp, #4
 8083e92:	f7ff f85b 	bl	8082f4c <_ZN5spark10JSONWriter4nameEPKcj>
 8083e96:	4631      	mov	r1, r6
 8083e98:	1bba      	subs	r2, r7, r6
 8083e9a:	f7ff f866 	bl	8082f6a <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 8083e9e:	7923      	ldrb	r3, [r4, #4]
 8083ea0:	0719      	lsls	r1, r3, #28
 8083ea2:	d507      	bpl.n	8083eb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 8083ea4:	491d      	ldr	r1, [pc, #116]	; (8083f1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 8083ea6:	2201      	movs	r2, #1
 8083ea8:	a801      	add	r0, sp, #4
 8083eaa:	f7ff f84f 	bl	8082f4c <_ZN5spark10JSONWriter4nameEPKcj>
 8083eae:	6961      	ldr	r1, [r4, #20]
 8083eb0:	f7fe ffe2 	bl	8082e78 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 8083eb4:	7923      	ldrb	r3, [r4, #4]
 8083eb6:	06da      	lsls	r2, r3, #27
 8083eb8:	d508      	bpl.n	8083ecc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 8083eba:	2204      	movs	r2, #4
 8083ebc:	4918      	ldr	r1, [pc, #96]	; (8083f20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 8083ebe:	eb0d 0002 	add.w	r0, sp, r2
 8083ec2:	f7ff f843 	bl	8082f4c <_ZN5spark10JSONWriter4nameEPKcj>
 8083ec6:	69a1      	ldr	r1, [r4, #24]
 8083ec8:	f7fe ffc4 	bl	8082e54 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 8083ecc:	7923      	ldrb	r3, [r4, #4]
 8083ece:	069b      	lsls	r3, r3, #26
 8083ed0:	d507      	bpl.n	8083ee2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 8083ed2:	4914      	ldr	r1, [pc, #80]	; (8083f24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 8083ed4:	2206      	movs	r2, #6
 8083ed6:	a801      	add	r0, sp, #4
 8083ed8:	f7ff f838 	bl	8082f4c <_ZN5spark10JSONWriter4nameEPKcj>
 8083edc:	69e1      	ldr	r1, [r4, #28]
 8083ede:	f7ff f8b6 	bl	808304e <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 8083ee2:	a801      	add	r0, sp, #4
 8083ee4:	f7fe ff93 	bl	8082e0e <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
 8083ee8:	6a28      	ldr	r0, [r5, #32]
 8083eea:	2202      	movs	r2, #2
 8083eec:	6803      	ldr	r3, [r0, #0]
 8083eee:	490e      	ldr	r1, [pc, #56]	; (8083f28 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 8083ef0:	68db      	ldr	r3, [r3, #12]
 8083ef2:	4798      	blx	r3
}
 8083ef4:	b005      	add	sp, #20
 8083ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8083efa:	bf00      	nop
 8083efc:	20000204 	.word	0x20000204
 8083f00:	080864b8 	.word	0x080864b8
 8083f04:	0808644a 	.word	0x0808644a
 8083f08:	08085fbc 	.word	0x08085fbc
 8083f0c:	0808649b 	.word	0x0808649b
 8083f10:	08086116 	.word	0x08086116
 8083f14:	0808649d 	.word	0x0808649d
 8083f18:	080864a0 	.word	0x080864a0
 8083f1c:	08085fcc 	.word	0x08085fcc
 8083f20:	080864a3 	.word	0x080864a3
 8083f24:	080864a8 	.word	0x080864a8
 8083f28:	08086498 	.word	0x08086498

08083f2c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8083f2c:	2300      	movs	r3, #0
 8083f2e:	6840      	ldr	r0, [r0, #4]
 8083f30:	461a      	mov	r2, r3
 8083f32:	f7fd bf99 	b.w	8081e68 <network_connect>

08083f36 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8083f36:	2200      	movs	r2, #0
 8083f38:	2102      	movs	r1, #2
 8083f3a:	6840      	ldr	r0, [r0, #4]
 8083f3c:	f7fd bfa4 	b.w	8081e88 <network_disconnect>

08083f40 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8083f40:	2200      	movs	r2, #0
 8083f42:	6840      	ldr	r0, [r0, #4]
 8083f44:	4611      	mov	r1, r2
 8083f46:	f7fd bf97 	b.w	8081e78 <network_connecting>

08083f4a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8083f4a:	2200      	movs	r2, #0
 8083f4c:	6840      	ldr	r0, [r0, #4]
 8083f4e:	4611      	mov	r1, r2
 8083f50:	f7fd bfa2 	b.w	8081e98 <network_ready>

08083f54 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8083f54:	2300      	movs	r3, #0
 8083f56:	6840      	ldr	r0, [r0, #4]
 8083f58:	461a      	mov	r2, r3
 8083f5a:	4619      	mov	r1, r3
 8083f5c:	f7fd bfa4 	b.w	8081ea8 <network_on>

08083f60 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8083f60:	2300      	movs	r3, #0
 8083f62:	6840      	ldr	r0, [r0, #4]
 8083f64:	461a      	mov	r2, r3
 8083f66:	4619      	mov	r1, r3
 8083f68:	f7fd bfa6 	b.w	8081eb8 <network_off>

08083f6c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 8083f6c:	2100      	movs	r1, #0
 8083f6e:	6840      	ldr	r0, [r0, #4]
 8083f70:	f7fd bfca 	b.w	8081f08 <network_is_on>

08083f74 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 8083f74:	2100      	movs	r1, #0
 8083f76:	6840      	ldr	r0, [r0, #4]
 8083f78:	f7fd bfce 	b.w	8081f18 <network_is_off>

08083f7c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8083f7c:	2200      	movs	r2, #0
 8083f7e:	6840      	ldr	r0, [r0, #4]
 8083f80:	f081 0101 	eor.w	r1, r1, #1
 8083f84:	f7fd bfa0 	b.w	8081ec8 <network_listen>

08083f88 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8083f88:	2200      	movs	r2, #0
 8083f8a:	6840      	ldr	r0, [r0, #4]
 8083f8c:	f7fd bfac 	b.w	8081ee8 <network_set_listen_timeout>

08083f90 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8083f90:	2200      	movs	r2, #0
 8083f92:	6840      	ldr	r0, [r0, #4]
 8083f94:	4611      	mov	r1, r2
 8083f96:	f7fd bfaf 	b.w	8081ef8 <network_get_listen_timeout>

08083f9a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8083f9a:	2200      	movs	r2, #0
 8083f9c:	6840      	ldr	r0, [r0, #4]
 8083f9e:	4611      	mov	r1, r2
 8083fa0:	f7fd bf9a 	b.w	8081ed8 <network_listening>

08083fa4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8083fa4:	b570      	push	{r4, r5, r6, lr}
 8083fa6:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8083fa8:	2600      	movs	r6, #0
 8083faa:	b086      	sub	sp, #24
 8083fac:	4604      	mov	r4, r0
    IPAddress addr;
 8083fae:	a804      	add	r0, sp, #16
 8083fb0:	f7fe fdd4 	bl	8082b5c <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8083fb4:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 8083fb6:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8083fb8:	f001 fe9f 	bl	8085cfa <strlen>
 8083fbc:	4b0a      	ldr	r3, [pc, #40]	; (8083fe8 <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 8083fbe:	9600      	str	r6, [sp, #0]
 8083fc0:	b281      	uxth	r1, r0
 8083fc2:	685b      	ldr	r3, [r3, #4]
 8083fc4:	4628      	mov	r0, r5
 8083fc6:	aa03      	add	r2, sp, #12
 8083fc8:	f7fd fca6 	bl	8081918 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8083fcc:	b130      	cbz	r0, 8083fdc <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8083fce:	4631      	mov	r1, r6
 8083fd0:	4620      	mov	r0, r4
 8083fd2:	f7fe fdd3 	bl	8082b7c <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8083fd6:	4620      	mov	r0, r4
 8083fd8:	b006      	add	sp, #24
 8083fda:	bd70      	pop	{r4, r5, r6, pc}
 8083fdc:	4620      	mov	r0, r4
 8083fde:	a903      	add	r1, sp, #12
 8083fe0:	f7fe fdc4 	bl	8082b6c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 8083fe4:	e7f7      	b.n	8083fd6 <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 8083fe6:	bf00      	nop
 8083fe8:	2000019c 	.word	0x2000019c

08083fec <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8083fec:	4b02      	ldr	r3, [pc, #8]	; (8083ff8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8083fee:	4a03      	ldr	r2, [pc, #12]	; (8083ffc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8083ff0:	601a      	str	r2, [r3, #0]
 8083ff2:	2200      	movs	r2, #0
 8083ff4:	605a      	str	r2, [r3, #4]

} // spark
 8083ff6:	4770      	bx	lr
 8083ff8:	20000204 	.word	0x20000204
 8083ffc:	08086530 	.word	0x08086530

08084000 <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 8084000:	b508      	push	{r3, lr}
            return &Wire3;
 8084002:	f000 fdcb 	bl	8084b9c <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}
 8084006:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
 808400a:	f7fe bd47 	b.w	8082a9c <_ZN7TwoWire4lockEv>

0808400e <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
 808400e:	b510      	push	{r4, lr}
 8084010:	4604      	mov	r4, r0
    lock_(_lock)
 8084012:	7001      	strb	r1, [r0, #0]
    if (lock_) {
 8084014:	b109      	cbz	r1, 808401a <_ZN4PMICC1Eb+0xc>
        lock();
 8084016:	f7ff fff3 	bl	8084000 <_ZN4PMIC4lockEv.constprop.0>
}
 808401a:	4620      	mov	r0, r4
 808401c:	bd10      	pop	{r4, pc}

0808401e <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 808401e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8084020:	4606      	mov	r6, r0
 8084022:	460d      	mov	r5, r1
  size_t n = 0;
 8084024:	2400      	movs	r4, #0
 8084026:	188f      	adds	r7, r1, r2
  while (size--) {
 8084028:	42bd      	cmp	r5, r7
 808402a:	d00c      	beq.n	8084046 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808402c:	6833      	ldr	r3, [r6, #0]
 808402e:	4630      	mov	r0, r6
 8084030:	689b      	ldr	r3, [r3, #8]
 8084032:	f815 1b01 	ldrb.w	r1, [r5], #1
 8084036:	4798      	blx	r3
     if (chunk>=0)
 8084038:	1e03      	subs	r3, r0, #0
 808403a:	db01      	blt.n	8084040 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808403c:	441c      	add	r4, r3
  while (size--) {
 808403e:	e7f3      	b.n	8084028 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8084040:	2c00      	cmp	r4, #0
 8084042:	bf08      	it	eq
 8084044:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 8084046:	4620      	mov	r0, r4
 8084048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808404a <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 808404a:	b570      	push	{r4, r5, r6, lr}
 808404c:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 808404e:	460c      	mov	r4, r1
    }
 8084050:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 8084052:	b149      	cbz	r1, 8084068 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8084054:	f001 fe51 	bl	8085cfa <strlen>
 8084058:	682b      	ldr	r3, [r5, #0]
 808405a:	4602      	mov	r2, r0
 808405c:	4621      	mov	r1, r4
 808405e:	4628      	mov	r0, r5
    }
 8084060:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 8084064:	68db      	ldr	r3, [r3, #12]
 8084066:	4718      	bx	r3
    }
 8084068:	bd70      	pop	{r4, r5, r6, pc}

0808406a <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 808406a:	6803      	ldr	r3, [r0, #0]
 808406c:	689b      	ldr	r3, [r3, #8]
 808406e:	4718      	bx	r3

08084070 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8084070:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8084072:	210d      	movs	r1, #13
{
 8084074:	4605      	mov	r5, r0
  size_t n = print('\r');
 8084076:	f7ff fff8 	bl	808406a <_ZN5Print5printEc>
  n += print('\n');
 808407a:	210a      	movs	r1, #10
  size_t n = print('\r');
 808407c:	4604      	mov	r4, r0
  n += print('\n');
 808407e:	4628      	mov	r0, r5
 8084080:	f7ff fff3 	bl	808406a <_ZN5Print5printEc>
  return n;
}
 8084084:	4420      	add	r0, r4
 8084086:	bd38      	pop	{r3, r4, r5, pc}

08084088 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8084088:	b538      	push	{r3, r4, r5, lr}
 808408a:	4605      	mov	r5, r0
  return write(str);
 808408c:	f7ff ffdd 	bl	808404a <_ZN5Print5writeEPKc>
 8084090:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 8084092:	4628      	mov	r0, r5
 8084094:	f7ff ffec 	bl	8084070 <_ZN5Print7printlnEv>
  return n;
}
 8084098:	4420      	add	r0, r4
 808409a:	bd38      	pop	{r3, r4, r5, pc}

0808409c <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 808409c:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 808409e:	2a01      	cmp	r2, #1
 80840a0:	bf98      	it	ls
 80840a2:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80840a4:	b530      	push	{r4, r5, lr}
 80840a6:	b08b      	sub	sp, #44	; 0x2c
 80840a8:	460c      	mov	r4, r1
  *str = '\0';
 80840aa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80840ae:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80840b0:	4625      	mov	r5, r4
 80840b2:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80840b6:	fb04 5312 	mls	r3, r4, r2, r5
 80840ba:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80840bc:	2b09      	cmp	r3, #9
 80840be:	bf94      	ite	ls
 80840c0:	3330      	addls	r3, #48	; 0x30
 80840c2:	3337      	addhi	r3, #55	; 0x37
 80840c4:	b2db      	uxtb	r3, r3
  } while(n);
 80840c6:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80840c8:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80840cc:	d9f0      	bls.n	80840b0 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80840ce:	f7ff ffbc 	bl	808404a <_ZN5Print5writeEPKc>
}
 80840d2:	b00b      	add	sp, #44	; 0x2c
 80840d4:	bd30      	pop	{r4, r5, pc}

080840d6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80840d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80840da:	b086      	sub	sp, #24
 80840dc:	af00      	add	r7, sp, #0
 80840de:	4605      	mov	r5, r0
 80840e0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80840e2:	1d38      	adds	r0, r7, #4
 80840e4:	2114      	movs	r1, #20
{
 80840e6:	4614      	mov	r4, r2
    va_copy(args2, args);
 80840e8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80840ea:	f7fd ff45 	bl	8081f78 <vsnprintf>

    if (n<bufsize)
 80840ee:	2813      	cmp	r0, #19
 80840f0:	d80e      	bhi.n	8084110 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80840f2:	4628      	mov	r0, r5
 80840f4:	1d39      	adds	r1, r7, #4
 80840f6:	f7ff ffa8 	bl	808404a <_ZN5Print5writeEPKc>
 80840fa:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80840fc:	b11e      	cbz	r6, 8084106 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80840fe:	4628      	mov	r0, r5
 8084100:	f7ff ffb6 	bl	8084070 <_ZN5Print7printlnEv>
 8084104:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 8084106:	4620      	mov	r0, r4
 8084108:	3718      	adds	r7, #24
 808410a:	46bd      	mov	sp, r7
 808410c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 8084110:	f100 0308 	add.w	r3, r0, #8
 8084114:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 8084118:	46e8      	mov	r8, sp
        char bigger[n+1];
 808411a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 808411e:	4622      	mov	r2, r4
 8084120:	1c41      	adds	r1, r0, #1
 8084122:	683b      	ldr	r3, [r7, #0]
 8084124:	4668      	mov	r0, sp
 8084126:	f7fd ff27 	bl	8081f78 <vsnprintf>
  return write(str);
 808412a:	4669      	mov	r1, sp
 808412c:	4628      	mov	r0, r5
 808412e:	f7ff ff8c 	bl	808404a <_ZN5Print5writeEPKc>
 8084132:	4604      	mov	r4, r0
 8084134:	46c5      	mov	sp, r8
 8084136:	e7e1      	b.n	80840fc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

08084138 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 8084138:	2200      	movs	r2, #0
 808413a:	4b01      	ldr	r3, [pc, #4]	; (8084140 <_GLOBAL__sub_I_RGB+0x8>)
 808413c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 808413e:	4770      	bx	lr
 8084140:	2000020c 	.word	0x2000020c

08084144 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 8084144:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 8084146:	2600      	movs	r6, #0
 8084148:	4604      	mov	r4, r0
 808414a:	460d      	mov	r5, r1
 808414c:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 8084150:	f7fd fbf2 	bl	8081938 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 8084154:	4628      	mov	r0, r5
    _spi = spi;
 8084156:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 8084158:	f7fd fcf6 	bl	8081b48 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 808415c:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 808415e:	6066      	str	r6, [r4, #4]
}
 8084160:	bd70      	pop	{r4, r5, r6, pc}

08084162 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8084162:	b510      	push	{r4, lr}
 8084164:	4604      	mov	r4, r0
{
	free(buffer);
 8084166:	6800      	ldr	r0, [r0, #0]
 8084168:	f7fd fee6 	bl	8081f38 <free>
}
 808416c:	4620      	mov	r0, r4
 808416e:	bd10      	pop	{r4, pc}

08084170 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8084170:	b510      	push	{r4, lr}
 8084172:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8084174:	6800      	ldr	r0, [r0, #0]
 8084176:	b108      	cbz	r0, 808417c <_ZN6String10invalidateEv+0xc>
 8084178:	f7fd fede 	bl	8081f38 <free>
	buffer = NULL;
 808417c:	2300      	movs	r3, #0
	capacity = len = 0;
 808417e:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 8084182:	6023      	str	r3, [r4, #0]
}
 8084184:	bd10      	pop	{r4, pc}

08084186 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8084186:	b538      	push	{r3, r4, r5, lr}
 8084188:	4604      	mov	r4, r0
 808418a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 808418c:	6800      	ldr	r0, [r0, #0]
 808418e:	3101      	adds	r1, #1
 8084190:	f7fd feda 	bl	8081f48 <realloc>
	if (newbuffer) {
 8084194:	b110      	cbz	r0, 808419c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8084196:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 808419a:	2001      	movs	r0, #1
	}
	return 0;
}
 808419c:	bd38      	pop	{r3, r4, r5, pc}

0808419e <_ZN6String7reserveEj>:
{
 808419e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80841a0:	6803      	ldr	r3, [r0, #0]
{
 80841a2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80841a4:	b123      	cbz	r3, 80841b0 <_ZN6String7reserveEj+0x12>
 80841a6:	6843      	ldr	r3, [r0, #4]
 80841a8:	428b      	cmp	r3, r1
 80841aa:	d301      	bcc.n	80841b0 <_ZN6String7reserveEj+0x12>
 80841ac:	2001      	movs	r0, #1
}
 80841ae:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80841b0:	4620      	mov	r0, r4
 80841b2:	f7ff ffe8 	bl	8084186 <_ZN6String12changeBufferEj>
 80841b6:	2800      	cmp	r0, #0
 80841b8:	d0f9      	beq.n	80841ae <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80841ba:	68a3      	ldr	r3, [r4, #8]
 80841bc:	2b00      	cmp	r3, #0
 80841be:	d1f5      	bne.n	80841ac <_ZN6String7reserveEj+0xe>
 80841c0:	6822      	ldr	r2, [r4, #0]
 80841c2:	7013      	strb	r3, [r2, #0]
 80841c4:	e7f2      	b.n	80841ac <_ZN6String7reserveEj+0xe>

080841c6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80841c6:	b570      	push	{r4, r5, r6, lr}
 80841c8:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80841ca:	4611      	mov	r1, r2
{
 80841cc:	4604      	mov	r4, r0
 80841ce:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80841d0:	f7ff ffe5 	bl	808419e <_ZN6String7reserveEj>
 80841d4:	b920      	cbnz	r0, 80841e0 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80841d6:	4620      	mov	r0, r4
 80841d8:	f7ff ffca 	bl	8084170 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80841dc:	4620      	mov	r0, r4
 80841de:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80841e0:	462a      	mov	r2, r5
 80841e2:	4631      	mov	r1, r6
 80841e4:	6820      	ldr	r0, [r4, #0]
	len = length;
 80841e6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80841e8:	f001 fcdf 	bl	8085baa <memcpy>
	buffer[len] = 0;
 80841ec:	2100      	movs	r1, #0
 80841ee:	6822      	ldr	r2, [r4, #0]
 80841f0:	68a3      	ldr	r3, [r4, #8]
 80841f2:	54d1      	strb	r1, [r2, r3]
	return *this;
 80841f4:	e7f2      	b.n	80841dc <_ZN6String4copyEPKcj+0x16>

080841f6 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80841f6:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80841f8:	2300      	movs	r3, #0
String::String(const char *cstr)
 80841fa:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80841fc:	460d      	mov	r5, r1
	capacity = 0;
 80841fe:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8084202:	6083      	str	r3, [r0, #8]
	flags = 0;
 8084204:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 8084206:	b139      	cbz	r1, 8084218 <_ZN6StringC1EPKc+0x22>
 8084208:	4608      	mov	r0, r1
 808420a:	f001 fd76 	bl	8085cfa <strlen>
 808420e:	4629      	mov	r1, r5
 8084210:	4602      	mov	r2, r0
 8084212:	4620      	mov	r0, r4
 8084214:	f7ff ffd7 	bl	80841c6 <_ZN6String4copyEPKcj>
}
 8084218:	4620      	mov	r0, r4
 808421a:	bd38      	pop	{r3, r4, r5, pc}

0808421c <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 808421c:	b538      	push	{r3, r4, r5, lr}
 808421e:	4605      	mov	r5, r0
	if (buffer) {
 8084220:	6800      	ldr	r0, [r0, #0]
{
 8084222:	460c      	mov	r4, r1
	if (buffer) {
 8084224:	b168      	cbz	r0, 8084242 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 8084226:	686a      	ldr	r2, [r5, #4]
 8084228:	688b      	ldr	r3, [r1, #8]
 808422a:	429a      	cmp	r2, r3
 808422c:	d307      	bcc.n	808423e <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 808422e:	6809      	ldr	r1, [r1, #0]
 8084230:	f001 fd40 	bl	8085cb4 <strcpy>
			len = rhs.len;
 8084234:	68a3      	ldr	r3, [r4, #8]
 8084236:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 8084238:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 808423a:	60a3      	str	r3, [r4, #8]
}
 808423c:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 808423e:	f7fd fe7b 	bl	8081f38 <free>
	buffer = rhs.buffer;
 8084242:	6823      	ldr	r3, [r4, #0]
 8084244:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 8084246:	6863      	ldr	r3, [r4, #4]
 8084248:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 808424a:	68a3      	ldr	r3, [r4, #8]
 808424c:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 808424e:	2300      	movs	r3, #0
	rhs.capacity = 0;
 8084250:	e9c4 3300 	strd	r3, r3, [r4]
 8084254:	e7f1      	b.n	808423a <_ZN6String4moveERS_+0x1e>

08084256 <_ZN6StringC1EOS_>:
	buffer = NULL;
 8084256:	2300      	movs	r3, #0
String::String(String &&rval)
 8084258:	b510      	push	{r4, lr}
 808425a:	4604      	mov	r4, r0
	capacity = 0;
 808425c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8084260:	6083      	str	r3, [r0, #8]
	flags = 0;
 8084262:	7303      	strb	r3, [r0, #12]
	move(rval);
 8084264:	f7ff ffda 	bl	808421c <_ZN6String4moveERS_>
}
 8084268:	4620      	mov	r0, r4
 808426a:	bd10      	pop	{r4, pc}

0808426c <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 808426c:	4288      	cmp	r0, r1
{
 808426e:	b510      	push	{r4, lr}
 8084270:	460b      	mov	r3, r1
 8084272:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8084274:	d004      	beq.n	8084280 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8084276:	6809      	ldr	r1, [r1, #0]
 8084278:	b121      	cbz	r1, 8084284 <_ZN6StringaSERKS_+0x18>
 808427a:	689a      	ldr	r2, [r3, #8]
 808427c:	f7ff ffa3 	bl	80841c6 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 8084280:	4620      	mov	r0, r4
 8084282:	bd10      	pop	{r4, pc}
	else invalidate();
 8084284:	f7ff ff74 	bl	8084170 <_ZN6String10invalidateEv>
 8084288:	e7fa      	b.n	8084280 <_ZN6StringaSERKS_+0x14>

0808428a <_ZN6StringC1ERKS_>:
	buffer = NULL;
 808428a:	2300      	movs	r3, #0
String::String(const String &value)
 808428c:	b510      	push	{r4, lr}
 808428e:	4604      	mov	r4, r0
	capacity = 0;
 8084290:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8084294:	6083      	str	r3, [r0, #8]
	flags = 0;
 8084296:	7303      	strb	r3, [r0, #12]
	*this = value;
 8084298:	f7ff ffe8 	bl	808426c <_ZN6StringaSERKS_>
}
 808429c:	4620      	mov	r0, r4
 808429e:	bd10      	pop	{r4, pc}

080842a0 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80842a0:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80842a2:	6882      	ldr	r2, [r0, #8]
 80842a4:	b93a      	cbnz	r2, 80842b6 <_ZNK6String6equalsEPKc+0x16>
 80842a6:	b121      	cbz	r1, 80842b2 <_ZNK6String6equalsEPKc+0x12>
 80842a8:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 80842aa:	fab0 f080 	clz	r0, r0
 80842ae:	0940      	lsrs	r0, r0, #5
 80842b0:	e000      	b.n	80842b4 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80842b2:	2001      	movs	r0, #1
}
 80842b4:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80842b6:	6800      	ldr	r0, [r0, #0]
 80842b8:	b909      	cbnz	r1, 80842be <_ZNK6String6equalsEPKc+0x1e>
 80842ba:	7800      	ldrb	r0, [r0, #0]
 80842bc:	e7f5      	b.n	80842aa <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 80842be:	f001 fcef 	bl	8085ca0 <strcmp>
 80842c2:	e7f2      	b.n	80842aa <_ZNK6String6equalsEPKc+0xa>

080842c4 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 80842c4:	b558      	push	{r3, r4, r6, lr}
 80842c6:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 80842c8:	b12a      	cbz	r2, 80842d6 <_ZNK6String8getBytesEPhjj+0x12>
 80842ca:	b121      	cbz	r1, 80842d6 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
 80842cc:	6884      	ldr	r4, [r0, #8]
 80842ce:	42a3      	cmp	r3, r4
 80842d0:	d302      	bcc.n	80842d8 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 80842d2:	2300      	movs	r3, #0
 80842d4:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
 80842d6:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
 80842d8:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
 80842da:	3a01      	subs	r2, #1
	if (n > len - index) n = len - index;
 80842dc:	4294      	cmp	r4, r2
 80842de:	bf28      	it	cs
 80842e0:	4614      	movcs	r4, r2
	strncpy((char *)buf, buffer + index, n);
 80842e2:	6801      	ldr	r1, [r0, #0]
 80842e4:	4622      	mov	r2, r4
 80842e6:	4419      	add	r1, r3
 80842e8:	4630      	mov	r0, r6
 80842ea:	f001 fd20 	bl	8085d2e <strncpy>
	buf[n] = 0;
 80842ee:	2300      	movs	r3, #0
 80842f0:	5533      	strb	r3, [r6, r4]
 80842f2:	e7f0      	b.n	80842d6 <_ZNK6String8getBytesEPhjj+0x12>

080842f4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80842f4:	b510      	push	{r4, lr}
 80842f6:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80842f8:	6800      	ldr	r0, [r0, #0]
 80842fa:	b118      	cbz	r0, 8084304 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80842fc:	f7fd fe1c 	bl	8081f38 <free>
            wakeupSource_ = nullptr;
 8084300:	2300      	movs	r3, #0
 8084302:	6023      	str	r3, [r4, #0]
        }
    }
 8084304:	bd10      	pop	{r4, pc}

08084306 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8084306:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 8084308:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 808430c:	460d      	mov	r5, r1
        error_ = result.error_;
 808430e:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 8084310:	460b      	mov	r3, r1
 8084312:	f853 2f06 	ldr.w	r2, [r3, #6]!
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8084316:	4604      	mov	r4, r0
        compatResult_ = result.compatResult_;
 8084318:	f8c0 2006 	str.w	r2, [r0, #6]
 808431c:	889b      	ldrh	r3, [r3, #4]
 808431e:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 8084320:	f7ff ffe8 	bl	80842f4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
 8084324:	682b      	ldr	r3, [r5, #0]
 8084326:	b113      	cbz	r3, 808432e <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 8084328:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 808432a:	2300      	movs	r3, #0
 808432c:	602b      	str	r3, [r5, #0]
    }
 808432e:	4620      	mov	r0, r4
 8084330:	bd38      	pop	{r3, r4, r5, pc}

08084332 <_ZN17SystemSleepResult13toSleepResultEv>:
        if (error_ || wakeupSource_) {
 8084332:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SleepResult toSleepResult() {
 8084336:	b510      	push	{r4, lr}
 8084338:	680a      	ldr	r2, [r1, #0]
        if (error_ || wakeupSource_) {
 808433a:	b933      	cbnz	r3, 808434a <_ZN17SystemSleepResult13toSleepResultEv+0x18>
 808433c:	b932      	cbnz	r2, 808434c <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
        return compatResult_;
 808433e:	f851 3f06 	ldr.w	r3, [r1, #6]!
 8084342:	6003      	str	r3, [r0, #0]
 8084344:	888b      	ldrh	r3, [r1, #4]
 8084346:	8083      	strh	r3, [r0, #4]
    }
 8084348:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
 808434a:	b122      	cbz	r2, 8084356 <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
 808434c:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
 808434e:	2c01      	cmp	r4, #1
 8084350:	d003      	beq.n	808435a <_ZN17SystemSleepResult13toSleepResultEv+0x28>
 8084352:	2c04      	cmp	r4, #4
 8084354:	d006      	beq.n	8084364 <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 8084356:	2204      	movs	r2, #4
 8084358:	e005      	b.n	8084366 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 808435a:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 808435c:	718c      	strb	r4, [r1, #6]
 808435e:	810b      	strh	r3, [r1, #8]
 8084360:	814a      	strh	r2, [r1, #10]
                    break;
 8084362:	e7ec      	b.n	808433e <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 8084364:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 8084366:	810b      	strh	r3, [r1, #8]
 8084368:	f64f 73ff 	movw	r3, #65535	; 0xffff
 808436c:	718a      	strb	r2, [r1, #6]
 808436e:	814b      	strh	r3, [r1, #10]
                    break;
 8084370:	e7e5      	b.n	808433e <_ZN17SystemSleepResult13toSleepResultEv+0xc>

08084372 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 8084372:	b507      	push	{r0, r1, r2, lr}
 8084374:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 8084376:	2100      	movs	r1, #0
{
 8084378:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 808437a:	9100      	str	r1, [sp, #0]
 808437c:	2001      	movs	r0, #1
 808437e:	218c      	movs	r1, #140	; 0x8c
 8084380:	f7fd fd00 	bl	8081d84 <system_reset>
}
 8084384:	b003      	add	sp, #12
 8084386:	f85d fb04 	ldr.w	pc, [sp], #4

0808438a <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 808438a:	4601      	mov	r1, r0
    reset(0, flags);
 808438c:	2000      	movs	r0, #0
 808438e:	f7ff bff0 	b.w	8084372 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

08084392 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 8084392:	2000      	movs	r0, #0
 8084394:	f7ff bff9 	b.w	808438a <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

08084398 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
    }
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 8084398:	b530      	push	{r4, r5, lr}
 808439a:	4604      	mov	r4, r0
 808439c:	b085      	sub	sp, #20
 808439e:	4608      	mov	r0, r1
 80843a0:	4611      	mov	r1, r2
 80843a2:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 80843a4:	2300      	movs	r3, #0
 80843a6:	f7fd fcb1 	bl	8081d0c <system_sleep>
              compatResult_(r) {
 80843aa:	2300      	movs	r3, #0
 80843ac:	9301      	str	r3, [sp, #4]
 80843ae:	f8ad 3008 	strh.w	r3, [sp, #8]
 80843b2:	f88d 300a 	strb.w	r3, [sp, #10]
 80843b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
 80843ba:	4d09      	ldr	r5, [pc, #36]	; (80843e0 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
 80843bc:	a901      	add	r1, sp, #4
 80843be:	f8ad 000c 	strh.w	r0, [sp, #12]
 80843c2:	4628      	mov	r0, r5
 80843c4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80843c8:	f7ff ff9d 	bl	8084306 <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
 80843cc:	a801      	add	r0, sp, #4
 80843ce:	f7ff ff91 	bl	80842f4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
 80843d2:	4620      	mov	r0, r4
 80843d4:	4629      	mov	r1, r5
 80843d6:	f7ff ffac 	bl	8084332 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
 80843da:	4620      	mov	r0, r4
 80843dc:	b005      	add	sp, #20
 80843de:	bd30      	pop	{r4, r5, pc}
 80843e0:	2000021c 	.word	0x2000021c

080843e4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80843e4:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80843e6:	2000      	movs	r0, #0
 80843e8:	4b04      	ldr	r3, [pc, #16]	; (80843fc <_GLOBAL__sub_I_System+0x18>)
 80843ea:	601a      	str	r2, [r3, #0]
 80843ec:	4b04      	ldr	r3, [pc, #16]	; (8084400 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80843ee:	4a05      	ldr	r2, [pc, #20]	; (8084404 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80843f0:	6018      	str	r0, [r3, #0]
 80843f2:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80843f4:	7198      	strb	r0, [r3, #6]
 80843f6:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80843f8:	f7fd bc78 	b.w	8081cec <set_system_mode>
 80843fc:	20000228 	.word	0x20000228
 8084400:	2000021c 	.word	0x2000021c
 8084404:	ffff0000 	.word	0xffff0000

08084408 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8084408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 808440c:	4a15      	ldr	r2, [pc, #84]	; (8084464 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 808440e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8084470 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 8084412:	e9d2 3200 	ldrd	r3, r2, [r2]
 8084416:	18c0      	adds	r0, r0, r3
 8084418:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
 808441c:	4a12      	ldr	r2, [pc, #72]	; (8084468 <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 808441e:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 8084420:	e9d2 3200 	ldrd	r3, r2, [r2]
 8084424:	18c6      	adds	r6, r0, r3
 8084426:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
 808442a:	e9d8 2300 	ldrd	r2, r3, [r8]
 808442e:	42bb      	cmp	r3, r7
 8084430:	bf08      	it	eq
 8084432:	42b2      	cmpeq	r2, r6
 8084434:	d013      	beq.n	808445e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 8084436:	a903      	add	r1, sp, #12
 8084438:	4668      	mov	r0, sp
 808443a:	e9cd 6700 	strd	r6, r7, [sp]
 808443e:	f7fb fdef 	bl	8080020 <localtime_r>
	calendar_time.tm_year += 1900;
 8084442:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8084444:	4d09      	ldr	r5, [pc, #36]	; (808446c <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 8084446:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808444a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 808444c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808444e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8084450:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8084452:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8084454:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 8084456:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808445a:	6823      	ldr	r3, [r4, #0]
 808445c:	602b      	str	r3, [r5, #0]
    }
}
 808445e:	b00c      	add	sp, #48	; 0x30
 8084460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8084464:	20000260 	.word	0x20000260
 8084468:	20000258 	.word	0x20000258
 808446c:	20000230 	.word	0x20000230
 8084470:	20000268 	.word	0x20000268

08084474 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
 8084474:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
 8084476:	2000      	movs	r0, #0
 8084478:	f7fd fcd6 	bl	8081e28 <spark_sync_time_pending>
 808447c:	b128      	cbz	r0, 808448a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 808447e:	f7fd fcab 	bl	8081dd8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 8084482:	f080 0001 	eor.w	r0, r0, #1
 8084486:	b2c0      	uxtb	r0, r0
    }
 8084488:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 808448a:	2001      	movs	r0, #1
 808448c:	e7fc      	b.n	8084488 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

08084490 <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8084490:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8084492:	490a      	ldr	r1, [pc, #40]	; (80844bc <_ZN9TimeClass4zoneEf+0x2c>)
{
 8084494:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8084496:	f001 facf 	bl	8085a38 <__aeabi_fcmplt>
 808449a:	b968      	cbnz	r0, 80844b8 <_ZN9TimeClass4zoneEf+0x28>
 808449c:	4620      	mov	r0, r4
 808449e:	4908      	ldr	r1, [pc, #32]	; (80844c0 <_ZN9TimeClass4zoneEf+0x30>)
 80844a0:	f001 fae8 	bl	8085a74 <__aeabi_fcmpgt>
 80844a4:	b940      	cbnz	r0, 80844b8 <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80844a6:	4907      	ldr	r1, [pc, #28]	; (80844c4 <_ZN9TimeClass4zoneEf+0x34>)
 80844a8:	4620      	mov	r0, r4
 80844aa:	f001 f927 	bl	80856fc <__aeabi_fmul>
 80844ae:	f001 fb11 	bl	8085ad4 <__aeabi_f2lz>
 80844b2:	4b05      	ldr	r3, [pc, #20]	; (80844c8 <_ZN9TimeClass4zoneEf+0x38>)
 80844b4:	e9c3 0100 	strd	r0, r1, [r3]
}
 80844b8:	bd10      	pop	{r4, pc}
 80844ba:	bf00      	nop
 80844bc:	c1400000 	.word	0xc1400000
 80844c0:	41600000 	.word	0x41600000
 80844c4:	45610000 	.word	0x45610000
 80844c8:	20000260 	.word	0x20000260

080844cc <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80844cc:	b530      	push	{r4, r5, lr}
 80844ce:	4604      	mov	r4, r0
    t += time_zone_cache;
 80844d0:	4818      	ldr	r0, [pc, #96]	; (8084534 <_ZN9TimeClass7timeStrEx+0x68>)
{
 80844d2:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 80844d4:	e9d0 1000 	ldrd	r1, r0, [r0]
 80844d8:	1852      	adds	r2, r2, r1
 80844da:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 80844de:	4816      	ldr	r0, [pc, #88]	; (8084538 <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 80844e0:	2500      	movs	r5, #0
    t += dst_current_cache;
 80844e2:	e9d0 1000 	ldrd	r1, r0, [r0]
 80844e6:	1852      	adds	r2, r2, r1
 80844e8:	eb40 0303 	adc.w	r3, r0, r3
 80844ec:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 80844f0:	2224      	movs	r2, #36	; 0x24
 80844f2:	2100      	movs	r1, #0
 80844f4:	eb0d 0002 	add.w	r0, sp, r2
 80844f8:	f001 fb7f 	bl	8085bfa <memset>
    localtime_r(&t, &calendar_time);
 80844fc:	a909      	add	r1, sp, #36	; 0x24
 80844fe:	4668      	mov	r0, sp
 8084500:	f7fb fd8e 	bl	8080020 <localtime_r>
    char ascstr[26] = {};
 8084504:	2216      	movs	r2, #22
 8084506:	4629      	mov	r1, r5
 8084508:	a803      	add	r0, sp, #12
 808450a:	9502      	str	r5, [sp, #8]
 808450c:	f001 fb75 	bl	8085bfa <memset>
    asctime_r(&calendar_time, ascstr);
 8084510:	a902      	add	r1, sp, #8
 8084512:	a809      	add	r0, sp, #36	; 0x24
 8084514:	f001 fb12 	bl	8085b3c <asctime_r>
    int len = strlen(ascstr);
 8084518:	a802      	add	r0, sp, #8
 808451a:	f001 fbee 	bl	8085cfa <strlen>
    ascstr[len-1] = 0; // remove final newline
 808451e:	ab12      	add	r3, sp, #72	; 0x48
 8084520:	4418      	add	r0, r3
 8084522:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 8084526:	a902      	add	r1, sp, #8
 8084528:	4620      	mov	r0, r4
 808452a:	f7ff fe64 	bl	80841f6 <_ZN6StringC1EPKc>
}
 808452e:	4620      	mov	r0, r4
 8084530:	b013      	add	sp, #76	; 0x4c
 8084532:	bd30      	pop	{r4, r5, pc}
 8084534:	20000260 	.word	0x20000260
 8084538:	20000258 	.word	0x20000258

0808453c <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 808453c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 808453e:	2000      	movs	r0, #0
 8084540:	f7fd fa42 	bl	80819c8 <hal_rtc_time_is_valid>
    if (rtcstate)
 8084544:	4604      	mov	r4, r0
 8084546:	b9a0      	cbnz	r0, 8084572 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8084548:	f7fd fbc8 	bl	8081cdc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 808454c:	2801      	cmp	r0, #1
 808454e:	d110      	bne.n	8084572 <_ZN9TimeClass7isValidEv+0x36>
 8084550:	4620      	mov	r0, r4
 8084552:	f7fd fbfb 	bl	8081d4c <system_thread_get_state>
 8084556:	b960      	cbnz	r0, 8084572 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 8084558:	f7ff ff8c 	bl	8084474 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808455c:	b910      	cbnz	r0, 8084564 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 808455e:	f7fd fc2b 	bl	8081db8 <spark_process>
        while (_while() && !_condition()) {
 8084562:	e7f9      	b.n	8084558 <_ZN9TimeClass7isValidEv+0x1c>
 8084564:	f7ff ff86 	bl	8084474 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 8084568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 808456c:	2000      	movs	r0, #0
 808456e:	f7fd ba2b 	b.w	80819c8 <hal_rtc_time_is_valid>
}
 8084572:	4620      	mov	r0, r4
 8084574:	bd10      	pop	{r4, pc}

08084576 <_ZN9TimeClass3nowEv>:
{
 8084576:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 8084578:	f7ff ffe0 	bl	808453c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 808457c:	2210      	movs	r2, #16
 808457e:	2100      	movs	r1, #0
 8084580:	4668      	mov	r0, sp
 8084582:	f001 fb3a 	bl	8085bfa <memset>
    hal_rtc_get_time(&tv, nullptr);
 8084586:	2100      	movs	r1, #0
 8084588:	4668      	mov	r0, sp
 808458a:	f7fd fa2d 	bl	80819e8 <hal_rtc_get_time>
}
 808458e:	9800      	ldr	r0, [sp, #0]
 8084590:	b005      	add	sp, #20
 8084592:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08084598 <_ZN9TimeClass4hourEv>:
{
 8084598:	b508      	push	{r3, lr}
	return hour(now());
 808459a:	f7ff ffec 	bl	8084576 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 808459e:	17c1      	asrs	r1, r0, #31
 80845a0:	f7ff ff32 	bl	8084408 <_ZL22Refresh_UnixTime_Cachex>
}
 80845a4:	4b01      	ldr	r3, [pc, #4]	; (80845ac <_ZN9TimeClass4hourEv+0x14>)
 80845a6:	6898      	ldr	r0, [r3, #8]
 80845a8:	bd08      	pop	{r3, pc}
 80845aa:	bf00      	nop
 80845ac:	20000230 	.word	0x20000230

080845b0 <_ZN9TimeClass6minuteEv>:
{
 80845b0:	b508      	push	{r3, lr}
	return minute(now());
 80845b2:	f7ff ffe0 	bl	8084576 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80845b6:	17c1      	asrs	r1, r0, #31
 80845b8:	f7ff ff26 	bl	8084408 <_ZL22Refresh_UnixTime_Cachex>
}
 80845bc:	4b01      	ldr	r3, [pc, #4]	; (80845c4 <_ZN9TimeClass6minuteEv+0x14>)
 80845be:	6858      	ldr	r0, [r3, #4]
 80845c0:	bd08      	pop	{r3, pc}
 80845c2:	bf00      	nop
 80845c4:	20000230 	.word	0x20000230

080845c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80845c8:	4b02      	ldr	r3, [pc, #8]	; (80845d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80845ca:	681a      	ldr	r2, [r3, #0]
 80845cc:	4b02      	ldr	r3, [pc, #8]	; (80845d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80845ce:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80845d0:	4770      	bx	lr
 80845d2:	bf00      	nop
 80845d4:	20000094 	.word	0x20000094
 80845d8:	2000022c 	.word	0x2000022c

080845dc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80845dc:	4770      	bx	lr

080845de <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80845de:	7441      	strb	r1, [r0, #17]
}
 80845e0:	4770      	bx	lr

080845e2 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80845e2:	4770      	bx	lr

080845e4 <_ZN11USARTSerial17availableForWriteEv>:
{
 80845e4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80845e6:	7c00      	ldrb	r0, [r0, #16]
 80845e8:	f7fd fafe 	bl	8081be8 <hal_usart_available_data_for_write>
}
 80845ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80845f0:	bd08      	pop	{r3, pc}

080845f2 <_ZN11USARTSerial9availableEv>:
{
 80845f2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80845f4:	7c00      	ldrb	r0, [r0, #16]
 80845f6:	f7fd facf 	bl	8081b98 <hal_usart_available>
}
 80845fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80845fe:	bd08      	pop	{r3, pc}

08084600 <_ZN11USARTSerial4peekEv>:
{
 8084600:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 8084602:	7c00      	ldrb	r0, [r0, #16]
 8084604:	f7fd fad8 	bl	8081bb8 <hal_usart_peek>
}
 8084608:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808460c:	bd08      	pop	{r3, pc}

0808460e <_ZN11USARTSerial4readEv>:
{
 808460e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 8084610:	7c00      	ldrb	r0, [r0, #16]
 8084612:	f7fd fac9 	bl	8081ba8 <hal_usart_read>
}
 8084616:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808461a:	bd08      	pop	{r3, pc}

0808461c <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 808461c:	7c00      	ldrb	r0, [r0, #16]
 808461e:	f7fd bad3 	b.w	8081bc8 <hal_usart_flush>

08084622 <_ZN11USARTSerial5writeEh>:
{
 8084622:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8084624:	7c46      	ldrb	r6, [r0, #17]
{
 8084626:	4604      	mov	r4, r0
 8084628:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808462a:	b12e      	cbz	r6, 8084638 <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 808462c:	4629      	mov	r1, r5
 808462e:	7c20      	ldrb	r0, [r4, #16]
}
 8084630:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 8084634:	f7fd baa8 	b.w	8081b88 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8084638:	7c00      	ldrb	r0, [r0, #16]
 808463a:	f7fd fad5 	bl	8081be8 <hal_usart_available_data_for_write>
 808463e:	2800      	cmp	r0, #0
 8084640:	dcf4      	bgt.n	808462c <_ZN11USARTSerial5writeEh+0xa>
}
 8084642:	4630      	mov	r0, r6
 8084644:	bd70      	pop	{r4, r5, r6, pc}

08084646 <_ZN11USARTSerialD0Ev>:
 8084646:	b510      	push	{r4, lr}
 8084648:	4604      	mov	r4, r0
 808464a:	2114      	movs	r1, #20
 808464c:	f000 fad8 	bl	8084c00 <_ZdlPvj>
 8084650:	4620      	mov	r0, r4
 8084652:	bd10      	pop	{r4, pc}

08084654 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 8084654:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8084658:	b510      	push	{r4, lr}
 808465a:	4604      	mov	r4, r0
 808465c:	4608      	mov	r0, r1
 808465e:	4611      	mov	r1, r2
 8084660:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8084664:	e9c4 c201 	strd	ip, r2, [r4, #4]
 8084668:	4a04      	ldr	r2, [pc, #16]	; (808467c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 808466a:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 808466c:	6022      	str	r2, [r4, #0]
  _blocking = true;
 808466e:	2201      	movs	r2, #1
 8084670:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 8084672:	461a      	mov	r2, r3
 8084674:	f7fd fa78 	bl	8081b68 <hal_usart_init>
}
 8084678:	4620      	mov	r0, r4
 808467a:	bd10      	pop	{r4, pc}
 808467c:	08086588 	.word	0x08086588

08084680 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 8084680:	2300      	movs	r3, #0
 8084682:	7c00      	ldrb	r0, [r0, #16]
 8084684:	f7fd bab8 	b.w	8081bf8 <hal_usart_begin_config>

08084688 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 8084688:	2200      	movs	r2, #0
 808468a:	f7ff bff9 	b.w	8084680 <_ZN11USARTSerial5beginEmm>

0808468e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 808468e:	7c00      	ldrb	r0, [r0, #16]
 8084690:	f7fd ba72 	b.w	8081b78 <hal_usart_end>

08084694 <_Z22__fetch_global_Serial1v>:
{
 8084694:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8084696:	4d0c      	ldr	r5, [pc, #48]	; (80846c8 <_Z22__fetch_global_Serial1v+0x34>)
 8084698:	7829      	ldrb	r1, [r5, #0]
 808469a:	f3bf 8f5b 	dmb	ish
 808469e:	f011 0401 	ands.w	r4, r1, #1
 80846a2:	d10f      	bne.n	80846c4 <_Z22__fetch_global_Serial1v+0x30>
 80846a4:	4628      	mov	r0, r5
 80846a6:	f7fb fd11 	bl	80800cc <__cxa_guard_acquire>
 80846aa:	b158      	cbz	r0, 80846c4 <_Z22__fetch_global_Serial1v+0x30>
 80846ac:	4621      	mov	r1, r4
 80846ae:	4b07      	ldr	r3, [pc, #28]	; (80846cc <_Z22__fetch_global_Serial1v+0x38>)
 80846b0:	4a07      	ldr	r2, [pc, #28]	; (80846d0 <_Z22__fetch_global_Serial1v+0x3c>)
 80846b2:	4808      	ldr	r0, [pc, #32]	; (80846d4 <_Z22__fetch_global_Serial1v+0x40>)
 80846b4:	f7ff ffce 	bl	8084654 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80846b8:	4628      	mov	r0, r5
 80846ba:	f7fb fd0c 	bl	80800d6 <__cxa_guard_release>
 80846be:	4806      	ldr	r0, [pc, #24]	; (80846d8 <_Z22__fetch_global_Serial1v+0x44>)
 80846c0:	f001 fa62 	bl	8085b88 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80846c4:	4803      	ldr	r0, [pc, #12]	; (80846d4 <_Z22__fetch_global_Serial1v+0x40>)
 80846c6:	bd38      	pop	{r3, r4, r5, pc}
 80846c8:	20000270 	.word	0x20000270
 80846cc:	200002f8 	.word	0x200002f8
 80846d0:	20000274 	.word	0x20000274
 80846d4:	2000037c 	.word	0x2000037c
 80846d8:	080845e3 	.word	0x080845e3

080846dc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80846dc:	7441      	strb	r1, [r0, #17]
}
 80846de:	4770      	bx	lr

080846e0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80846e0:	4770      	bx	lr

080846e2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80846e2:	4770      	bx	lr

080846e4 <_ZN9USBSerial4readEv>:
{
 80846e4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80846e6:	2100      	movs	r1, #0
 80846e8:	7c00      	ldrb	r0, [r0, #16]
 80846ea:	f7fd fab5 	bl	8081c58 <HAL_USB_USART_Receive_Data>
}
 80846ee:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80846f2:	bd08      	pop	{r3, pc}

080846f4 <_ZN9USBSerial4peekEv>:
{
 80846f4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80846f6:	2101      	movs	r1, #1
 80846f8:	7c00      	ldrb	r0, [r0, #16]
 80846fa:	f7fd faad 	bl	8081c58 <HAL_USB_USART_Receive_Data>
}
 80846fe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8084702:	bd08      	pop	{r3, pc}

08084704 <_ZN9USBSerial17availableForWriteEv>:
{
 8084704:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8084706:	7c00      	ldrb	r0, [r0, #16]
 8084708:	f7fd fa9e 	bl	8081c48 <HAL_USB_USART_Available_Data_For_Write>
}
 808470c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8084710:	bd08      	pop	{r3, pc}

08084712 <_ZN9USBSerial9availableEv>:
{
 8084712:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8084714:	7c00      	ldrb	r0, [r0, #16]
 8084716:	f7fd fa8f 	bl	8081c38 <HAL_USB_USART_Available_Data>
}
 808471a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808471e:	bd08      	pop	{r3, pc}

08084720 <_ZN9USBSerial5writeEh>:
{
 8084720:	b538      	push	{r3, r4, r5, lr}
 8084722:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8084724:	7c00      	ldrb	r0, [r0, #16]
{
 8084726:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8084728:	f7fd fa8e 	bl	8081c48 <HAL_USB_USART_Available_Data_For_Write>
 808472c:	2800      	cmp	r0, #0
 808472e:	dc01      	bgt.n	8084734 <_ZN9USBSerial5writeEh+0x14>
 8084730:	7c60      	ldrb	r0, [r4, #17]
 8084732:	b128      	cbz	r0, 8084740 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8084734:	4629      	mov	r1, r5
 8084736:	7c20      	ldrb	r0, [r4, #16]
 8084738:	f7fd fa96 	bl	8081c68 <HAL_USB_USART_Send_Data>
 808473c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8084740:	bd38      	pop	{r3, r4, r5, pc}

08084742 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 8084742:	7c00      	ldrb	r0, [r0, #16]
 8084744:	f7fd ba98 	b.w	8081c78 <HAL_USB_USART_Flush_Data>

08084748 <_ZN9USBSerialD0Ev>:
 8084748:	b510      	push	{r4, lr}
 808474a:	4604      	mov	r4, r0
 808474c:	2114      	movs	r1, #20
 808474e:	f000 fa57 	bl	8084c00 <_ZdlPvj>
 8084752:	4620      	mov	r0, r4
 8084754:	bd10      	pop	{r4, pc}

08084756 <__tcf_1>:
 8084756:	4770      	bx	lr

08084758 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8084758:	b510      	push	{r4, lr}
 808475a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808475e:	4604      	mov	r4, r0
 8084760:	4608      	mov	r0, r1
 8084762:	2100      	movs	r1, #0
 8084764:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8084768:	4b04      	ldr	r3, [pc, #16]	; (808477c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 808476a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 808476c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 808476e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 8084770:	4611      	mov	r1, r2
  _blocking = true;
 8084772:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 8084774:	f7fd fa48 	bl	8081c08 <HAL_USB_USART_Init>
}
 8084778:	4620      	mov	r0, r4
 808477a:	bd10      	pop	{r4, pc}
 808477c:	080865b8 	.word	0x080865b8

08084780 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8084780:	2200      	movs	r2, #0
 8084782:	7c00      	ldrb	r0, [r0, #16]
 8084784:	f7fd ba48 	b.w	8081c18 <HAL_USB_USART_Begin>

08084788 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 8084788:	7c00      	ldrb	r0, [r0, #16]
 808478a:	f7fd ba4d 	b.w	8081c28 <HAL_USB_USART_End>
	...

08084790 <_Z19acquireSerialBufferv>:
{
 8084790:	b510      	push	{r4, lr}
 8084792:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8084794:	2214      	movs	r2, #20
 8084796:	2100      	movs	r1, #0
 8084798:	f001 fa2f 	bl	8085bfa <memset>
  conf.rx_buffer = serial_rx_buffer;
 808479c:	4b05      	ldr	r3, [pc, #20]	; (80847b4 <_Z19acquireSerialBufferv+0x24>)
}
 808479e:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80847a0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80847a2:	4b05      	ldr	r3, [pc, #20]	; (80847b8 <_Z19acquireSerialBufferv+0x28>)
 80847a4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80847a6:	f240 1301 	movw	r3, #257	; 0x101
 80847aa:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80847ac:	2381      	movs	r3, #129	; 0x81
 80847ae:	8223      	strh	r3, [r4, #16]
}
 80847b0:	bd10      	pop	{r4, pc}
 80847b2:	bf00      	nop
 80847b4:	200003c0 	.word	0x200003c0
 80847b8:	200004c1 	.word	0x200004c1

080847bc <_Z16_fetch_usbserialv>:
{
 80847bc:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80847be:	4d0e      	ldr	r5, [pc, #56]	; (80847f8 <_Z16_fetch_usbserialv+0x3c>)
{
 80847c0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80847c2:	a801      	add	r0, sp, #4
 80847c4:	f7ff ffe4 	bl	8084790 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80847c8:	7829      	ldrb	r1, [r5, #0]
 80847ca:	f3bf 8f5b 	dmb	ish
 80847ce:	f011 0401 	ands.w	r4, r1, #1
 80847d2:	d10e      	bne.n	80847f2 <_Z16_fetch_usbserialv+0x36>
 80847d4:	4628      	mov	r0, r5
 80847d6:	f7fb fc79 	bl	80800cc <__cxa_guard_acquire>
 80847da:	b150      	cbz	r0, 80847f2 <_Z16_fetch_usbserialv+0x36>
 80847dc:	4621      	mov	r1, r4
 80847de:	aa01      	add	r2, sp, #4
 80847e0:	4806      	ldr	r0, [pc, #24]	; (80847fc <_Z16_fetch_usbserialv+0x40>)
 80847e2:	f7ff ffb9 	bl	8084758 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80847e6:	4628      	mov	r0, r5
 80847e8:	f7fb fc75 	bl	80800d6 <__cxa_guard_release>
 80847ec:	4804      	ldr	r0, [pc, #16]	; (8084800 <_Z16_fetch_usbserialv+0x44>)
 80847ee:	f001 f9cb 	bl	8085b88 <atexit>
	return _usbserial;
}
 80847f2:	4802      	ldr	r0, [pc, #8]	; (80847fc <_Z16_fetch_usbserialv+0x40>)
 80847f4:	b007      	add	sp, #28
 80847f6:	bd30      	pop	{r4, r5, pc}
 80847f8:	20000390 	.word	0x20000390
 80847fc:	20000398 	.word	0x20000398
 8084800:	080846e1 	.word	0x080846e1

08084804 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8084804:	b510      	push	{r4, lr}
 8084806:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8084808:	2214      	movs	r2, #20
 808480a:	2100      	movs	r1, #0
 808480c:	f001 f9f5 	bl	8085bfa <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8084810:	4b05      	ldr	r3, [pc, #20]	; (8084828 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8084812:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 8084814:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8084816:	4b05      	ldr	r3, [pc, #20]	; (808482c <_Z23acquireUSBSerial1Bufferv+0x28>)
 8084818:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808481a:	f240 1301 	movw	r3, #257	; 0x101
 808481e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8084820:	2381      	movs	r3, #129	; 0x81
 8084822:	8223      	strh	r3, [r4, #16]
}
 8084824:	bd10      	pop	{r4, pc}
 8084826:	bf00      	nop
 8084828:	20000542 	.word	0x20000542
 808482c:	20000643 	.word	0x20000643

08084830 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8084830:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8084832:	4c0e      	ldr	r4, [pc, #56]	; (808486c <_Z17_fetch_usbserial1v+0x3c>)
{
 8084834:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8084836:	a801      	add	r0, sp, #4
 8084838:	f7ff ffe4 	bl	8084804 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808483c:	7823      	ldrb	r3, [r4, #0]
 808483e:	f3bf 8f5b 	dmb	ish
 8084842:	07db      	lsls	r3, r3, #31
 8084844:	d40e      	bmi.n	8084864 <_Z17_fetch_usbserial1v+0x34>
 8084846:	4620      	mov	r0, r4
 8084848:	f7fb fc40 	bl	80800cc <__cxa_guard_acquire>
 808484c:	b150      	cbz	r0, 8084864 <_Z17_fetch_usbserial1v+0x34>
 808484e:	2101      	movs	r1, #1
 8084850:	aa01      	add	r2, sp, #4
 8084852:	4807      	ldr	r0, [pc, #28]	; (8084870 <_Z17_fetch_usbserial1v+0x40>)
 8084854:	f7ff ff80 	bl	8084758 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8084858:	4620      	mov	r0, r4
 808485a:	f7fb fc3c 	bl	80800d6 <__cxa_guard_release>
 808485e:	4805      	ldr	r0, [pc, #20]	; (8084874 <_Z17_fetch_usbserial1v+0x44>)
 8084860:	f001 f992 	bl	8085b88 <atexit>
  return _usbserial1;
}
 8084864:	4802      	ldr	r0, [pc, #8]	; (8084870 <_Z17_fetch_usbserial1v+0x40>)
 8084866:	b006      	add	sp, #24
 8084868:	bd10      	pop	{r4, pc}
 808486a:	bf00      	nop
 808486c:	20000394 	.word	0x20000394
 8084870:	200003ac 	.word	0x200003ac
 8084874:	08084757 	.word	0x08084757

08084878 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 8084878:	4b01      	ldr	r3, [pc, #4]	; (8084880 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 808487a:	6018      	str	r0, [r3, #0]
    }, nullptr);
 808487c:	4770      	bx	lr
 808487e:	bf00      	nop
 8084880:	20000098 	.word	0x20000098

08084884 <serialEventRun>:
{
 8084884:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8084886:	4b17      	ldr	r3, [pc, #92]	; (80848e4 <serialEventRun+0x60>)
 8084888:	b143      	cbz	r3, 808489c <serialEventRun+0x18>
 808488a:	f7ff ff97 	bl	80847bc <_Z16_fetch_usbserialv>
 808488e:	6803      	ldr	r3, [r0, #0]
 8084890:	691b      	ldr	r3, [r3, #16]
 8084892:	4798      	blx	r3
 8084894:	2800      	cmp	r0, #0
 8084896:	dd01      	ble.n	808489c <serialEventRun+0x18>
        serialEvent();
 8084898:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 808489c:	4b12      	ldr	r3, [pc, #72]	; (80848e8 <serialEventRun+0x64>)
 808489e:	b143      	cbz	r3, 80848b2 <serialEventRun+0x2e>
 80848a0:	f7ff fef8 	bl	8084694 <_Z22__fetch_global_Serial1v>
 80848a4:	6803      	ldr	r3, [r0, #0]
 80848a6:	691b      	ldr	r3, [r3, #16]
 80848a8:	4798      	blx	r3
 80848aa:	2800      	cmp	r0, #0
 80848ac:	dd01      	ble.n	80848b2 <serialEventRun+0x2e>
        serialEvent1();
 80848ae:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80848b2:	4b0e      	ldr	r3, [pc, #56]	; (80848ec <serialEventRun+0x68>)
 80848b4:	b10b      	cbz	r3, 80848ba <serialEventRun+0x36>
 80848b6:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 80848ba:	4b0d      	ldr	r3, [pc, #52]	; (80848f0 <serialEventRun+0x6c>)
 80848bc:	b10b      	cbz	r3, 80848c2 <serialEventRun+0x3e>
 80848be:	f3af 8000 	nop.w
    if (serialEventRun5) serialEventRun5();
 80848c2:	4b0c      	ldr	r3, [pc, #48]	; (80848f4 <serialEventRun+0x70>)
 80848c4:	b10b      	cbz	r3, 80848ca <serialEventRun+0x46>
 80848c6:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80848ca:	4b0b      	ldr	r3, [pc, #44]	; (80848f8 <serialEventRun+0x74>)
 80848cc:	b143      	cbz	r3, 80848e0 <serialEventRun+0x5c>
 80848ce:	f7ff ffaf 	bl	8084830 <_Z17_fetch_usbserial1v>
 80848d2:	6803      	ldr	r3, [r0, #0]
 80848d4:	691b      	ldr	r3, [r3, #16]
 80848d6:	4798      	blx	r3
 80848d8:	2800      	cmp	r0, #0
 80848da:	dd01      	ble.n	80848e0 <serialEventRun+0x5c>
        usbSerialEvent1();
 80848dc:	f3af 8000 	nop.w
}
 80848e0:	bd08      	pop	{r3, pc}
 80848e2:	bf00      	nop
	...

080848fc <_post_loop>:
{
 80848fc:	b508      	push	{r3, lr}
	serialEventRun();
 80848fe:	f7ff ffc1 	bl	8084884 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8084902:	f7fd f859 	bl	80819b8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8084906:	4b01      	ldr	r3, [pc, #4]	; (808490c <_post_loop+0x10>)
 8084908:	6018      	str	r0, [r3, #0]
}
 808490a:	bd08      	pop	{r3, pc}
 808490c:	200006dc 	.word	0x200006dc

08084910 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8084910:	4805      	ldr	r0, [pc, #20]	; (8084928 <_Z33system_initialize_user_backup_ramv+0x18>)
 8084912:	4a06      	ldr	r2, [pc, #24]	; (808492c <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 8084914:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8084916:	1a12      	subs	r2, r2, r0
 8084918:	4905      	ldr	r1, [pc, #20]	; (8084930 <_Z33system_initialize_user_backup_ramv+0x20>)
 808491a:	f001 f946 	bl	8085baa <memcpy>
    __backup_sram_signature = signature;
 808491e:	4b05      	ldr	r3, [pc, #20]	; (8084934 <_Z33system_initialize_user_backup_ramv+0x24>)
 8084920:	4a05      	ldr	r2, [pc, #20]	; (8084938 <_Z33system_initialize_user_backup_ramv+0x28>)
 8084922:	601a      	str	r2, [r3, #0]
}
 8084924:	bd08      	pop	{r3, pc}
 8084926:	bf00      	nop
 8084928:	40024000 	.word	0x40024000
 808492c:	40024018 	.word	0x40024018
 8084930:	08086760 	.word	0x08086760
 8084934:	40024014 	.word	0x40024014
 8084938:	9a271c1e 	.word	0x9a271c1e

0808493c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808493c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 808493e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8084940:	461a      	mov	r2, r3
 8084942:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8084946:	9300      	str	r3, [sp, #0]
 8084948:	f7fd fa12 	bl	8081d70 <system_ctrl_set_result>
}
 808494c:	b003      	add	sp, #12
 808494e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08084954 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 8084954:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8084956:	8843      	ldrh	r3, [r0, #2]
 8084958:	2b0a      	cmp	r3, #10
 808495a:	d008      	beq.n	808496e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 808495c:	2b50      	cmp	r3, #80	; 0x50
 808495e:	d10b      	bne.n	8084978 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 8084960:	4b09      	ldr	r3, [pc, #36]	; (8084988 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8084962:	681b      	ldr	r3, [r3, #0]
 8084964:	b14b      	cbz	r3, 808497a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 8084966:	b003      	add	sp, #12
 8084968:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 808496c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 808496e:	f7ff ffe5 	bl	808493c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 8084972:	b003      	add	sp, #12
 8084974:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8084978:	2300      	movs	r3, #0
 808497a:	461a      	mov	r2, r3
 808497c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8084980:	9300      	str	r3, [sp, #0]
 8084982:	f7fd f9f5 	bl	8081d70 <system_ctrl_set_result>
}
 8084986:	e7f4      	b.n	8084972 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 8084988:	200006c8 	.word	0x200006c8

0808498c <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 808498c:	2100      	movs	r1, #0
{
 808498e:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8084990:	4811      	ldr	r0, [pc, #68]	; (80849d8 <module_user_init_hook+0x4c>)
 8084992:	f7fd fb09 	bl	8081fa8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 8084996:	4b11      	ldr	r3, [pc, #68]	; (80849dc <module_user_init_hook+0x50>)
 8084998:	681a      	ldr	r2, [r3, #0]
 808499a:	4b11      	ldr	r3, [pc, #68]	; (80849e0 <module_user_init_hook+0x54>)
 808499c:	429a      	cmp	r2, r3
 808499e:	bf0c      	ite	eq
 80849a0:	2201      	moveq	r2, #1
 80849a2:	2200      	movne	r2, #0
 80849a4:	4b0f      	ldr	r3, [pc, #60]	; (80849e4 <module_user_init_hook+0x58>)
 80849a6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80849a8:	d001      	beq.n	80849ae <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80849aa:	f7ff ffb1 	bl	8084910 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80849ae:	f7fc fff3 	bl	8081998 <HAL_RNG_GetRandomNumber>
 80849b2:	4604      	mov	r4, r0
    srand(seed);
 80849b4:	f001 f92a 	bl	8085c0c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80849b8:	4b0b      	ldr	r3, [pc, #44]	; (80849e8 <module_user_init_hook+0x5c>)
 80849ba:	b113      	cbz	r3, 80849c2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80849bc:	4620      	mov	r0, r4
 80849be:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80849c2:	2100      	movs	r1, #0
 80849c4:	4808      	ldr	r0, [pc, #32]	; (80849e8 <module_user_init_hook+0x5c>)
 80849c6:	f7fd fa3f 	bl	8081e48 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80849ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80849ce:	2100      	movs	r1, #0
 80849d0:	4806      	ldr	r0, [pc, #24]	; (80849ec <module_user_init_hook+0x60>)
 80849d2:	f7fd b9c3 	b.w	8081d5c <system_ctrl_set_app_request_handler>
 80849d6:	bf00      	nop
 80849d8:	08084879 	.word	0x08084879
 80849dc:	40024014 	.word	0x40024014
 80849e0:	9a271c1e 	.word	0x9a271c1e
 80849e4:	200006c4 	.word	0x200006c4
 80849e8:	00000000 	.word	0x00000000
 80849ec:	08084955 	.word	0x08084955

080849f0 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80849f0:	4b02      	ldr	r3, [pc, #8]	; (80849fc <__tcf_0+0xc>)
 80849f2:	6898      	ldr	r0, [r3, #8]
 80849f4:	b108      	cbz	r0, 80849fa <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80849f6:	f7fc bfa7 	b.w	8081948 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80849fa:	4770      	bx	lr
 80849fc:	200006d0 	.word	0x200006d0

08084a00 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 8084a00:	282e      	cmp	r0, #46	; 0x2e
bool pinAvailable(uint16_t pin) {
 8084a02:	b570      	push	{r4, r5, r6, lr}
 8084a04:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 8084a06:	d901      	bls.n	8084a0c <pinAvailable+0xc>
    return false;
 8084a08:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 8084a0a:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 8084a0c:	f1a0 030d 	sub.w	r3, r0, #13
 8084a10:	2b02      	cmp	r3, #2
 8084a12:	d90b      	bls.n	8084a2c <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 8084a14:	2801      	cmp	r0, #1
 8084a16:	d824      	bhi.n	8084a62 <pinAvailable+0x62>
 8084a18:	f000 f89c 	bl	8084b54 <_Z19__fetch_global_Wirev>
 8084a1c:	2100      	movs	r1, #0
 8084a1e:	7c00      	ldrb	r0, [r0, #16]
 8084a20:	f7fd f86a 	bl	8081af8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 8084a24:	f080 0001 	eor.w	r0, r0, #1
 8084a28:	b2c0      	uxtb	r0, r0
 8084a2a:	e7ee      	b.n	8084a0a <pinAvailable+0xa>
 8084a2c:	4e12      	ldr	r6, [pc, #72]	; (8084a78 <pinAvailable+0x78>)
 8084a2e:	7831      	ldrb	r1, [r6, #0]
 8084a30:	f3bf 8f5b 	dmb	ish
 8084a34:	f011 0501 	ands.w	r5, r1, #1
 8084a38:	d10d      	bne.n	8084a56 <pinAvailable+0x56>
 8084a3a:	4630      	mov	r0, r6
 8084a3c:	f7fb fb46 	bl	80800cc <__cxa_guard_acquire>
 8084a40:	b148      	cbz	r0, 8084a56 <pinAvailable+0x56>
 8084a42:	4629      	mov	r1, r5
 8084a44:	480d      	ldr	r0, [pc, #52]	; (8084a7c <pinAvailable+0x7c>)
 8084a46:	f7ff fb7d 	bl	8084144 <_ZN8SPIClassC1E19hal_spi_interface_t>
 8084a4a:	4630      	mov	r0, r6
 8084a4c:	f7fb fb43 	bl	80800d6 <__cxa_guard_release>
 8084a50:	480b      	ldr	r0, [pc, #44]	; (8084a80 <pinAvailable+0x80>)
 8084a52:	f001 f899 	bl	8085b88 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 8084a56:	4b09      	ldr	r3, [pc, #36]	; (8084a7c <pinAvailable+0x7c>)
 8084a58:	7818      	ldrb	r0, [r3, #0]
 8084a5a:	f7fd f87d 	bl	8081b58 <hal_spi_is_enabled>
 8084a5e:	2800      	cmp	r0, #0
 8084a60:	d1d2      	bne.n	8084a08 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 8084a62:	3c12      	subs	r4, #18
 8084a64:	2c01      	cmp	r4, #1
 8084a66:	d805      	bhi.n	8084a74 <pinAvailable+0x74>
 8084a68:	f7ff fe14 	bl	8084694 <_Z22__fetch_global_Serial1v>
 8084a6c:	7c00      	ldrb	r0, [r0, #16]
 8084a6e:	f7fd f8b3 	bl	8081bd8 <hal_usart_is_enabled>
 8084a72:	e7d7      	b.n	8084a24 <pinAvailable+0x24>
  return true; // 'pin' is available
 8084a74:	2001      	movs	r0, #1
 8084a76:	e7c8      	b.n	8084a0a <pinAvailable+0xa>
 8084a78:	200006cc 	.word	0x200006cc
 8084a7c:	200006d0 	.word	0x200006d0
 8084a80:	080849f1 	.word	0x080849f1

08084a84 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8084a84:	282e      	cmp	r0, #46	; 0x2e
{
 8084a86:	b538      	push	{r3, r4, r5, lr}
 8084a88:	4604      	mov	r4, r0
 8084a8a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8084a8c:	d80a      	bhi.n	8084aa4 <pinMode+0x20>
 8084a8e:	29ff      	cmp	r1, #255	; 0xff
 8084a90:	d008      	beq.n	8084aa4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 8084a92:	f7ff ffb5 	bl	8084a00 <pinAvailable>
 8084a96:	b128      	cbz	r0, 8084aa4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 8084a98:	4629      	mov	r1, r5
 8084a9a:	4620      	mov	r0, r4
}
 8084a9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 8084aa0:	f7fc bfba 	b.w	8081a18 <HAL_Pin_Mode>
}
 8084aa4:	bd38      	pop	{r3, r4, r5, pc}

08084aa6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8084aa6:	b538      	push	{r3, r4, r5, lr}
 8084aa8:	4604      	mov	r4, r0
 8084aaa:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8084aac:	f7fc ffbc 	bl	8081a28 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8084ab0:	28ff      	cmp	r0, #255	; 0xff
 8084ab2:	d010      	beq.n	8084ad6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 8084ab4:	2806      	cmp	r0, #6
 8084ab6:	d804      	bhi.n	8084ac2 <digitalWrite+0x1c>
 8084ab8:	234d      	movs	r3, #77	; 0x4d
 8084aba:	fa23 f000 	lsr.w	r0, r3, r0
 8084abe:	07c3      	lsls	r3, r0, #31
 8084ac0:	d409      	bmi.n	8084ad6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8084ac2:	4620      	mov	r0, r4
 8084ac4:	f7ff ff9c 	bl	8084a00 <pinAvailable>
 8084ac8:	b128      	cbz	r0, 8084ad6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8084aca:	4629      	mov	r1, r5
 8084acc:	4620      	mov	r0, r4
}
 8084ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 8084ad2:	f7fc bfb1 	b.w	8081a38 <HAL_GPIO_Write>
}
 8084ad6:	bd38      	pop	{r3, r4, r5, pc}

08084ad8 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 8084ad8:	b510      	push	{r4, lr}
 8084ada:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 8084adc:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 8084ade:	bf9c      	itt	ls
 8084ae0:	340a      	addls	r4, #10
 8084ae2:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8084ae4:	4620      	mov	r0, r4
 8084ae6:	f7ff ff8b 	bl	8084a00 <pinAvailable>
 8084aea:	b150      	cbz	r0, 8084b02 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 8084aec:	2103      	movs	r1, #3
 8084aee:	4620      	mov	r0, r4
 8084af0:	f7fc ff8a 	bl	8081a08 <HAL_Validate_Pin_Function>
 8084af4:	2803      	cmp	r0, #3
 8084af6:	d104      	bne.n	8084b02 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 8084af8:	4620      	mov	r0, r4
}
 8084afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 8084afe:	f7fc bfb3 	b.w	8081a68 <hal_adc_read>
}
 8084b02:	2000      	movs	r0, #0
 8084b04:	bd10      	pop	{r4, pc}

08084b06 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8084b06:	4770      	bx	lr

08084b08 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:
	hal_i2c_config_t config = {
 8084b08:	2300      	movs	r3, #0
hal_i2c_config_t defaultWireConfig() {
 8084b0a:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 8084b0c:	2520      	movs	r5, #32
 8084b0e:	8043      	strh	r3, [r0, #2]
 8084b10:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8084b12:	4e08      	ldr	r6, [pc, #32]	; (8084b34 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x2c>)
hal_i2c_config_t defaultWireConfig() {
 8084b14:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 8084b16:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8084b18:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 8084b1a:	6085      	str	r5, [r0, #8]
 8084b1c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8084b1e:	4628      	mov	r0, r5
 8084b20:	f000 f872 	bl	8084c08 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8084b24:	4631      	mov	r1, r6
	};
 8084b26:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8084b28:	4628      	mov	r0, r5
 8084b2a:	f000 f86d 	bl	8084c08 <_ZnajRKSt9nothrow_t>
	};
 8084b2e:	60e0      	str	r0, [r4, #12]
}
 8084b30:	4620      	mov	r0, r4
 8084b32:	bd70      	pop	{r4, r5, r6, pc}
 8084b34:	080865e0 	.word	0x080865e0

08084b38 <__tcf_2>:
 8084b38:	4770      	bx	lr

08084b3a <_Z17acquireWireBufferv>:
{
 8084b3a:	b510      	push	{r4, lr}
 8084b3c:	4604      	mov	r4, r0
	return defaultWireConfig();
 8084b3e:	f7ff ffe3 	bl	8084b08 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 8084b42:	4620      	mov	r0, r4
 8084b44:	bd10      	pop	{r4, pc}

08084b46 <_Z18acquireWire3Bufferv>:
 8084b46:	b510      	push	{r4, lr}
 8084b48:	4604      	mov	r4, r0
 8084b4a:	f7ff ffdd 	bl	8084b08 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
 8084b4e:	4620      	mov	r0, r4
 8084b50:	bd10      	pop	{r4, pc}
	...

08084b54 <_Z19__fetch_global_Wirev>:
{
 8084b54:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8084b56:	4d0e      	ldr	r5, [pc, #56]	; (8084b90 <_Z19__fetch_global_Wirev+0x3c>)
{
 8084b58:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8084b5a:	7829      	ldrb	r1, [r5, #0]
 8084b5c:	f3bf 8f5b 	dmb	ish
 8084b60:	f011 0401 	ands.w	r4, r1, #1
 8084b64:	d111      	bne.n	8084b8a <_Z19__fetch_global_Wirev+0x36>
 8084b66:	4628      	mov	r0, r5
 8084b68:	f7fb fab0 	bl	80800cc <__cxa_guard_acquire>
 8084b6c:	b168      	cbz	r0, 8084b8a <_Z19__fetch_global_Wirev+0x36>
 8084b6e:	a801      	add	r0, sp, #4
 8084b70:	f7ff ffe3 	bl	8084b3a <_Z17acquireWireBufferv>
 8084b74:	4621      	mov	r1, r4
 8084b76:	aa01      	add	r2, sp, #4
 8084b78:	4806      	ldr	r0, [pc, #24]	; (8084b94 <_Z19__fetch_global_Wirev+0x40>)
 8084b7a:	f7fd ff25 	bl	80829c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 8084b7e:	4628      	mov	r0, r5
 8084b80:	f7fb faa9 	bl	80800d6 <__cxa_guard_release>
 8084b84:	4804      	ldr	r0, [pc, #16]	; (8084b98 <_Z19__fetch_global_Wirev+0x44>)
 8084b86:	f000 ffff 	bl	8085b88 <atexit>
	return wire;
}
 8084b8a:	4802      	ldr	r0, [pc, #8]	; (8084b94 <_Z19__fetch_global_Wirev+0x40>)
 8084b8c:	b007      	add	sp, #28
 8084b8e:	bd30      	pop	{r4, r5, pc}
 8084b90:	200006e0 	.word	0x200006e0
 8084b94:	200006e8 	.word	0x200006e8
 8084b98:	08084b07 	.word	0x08084b07

08084b9c <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8084b9c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 8084b9e:	4c0e      	ldr	r4, [pc, #56]	; (8084bd8 <_Z20__fetch_global_Wire3v+0x3c>)
{
 8084ba0:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 8084ba2:	7823      	ldrb	r3, [r4, #0]
 8084ba4:	f3bf 8f5b 	dmb	ish
 8084ba8:	07db      	lsls	r3, r3, #31
 8084baa:	d411      	bmi.n	8084bd0 <_Z20__fetch_global_Wire3v+0x34>
 8084bac:	4620      	mov	r0, r4
 8084bae:	f7fb fa8d 	bl	80800cc <__cxa_guard_acquire>
 8084bb2:	b168      	cbz	r0, 8084bd0 <_Z20__fetch_global_Wire3v+0x34>
 8084bb4:	a801      	add	r0, sp, #4
 8084bb6:	f7ff ffc6 	bl	8084b46 <_Z18acquireWire3Bufferv>
 8084bba:	2102      	movs	r1, #2
 8084bbc:	aa01      	add	r2, sp, #4
 8084bbe:	4807      	ldr	r0, [pc, #28]	; (8084bdc <_Z20__fetch_global_Wire3v+0x40>)
 8084bc0:	f7fd ff02 	bl	80829c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 8084bc4:	4620      	mov	r0, r4
 8084bc6:	f7fb fa86 	bl	80800d6 <__cxa_guard_release>
 8084bca:	4805      	ldr	r0, [pc, #20]	; (8084be0 <_Z20__fetch_global_Wire3v+0x44>)
 8084bcc:	f000 ffdc 	bl	8085b88 <atexit>
	return wire;
}
 8084bd0:	4802      	ldr	r0, [pc, #8]	; (8084bdc <_Z20__fetch_global_Wire3v+0x40>)
 8084bd2:	b006      	add	sp, #24
 8084bd4:	bd10      	pop	{r4, pc}
 8084bd6:	bf00      	nop
 8084bd8:	200006e4 	.word	0x200006e4
 8084bdc:	200006fc 	.word	0x200006fc
 8084be0:	08084b39 	.word	0x08084b39

08084be4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8084be4:	2300      	movs	r3, #0
 8084be6:	b507      	push	{r0, r1, r2, lr}
 8084be8:	461a      	mov	r2, r3
 8084bea:	4619      	mov	r1, r3
 8084bec:	9300      	str	r3, [sp, #0]
 8084bee:	4803      	ldr	r0, [pc, #12]	; (8084bfc <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 8084bf0:	f7fd ffd6 	bl	8082ba0 <_ZN9IPAddressC1Ehhhh>
 8084bf4:	b003      	add	sp, #12
 8084bf6:	f85d fb04 	ldr.w	pc, [sp], #4
 8084bfa:	bf00      	nop
 8084bfc:	20000710 	.word	0x20000710

08084c00 <_ZdlPvj>:
 8084c00:	f7fb ba57 	b.w	80800b2 <_ZdlPv>

08084c04 <_ZnwjRKSt9nothrow_t>:
 8084c04:	f7fb ba51 	b.w	80800aa <_Znwj>

08084c08 <_ZnajRKSt9nothrow_t>:
 8084c08:	f7fb ba51 	b.w	80800ae <_Znaj>

08084c0c <_ZSt25__throw_bad_function_callv>:
 8084c0c:	b508      	push	{r3, lr}
 8084c0e:	f7fd f9bb 	bl	8081f88 <abort>
	...

08084c14 <__aeabi_drsub>:
 8084c14:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8084c18:	e002      	b.n	8084c20 <__adddf3>
 8084c1a:	bf00      	nop

08084c1c <__aeabi_dsub>:
 8084c1c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08084c20 <__adddf3>:
 8084c20:	b530      	push	{r4, r5, lr}
 8084c22:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8084c26:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8084c2a:	ea94 0f05 	teq	r4, r5
 8084c2e:	bf08      	it	eq
 8084c30:	ea90 0f02 	teqeq	r0, r2
 8084c34:	bf1f      	itttt	ne
 8084c36:	ea54 0c00 	orrsne.w	ip, r4, r0
 8084c3a:	ea55 0c02 	orrsne.w	ip, r5, r2
 8084c3e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8084c42:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8084c46:	f000 80e2 	beq.w	8084e0e <__adddf3+0x1ee>
 8084c4a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8084c4e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8084c52:	bfb8      	it	lt
 8084c54:	426d      	neglt	r5, r5
 8084c56:	dd0c      	ble.n	8084c72 <__adddf3+0x52>
 8084c58:	442c      	add	r4, r5
 8084c5a:	ea80 0202 	eor.w	r2, r0, r2
 8084c5e:	ea81 0303 	eor.w	r3, r1, r3
 8084c62:	ea82 0000 	eor.w	r0, r2, r0
 8084c66:	ea83 0101 	eor.w	r1, r3, r1
 8084c6a:	ea80 0202 	eor.w	r2, r0, r2
 8084c6e:	ea81 0303 	eor.w	r3, r1, r3
 8084c72:	2d36      	cmp	r5, #54	; 0x36
 8084c74:	bf88      	it	hi
 8084c76:	bd30      	pophi	{r4, r5, pc}
 8084c78:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8084c7c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8084c80:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8084c84:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8084c88:	d002      	beq.n	8084c90 <__adddf3+0x70>
 8084c8a:	4240      	negs	r0, r0
 8084c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8084c90:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8084c94:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8084c98:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8084c9c:	d002      	beq.n	8084ca4 <__adddf3+0x84>
 8084c9e:	4252      	negs	r2, r2
 8084ca0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8084ca4:	ea94 0f05 	teq	r4, r5
 8084ca8:	f000 80a7 	beq.w	8084dfa <__adddf3+0x1da>
 8084cac:	f1a4 0401 	sub.w	r4, r4, #1
 8084cb0:	f1d5 0e20 	rsbs	lr, r5, #32
 8084cb4:	db0d      	blt.n	8084cd2 <__adddf3+0xb2>
 8084cb6:	fa02 fc0e 	lsl.w	ip, r2, lr
 8084cba:	fa22 f205 	lsr.w	r2, r2, r5
 8084cbe:	1880      	adds	r0, r0, r2
 8084cc0:	f141 0100 	adc.w	r1, r1, #0
 8084cc4:	fa03 f20e 	lsl.w	r2, r3, lr
 8084cc8:	1880      	adds	r0, r0, r2
 8084cca:	fa43 f305 	asr.w	r3, r3, r5
 8084cce:	4159      	adcs	r1, r3
 8084cd0:	e00e      	b.n	8084cf0 <__adddf3+0xd0>
 8084cd2:	f1a5 0520 	sub.w	r5, r5, #32
 8084cd6:	f10e 0e20 	add.w	lr, lr, #32
 8084cda:	2a01      	cmp	r2, #1
 8084cdc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8084ce0:	bf28      	it	cs
 8084ce2:	f04c 0c02 	orrcs.w	ip, ip, #2
 8084ce6:	fa43 f305 	asr.w	r3, r3, r5
 8084cea:	18c0      	adds	r0, r0, r3
 8084cec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8084cf0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8084cf4:	d507      	bpl.n	8084d06 <__adddf3+0xe6>
 8084cf6:	f04f 0e00 	mov.w	lr, #0
 8084cfa:	f1dc 0c00 	rsbs	ip, ip, #0
 8084cfe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8084d02:	eb6e 0101 	sbc.w	r1, lr, r1
 8084d06:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8084d0a:	d31b      	bcc.n	8084d44 <__adddf3+0x124>
 8084d0c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8084d10:	d30c      	bcc.n	8084d2c <__adddf3+0x10c>
 8084d12:	0849      	lsrs	r1, r1, #1
 8084d14:	ea5f 0030 	movs.w	r0, r0, rrx
 8084d18:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8084d1c:	f104 0401 	add.w	r4, r4, #1
 8084d20:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8084d24:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8084d28:	f080 809a 	bcs.w	8084e60 <__adddf3+0x240>
 8084d2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8084d30:	bf08      	it	eq
 8084d32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8084d36:	f150 0000 	adcs.w	r0, r0, #0
 8084d3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8084d3e:	ea41 0105 	orr.w	r1, r1, r5
 8084d42:	bd30      	pop	{r4, r5, pc}
 8084d44:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8084d48:	4140      	adcs	r0, r0
 8084d4a:	eb41 0101 	adc.w	r1, r1, r1
 8084d4e:	3c01      	subs	r4, #1
 8084d50:	bf28      	it	cs
 8084d52:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8084d56:	d2e9      	bcs.n	8084d2c <__adddf3+0x10c>
 8084d58:	f091 0f00 	teq	r1, #0
 8084d5c:	bf04      	itt	eq
 8084d5e:	4601      	moveq	r1, r0
 8084d60:	2000      	moveq	r0, #0
 8084d62:	fab1 f381 	clz	r3, r1
 8084d66:	bf08      	it	eq
 8084d68:	3320      	addeq	r3, #32
 8084d6a:	f1a3 030b 	sub.w	r3, r3, #11
 8084d6e:	f1b3 0220 	subs.w	r2, r3, #32
 8084d72:	da0c      	bge.n	8084d8e <__adddf3+0x16e>
 8084d74:	320c      	adds	r2, #12
 8084d76:	dd08      	ble.n	8084d8a <__adddf3+0x16a>
 8084d78:	f102 0c14 	add.w	ip, r2, #20
 8084d7c:	f1c2 020c 	rsb	r2, r2, #12
 8084d80:	fa01 f00c 	lsl.w	r0, r1, ip
 8084d84:	fa21 f102 	lsr.w	r1, r1, r2
 8084d88:	e00c      	b.n	8084da4 <__adddf3+0x184>
 8084d8a:	f102 0214 	add.w	r2, r2, #20
 8084d8e:	bfd8      	it	le
 8084d90:	f1c2 0c20 	rsble	ip, r2, #32
 8084d94:	fa01 f102 	lsl.w	r1, r1, r2
 8084d98:	fa20 fc0c 	lsr.w	ip, r0, ip
 8084d9c:	bfdc      	itt	le
 8084d9e:	ea41 010c 	orrle.w	r1, r1, ip
 8084da2:	4090      	lslle	r0, r2
 8084da4:	1ae4      	subs	r4, r4, r3
 8084da6:	bfa2      	ittt	ge
 8084da8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8084dac:	4329      	orrge	r1, r5
 8084dae:	bd30      	popge	{r4, r5, pc}
 8084db0:	ea6f 0404 	mvn.w	r4, r4
 8084db4:	3c1f      	subs	r4, #31
 8084db6:	da1c      	bge.n	8084df2 <__adddf3+0x1d2>
 8084db8:	340c      	adds	r4, #12
 8084dba:	dc0e      	bgt.n	8084dda <__adddf3+0x1ba>
 8084dbc:	f104 0414 	add.w	r4, r4, #20
 8084dc0:	f1c4 0220 	rsb	r2, r4, #32
 8084dc4:	fa20 f004 	lsr.w	r0, r0, r4
 8084dc8:	fa01 f302 	lsl.w	r3, r1, r2
 8084dcc:	ea40 0003 	orr.w	r0, r0, r3
 8084dd0:	fa21 f304 	lsr.w	r3, r1, r4
 8084dd4:	ea45 0103 	orr.w	r1, r5, r3
 8084dd8:	bd30      	pop	{r4, r5, pc}
 8084dda:	f1c4 040c 	rsb	r4, r4, #12
 8084dde:	f1c4 0220 	rsb	r2, r4, #32
 8084de2:	fa20 f002 	lsr.w	r0, r0, r2
 8084de6:	fa01 f304 	lsl.w	r3, r1, r4
 8084dea:	ea40 0003 	orr.w	r0, r0, r3
 8084dee:	4629      	mov	r1, r5
 8084df0:	bd30      	pop	{r4, r5, pc}
 8084df2:	fa21 f004 	lsr.w	r0, r1, r4
 8084df6:	4629      	mov	r1, r5
 8084df8:	bd30      	pop	{r4, r5, pc}
 8084dfa:	f094 0f00 	teq	r4, #0
 8084dfe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8084e02:	bf06      	itte	eq
 8084e04:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8084e08:	3401      	addeq	r4, #1
 8084e0a:	3d01      	subne	r5, #1
 8084e0c:	e74e      	b.n	8084cac <__adddf3+0x8c>
 8084e0e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8084e12:	bf18      	it	ne
 8084e14:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8084e18:	d029      	beq.n	8084e6e <__adddf3+0x24e>
 8084e1a:	ea94 0f05 	teq	r4, r5
 8084e1e:	bf08      	it	eq
 8084e20:	ea90 0f02 	teqeq	r0, r2
 8084e24:	d005      	beq.n	8084e32 <__adddf3+0x212>
 8084e26:	ea54 0c00 	orrs.w	ip, r4, r0
 8084e2a:	bf04      	itt	eq
 8084e2c:	4619      	moveq	r1, r3
 8084e2e:	4610      	moveq	r0, r2
 8084e30:	bd30      	pop	{r4, r5, pc}
 8084e32:	ea91 0f03 	teq	r1, r3
 8084e36:	bf1e      	ittt	ne
 8084e38:	2100      	movne	r1, #0
 8084e3a:	2000      	movne	r0, #0
 8084e3c:	bd30      	popne	{r4, r5, pc}
 8084e3e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8084e42:	d105      	bne.n	8084e50 <__adddf3+0x230>
 8084e44:	0040      	lsls	r0, r0, #1
 8084e46:	4149      	adcs	r1, r1
 8084e48:	bf28      	it	cs
 8084e4a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8084e4e:	bd30      	pop	{r4, r5, pc}
 8084e50:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8084e54:	bf3c      	itt	cc
 8084e56:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8084e5a:	bd30      	popcc	{r4, r5, pc}
 8084e5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8084e60:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8084e64:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8084e68:	f04f 0000 	mov.w	r0, #0
 8084e6c:	bd30      	pop	{r4, r5, pc}
 8084e6e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8084e72:	bf1a      	itte	ne
 8084e74:	4619      	movne	r1, r3
 8084e76:	4610      	movne	r0, r2
 8084e78:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8084e7c:	bf1c      	itt	ne
 8084e7e:	460b      	movne	r3, r1
 8084e80:	4602      	movne	r2, r0
 8084e82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8084e86:	bf06      	itte	eq
 8084e88:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8084e8c:	ea91 0f03 	teqeq	r1, r3
 8084e90:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8084e94:	bd30      	pop	{r4, r5, pc}
 8084e96:	bf00      	nop

08084e98 <__aeabi_ui2d>:
 8084e98:	f090 0f00 	teq	r0, #0
 8084e9c:	bf04      	itt	eq
 8084e9e:	2100      	moveq	r1, #0
 8084ea0:	4770      	bxeq	lr
 8084ea2:	b530      	push	{r4, r5, lr}
 8084ea4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8084ea8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8084eac:	f04f 0500 	mov.w	r5, #0
 8084eb0:	f04f 0100 	mov.w	r1, #0
 8084eb4:	e750      	b.n	8084d58 <__adddf3+0x138>
 8084eb6:	bf00      	nop

08084eb8 <__aeabi_i2d>:
 8084eb8:	f090 0f00 	teq	r0, #0
 8084ebc:	bf04      	itt	eq
 8084ebe:	2100      	moveq	r1, #0
 8084ec0:	4770      	bxeq	lr
 8084ec2:	b530      	push	{r4, r5, lr}
 8084ec4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8084ec8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8084ecc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8084ed0:	bf48      	it	mi
 8084ed2:	4240      	negmi	r0, r0
 8084ed4:	f04f 0100 	mov.w	r1, #0
 8084ed8:	e73e      	b.n	8084d58 <__adddf3+0x138>
 8084eda:	bf00      	nop

08084edc <__aeabi_f2d>:
 8084edc:	0042      	lsls	r2, r0, #1
 8084ede:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8084ee2:	ea4f 0131 	mov.w	r1, r1, rrx
 8084ee6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8084eea:	bf1f      	itttt	ne
 8084eec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8084ef0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8084ef4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8084ef8:	4770      	bxne	lr
 8084efa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8084efe:	bf08      	it	eq
 8084f00:	4770      	bxeq	lr
 8084f02:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8084f06:	bf04      	itt	eq
 8084f08:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8084f0c:	4770      	bxeq	lr
 8084f0e:	b530      	push	{r4, r5, lr}
 8084f10:	f44f 7460 	mov.w	r4, #896	; 0x380
 8084f14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8084f18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8084f1c:	e71c      	b.n	8084d58 <__adddf3+0x138>
 8084f1e:	bf00      	nop

08084f20 <__aeabi_ul2d>:
 8084f20:	ea50 0201 	orrs.w	r2, r0, r1
 8084f24:	bf08      	it	eq
 8084f26:	4770      	bxeq	lr
 8084f28:	b530      	push	{r4, r5, lr}
 8084f2a:	f04f 0500 	mov.w	r5, #0
 8084f2e:	e00a      	b.n	8084f46 <__aeabi_l2d+0x16>

08084f30 <__aeabi_l2d>:
 8084f30:	ea50 0201 	orrs.w	r2, r0, r1
 8084f34:	bf08      	it	eq
 8084f36:	4770      	bxeq	lr
 8084f38:	b530      	push	{r4, r5, lr}
 8084f3a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8084f3e:	d502      	bpl.n	8084f46 <__aeabi_l2d+0x16>
 8084f40:	4240      	negs	r0, r0
 8084f42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8084f46:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8084f4a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8084f4e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8084f52:	f43f aed8 	beq.w	8084d06 <__adddf3+0xe6>
 8084f56:	f04f 0203 	mov.w	r2, #3
 8084f5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8084f5e:	bf18      	it	ne
 8084f60:	3203      	addne	r2, #3
 8084f62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8084f66:	bf18      	it	ne
 8084f68:	3203      	addne	r2, #3
 8084f6a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8084f6e:	f1c2 0320 	rsb	r3, r2, #32
 8084f72:	fa00 fc03 	lsl.w	ip, r0, r3
 8084f76:	fa20 f002 	lsr.w	r0, r0, r2
 8084f7a:	fa01 fe03 	lsl.w	lr, r1, r3
 8084f7e:	ea40 000e 	orr.w	r0, r0, lr
 8084f82:	fa21 f102 	lsr.w	r1, r1, r2
 8084f86:	4414      	add	r4, r2
 8084f88:	e6bd      	b.n	8084d06 <__adddf3+0xe6>
 8084f8a:	bf00      	nop

08084f8c <__aeabi_dmul>:
 8084f8c:	b570      	push	{r4, r5, r6, lr}
 8084f8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8084f92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8084f96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8084f9a:	bf1d      	ittte	ne
 8084f9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8084fa0:	ea94 0f0c 	teqne	r4, ip
 8084fa4:	ea95 0f0c 	teqne	r5, ip
 8084fa8:	f000 f8de 	bleq	8085168 <__aeabi_dmul+0x1dc>
 8084fac:	442c      	add	r4, r5
 8084fae:	ea81 0603 	eor.w	r6, r1, r3
 8084fb2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8084fb6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8084fba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8084fbe:	bf18      	it	ne
 8084fc0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8084fc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8084fc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8084fcc:	d038      	beq.n	8085040 <__aeabi_dmul+0xb4>
 8084fce:	fba0 ce02 	umull	ip, lr, r0, r2
 8084fd2:	f04f 0500 	mov.w	r5, #0
 8084fd6:	fbe1 e502 	umlal	lr, r5, r1, r2
 8084fda:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8084fde:	fbe0 e503 	umlal	lr, r5, r0, r3
 8084fe2:	f04f 0600 	mov.w	r6, #0
 8084fe6:	fbe1 5603 	umlal	r5, r6, r1, r3
 8084fea:	f09c 0f00 	teq	ip, #0
 8084fee:	bf18      	it	ne
 8084ff0:	f04e 0e01 	orrne.w	lr, lr, #1
 8084ff4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8084ff8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8084ffc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8085000:	d204      	bcs.n	808500c <__aeabi_dmul+0x80>
 8085002:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8085006:	416d      	adcs	r5, r5
 8085008:	eb46 0606 	adc.w	r6, r6, r6
 808500c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8085010:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8085014:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8085018:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 808501c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8085020:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8085024:	bf88      	it	hi
 8085026:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808502a:	d81e      	bhi.n	808506a <__aeabi_dmul+0xde>
 808502c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8085030:	bf08      	it	eq
 8085032:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8085036:	f150 0000 	adcs.w	r0, r0, #0
 808503a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808503e:	bd70      	pop	{r4, r5, r6, pc}
 8085040:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8085044:	ea46 0101 	orr.w	r1, r6, r1
 8085048:	ea40 0002 	orr.w	r0, r0, r2
 808504c:	ea81 0103 	eor.w	r1, r1, r3
 8085050:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8085054:	bfc2      	ittt	gt
 8085056:	ebd4 050c 	rsbsgt	r5, r4, ip
 808505a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808505e:	bd70      	popgt	{r4, r5, r6, pc}
 8085060:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8085064:	f04f 0e00 	mov.w	lr, #0
 8085068:	3c01      	subs	r4, #1
 808506a:	f300 80ab 	bgt.w	80851c4 <__aeabi_dmul+0x238>
 808506e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8085072:	bfde      	ittt	le
 8085074:	2000      	movle	r0, #0
 8085076:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 808507a:	bd70      	pople	{r4, r5, r6, pc}
 808507c:	f1c4 0400 	rsb	r4, r4, #0
 8085080:	3c20      	subs	r4, #32
 8085082:	da35      	bge.n	80850f0 <__aeabi_dmul+0x164>
 8085084:	340c      	adds	r4, #12
 8085086:	dc1b      	bgt.n	80850c0 <__aeabi_dmul+0x134>
 8085088:	f104 0414 	add.w	r4, r4, #20
 808508c:	f1c4 0520 	rsb	r5, r4, #32
 8085090:	fa00 f305 	lsl.w	r3, r0, r5
 8085094:	fa20 f004 	lsr.w	r0, r0, r4
 8085098:	fa01 f205 	lsl.w	r2, r1, r5
 808509c:	ea40 0002 	orr.w	r0, r0, r2
 80850a0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80850a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80850a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80850ac:	fa21 f604 	lsr.w	r6, r1, r4
 80850b0:	eb42 0106 	adc.w	r1, r2, r6
 80850b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80850b8:	bf08      	it	eq
 80850ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80850be:	bd70      	pop	{r4, r5, r6, pc}
 80850c0:	f1c4 040c 	rsb	r4, r4, #12
 80850c4:	f1c4 0520 	rsb	r5, r4, #32
 80850c8:	fa00 f304 	lsl.w	r3, r0, r4
 80850cc:	fa20 f005 	lsr.w	r0, r0, r5
 80850d0:	fa01 f204 	lsl.w	r2, r1, r4
 80850d4:	ea40 0002 	orr.w	r0, r0, r2
 80850d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80850dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80850e0:	f141 0100 	adc.w	r1, r1, #0
 80850e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80850e8:	bf08      	it	eq
 80850ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80850ee:	bd70      	pop	{r4, r5, r6, pc}
 80850f0:	f1c4 0520 	rsb	r5, r4, #32
 80850f4:	fa00 f205 	lsl.w	r2, r0, r5
 80850f8:	ea4e 0e02 	orr.w	lr, lr, r2
 80850fc:	fa20 f304 	lsr.w	r3, r0, r4
 8085100:	fa01 f205 	lsl.w	r2, r1, r5
 8085104:	ea43 0302 	orr.w	r3, r3, r2
 8085108:	fa21 f004 	lsr.w	r0, r1, r4
 808510c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8085110:	fa21 f204 	lsr.w	r2, r1, r4
 8085114:	ea20 0002 	bic.w	r0, r0, r2
 8085118:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 808511c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8085120:	bf08      	it	eq
 8085122:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8085126:	bd70      	pop	{r4, r5, r6, pc}
 8085128:	f094 0f00 	teq	r4, #0
 808512c:	d10f      	bne.n	808514e <__aeabi_dmul+0x1c2>
 808512e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8085132:	0040      	lsls	r0, r0, #1
 8085134:	eb41 0101 	adc.w	r1, r1, r1
 8085138:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808513c:	bf08      	it	eq
 808513e:	3c01      	subeq	r4, #1
 8085140:	d0f7      	beq.n	8085132 <__aeabi_dmul+0x1a6>
 8085142:	ea41 0106 	orr.w	r1, r1, r6
 8085146:	f095 0f00 	teq	r5, #0
 808514a:	bf18      	it	ne
 808514c:	4770      	bxne	lr
 808514e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8085152:	0052      	lsls	r2, r2, #1
 8085154:	eb43 0303 	adc.w	r3, r3, r3
 8085158:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 808515c:	bf08      	it	eq
 808515e:	3d01      	subeq	r5, #1
 8085160:	d0f7      	beq.n	8085152 <__aeabi_dmul+0x1c6>
 8085162:	ea43 0306 	orr.w	r3, r3, r6
 8085166:	4770      	bx	lr
 8085168:	ea94 0f0c 	teq	r4, ip
 808516c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8085170:	bf18      	it	ne
 8085172:	ea95 0f0c 	teqne	r5, ip
 8085176:	d00c      	beq.n	8085192 <__aeabi_dmul+0x206>
 8085178:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808517c:	bf18      	it	ne
 808517e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8085182:	d1d1      	bne.n	8085128 <__aeabi_dmul+0x19c>
 8085184:	ea81 0103 	eor.w	r1, r1, r3
 8085188:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808518c:	f04f 0000 	mov.w	r0, #0
 8085190:	bd70      	pop	{r4, r5, r6, pc}
 8085192:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8085196:	bf06      	itte	eq
 8085198:	4610      	moveq	r0, r2
 808519a:	4619      	moveq	r1, r3
 808519c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80851a0:	d019      	beq.n	80851d6 <__aeabi_dmul+0x24a>
 80851a2:	ea94 0f0c 	teq	r4, ip
 80851a6:	d102      	bne.n	80851ae <__aeabi_dmul+0x222>
 80851a8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80851ac:	d113      	bne.n	80851d6 <__aeabi_dmul+0x24a>
 80851ae:	ea95 0f0c 	teq	r5, ip
 80851b2:	d105      	bne.n	80851c0 <__aeabi_dmul+0x234>
 80851b4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80851b8:	bf1c      	itt	ne
 80851ba:	4610      	movne	r0, r2
 80851bc:	4619      	movne	r1, r3
 80851be:	d10a      	bne.n	80851d6 <__aeabi_dmul+0x24a>
 80851c0:	ea81 0103 	eor.w	r1, r1, r3
 80851c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80851c8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80851cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80851d0:	f04f 0000 	mov.w	r0, #0
 80851d4:	bd70      	pop	{r4, r5, r6, pc}
 80851d6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80851da:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80851de:	bd70      	pop	{r4, r5, r6, pc}

080851e0 <__aeabi_ddiv>:
 80851e0:	b570      	push	{r4, r5, r6, lr}
 80851e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80851e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80851ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80851ee:	bf1d      	ittte	ne
 80851f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80851f4:	ea94 0f0c 	teqne	r4, ip
 80851f8:	ea95 0f0c 	teqne	r5, ip
 80851fc:	f000 f8a7 	bleq	808534e <__aeabi_ddiv+0x16e>
 8085200:	eba4 0405 	sub.w	r4, r4, r5
 8085204:	ea81 0e03 	eor.w	lr, r1, r3
 8085208:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808520c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8085210:	f000 8088 	beq.w	8085324 <__aeabi_ddiv+0x144>
 8085214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8085218:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 808521c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8085220:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8085224:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8085228:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 808522c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8085230:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8085234:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8085238:	429d      	cmp	r5, r3
 808523a:	bf08      	it	eq
 808523c:	4296      	cmpeq	r6, r2
 808523e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8085242:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8085246:	d202      	bcs.n	808524e <__aeabi_ddiv+0x6e>
 8085248:	085b      	lsrs	r3, r3, #1
 808524a:	ea4f 0232 	mov.w	r2, r2, rrx
 808524e:	1ab6      	subs	r6, r6, r2
 8085250:	eb65 0503 	sbc.w	r5, r5, r3
 8085254:	085b      	lsrs	r3, r3, #1
 8085256:	ea4f 0232 	mov.w	r2, r2, rrx
 808525a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808525e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8085262:	ebb6 0e02 	subs.w	lr, r6, r2
 8085266:	eb75 0e03 	sbcs.w	lr, r5, r3
 808526a:	bf22      	ittt	cs
 808526c:	1ab6      	subcs	r6, r6, r2
 808526e:	4675      	movcs	r5, lr
 8085270:	ea40 000c 	orrcs.w	r0, r0, ip
 8085274:	085b      	lsrs	r3, r3, #1
 8085276:	ea4f 0232 	mov.w	r2, r2, rrx
 808527a:	ebb6 0e02 	subs.w	lr, r6, r2
 808527e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8085282:	bf22      	ittt	cs
 8085284:	1ab6      	subcs	r6, r6, r2
 8085286:	4675      	movcs	r5, lr
 8085288:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808528c:	085b      	lsrs	r3, r3, #1
 808528e:	ea4f 0232 	mov.w	r2, r2, rrx
 8085292:	ebb6 0e02 	subs.w	lr, r6, r2
 8085296:	eb75 0e03 	sbcs.w	lr, r5, r3
 808529a:	bf22      	ittt	cs
 808529c:	1ab6      	subcs	r6, r6, r2
 808529e:	4675      	movcs	r5, lr
 80852a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80852a4:	085b      	lsrs	r3, r3, #1
 80852a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80852aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80852ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80852b2:	bf22      	ittt	cs
 80852b4:	1ab6      	subcs	r6, r6, r2
 80852b6:	4675      	movcs	r5, lr
 80852b8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80852bc:	ea55 0e06 	orrs.w	lr, r5, r6
 80852c0:	d018      	beq.n	80852f4 <__aeabi_ddiv+0x114>
 80852c2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80852c6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80852ca:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80852ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80852d2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80852d6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80852da:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80852de:	d1c0      	bne.n	8085262 <__aeabi_ddiv+0x82>
 80852e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80852e4:	d10b      	bne.n	80852fe <__aeabi_ddiv+0x11e>
 80852e6:	ea41 0100 	orr.w	r1, r1, r0
 80852ea:	f04f 0000 	mov.w	r0, #0
 80852ee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80852f2:	e7b6      	b.n	8085262 <__aeabi_ddiv+0x82>
 80852f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80852f8:	bf04      	itt	eq
 80852fa:	4301      	orreq	r1, r0
 80852fc:	2000      	moveq	r0, #0
 80852fe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8085302:	bf88      	it	hi
 8085304:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8085308:	f63f aeaf 	bhi.w	808506a <__aeabi_dmul+0xde>
 808530c:	ebb5 0c03 	subs.w	ip, r5, r3
 8085310:	bf04      	itt	eq
 8085312:	ebb6 0c02 	subseq.w	ip, r6, r2
 8085316:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808531a:	f150 0000 	adcs.w	r0, r0, #0
 808531e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8085322:	bd70      	pop	{r4, r5, r6, pc}
 8085324:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8085328:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 808532c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8085330:	bfc2      	ittt	gt
 8085332:	ebd4 050c 	rsbsgt	r5, r4, ip
 8085336:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808533a:	bd70      	popgt	{r4, r5, r6, pc}
 808533c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8085340:	f04f 0e00 	mov.w	lr, #0
 8085344:	3c01      	subs	r4, #1
 8085346:	e690      	b.n	808506a <__aeabi_dmul+0xde>
 8085348:	ea45 0e06 	orr.w	lr, r5, r6
 808534c:	e68d      	b.n	808506a <__aeabi_dmul+0xde>
 808534e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8085352:	ea94 0f0c 	teq	r4, ip
 8085356:	bf08      	it	eq
 8085358:	ea95 0f0c 	teqeq	r5, ip
 808535c:	f43f af3b 	beq.w	80851d6 <__aeabi_dmul+0x24a>
 8085360:	ea94 0f0c 	teq	r4, ip
 8085364:	d10a      	bne.n	808537c <__aeabi_ddiv+0x19c>
 8085366:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808536a:	f47f af34 	bne.w	80851d6 <__aeabi_dmul+0x24a>
 808536e:	ea95 0f0c 	teq	r5, ip
 8085372:	f47f af25 	bne.w	80851c0 <__aeabi_dmul+0x234>
 8085376:	4610      	mov	r0, r2
 8085378:	4619      	mov	r1, r3
 808537a:	e72c      	b.n	80851d6 <__aeabi_dmul+0x24a>
 808537c:	ea95 0f0c 	teq	r5, ip
 8085380:	d106      	bne.n	8085390 <__aeabi_ddiv+0x1b0>
 8085382:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8085386:	f43f aefd 	beq.w	8085184 <__aeabi_dmul+0x1f8>
 808538a:	4610      	mov	r0, r2
 808538c:	4619      	mov	r1, r3
 808538e:	e722      	b.n	80851d6 <__aeabi_dmul+0x24a>
 8085390:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8085394:	bf18      	it	ne
 8085396:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808539a:	f47f aec5 	bne.w	8085128 <__aeabi_dmul+0x19c>
 808539e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80853a2:	f47f af0d 	bne.w	80851c0 <__aeabi_dmul+0x234>
 80853a6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80853aa:	f47f aeeb 	bne.w	8085184 <__aeabi_dmul+0x1f8>
 80853ae:	e712      	b.n	80851d6 <__aeabi_dmul+0x24a>

080853b0 <__aeabi_d2iz>:
 80853b0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80853b4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80853b8:	d215      	bcs.n	80853e6 <__aeabi_d2iz+0x36>
 80853ba:	d511      	bpl.n	80853e0 <__aeabi_d2iz+0x30>
 80853bc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80853c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80853c4:	d912      	bls.n	80853ec <__aeabi_d2iz+0x3c>
 80853c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80853ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80853ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80853d2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80853d6:	fa23 f002 	lsr.w	r0, r3, r2
 80853da:	bf18      	it	ne
 80853dc:	4240      	negne	r0, r0
 80853de:	4770      	bx	lr
 80853e0:	f04f 0000 	mov.w	r0, #0
 80853e4:	4770      	bx	lr
 80853e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80853ea:	d105      	bne.n	80853f8 <__aeabi_d2iz+0x48>
 80853ec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80853f0:	bf08      	it	eq
 80853f2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80853f6:	4770      	bx	lr
 80853f8:	f04f 0000 	mov.w	r0, #0
 80853fc:	4770      	bx	lr
 80853fe:	bf00      	nop

08085400 <__aeabi_d2uiz>:
 8085400:	004a      	lsls	r2, r1, #1
 8085402:	d211      	bcs.n	8085428 <__aeabi_d2uiz+0x28>
 8085404:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8085408:	d211      	bcs.n	808542e <__aeabi_d2uiz+0x2e>
 808540a:	d50d      	bpl.n	8085428 <__aeabi_d2uiz+0x28>
 808540c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8085410:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8085414:	d40e      	bmi.n	8085434 <__aeabi_d2uiz+0x34>
 8085416:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808541a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808541e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8085422:	fa23 f002 	lsr.w	r0, r3, r2
 8085426:	4770      	bx	lr
 8085428:	f04f 0000 	mov.w	r0, #0
 808542c:	4770      	bx	lr
 808542e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8085432:	d102      	bne.n	808543a <__aeabi_d2uiz+0x3a>
 8085434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8085438:	4770      	bx	lr
 808543a:	f04f 0000 	mov.w	r0, #0
 808543e:	4770      	bx	lr

08085440 <__aeabi_d2f>:
 8085440:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8085444:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8085448:	bf24      	itt	cs
 808544a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 808544e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8085452:	d90d      	bls.n	8085470 <__aeabi_d2f+0x30>
 8085454:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8085458:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 808545c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8085460:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8085464:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8085468:	bf08      	it	eq
 808546a:	f020 0001 	biceq.w	r0, r0, #1
 808546e:	4770      	bx	lr
 8085470:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8085474:	d121      	bne.n	80854ba <__aeabi_d2f+0x7a>
 8085476:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 808547a:	bfbc      	itt	lt
 808547c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8085480:	4770      	bxlt	lr
 8085482:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8085486:	ea4f 5252 	mov.w	r2, r2, lsr #21
 808548a:	f1c2 0218 	rsb	r2, r2, #24
 808548e:	f1c2 0c20 	rsb	ip, r2, #32
 8085492:	fa10 f30c 	lsls.w	r3, r0, ip
 8085496:	fa20 f002 	lsr.w	r0, r0, r2
 808549a:	bf18      	it	ne
 808549c:	f040 0001 	orrne.w	r0, r0, #1
 80854a0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80854a4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80854a8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80854ac:	ea40 000c 	orr.w	r0, r0, ip
 80854b0:	fa23 f302 	lsr.w	r3, r3, r2
 80854b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80854b8:	e7cc      	b.n	8085454 <__aeabi_d2f+0x14>
 80854ba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80854be:	d107      	bne.n	80854d0 <__aeabi_d2f+0x90>
 80854c0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80854c4:	bf1e      	ittt	ne
 80854c6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80854ca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80854ce:	4770      	bxne	lr
 80854d0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80854d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80854d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80854dc:	4770      	bx	lr
 80854de:	bf00      	nop

080854e0 <__aeabi_frsub>:
 80854e0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80854e4:	e002      	b.n	80854ec <__addsf3>
 80854e6:	bf00      	nop

080854e8 <__aeabi_fsub>:
 80854e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080854ec <__addsf3>:
 80854ec:	0042      	lsls	r2, r0, #1
 80854ee:	bf1f      	itttt	ne
 80854f0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80854f4:	ea92 0f03 	teqne	r2, r3
 80854f8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80854fc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8085500:	d06a      	beq.n	80855d8 <__addsf3+0xec>
 8085502:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8085506:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 808550a:	bfc1      	itttt	gt
 808550c:	18d2      	addgt	r2, r2, r3
 808550e:	4041      	eorgt	r1, r0
 8085510:	4048      	eorgt	r0, r1
 8085512:	4041      	eorgt	r1, r0
 8085514:	bfb8      	it	lt
 8085516:	425b      	neglt	r3, r3
 8085518:	2b19      	cmp	r3, #25
 808551a:	bf88      	it	hi
 808551c:	4770      	bxhi	lr
 808551e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8085522:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8085526:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 808552a:	bf18      	it	ne
 808552c:	4240      	negne	r0, r0
 808552e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8085532:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8085536:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 808553a:	bf18      	it	ne
 808553c:	4249      	negne	r1, r1
 808553e:	ea92 0f03 	teq	r2, r3
 8085542:	d03f      	beq.n	80855c4 <__addsf3+0xd8>
 8085544:	f1a2 0201 	sub.w	r2, r2, #1
 8085548:	fa41 fc03 	asr.w	ip, r1, r3
 808554c:	eb10 000c 	adds.w	r0, r0, ip
 8085550:	f1c3 0320 	rsb	r3, r3, #32
 8085554:	fa01 f103 	lsl.w	r1, r1, r3
 8085558:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808555c:	d502      	bpl.n	8085564 <__addsf3+0x78>
 808555e:	4249      	negs	r1, r1
 8085560:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8085564:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8085568:	d313      	bcc.n	8085592 <__addsf3+0xa6>
 808556a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 808556e:	d306      	bcc.n	808557e <__addsf3+0x92>
 8085570:	0840      	lsrs	r0, r0, #1
 8085572:	ea4f 0131 	mov.w	r1, r1, rrx
 8085576:	f102 0201 	add.w	r2, r2, #1
 808557a:	2afe      	cmp	r2, #254	; 0xfe
 808557c:	d251      	bcs.n	8085622 <__addsf3+0x136>
 808557e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8085582:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8085586:	bf08      	it	eq
 8085588:	f020 0001 	biceq.w	r0, r0, #1
 808558c:	ea40 0003 	orr.w	r0, r0, r3
 8085590:	4770      	bx	lr
 8085592:	0049      	lsls	r1, r1, #1
 8085594:	eb40 0000 	adc.w	r0, r0, r0
 8085598:	3a01      	subs	r2, #1
 808559a:	bf28      	it	cs
 808559c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80855a0:	d2ed      	bcs.n	808557e <__addsf3+0x92>
 80855a2:	fab0 fc80 	clz	ip, r0
 80855a6:	f1ac 0c08 	sub.w	ip, ip, #8
 80855aa:	ebb2 020c 	subs.w	r2, r2, ip
 80855ae:	fa00 f00c 	lsl.w	r0, r0, ip
 80855b2:	bfaa      	itet	ge
 80855b4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80855b8:	4252      	neglt	r2, r2
 80855ba:	4318      	orrge	r0, r3
 80855bc:	bfbc      	itt	lt
 80855be:	40d0      	lsrlt	r0, r2
 80855c0:	4318      	orrlt	r0, r3
 80855c2:	4770      	bx	lr
 80855c4:	f092 0f00 	teq	r2, #0
 80855c8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80855cc:	bf06      	itte	eq
 80855ce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80855d2:	3201      	addeq	r2, #1
 80855d4:	3b01      	subne	r3, #1
 80855d6:	e7b5      	b.n	8085544 <__addsf3+0x58>
 80855d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80855dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80855e0:	bf18      	it	ne
 80855e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80855e6:	d021      	beq.n	808562c <__addsf3+0x140>
 80855e8:	ea92 0f03 	teq	r2, r3
 80855ec:	d004      	beq.n	80855f8 <__addsf3+0x10c>
 80855ee:	f092 0f00 	teq	r2, #0
 80855f2:	bf08      	it	eq
 80855f4:	4608      	moveq	r0, r1
 80855f6:	4770      	bx	lr
 80855f8:	ea90 0f01 	teq	r0, r1
 80855fc:	bf1c      	itt	ne
 80855fe:	2000      	movne	r0, #0
 8085600:	4770      	bxne	lr
 8085602:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8085606:	d104      	bne.n	8085612 <__addsf3+0x126>
 8085608:	0040      	lsls	r0, r0, #1
 808560a:	bf28      	it	cs
 808560c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8085610:	4770      	bx	lr
 8085612:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8085616:	bf3c      	itt	cc
 8085618:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 808561c:	4770      	bxcc	lr
 808561e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8085622:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8085626:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808562a:	4770      	bx	lr
 808562c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8085630:	bf16      	itet	ne
 8085632:	4608      	movne	r0, r1
 8085634:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8085638:	4601      	movne	r1, r0
 808563a:	0242      	lsls	r2, r0, #9
 808563c:	bf06      	itte	eq
 808563e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8085642:	ea90 0f01 	teqeq	r0, r1
 8085646:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 808564a:	4770      	bx	lr

0808564c <__aeabi_ui2f>:
 808564c:	f04f 0300 	mov.w	r3, #0
 8085650:	e004      	b.n	808565c <__aeabi_i2f+0x8>
 8085652:	bf00      	nop

08085654 <__aeabi_i2f>:
 8085654:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8085658:	bf48      	it	mi
 808565a:	4240      	negmi	r0, r0
 808565c:	ea5f 0c00 	movs.w	ip, r0
 8085660:	bf08      	it	eq
 8085662:	4770      	bxeq	lr
 8085664:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8085668:	4601      	mov	r1, r0
 808566a:	f04f 0000 	mov.w	r0, #0
 808566e:	e01c      	b.n	80856aa <__aeabi_l2f+0x2a>

08085670 <__aeabi_ul2f>:
 8085670:	ea50 0201 	orrs.w	r2, r0, r1
 8085674:	bf08      	it	eq
 8085676:	4770      	bxeq	lr
 8085678:	f04f 0300 	mov.w	r3, #0
 808567c:	e00a      	b.n	8085694 <__aeabi_l2f+0x14>
 808567e:	bf00      	nop

08085680 <__aeabi_l2f>:
 8085680:	ea50 0201 	orrs.w	r2, r0, r1
 8085684:	bf08      	it	eq
 8085686:	4770      	bxeq	lr
 8085688:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 808568c:	d502      	bpl.n	8085694 <__aeabi_l2f+0x14>
 808568e:	4240      	negs	r0, r0
 8085690:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8085694:	ea5f 0c01 	movs.w	ip, r1
 8085698:	bf02      	ittt	eq
 808569a:	4684      	moveq	ip, r0
 808569c:	4601      	moveq	r1, r0
 808569e:	2000      	moveq	r0, #0
 80856a0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80856a4:	bf08      	it	eq
 80856a6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80856aa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80856ae:	fabc f28c 	clz	r2, ip
 80856b2:	3a08      	subs	r2, #8
 80856b4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80856b8:	db10      	blt.n	80856dc <__aeabi_l2f+0x5c>
 80856ba:	fa01 fc02 	lsl.w	ip, r1, r2
 80856be:	4463      	add	r3, ip
 80856c0:	fa00 fc02 	lsl.w	ip, r0, r2
 80856c4:	f1c2 0220 	rsb	r2, r2, #32
 80856c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80856cc:	fa20 f202 	lsr.w	r2, r0, r2
 80856d0:	eb43 0002 	adc.w	r0, r3, r2
 80856d4:	bf08      	it	eq
 80856d6:	f020 0001 	biceq.w	r0, r0, #1
 80856da:	4770      	bx	lr
 80856dc:	f102 0220 	add.w	r2, r2, #32
 80856e0:	fa01 fc02 	lsl.w	ip, r1, r2
 80856e4:	f1c2 0220 	rsb	r2, r2, #32
 80856e8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80856ec:	fa21 f202 	lsr.w	r2, r1, r2
 80856f0:	eb43 0002 	adc.w	r0, r3, r2
 80856f4:	bf08      	it	eq
 80856f6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80856fa:	4770      	bx	lr

080856fc <__aeabi_fmul>:
 80856fc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8085700:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8085704:	bf1e      	ittt	ne
 8085706:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808570a:	ea92 0f0c 	teqne	r2, ip
 808570e:	ea93 0f0c 	teqne	r3, ip
 8085712:	d06f      	beq.n	80857f4 <__aeabi_fmul+0xf8>
 8085714:	441a      	add	r2, r3
 8085716:	ea80 0c01 	eor.w	ip, r0, r1
 808571a:	0240      	lsls	r0, r0, #9
 808571c:	bf18      	it	ne
 808571e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8085722:	d01e      	beq.n	8085762 <__aeabi_fmul+0x66>
 8085724:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8085728:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 808572c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8085730:	fba0 3101 	umull	r3, r1, r0, r1
 8085734:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8085738:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 808573c:	bf3e      	ittt	cc
 808573e:	0049      	lslcc	r1, r1, #1
 8085740:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8085744:	005b      	lslcc	r3, r3, #1
 8085746:	ea40 0001 	orr.w	r0, r0, r1
 808574a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808574e:	2afd      	cmp	r2, #253	; 0xfd
 8085750:	d81d      	bhi.n	808578e <__aeabi_fmul+0x92>
 8085752:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8085756:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808575a:	bf08      	it	eq
 808575c:	f020 0001 	biceq.w	r0, r0, #1
 8085760:	4770      	bx	lr
 8085762:	f090 0f00 	teq	r0, #0
 8085766:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808576a:	bf08      	it	eq
 808576c:	0249      	lsleq	r1, r1, #9
 808576e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8085772:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8085776:	3a7f      	subs	r2, #127	; 0x7f
 8085778:	bfc2      	ittt	gt
 808577a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808577e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8085782:	4770      	bxgt	lr
 8085784:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8085788:	f04f 0300 	mov.w	r3, #0
 808578c:	3a01      	subs	r2, #1
 808578e:	dc5d      	bgt.n	808584c <__aeabi_fmul+0x150>
 8085790:	f112 0f19 	cmn.w	r2, #25
 8085794:	bfdc      	itt	le
 8085796:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 808579a:	4770      	bxle	lr
 808579c:	f1c2 0200 	rsb	r2, r2, #0
 80857a0:	0041      	lsls	r1, r0, #1
 80857a2:	fa21 f102 	lsr.w	r1, r1, r2
 80857a6:	f1c2 0220 	rsb	r2, r2, #32
 80857aa:	fa00 fc02 	lsl.w	ip, r0, r2
 80857ae:	ea5f 0031 	movs.w	r0, r1, rrx
 80857b2:	f140 0000 	adc.w	r0, r0, #0
 80857b6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80857ba:	bf08      	it	eq
 80857bc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80857c0:	4770      	bx	lr
 80857c2:	f092 0f00 	teq	r2, #0
 80857c6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80857ca:	bf02      	ittt	eq
 80857cc:	0040      	lsleq	r0, r0, #1
 80857ce:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80857d2:	3a01      	subeq	r2, #1
 80857d4:	d0f9      	beq.n	80857ca <__aeabi_fmul+0xce>
 80857d6:	ea40 000c 	orr.w	r0, r0, ip
 80857da:	f093 0f00 	teq	r3, #0
 80857de:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80857e2:	bf02      	ittt	eq
 80857e4:	0049      	lsleq	r1, r1, #1
 80857e6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80857ea:	3b01      	subeq	r3, #1
 80857ec:	d0f9      	beq.n	80857e2 <__aeabi_fmul+0xe6>
 80857ee:	ea41 010c 	orr.w	r1, r1, ip
 80857f2:	e78f      	b.n	8085714 <__aeabi_fmul+0x18>
 80857f4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80857f8:	ea92 0f0c 	teq	r2, ip
 80857fc:	bf18      	it	ne
 80857fe:	ea93 0f0c 	teqne	r3, ip
 8085802:	d00a      	beq.n	808581a <__aeabi_fmul+0x11e>
 8085804:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8085808:	bf18      	it	ne
 808580a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808580e:	d1d8      	bne.n	80857c2 <__aeabi_fmul+0xc6>
 8085810:	ea80 0001 	eor.w	r0, r0, r1
 8085814:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8085818:	4770      	bx	lr
 808581a:	f090 0f00 	teq	r0, #0
 808581e:	bf17      	itett	ne
 8085820:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8085824:	4608      	moveq	r0, r1
 8085826:	f091 0f00 	teqne	r1, #0
 808582a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808582e:	d014      	beq.n	808585a <__aeabi_fmul+0x15e>
 8085830:	ea92 0f0c 	teq	r2, ip
 8085834:	d101      	bne.n	808583a <__aeabi_fmul+0x13e>
 8085836:	0242      	lsls	r2, r0, #9
 8085838:	d10f      	bne.n	808585a <__aeabi_fmul+0x15e>
 808583a:	ea93 0f0c 	teq	r3, ip
 808583e:	d103      	bne.n	8085848 <__aeabi_fmul+0x14c>
 8085840:	024b      	lsls	r3, r1, #9
 8085842:	bf18      	it	ne
 8085844:	4608      	movne	r0, r1
 8085846:	d108      	bne.n	808585a <__aeabi_fmul+0x15e>
 8085848:	ea80 0001 	eor.w	r0, r0, r1
 808584c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8085850:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8085854:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8085858:	4770      	bx	lr
 808585a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808585e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8085862:	4770      	bx	lr

08085864 <__aeabi_fdiv>:
 8085864:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8085868:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808586c:	bf1e      	ittt	ne
 808586e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8085872:	ea92 0f0c 	teqne	r2, ip
 8085876:	ea93 0f0c 	teqne	r3, ip
 808587a:	d069      	beq.n	8085950 <__aeabi_fdiv+0xec>
 808587c:	eba2 0203 	sub.w	r2, r2, r3
 8085880:	ea80 0c01 	eor.w	ip, r0, r1
 8085884:	0249      	lsls	r1, r1, #9
 8085886:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808588a:	d037      	beq.n	80858fc <__aeabi_fdiv+0x98>
 808588c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8085890:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8085894:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8085898:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808589c:	428b      	cmp	r3, r1
 808589e:	bf38      	it	cc
 80858a0:	005b      	lslcc	r3, r3, #1
 80858a2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80858a6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80858aa:	428b      	cmp	r3, r1
 80858ac:	bf24      	itt	cs
 80858ae:	1a5b      	subcs	r3, r3, r1
 80858b0:	ea40 000c 	orrcs.w	r0, r0, ip
 80858b4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80858b8:	bf24      	itt	cs
 80858ba:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80858be:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80858c2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80858c6:	bf24      	itt	cs
 80858c8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80858cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80858d0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80858d4:	bf24      	itt	cs
 80858d6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80858da:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80858de:	011b      	lsls	r3, r3, #4
 80858e0:	bf18      	it	ne
 80858e2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80858e6:	d1e0      	bne.n	80858aa <__aeabi_fdiv+0x46>
 80858e8:	2afd      	cmp	r2, #253	; 0xfd
 80858ea:	f63f af50 	bhi.w	808578e <__aeabi_fmul+0x92>
 80858ee:	428b      	cmp	r3, r1
 80858f0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80858f4:	bf08      	it	eq
 80858f6:	f020 0001 	biceq.w	r0, r0, #1
 80858fa:	4770      	bx	lr
 80858fc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8085900:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8085904:	327f      	adds	r2, #127	; 0x7f
 8085906:	bfc2      	ittt	gt
 8085908:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808590c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8085910:	4770      	bxgt	lr
 8085912:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8085916:	f04f 0300 	mov.w	r3, #0
 808591a:	3a01      	subs	r2, #1
 808591c:	e737      	b.n	808578e <__aeabi_fmul+0x92>
 808591e:	f092 0f00 	teq	r2, #0
 8085922:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8085926:	bf02      	ittt	eq
 8085928:	0040      	lsleq	r0, r0, #1
 808592a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808592e:	3a01      	subeq	r2, #1
 8085930:	d0f9      	beq.n	8085926 <__aeabi_fdiv+0xc2>
 8085932:	ea40 000c 	orr.w	r0, r0, ip
 8085936:	f093 0f00 	teq	r3, #0
 808593a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808593e:	bf02      	ittt	eq
 8085940:	0049      	lsleq	r1, r1, #1
 8085942:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8085946:	3b01      	subeq	r3, #1
 8085948:	d0f9      	beq.n	808593e <__aeabi_fdiv+0xda>
 808594a:	ea41 010c 	orr.w	r1, r1, ip
 808594e:	e795      	b.n	808587c <__aeabi_fdiv+0x18>
 8085950:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8085954:	ea92 0f0c 	teq	r2, ip
 8085958:	d108      	bne.n	808596c <__aeabi_fdiv+0x108>
 808595a:	0242      	lsls	r2, r0, #9
 808595c:	f47f af7d 	bne.w	808585a <__aeabi_fmul+0x15e>
 8085960:	ea93 0f0c 	teq	r3, ip
 8085964:	f47f af70 	bne.w	8085848 <__aeabi_fmul+0x14c>
 8085968:	4608      	mov	r0, r1
 808596a:	e776      	b.n	808585a <__aeabi_fmul+0x15e>
 808596c:	ea93 0f0c 	teq	r3, ip
 8085970:	d104      	bne.n	808597c <__aeabi_fdiv+0x118>
 8085972:	024b      	lsls	r3, r1, #9
 8085974:	f43f af4c 	beq.w	8085810 <__aeabi_fmul+0x114>
 8085978:	4608      	mov	r0, r1
 808597a:	e76e      	b.n	808585a <__aeabi_fmul+0x15e>
 808597c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8085980:	bf18      	it	ne
 8085982:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8085986:	d1ca      	bne.n	808591e <__aeabi_fdiv+0xba>
 8085988:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 808598c:	f47f af5c 	bne.w	8085848 <__aeabi_fmul+0x14c>
 8085990:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8085994:	f47f af3c 	bne.w	8085810 <__aeabi_fmul+0x114>
 8085998:	e75f      	b.n	808585a <__aeabi_fmul+0x15e>
 808599a:	bf00      	nop

0808599c <__gesf2>:
 808599c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80859a0:	e006      	b.n	80859b0 <__cmpsf2+0x4>
 80859a2:	bf00      	nop

080859a4 <__lesf2>:
 80859a4:	f04f 0c01 	mov.w	ip, #1
 80859a8:	e002      	b.n	80859b0 <__cmpsf2+0x4>
 80859aa:	bf00      	nop

080859ac <__cmpsf2>:
 80859ac:	f04f 0c01 	mov.w	ip, #1
 80859b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80859b4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80859b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80859bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80859c0:	bf18      	it	ne
 80859c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80859c6:	d011      	beq.n	80859ec <__cmpsf2+0x40>
 80859c8:	b001      	add	sp, #4
 80859ca:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80859ce:	bf18      	it	ne
 80859d0:	ea90 0f01 	teqne	r0, r1
 80859d4:	bf58      	it	pl
 80859d6:	ebb2 0003 	subspl.w	r0, r2, r3
 80859da:	bf88      	it	hi
 80859dc:	17c8      	asrhi	r0, r1, #31
 80859de:	bf38      	it	cc
 80859e0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80859e4:	bf18      	it	ne
 80859e6:	f040 0001 	orrne.w	r0, r0, #1
 80859ea:	4770      	bx	lr
 80859ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80859f0:	d102      	bne.n	80859f8 <__cmpsf2+0x4c>
 80859f2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80859f6:	d105      	bne.n	8085a04 <__cmpsf2+0x58>
 80859f8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80859fc:	d1e4      	bne.n	80859c8 <__cmpsf2+0x1c>
 80859fe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8085a02:	d0e1      	beq.n	80859c8 <__cmpsf2+0x1c>
 8085a04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8085a08:	4770      	bx	lr
 8085a0a:	bf00      	nop

08085a0c <__aeabi_cfrcmple>:
 8085a0c:	4684      	mov	ip, r0
 8085a0e:	4608      	mov	r0, r1
 8085a10:	4661      	mov	r1, ip
 8085a12:	e7ff      	b.n	8085a14 <__aeabi_cfcmpeq>

08085a14 <__aeabi_cfcmpeq>:
 8085a14:	b50f      	push	{r0, r1, r2, r3, lr}
 8085a16:	f7ff ffc9 	bl	80859ac <__cmpsf2>
 8085a1a:	2800      	cmp	r0, #0
 8085a1c:	bf48      	it	mi
 8085a1e:	f110 0f00 	cmnmi.w	r0, #0
 8085a22:	bd0f      	pop	{r0, r1, r2, r3, pc}

08085a24 <__aeabi_fcmpeq>:
 8085a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8085a28:	f7ff fff4 	bl	8085a14 <__aeabi_cfcmpeq>
 8085a2c:	bf0c      	ite	eq
 8085a2e:	2001      	moveq	r0, #1
 8085a30:	2000      	movne	r0, #0
 8085a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8085a36:	bf00      	nop

08085a38 <__aeabi_fcmplt>:
 8085a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8085a3c:	f7ff ffea 	bl	8085a14 <__aeabi_cfcmpeq>
 8085a40:	bf34      	ite	cc
 8085a42:	2001      	movcc	r0, #1
 8085a44:	2000      	movcs	r0, #0
 8085a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8085a4a:	bf00      	nop

08085a4c <__aeabi_fcmple>:
 8085a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8085a50:	f7ff ffe0 	bl	8085a14 <__aeabi_cfcmpeq>
 8085a54:	bf94      	ite	ls
 8085a56:	2001      	movls	r0, #1
 8085a58:	2000      	movhi	r0, #0
 8085a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8085a5e:	bf00      	nop

08085a60 <__aeabi_fcmpge>:
 8085a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8085a64:	f7ff ffd2 	bl	8085a0c <__aeabi_cfrcmple>
 8085a68:	bf94      	ite	ls
 8085a6a:	2001      	movls	r0, #1
 8085a6c:	2000      	movhi	r0, #0
 8085a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8085a72:	bf00      	nop

08085a74 <__aeabi_fcmpgt>:
 8085a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8085a78:	f7ff ffc8 	bl	8085a0c <__aeabi_cfrcmple>
 8085a7c:	bf34      	ite	cc
 8085a7e:	2001      	movcc	r0, #1
 8085a80:	2000      	movcs	r0, #0
 8085a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8085a86:	bf00      	nop

08085a88 <__aeabi_f2iz>:
 8085a88:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8085a8c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8085a90:	d30f      	bcc.n	8085ab2 <__aeabi_f2iz+0x2a>
 8085a92:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8085a96:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8085a9a:	d90d      	bls.n	8085ab8 <__aeabi_f2iz+0x30>
 8085a9c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8085aa0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8085aa4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8085aa8:	fa23 f002 	lsr.w	r0, r3, r2
 8085aac:	bf18      	it	ne
 8085aae:	4240      	negne	r0, r0
 8085ab0:	4770      	bx	lr
 8085ab2:	f04f 0000 	mov.w	r0, #0
 8085ab6:	4770      	bx	lr
 8085ab8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8085abc:	d101      	bne.n	8085ac2 <__aeabi_f2iz+0x3a>
 8085abe:	0242      	lsls	r2, r0, #9
 8085ac0:	d105      	bne.n	8085ace <__aeabi_f2iz+0x46>
 8085ac2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8085ac6:	bf08      	it	eq
 8085ac8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8085acc:	4770      	bx	lr
 8085ace:	f04f 0000 	mov.w	r0, #0
 8085ad2:	4770      	bx	lr

08085ad4 <__aeabi_f2lz>:
 8085ad4:	b510      	push	{r4, lr}
 8085ad6:	2100      	movs	r1, #0
 8085ad8:	4604      	mov	r4, r0
 8085ada:	f7ff ffad 	bl	8085a38 <__aeabi_fcmplt>
 8085ade:	b920      	cbnz	r0, 8085aea <__aeabi_f2lz+0x16>
 8085ae0:	4620      	mov	r0, r4
 8085ae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8085ae6:	f000 b809 	b.w	8085afc <__aeabi_f2ulz>
 8085aea:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 8085aee:	f000 f805 	bl	8085afc <__aeabi_f2ulz>
 8085af2:	4240      	negs	r0, r0
 8085af4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8085af8:	bd10      	pop	{r4, pc}
 8085afa:	bf00      	nop

08085afc <__aeabi_f2ulz>:
 8085afc:	b5d0      	push	{r4, r6, r7, lr}
 8085afe:	f7ff f9ed 	bl	8084edc <__aeabi_f2d>
 8085b02:	2200      	movs	r2, #0
 8085b04:	4b0b      	ldr	r3, [pc, #44]	; (8085b34 <__aeabi_f2ulz+0x38>)
 8085b06:	4606      	mov	r6, r0
 8085b08:	460f      	mov	r7, r1
 8085b0a:	f7ff fa3f 	bl	8084f8c <__aeabi_dmul>
 8085b0e:	f7ff fc77 	bl	8085400 <__aeabi_d2uiz>
 8085b12:	4604      	mov	r4, r0
 8085b14:	f7ff f9c0 	bl	8084e98 <__aeabi_ui2d>
 8085b18:	2200      	movs	r2, #0
 8085b1a:	4b07      	ldr	r3, [pc, #28]	; (8085b38 <__aeabi_f2ulz+0x3c>)
 8085b1c:	f7ff fa36 	bl	8084f8c <__aeabi_dmul>
 8085b20:	4602      	mov	r2, r0
 8085b22:	460b      	mov	r3, r1
 8085b24:	4630      	mov	r0, r6
 8085b26:	4639      	mov	r1, r7
 8085b28:	f7ff f878 	bl	8084c1c <__aeabi_dsub>
 8085b2c:	f7ff fc68 	bl	8085400 <__aeabi_d2uiz>
 8085b30:	4621      	mov	r1, r4
 8085b32:	bdd0      	pop	{r4, r6, r7, pc}
 8085b34:	3df00000 	.word	0x3df00000
 8085b38:	41f00000 	.word	0x41f00000

08085b3c <asctime_r>:
 8085b3c:	b510      	push	{r4, lr}
 8085b3e:	460c      	mov	r4, r1
 8085b40:	6941      	ldr	r1, [r0, #20]
 8085b42:	b086      	sub	sp, #24
 8085b44:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8085b48:	6903      	ldr	r3, [r0, #16]
 8085b4a:	6982      	ldr	r2, [r0, #24]
 8085b4c:	9104      	str	r1, [sp, #16]
 8085b4e:	6801      	ldr	r1, [r0, #0]
 8085b50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8085b54:	9103      	str	r1, [sp, #12]
 8085b56:	6841      	ldr	r1, [r0, #4]
 8085b58:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8085b5c:	9102      	str	r1, [sp, #8]
 8085b5e:	6881      	ldr	r1, [r0, #8]
 8085b60:	9101      	str	r1, [sp, #4]
 8085b62:	68c1      	ldr	r1, [r0, #12]
 8085b64:	4620      	mov	r0, r4
 8085b66:	9100      	str	r1, [sp, #0]
 8085b68:	4904      	ldr	r1, [pc, #16]	; (8085b7c <asctime_r+0x40>)
 8085b6a:	440b      	add	r3, r1
 8085b6c:	4904      	ldr	r1, [pc, #16]	; (8085b80 <asctime_r+0x44>)
 8085b6e:	440a      	add	r2, r1
 8085b70:	4904      	ldr	r1, [pc, #16]	; (8085b84 <asctime_r+0x48>)
 8085b72:	f7fc f9f1 	bl	8081f58 <siprintf>
 8085b76:	4620      	mov	r0, r4
 8085b78:	b006      	add	sp, #24
 8085b7a:	bd10      	pop	{r4, pc}
 8085b7c:	08086616 	.word	0x08086616
 8085b80:	08086601 	.word	0x08086601
 8085b84:	080865e1 	.word	0x080865e1

08085b88 <atexit>:
 8085b88:	2300      	movs	r3, #0
 8085b8a:	4601      	mov	r1, r0
 8085b8c:	461a      	mov	r2, r3
 8085b8e:	4618      	mov	r0, r3
 8085b90:	f000 b978 	b.w	8085e84 <__register_exitproc>

08085b94 <atoi>:
 8085b94:	220a      	movs	r2, #10
 8085b96:	2100      	movs	r1, #0
 8085b98:	f000 b96a 	b.w	8085e70 <strtol>

08085b9c <difftime>:
 8085b9c:	b508      	push	{r3, lr}
 8085b9e:	1a80      	subs	r0, r0, r2
 8085ba0:	eb61 0103 	sbc.w	r1, r1, r3
 8085ba4:	f7ff f9c4 	bl	8084f30 <__aeabi_l2d>
 8085ba8:	bd08      	pop	{r3, pc}

08085baa <memcpy>:
 8085baa:	440a      	add	r2, r1
 8085bac:	4291      	cmp	r1, r2
 8085bae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8085bb2:	d100      	bne.n	8085bb6 <memcpy+0xc>
 8085bb4:	4770      	bx	lr
 8085bb6:	b510      	push	{r4, lr}
 8085bb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8085bbc:	4291      	cmp	r1, r2
 8085bbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8085bc2:	d1f9      	bne.n	8085bb8 <memcpy+0xe>
 8085bc4:	bd10      	pop	{r4, pc}

08085bc6 <memmove>:
 8085bc6:	4288      	cmp	r0, r1
 8085bc8:	b510      	push	{r4, lr}
 8085bca:	eb01 0402 	add.w	r4, r1, r2
 8085bce:	d902      	bls.n	8085bd6 <memmove+0x10>
 8085bd0:	4284      	cmp	r4, r0
 8085bd2:	4623      	mov	r3, r4
 8085bd4:	d807      	bhi.n	8085be6 <memmove+0x20>
 8085bd6:	1e43      	subs	r3, r0, #1
 8085bd8:	42a1      	cmp	r1, r4
 8085bda:	d008      	beq.n	8085bee <memmove+0x28>
 8085bdc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8085be0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8085be4:	e7f8      	b.n	8085bd8 <memmove+0x12>
 8085be6:	4601      	mov	r1, r0
 8085be8:	4402      	add	r2, r0
 8085bea:	428a      	cmp	r2, r1
 8085bec:	d100      	bne.n	8085bf0 <memmove+0x2a>
 8085bee:	bd10      	pop	{r4, pc}
 8085bf0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8085bf4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8085bf8:	e7f7      	b.n	8085bea <memmove+0x24>

08085bfa <memset>:
 8085bfa:	4603      	mov	r3, r0
 8085bfc:	4402      	add	r2, r0
 8085bfe:	4293      	cmp	r3, r2
 8085c00:	d100      	bne.n	8085c04 <memset+0xa>
 8085c02:	4770      	bx	lr
 8085c04:	f803 1b01 	strb.w	r1, [r3], #1
 8085c08:	e7f9      	b.n	8085bfe <memset+0x4>
	...

08085c0c <srand>:
 8085c0c:	b538      	push	{r3, r4, r5, lr}
 8085c0e:	4b0d      	ldr	r3, [pc, #52]	; (8085c44 <srand+0x38>)
 8085c10:	4604      	mov	r4, r0
 8085c12:	681d      	ldr	r5, [r3, #0]
 8085c14:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8085c16:	b97b      	cbnz	r3, 8085c38 <srand+0x2c>
 8085c18:	2018      	movs	r0, #24
 8085c1a:	f7fc f985 	bl	8081f28 <malloc>
 8085c1e:	4a0a      	ldr	r2, [pc, #40]	; (8085c48 <srand+0x3c>)
 8085c20:	4b0a      	ldr	r3, [pc, #40]	; (8085c4c <srand+0x40>)
 8085c22:	63a8      	str	r0, [r5, #56]	; 0x38
 8085c24:	e9c0 2300 	strd	r2, r3, [r0]
 8085c28:	4b09      	ldr	r3, [pc, #36]	; (8085c50 <srand+0x44>)
 8085c2a:	2201      	movs	r2, #1
 8085c2c:	6083      	str	r3, [r0, #8]
 8085c2e:	230b      	movs	r3, #11
 8085c30:	8183      	strh	r3, [r0, #12]
 8085c32:	2300      	movs	r3, #0
 8085c34:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8085c38:	2200      	movs	r2, #0
 8085c3a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8085c3c:	611c      	str	r4, [r3, #16]
 8085c3e:	615a      	str	r2, [r3, #20]
 8085c40:	bd38      	pop	{r3, r4, r5, pc}
 8085c42:	bf00      	nop
 8085c44:	20000098 	.word	0x20000098
 8085c48:	abcd330e 	.word	0xabcd330e
 8085c4c:	e66d1234 	.word	0xe66d1234
 8085c50:	0005deec 	.word	0x0005deec

08085c54 <strcat>:
 8085c54:	4602      	mov	r2, r0
 8085c56:	b510      	push	{r4, lr}
 8085c58:	7814      	ldrb	r4, [r2, #0]
 8085c5a:	4613      	mov	r3, r2
 8085c5c:	3201      	adds	r2, #1
 8085c5e:	2c00      	cmp	r4, #0
 8085c60:	d1fa      	bne.n	8085c58 <strcat+0x4>
 8085c62:	3b01      	subs	r3, #1
 8085c64:	f811 2b01 	ldrb.w	r2, [r1], #1
 8085c68:	f803 2f01 	strb.w	r2, [r3, #1]!
 8085c6c:	2a00      	cmp	r2, #0
 8085c6e:	d1f9      	bne.n	8085c64 <strcat+0x10>
 8085c70:	bd10      	pop	{r4, pc}

08085c72 <strchr>:
 8085c72:	4603      	mov	r3, r0
 8085c74:	b2c9      	uxtb	r1, r1
 8085c76:	4618      	mov	r0, r3
 8085c78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8085c7c:	b112      	cbz	r2, 8085c84 <strchr+0x12>
 8085c7e:	428a      	cmp	r2, r1
 8085c80:	d1f9      	bne.n	8085c76 <strchr+0x4>
 8085c82:	4770      	bx	lr
 8085c84:	2900      	cmp	r1, #0
 8085c86:	bf18      	it	ne
 8085c88:	2000      	movne	r0, #0
 8085c8a:	4770      	bx	lr

08085c8c <strchrnul>:
 8085c8c:	b510      	push	{r4, lr}
 8085c8e:	4604      	mov	r4, r0
 8085c90:	f7ff ffef 	bl	8085c72 <strchr>
 8085c94:	b918      	cbnz	r0, 8085c9e <strchrnul+0x12>
 8085c96:	4620      	mov	r0, r4
 8085c98:	f000 f82f 	bl	8085cfa <strlen>
 8085c9c:	4420      	add	r0, r4
 8085c9e:	bd10      	pop	{r4, pc}

08085ca0 <strcmp>:
 8085ca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8085ca4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8085ca8:	2a01      	cmp	r2, #1
 8085caa:	bf28      	it	cs
 8085cac:	429a      	cmpcs	r2, r3
 8085cae:	d0f7      	beq.n	8085ca0 <strcmp>
 8085cb0:	1ad0      	subs	r0, r2, r3
 8085cb2:	4770      	bx	lr

08085cb4 <strcpy>:
 8085cb4:	4603      	mov	r3, r0
 8085cb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8085cba:	f803 2b01 	strb.w	r2, [r3], #1
 8085cbe:	2a00      	cmp	r2, #0
 8085cc0:	d1f9      	bne.n	8085cb6 <strcpy+0x2>
 8085cc2:	4770      	bx	lr

08085cc4 <strdup>:
 8085cc4:	4b02      	ldr	r3, [pc, #8]	; (8085cd0 <strdup+0xc>)
 8085cc6:	4601      	mov	r1, r0
 8085cc8:	6818      	ldr	r0, [r3, #0]
 8085cca:	f000 b803 	b.w	8085cd4 <_strdup_r>
 8085cce:	bf00      	nop
 8085cd0:	20000098 	.word	0x20000098

08085cd4 <_strdup_r>:
 8085cd4:	b570      	push	{r4, r5, r6, lr}
 8085cd6:	4604      	mov	r4, r0
 8085cd8:	4608      	mov	r0, r1
 8085cda:	460d      	mov	r5, r1
 8085cdc:	f000 f80d 	bl	8085cfa <strlen>
 8085ce0:	1c46      	adds	r6, r0, #1
 8085ce2:	4631      	mov	r1, r6
 8085ce4:	4620      	mov	r0, r4
 8085ce6:	f7fc f957 	bl	8081f98 <_malloc_r>
 8085cea:	4604      	mov	r4, r0
 8085cec:	b118      	cbz	r0, 8085cf6 <_strdup_r+0x22>
 8085cee:	4632      	mov	r2, r6
 8085cf0:	4629      	mov	r1, r5
 8085cf2:	f7ff ff5a 	bl	8085baa <memcpy>
 8085cf6:	4620      	mov	r0, r4
 8085cf8:	bd70      	pop	{r4, r5, r6, pc}

08085cfa <strlen>:
 8085cfa:	4603      	mov	r3, r0
 8085cfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8085d00:	2a00      	cmp	r2, #0
 8085d02:	d1fb      	bne.n	8085cfc <strlen+0x2>
 8085d04:	1a18      	subs	r0, r3, r0
 8085d06:	3801      	subs	r0, #1
 8085d08:	4770      	bx	lr

08085d0a <strncmp>:
 8085d0a:	b510      	push	{r4, lr}
 8085d0c:	b16a      	cbz	r2, 8085d2a <strncmp+0x20>
 8085d0e:	3901      	subs	r1, #1
 8085d10:	1884      	adds	r4, r0, r2
 8085d12:	f810 3b01 	ldrb.w	r3, [r0], #1
 8085d16:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8085d1a:	4293      	cmp	r3, r2
 8085d1c:	d103      	bne.n	8085d26 <strncmp+0x1c>
 8085d1e:	42a0      	cmp	r0, r4
 8085d20:	d001      	beq.n	8085d26 <strncmp+0x1c>
 8085d22:	2b00      	cmp	r3, #0
 8085d24:	d1f5      	bne.n	8085d12 <strncmp+0x8>
 8085d26:	1a98      	subs	r0, r3, r2
 8085d28:	bd10      	pop	{r4, pc}
 8085d2a:	4610      	mov	r0, r2
 8085d2c:	e7fc      	b.n	8085d28 <strncmp+0x1e>

08085d2e <strncpy>:
 8085d2e:	4603      	mov	r3, r0
 8085d30:	b510      	push	{r4, lr}
 8085d32:	3901      	subs	r1, #1
 8085d34:	b132      	cbz	r2, 8085d44 <strncpy+0x16>
 8085d36:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8085d3a:	3a01      	subs	r2, #1
 8085d3c:	f803 4b01 	strb.w	r4, [r3], #1
 8085d40:	2c00      	cmp	r4, #0
 8085d42:	d1f7      	bne.n	8085d34 <strncpy+0x6>
 8085d44:	2100      	movs	r1, #0
 8085d46:	441a      	add	r2, r3
 8085d48:	4293      	cmp	r3, r2
 8085d4a:	d100      	bne.n	8085d4e <strncpy+0x20>
 8085d4c:	bd10      	pop	{r4, pc}
 8085d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8085d52:	e7f9      	b.n	8085d48 <strncpy+0x1a>

08085d54 <strrchr>:
 8085d54:	b538      	push	{r3, r4, r5, lr}
 8085d56:	4603      	mov	r3, r0
 8085d58:	460c      	mov	r4, r1
 8085d5a:	b969      	cbnz	r1, 8085d78 <strrchr+0x24>
 8085d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8085d60:	f7ff bf87 	b.w	8085c72 <strchr>
 8085d64:	4605      	mov	r5, r0
 8085d66:	1c43      	adds	r3, r0, #1
 8085d68:	4621      	mov	r1, r4
 8085d6a:	4618      	mov	r0, r3
 8085d6c:	f7ff ff81 	bl	8085c72 <strchr>
 8085d70:	2800      	cmp	r0, #0
 8085d72:	d1f7      	bne.n	8085d64 <strrchr+0x10>
 8085d74:	4628      	mov	r0, r5
 8085d76:	bd38      	pop	{r3, r4, r5, pc}
 8085d78:	2500      	movs	r5, #0
 8085d7a:	e7f5      	b.n	8085d68 <strrchr+0x14>

08085d7c <_strtol_l.isra.0>:
 8085d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8085d80:	468c      	mov	ip, r1
 8085d82:	4686      	mov	lr, r0
 8085d84:	4e39      	ldr	r6, [pc, #228]	; (8085e6c <_strtol_l.isra.0+0xf0>)
 8085d86:	4660      	mov	r0, ip
 8085d88:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8085d8c:	5da5      	ldrb	r5, [r4, r6]
 8085d8e:	f015 0508 	ands.w	r5, r5, #8
 8085d92:	d1f8      	bne.n	8085d86 <_strtol_l.isra.0+0xa>
 8085d94:	2c2d      	cmp	r4, #45	; 0x2d
 8085d96:	d133      	bne.n	8085e00 <_strtol_l.isra.0+0x84>
 8085d98:	f04f 0801 	mov.w	r8, #1
 8085d9c:	f89c 4000 	ldrb.w	r4, [ip]
 8085da0:	f100 0c02 	add.w	ip, r0, #2
 8085da4:	2b00      	cmp	r3, #0
 8085da6:	d05c      	beq.n	8085e62 <_strtol_l.isra.0+0xe6>
 8085da8:	2b10      	cmp	r3, #16
 8085daa:	d10c      	bne.n	8085dc6 <_strtol_l.isra.0+0x4a>
 8085dac:	2c30      	cmp	r4, #48	; 0x30
 8085dae:	d10a      	bne.n	8085dc6 <_strtol_l.isra.0+0x4a>
 8085db0:	f89c 0000 	ldrb.w	r0, [ip]
 8085db4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8085db8:	2858      	cmp	r0, #88	; 0x58
 8085dba:	d14d      	bne.n	8085e58 <_strtol_l.isra.0+0xdc>
 8085dbc:	2310      	movs	r3, #16
 8085dbe:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8085dc2:	f10c 0c02 	add.w	ip, ip, #2
 8085dc6:	2600      	movs	r6, #0
 8085dc8:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8085dcc:	3f01      	subs	r7, #1
 8085dce:	fbb7 f9f3 	udiv	r9, r7, r3
 8085dd2:	4630      	mov	r0, r6
 8085dd4:	fb03 7a19 	mls	sl, r3, r9, r7
 8085dd8:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 8085ddc:	2d09      	cmp	r5, #9
 8085dde:	d818      	bhi.n	8085e12 <_strtol_l.isra.0+0x96>
 8085de0:	462c      	mov	r4, r5
 8085de2:	42a3      	cmp	r3, r4
 8085de4:	dd24      	ble.n	8085e30 <_strtol_l.isra.0+0xb4>
 8085de6:	1c75      	adds	r5, r6, #1
 8085de8:	d007      	beq.n	8085dfa <_strtol_l.isra.0+0x7e>
 8085dea:	4581      	cmp	r9, r0
 8085dec:	d31d      	bcc.n	8085e2a <_strtol_l.isra.0+0xae>
 8085dee:	d101      	bne.n	8085df4 <_strtol_l.isra.0+0x78>
 8085df0:	45a2      	cmp	sl, r4
 8085df2:	db1a      	blt.n	8085e2a <_strtol_l.isra.0+0xae>
 8085df4:	2601      	movs	r6, #1
 8085df6:	fb00 4003 	mla	r0, r0, r3, r4
 8085dfa:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8085dfe:	e7eb      	b.n	8085dd8 <_strtol_l.isra.0+0x5c>
 8085e00:	2c2b      	cmp	r4, #43	; 0x2b
 8085e02:	bf08      	it	eq
 8085e04:	f89c 4000 	ldrbeq.w	r4, [ip]
 8085e08:	46a8      	mov	r8, r5
 8085e0a:	bf08      	it	eq
 8085e0c:	f100 0c02 	addeq.w	ip, r0, #2
 8085e10:	e7c8      	b.n	8085da4 <_strtol_l.isra.0+0x28>
 8085e12:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 8085e16:	2d19      	cmp	r5, #25
 8085e18:	d801      	bhi.n	8085e1e <_strtol_l.isra.0+0xa2>
 8085e1a:	3c37      	subs	r4, #55	; 0x37
 8085e1c:	e7e1      	b.n	8085de2 <_strtol_l.isra.0+0x66>
 8085e1e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 8085e22:	2d19      	cmp	r5, #25
 8085e24:	d804      	bhi.n	8085e30 <_strtol_l.isra.0+0xb4>
 8085e26:	3c57      	subs	r4, #87	; 0x57
 8085e28:	e7db      	b.n	8085de2 <_strtol_l.isra.0+0x66>
 8085e2a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8085e2e:	e7e4      	b.n	8085dfa <_strtol_l.isra.0+0x7e>
 8085e30:	1c73      	adds	r3, r6, #1
 8085e32:	d106      	bne.n	8085e42 <_strtol_l.isra.0+0xc6>
 8085e34:	2322      	movs	r3, #34	; 0x22
 8085e36:	4638      	mov	r0, r7
 8085e38:	f8ce 3000 	str.w	r3, [lr]
 8085e3c:	b942      	cbnz	r2, 8085e50 <_strtol_l.isra.0+0xd4>
 8085e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8085e42:	f1b8 0f00 	cmp.w	r8, #0
 8085e46:	d000      	beq.n	8085e4a <_strtol_l.isra.0+0xce>
 8085e48:	4240      	negs	r0, r0
 8085e4a:	2a00      	cmp	r2, #0
 8085e4c:	d0f7      	beq.n	8085e3e <_strtol_l.isra.0+0xc2>
 8085e4e:	b10e      	cbz	r6, 8085e54 <_strtol_l.isra.0+0xd8>
 8085e50:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8085e54:	6011      	str	r1, [r2, #0]
 8085e56:	e7f2      	b.n	8085e3e <_strtol_l.isra.0+0xc2>
 8085e58:	2430      	movs	r4, #48	; 0x30
 8085e5a:	2b00      	cmp	r3, #0
 8085e5c:	d1b3      	bne.n	8085dc6 <_strtol_l.isra.0+0x4a>
 8085e5e:	2308      	movs	r3, #8
 8085e60:	e7b1      	b.n	8085dc6 <_strtol_l.isra.0+0x4a>
 8085e62:	2c30      	cmp	r4, #48	; 0x30
 8085e64:	d0a4      	beq.n	8085db0 <_strtol_l.isra.0+0x34>
 8085e66:	230a      	movs	r3, #10
 8085e68:	e7ad      	b.n	8085dc6 <_strtol_l.isra.0+0x4a>
 8085e6a:	bf00      	nop
 8085e6c:	0808663b 	.word	0x0808663b

08085e70 <strtol>:
 8085e70:	4613      	mov	r3, r2
 8085e72:	460a      	mov	r2, r1
 8085e74:	4601      	mov	r1, r0
 8085e76:	4802      	ldr	r0, [pc, #8]	; (8085e80 <strtol+0x10>)
 8085e78:	6800      	ldr	r0, [r0, #0]
 8085e7a:	f7ff bf7f 	b.w	8085d7c <_strtol_l.isra.0>
 8085e7e:	bf00      	nop
 8085e80:	20000098 	.word	0x20000098

08085e84 <__register_exitproc>:
 8085e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8085e88:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8085f48 <__register_exitproc+0xc4>
 8085e8c:	4606      	mov	r6, r0
 8085e8e:	f8d8 0000 	ldr.w	r0, [r8]
 8085e92:	461f      	mov	r7, r3
 8085e94:	460d      	mov	r5, r1
 8085e96:	4691      	mov	r9, r2
 8085e98:	f000 f858 	bl	8085f4c <__retarget_lock_acquire_recursive>
 8085e9c:	4b26      	ldr	r3, [pc, #152]	; (8085f38 <__register_exitproc+0xb4>)
 8085e9e:	681c      	ldr	r4, [r3, #0]
 8085ea0:	b934      	cbnz	r4, 8085eb0 <__register_exitproc+0x2c>
 8085ea2:	4c26      	ldr	r4, [pc, #152]	; (8085f3c <__register_exitproc+0xb8>)
 8085ea4:	601c      	str	r4, [r3, #0]
 8085ea6:	4b26      	ldr	r3, [pc, #152]	; (8085f40 <__register_exitproc+0xbc>)
 8085ea8:	b113      	cbz	r3, 8085eb0 <__register_exitproc+0x2c>
 8085eaa:	681b      	ldr	r3, [r3, #0]
 8085eac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8085eb0:	6863      	ldr	r3, [r4, #4]
 8085eb2:	2b1f      	cmp	r3, #31
 8085eb4:	dd07      	ble.n	8085ec6 <__register_exitproc+0x42>
 8085eb6:	f8d8 0000 	ldr.w	r0, [r8]
 8085eba:	f000 f849 	bl	8085f50 <__retarget_lock_release_recursive>
 8085ebe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8085ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8085ec6:	b35e      	cbz	r6, 8085f20 <__register_exitproc+0x9c>
 8085ec8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8085ecc:	b988      	cbnz	r0, 8085ef2 <__register_exitproc+0x6e>
 8085ece:	4b1d      	ldr	r3, [pc, #116]	; (8085f44 <__register_exitproc+0xc0>)
 8085ed0:	b923      	cbnz	r3, 8085edc <__register_exitproc+0x58>
 8085ed2:	f8d8 0000 	ldr.w	r0, [r8]
 8085ed6:	f000 f83a 	bl	8085f4e <__retarget_lock_release>
 8085eda:	e7f0      	b.n	8085ebe <__register_exitproc+0x3a>
 8085edc:	f44f 7084 	mov.w	r0, #264	; 0x108
 8085ee0:	f7fc f822 	bl	8081f28 <malloc>
 8085ee4:	2800      	cmp	r0, #0
 8085ee6:	d0f4      	beq.n	8085ed2 <__register_exitproc+0x4e>
 8085ee8:	2300      	movs	r3, #0
 8085eea:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8085eee:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8085ef2:	2201      	movs	r2, #1
 8085ef4:	6863      	ldr	r3, [r4, #4]
 8085ef6:	2e02      	cmp	r6, #2
 8085ef8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8085efc:	fa02 f203 	lsl.w	r2, r2, r3
 8085f00:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8085f04:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8085f08:	ea43 0302 	orr.w	r3, r3, r2
 8085f0c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8085f10:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8085f14:	bf02      	ittt	eq
 8085f16:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8085f1a:	431a      	orreq	r2, r3
 8085f1c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8085f20:	6863      	ldr	r3, [r4, #4]
 8085f22:	f8d8 0000 	ldr.w	r0, [r8]
 8085f26:	1c5a      	adds	r2, r3, #1
 8085f28:	3302      	adds	r3, #2
 8085f2a:	6062      	str	r2, [r4, #4]
 8085f2c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8085f30:	f000 f80e 	bl	8085f50 <__retarget_lock_release_recursive>
 8085f34:	2000      	movs	r0, #0
 8085f36:	e7c4      	b.n	8085ec2 <__register_exitproc+0x3e>
 8085f38:	200007a4 	.word	0x200007a4
 8085f3c:	20000718 	.word	0x20000718
 8085f40:	00000000 	.word	0x00000000
 8085f44:	08081f29 	.word	0x08081f29
 8085f48:	200000fc 	.word	0x200000fc

08085f4c <__retarget_lock_acquire_recursive>:
 8085f4c:	4770      	bx	lr

08085f4e <__retarget_lock_release>:
 8085f4e:	4770      	bx	lr

08085f50 <__retarget_lock_release_recursive>:
 8085f50:	4770      	bx	lr

08085f52 <link_code_end>:
	...

08085f54 <dynalib_user>:
 8085f54:	0031 0808 0071 0808 0099 0808 009d 0808     1...q...........
 8085f64:	0000 0000 6e55 6e6b 776f 006e 6f4e 656e     ....Unknown.None
 8085f74:	5700 4669 0069 5347 004d 4d55 5354 4300     .WiFi.GSM.UMTS.C
 8085f84:	4d44 0041 544c 0045 4549 4545 3038 3132     DMA.LTE.IEEE8021
 8085f94:	3435 4c00 4554 435f 5441 4d5f 0031 544c     54.LTE_CAT_M1.LT
 8085fa4:	5f45 4143 5f54 424e 0031 6f50 726f 4c00     E_CAT_NB1.Poor.L
 8085fb4:	776f 4d00 6465 7569 006d 6556 7972 4720     ow.Medium.Very G
 8085fc4:	6f6f 0064 7247 6165 0074 2e30 3737 2500     ood.Great.0.77.%
 8085fd4:	2073 3a53 3225 302e 2566 2c25 5120 253a     s S:%2.0f%%, Q:%
 8085fe4:	2e32 6630 2525 0020 6552 6573 7474 6e69     2.0f%% .Resettin
 8085ff4:	2067 6e69 7020 6f72 7267 7365 0073 3532     g in progress.25
 8086004:	2025 6f64 656e 3500 2530 6420 6e6f 0065     % done.50% done.
 8086014:	3537 2025 6f64 656e 4400 6e6f 0065 6f42     75% done.Done.Bo
 8086024:	736f 6574 2072 6f4e 4620 6f6c 2077 2031     oster No Flow 1 
 8086034:	202d 4200 6f6f 7473 7265 4e20 206f 6c46     - .Booster No Fl
 8086044:	776f 3220 2d20 0020 7453 726f 6761 2065     ow 2 - .Storage 
 8086054:	6154 6b6e 4c20 776f 2d20 0020 7550 706d     Tank Low - .Pump
 8086064:	3120 4320 6c61 656c 2064 202d 5000 6d75      1 Called - .Pum
 8086074:	2070 2032 6143 6c6c 6465 2d20 0020 6f4c     p 2 Called - .Lo
 8086084:	7473 5020 776f 7265 4100 656c 7472 0073     st Power.Alerts.
 8086094:	227b 6c61 7265 5674 6c61 6575 3a22 6925     {"alertValue":%i
 80860a4:	202c 7022 6d75 4d70 6e69 2273 253a 2c69     , "pumpMins":%i,
 80860b4:	2220 6162 7474 7265 2279 253a 2c69 2220      "battery":%i, "
 80860c4:	6574 706d 3a22 6925 202c 7222 7365 7465     temp":%i, "reset
 80860d4:	2273 253a 7d69 4d00 6e6f 7469 726f 6e69     s":%i}.Monitorin
 80860e4:	5f67 6f48 7275 796c 4e00 206f 6144 6174     g_Hourly.No Data
 80860f4:	5500 6962 6f64 7374 4820 6f6f 006b 6552     .Ubidots Hook.Re
 8086104:	7073 6e6f 6573 5220 6365 6965 6576 0064     sponse Received.
 8086114:	666f 0066 6950 206e 6176 756c 7365 203a     off.Pin values: 
 8086124:	7570 706d 3120 203a 7325 202c 7570 706d     pump 1: %s, pump
 8086134:	3220 203a 7325 5400 7365 0074 6553 2074      2: %s.Test.Set 
 8086144:	6556 6272 736f 2065 6f4d 6564 3000 4300     Verbose Mode.0.C
 8086154:	656c 7261 6465 5620 7265 6f62 6573 4d20     leared Verbose M
 8086164:	646f 0065 7554 6e72 6465 6f20 206e 7550     ode.Turned on Pu
 8086174:	706d 4320 6c61 656c 0064 7550 706d 6320     mp Called.Pump c
 8086184:	6c61 656c 2064 6c61 7265 7374 3d20 2520     alled alerts = %
 8086194:	0069 6c43 6165 6572 2064 7550 706d 4320     i.Cleared Pump C
 80861a4:	6c61 656c 0064 7550 706d 6320 6e61 6563     alled.Pump cance
 80861b4:	6c6c 6465 6120 656c 7472 2073 203d 6925     lled alerts = %i
 80861c4:	5400 6d69 2065 6f7a 656e 6f20 6666 6573     .Time zone offse
 80861d4:	2074 6925 5400 6d69 0065 7246 6d6f 2520     t %i.Time.From %
 80861e4:	2073 6f74 2520 0073 7453 7461 2065 7254     s to %s.State Tr
 80861f4:	6e61 6973 6974 6e6f 4100 656c 7472 6156     ansition.AlertVa
 8086204:	756c 2065 203d 6925 5700 6961 6974 676e     lue = %i.Waiting
 8086214:	6620 726f 5220 7365 6f70 736e 0065 6449      for Response.Id
 8086224:	656c 5200 7365 6f70 736e 2065 6954 656d     le.Response Time
 8086234:	756f 2074 7245 6f72 0072 5245 4f52 5f52     out Error.ERROR_
 8086244:	5453 5441 2045 202d 6552 6573 7474 6e69     STATE - Resettin
 8086254:	0067 7441 6574 706d 6974 676e 7420 206f     g.Attempting to 
 8086264:	6572 6f63 6e6e 6365 2074 6f74 5020 7261     reconnect to Par
 8086274:	6974 6c63 0065 6953 6e67 6c61 5200 7365     ticle.Signal.Res
 8086284:	7465 6f43 6e75 0074 6554 706d 7265 7461     etCount.Temperat
 8086294:	7275 0065 6552 656c 7361 0065 7473 7461     ure.Release.stat
 80862a4:	4f65 4366 6768 7000 6d75 4d70 6e69 7475     eOfChg.pumpMinut
 80862b4:	7365 5200 7365 7465 462d 4152 004d 6552     es.Reset-FRAM.Re
 80862c4:	6573 2d74 6f43 6e75 7374 4800 7261 2d64     set-Counts.Hard-
 80862d4:	6552 6573 0074 6553 646e 4e2d 776f 5600     Reset.Send-Now.V
 80862e4:	7265 6f62 6573 4d2d 646f 0065 6553 2d74     erbose-Mode.Set-
 80862f4:	6954 656d 6f7a 656e 5300 7465 7550 706d     Timezone.SetPump
 8086304:	7453 7461 0065 0000                         State...

0808630c <_ZTVN5spark10LogHandlerE>:
	...
 808631c:	00b9 0808 0217 0808                         ........

08086324 <_ZTVN5spark16SerialLogHandlerE>:
	...
 808632c:	0299 0808 02cd 0808 3c11 0808 0219 0808     .........<......
 808633c:	5f68 0808 5f70 0808 5f75 0808 5f7a 0808     h_..p_..u_..z_..
 808634c:	5f7e 0808 5f83 0808 5f88 0808 5f8c 0808     ~_..._..._..._..
 808635c:	5f97 0808 5fa2 0808                         ._..._..

08086364 <_ZTVN5spark13CellularClassE>:
	...
 808636c:	206b 0808 2061 0808 2057 0808 02ed 0808     k ..a ..W ......
 808637c:	204b 0808 02e1 0808 3f6d 0808 3f75 0808     K ......m?..u?..
 808638c:	203f 0808 2037 0808 202d 0808 2023 0808     ? ..7 ..- ..# ..
 808639c:	1fe7 0808                                   ....

080863a0 <_ZTV14CellularSignal>:
	...
 80863a8:	2119 0808 214b 0808 211b 0808 2159 0808     .!..K!...!..Y!..
 80863b8:	2189 0808 21ad 0808 21dd 0808 2225 0808     .!...!...!..%"..
 80863c8:	211f 0808 2145 0808 fffc ffff 0000 0000     .!..E!..........
 80863d8:	224b 0808                                   K"..

080863dc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80863e4:	226b 0808 2271 0808 22c1 0808 227f 0808     k"..q"..."..."..
 80863f4:	226d 0808                                   m"..

080863f8 <_ZTV7TwoWire>:
	...
 8086400:	2971 0808 29bb 0808 2993 0808 2973 0808     q)...)...)..s)..
 8086410:	299b 0808 29a3 0808 29ab 0808 29b3 0808     .)...)...)...)..

08086420 <_ZTV9IPAddress>:
	...
 8086428:	2b29 0808 2b19 0808 2b1b 0808 6425 2500     )+...+...+..%d.%
 8086438:	0075 2575 3430 0078 6162 6475 5300 7265     u.u%04x.baud.Ser
 8086448:	6169 006c 5355 5342 7265 6169 316c 4a00     ial.USBSerial1.J
 8086458:	4f53 534e 7274 6165 4c6d 676f 6148 646e     SONStreamLogHand
 8086468:	656c 0072 7061 0070 3025 3031 2075 5d00     ler.app.%010u .]
 8086478:	0020 202c 2800 3a29 0020 5b20 6300 646f      ., .(): . [.cod
 8086488:	2065 203d 6400 7465 6961 736c 3d20 0020     e = .details = .
 8086498:	0a0d 6300 6c00 006e 6e66 6300 646f 0065     ...c.ln.fn.code.
 80864a8:	6564 6174 6c69 0000                         detail..

080864b0 <_ZTVN5spark16JSONStreamWriterE>:
	...
 80864b8:	2fa5 0808 2fcb 0808 2f89 0808 2be7 0808     ./.../.../...+..

080864c8 <_ZTVN5spark16StreamLogHandlerE>:
	...
 80864d0:	3431 0808 3449 0808 3c11 0808 0219 0808     14..I4...<......

080864e0 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 80864e8:	345d 0808 3471 0808 3db9 0808 2f91 0808     ]4..q4...=.../..

080864f8 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 8086500:	2fa3 0808 2fd9 0808 3b4d 0808 2f93 0808     ./.../..M;.../..

08086510 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 8086518:	2fa1 0808 2fe7 0808 3359 0808 3005 0808     ./.../..Y3...0..

08086528 <_ZTVN5spark12NetworkClassE>:
	...
 8086530:	3f2d 0808 3f37 0808 3f41 0808 3f4b 0808     -?..7?..A?..K?..
 8086540:	3f55 0808 3f61 0808 3f6d 0808 3f75 0808     U?..a?..m?..u?..
 8086550:	3f7d 0808 3f89 0808 3f91 0808 3f9b 0808     }?...?...?...?..
 8086560:	3fa5 0808 5925 252d 2d6d 6425 2554 3a48     .?..%Y-%m-%dT%H:
 8086570:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

08086580 <_ZTV11USARTSerial>:
	...
 8086588:	45dd 0808 4647 0808 4623 0808 401f 0808     .E..GF..#F...@..
 8086598:	45f3 0808 460f 0808 4601 0808 461d 0808     .E...F...F...F..
 80865a8:	45df 0808 45e5 0808                         .E...E..

080865b0 <_ZTV9USBSerial>:
	...
 80865b8:	46e3 0808 4749 0808 4721 0808 401f 0808     .F..IG..!G...@..
 80865c8:	4713 0808 46e5 0808 46f5 0808 4743 0808     .G...F...F..CG..
 80865d8:	4705 0808 46dd 0808                         .G...F..

080865e0 <_ZSt7nothrow>:
 80865e0:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
 80865f0:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

08086601 <day_name.4782>:
 8086601:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 8086611:	6972 6153                                    riSat

08086616 <mon_name.4783>:
 8086616:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 8086626:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 8086636:	4476 6365                                   vDec

0808663a <_ctype_>:
 808663a:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 808664a:	2020 2020 2020 2020 2020 2020 2020 2020                     
 808665a:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 808666a:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 808667a:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 808668a:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 808669a:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80866aa:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80866ba:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0808673b <link_const_variable_data_end>:
	...

0808673c <link_constructors_location>:
 808673c:	0808182d 	.word	0x0808182d
 8086740:	080820e9 	.word	0x080820e9
 8086744:	08083c01 	.word	0x08083c01
 8086748:	08083fed 	.word	0x08083fed
 808674c:	08084139 	.word	0x08084139
 8086750:	080843e5 	.word	0x080843e5
 8086754:	080845c9 	.word	0x080845c9
 8086758:	08084be5 	.word	0x08084be5

0808675c <link_constructors_end>:
 808675c:	00000000 	.word	0x00000000
