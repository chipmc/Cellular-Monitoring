
/Users/chipmc/Documents/Maker/Particle/Projects/Cellular-Monitoring/target/2.3.0/electron/Cellular-Monitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005e54  0808001c  0808001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000018  40024000  08085e70  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000100  20000000  08085e88  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000006ac  20000100  20000100  00040100  2**3
                  ALLOC
  6 .module_info_suffix 00000028  08085f88  08085f88  00035f88  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  08085fb0  08085fb0  00035fb0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0014ec28  00000000  00000000  00035fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00017b5b  00000000  00000000  00184bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002890  00000000  00000000  0019c737  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00006728  00000000  00000000  0019efc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002a2ab  00000000  00000000  001a56ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0003619e  00000000  00000000  001cf99a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000b982f  00000000  00000000  00205b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00006f2c  00000000  00000000  002bf368  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000222cb  00000000  00000000  002c6294  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0808001c <localtime_r>:
#endif // !(defined(DYNALIB_IMPORT) && (defined(PARTICLE_COMPILE_LTO) || defined(PARTICLE_COMPILE_LTO_FAT)))
DYNALIB_FN(18, services2, mktime32, time32_t(struct tm*))
DYNALIB_FN(19, services2, __ssvfscanf_r, int(struct _reent*, FILE*, const char*, va_list))
DYNALIB_FN(20, services2, _printf_i, int(struct _reent*, struct _prt_data_t*, FILE*, int (*pfunc)(struct _reent *, FILE *, const char *, size_t), va_list*))
DYNALIB_FN(21, services2, localtime32_r, struct tm*(const time32_t*, struct tm*))
DYNALIB_FN(22, services2, localtime_r, struct tm*(const time_t*, struct tm*))
 808001c:	b508      	push	{r3, lr}
 808001e:	4b02      	ldr	r3, [pc, #8]	; (8080028 <link_dynalib_end+0xc>)
 8080020:	681b      	ldr	r3, [r3, #0]
 8080022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080024:	9301      	str	r3, [sp, #4]
 8080026:	bd08      	pop	{r3, pc}
 8080028:	0806002c 	.word	0x0806002c

0808002c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808002c:	4809      	ldr	r0, [pc, #36]	; (8080054 <module_user_pre_init+0x28>)
 808002e:	490a      	ldr	r1, [pc, #40]	; (8080058 <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 8080030:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080032:	4288      	cmp	r0, r1
 8080034:	d005      	beq.n	8080042 <module_user_pre_init+0x16>
 8080036:	4a09      	ldr	r2, [pc, #36]	; (808005c <module_user_pre_init+0x30>)
 8080038:	4282      	cmp	r2, r0
 808003a:	d002      	beq.n	8080042 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f005 f98d 	bl	808535c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080042:	4807      	ldr	r0, [pc, #28]	; (8080060 <module_user_pre_init+0x34>)
 8080044:	4a07      	ldr	r2, [pc, #28]	; (8080064 <module_user_pre_init+0x38>)
 8080046:	2100      	movs	r1, #0
 8080048:	1a12      	subs	r2, r2, r0
 808004a:	f005 f9af 	bl	80853ac <memset>
    return &link_heap_start;
}
 808004e:	4806      	ldr	r0, [pc, #24]	; (8080068 <module_user_pre_init+0x3c>)
 8080050:	bd08      	pop	{r3, pc}
 8080052:	bf00      	nop
 8080054:	20000000 	.word	0x20000000
 8080058:	08085e88 	.word	0x08085e88
 808005c:	20000100 	.word	0x20000100
 8080060:	20000100 	.word	0x20000100
 8080064:	200007a9 	.word	0x200007a9
 8080068:	200007a9 	.word	0x200007a9

0808006c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808006c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808006e:	f004 f8ab 	bl	80841c8 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080072:	2500      	movs	r5, #0
 8080074:	4e05      	ldr	r6, [pc, #20]	; (808008c <module_user_init+0x20>)
 8080076:	4c06      	ldr	r4, [pc, #24]	; (8080090 <module_user_init+0x24>)
 8080078:	1ba4      	subs	r4, r4, r6
 808007a:	08a4      	lsrs	r4, r4, #2
 808007c:	42a5      	cmp	r5, r4
 808007e:	d100      	bne.n	8080082 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080080:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 8080082:	f856 3b04 	ldr.w	r3, [r6], #4
 8080086:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080088:	3501      	adds	r5, #1
 808008a:	e7f7      	b.n	808007c <module_user_init+0x10>
 808008c:	08085e48 	.word	0x08085e48
 8080090:	08085e68 	.word	0x08085e68

08080094 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080094:	f000 bf1e 	b.w	8080ed4 <setup>

08080098 <module_user_loop>:
}

void module_user_loop() {
 8080098:	b508      	push	{r3, lr}
    loop();
 808009a:	f000 fd9f 	bl	8080bdc <loop>
    _post_loop();
}
 808009e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80800a2:	f004 b849 	b.w	8084138 <_post_loop>

080800a6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80800a6:	f001 bc41 	b.w	808192c <malloc>

080800aa <_Znaj>:
 80800aa:	f001 bc3f 	b.w	808192c <malloc>

080800ae <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80800ae:	f001 bc45 	b.w	808193c <free>
	...

080800b4 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800b4:	2100      	movs	r1, #0
 80800b6:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80800b8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800ba:	4a02      	ldr	r2, [pc, #8]	; (80800c4 <__cxa_pure_virtual+0x10>)
 80800bc:	f001 faf0 	bl	80816a0 <panic_>
  while (1);
 80800c0:	e7fe      	b.n	80800c0 <__cxa_pure_virtual+0xc>
 80800c2:	bf00      	nop
 80800c4:	080813f1 	.word	0x080813f1

080800c8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800c8:	7800      	ldrb	r0, [r0, #0]
 80800ca:	fab0 f080 	clz	r0, r0
 80800ce:	0940      	lsrs	r0, r0, #5
 80800d0:	4770      	bx	lr

080800d2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800d2:	2301      	movs	r3, #1
 80800d4:	7003      	strb	r3, [r0, #0]
 80800d6:	4770      	bx	lr

080800d8 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80800d8:	6803      	ldr	r3, [r0, #0]
 80800da:	b2c9      	uxtb	r1, r1
 80800dc:	689b      	ldr	r3, [r3, #8]
 80800de:	4718      	bx	r3

080800e0 <_ZN17Adafruit_FRAM_I2CC1Ev>:
    Constructor
*/
/**************************************************************************/
Adafruit_FRAM_I2C::Adafruit_FRAM_I2C(void)
{
  _framInitialised = false;
 80800e0:	2200      	movs	r2, #0
 80800e2:	7042      	strb	r2, [r0, #1]
}
 80800e4:	4770      	bx	lr

080800e6 <_ZN17Adafruit_FRAM_I2C6write8Eth>:
    @params[in] i2cAddr
                The 8-bit value to write at framAddr
*/
/**************************************************************************/
void Adafruit_FRAM_I2C::write8 (uint16_t framAddr, uint8_t value)
{
 80800e6:	b570      	push	{r4, r5, r6, lr}
 80800e8:	4606      	mov	r6, r0
 80800ea:	460c      	mov	r4, r1
 80800ec:	4615      	mov	r5, r2
  Wire.beginTransmission(i2c_addr);
 80800ee:	f004 f939 	bl	8084364 <_Z19__fetch_global_Wirev>
 80800f2:	7831      	ldrb	r1, [r6, #0]
 80800f4:	f002 f8ca 	bl	808228c <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(framAddr >> 8);
 80800f8:	f004 f934 	bl	8084364 <_Z19__fetch_global_Wirev>
 80800fc:	0a21      	lsrs	r1, r4, #8
 80800fe:	f7ff ffeb 	bl	80800d8 <_ZN7TwoWire5writeEi>
  Wire.write(framAddr & 0xFF);
 8080102:	f004 f92f 	bl	8084364 <_Z19__fetch_global_Wirev>
 8080106:	b2e1      	uxtb	r1, r4
 8080108:	f7ff ffe6 	bl	80800d8 <_ZN7TwoWire5writeEi>
  Wire.write(value);
 808010c:	f004 f92a 	bl	8084364 <_Z19__fetch_global_Wirev>
 8080110:	6803      	ldr	r3, [r0, #0]
 8080112:	4629      	mov	r1, r5
 8080114:	689b      	ldr	r3, [r3, #8]
 8080116:	4798      	blx	r3
  Wire.endTransmission();
 8080118:	f004 f924 	bl	8084364 <_Z19__fetch_global_Wirev>
}
 808011c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Wire.endTransmission();
 8080120:	f002 b8d7 	b.w	80822d2 <_ZN7TwoWire15endTransmissionEv>

08080124 <_ZN17Adafruit_FRAM_I2C5read8Et>:

    @returns    The 8-bit value retrieved at framAddr
*/
/**************************************************************************/
uint8_t Adafruit_FRAM_I2C::read8 (uint16_t framAddr)
{
 8080124:	b538      	push	{r3, r4, r5, lr}
 8080126:	4604      	mov	r4, r0
 8080128:	460d      	mov	r5, r1
  Wire.beginTransmission(i2c_addr);
 808012a:	f004 f91b 	bl	8084364 <_Z19__fetch_global_Wirev>
 808012e:	7821      	ldrb	r1, [r4, #0]
 8080130:	f002 f8ac 	bl	808228c <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(framAddr >> 8);
 8080134:	f004 f916 	bl	8084364 <_Z19__fetch_global_Wirev>
 8080138:	0a29      	lsrs	r1, r5, #8
 808013a:	f7ff ffcd 	bl	80800d8 <_ZN7TwoWire5writeEi>
  Wire.write(framAddr & 0xFF);
 808013e:	f004 f911 	bl	8084364 <_Z19__fetch_global_Wirev>
 8080142:	b2e9      	uxtb	r1, r5
 8080144:	f7ff ffc8 	bl	80800d8 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
 8080148:	f004 f90c 	bl	8084364 <_Z19__fetch_global_Wirev>
 808014c:	f002 f8c1 	bl	80822d2 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(i2c_addr, (uint8_t)1);
 8080150:	f004 f908 	bl	8084364 <_Z19__fetch_global_Wirev>
 8080154:	2201      	movs	r2, #1
 8080156:	7821      	ldrb	r1, [r4, #0]
 8080158:	f002 f895 	bl	8082286 <_ZN7TwoWire11requestFromEhj>

  return Wire.read();
 808015c:	f004 f902 	bl	8084364 <_Z19__fetch_global_Wirev>
 8080160:	6803      	ldr	r3, [r0, #0]
 8080162:	695b      	ldr	r3, [r3, #20]
 8080164:	4798      	blx	r3
}
 8080166:	b2c0      	uxtb	r0, r0
 8080168:	bd38      	pop	{r3, r4, r5, pc}

0808016a <_ZN17Adafruit_FRAM_I2C11getDeviceIDEPtS0_>:
                  Product ID fields (bytes 7..0). Should be 0x510 for
                  the MB85RC256V.
*/
/**************************************************************************/
void Adafruit_FRAM_I2C::getDeviceID(uint16_t *manufacturerID, uint16_t *productID)
{
 808016a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808016c:	4604      	mov	r4, r0
 808016e:	4616      	mov	r6, r2
 8080170:	460f      	mov	r7, r1
  uint8_t a[3] = { 0, 0, 0 };
  uint8_t results;

  Wire.beginTransmission(MB85RC_SLAVE_ID >> 1);
 8080172:	f004 f8f7 	bl	8084364 <_Z19__fetch_global_Wirev>
 8080176:	217c      	movs	r1, #124	; 0x7c
 8080178:	f002 f88c 	bl	8082294 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(i2c_addr << 1);
 808017c:	f004 f8f2 	bl	8084364 <_Z19__fetch_global_Wirev>
 8080180:	7821      	ldrb	r1, [r4, #0]
 8080182:	0049      	lsls	r1, r1, #1
 8080184:	f7ff ffa8 	bl	80800d8 <_ZN7TwoWire5writeEi>
  results = Wire.endTransmission(false);
 8080188:	f004 f8ec 	bl	8084364 <_Z19__fetch_global_Wirev>
 808018c:	2100      	movs	r1, #0
 808018e:	f002 f89c 	bl	80822ca <_ZN7TwoWire15endTransmissionEh>

  Wire.requestFrom(MB85RC_SLAVE_ID >> 1, 3);
 8080192:	f004 f8e7 	bl	8084364 <_Z19__fetch_global_Wirev>
 8080196:	2203      	movs	r2, #3
 8080198:	217c      	movs	r1, #124	; 0x7c
 808019a:	f002 f874 	bl	8082286 <_ZN7TwoWire11requestFromEhj>
  a[0] = Wire.read();
 808019e:	f004 f8e1 	bl	8084364 <_Z19__fetch_global_Wirev>
 80801a2:	6803      	ldr	r3, [r0, #0]
 80801a4:	695b      	ldr	r3, [r3, #20]
 80801a6:	4798      	blx	r3
 80801a8:	4605      	mov	r5, r0
  a[1] = Wire.read();
 80801aa:	f004 f8db 	bl	8084364 <_Z19__fetch_global_Wirev>
 80801ae:	6803      	ldr	r3, [r0, #0]
  a[2] = Wire.read();

  /* Shift values to separate manuf and prod IDs */
  /* See p.10 of http://www.fujitsu.com/downloads/MICRO/fsa/pdf/products/memory/fram/MB85RC256V-DS501-00017-3v0-E.pdf */
  *manufacturerID = (a[0] << 4) + (a[1]  >> 4);
 80801b0:	b2ed      	uxtb	r5, r5
  a[1] = Wire.read();
 80801b2:	695b      	ldr	r3, [r3, #20]
 80801b4:	4798      	blx	r3
 80801b6:	4604      	mov	r4, r0
  a[2] = Wire.read();
 80801b8:	f004 f8d4 	bl	8084364 <_Z19__fetch_global_Wirev>
 80801bc:	6803      	ldr	r3, [r0, #0]
 80801be:	695b      	ldr	r3, [r3, #20]
 80801c0:	4798      	blx	r3
  *manufacturerID = (a[0] << 4) + (a[1]  >> 4);
 80801c2:	f3c4 1303 	ubfx	r3, r4, #4, #4
  *productID = ((a[1] & 0x0F) << 8) + a[2];
 80801c6:	0224      	lsls	r4, r4, #8
 80801c8:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 80801cc:	b2c0      	uxtb	r0, r0
  *manufacturerID = (a[0] << 4) + (a[1]  >> 4);
 80801ce:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  *productID = ((a[1] & 0x0F) << 8) + a[2];
 80801d2:	4404      	add	r4, r0
  *manufacturerID = (a[0] << 4) + (a[1]  >> 4);
 80801d4:	803d      	strh	r5, [r7, #0]
  *productID = ((a[1] & 0x0F) << 8) + a[2];
 80801d6:	8034      	strh	r4, [r6, #0]
}
 80801d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080801da <_ZN17Adafruit_FRAM_I2C5beginEh>:
{
 80801da:	b513      	push	{r0, r1, r4, lr}
 80801dc:	4604      	mov	r4, r0
  i2c_addr = addr;
 80801de:	7001      	strb	r1, [r0, #0]
  Wire.begin();
 80801e0:	f004 f8c0 	bl	8084364 <_Z19__fetch_global_Wirev>
 80801e4:	f002 f820 	bl	8082228 <_ZN7TwoWire5beginEv>
  getDeviceID(&manufID, &prodID);
 80801e8:	4620      	mov	r0, r4
 80801ea:	f10d 0206 	add.w	r2, sp, #6
 80801ee:	a901      	add	r1, sp, #4
 80801f0:	f7ff ffbb 	bl	808016a <_ZN17Adafruit_FRAM_I2C11getDeviceIDEPtS0_>
  if (manufID != 0x00A)
 80801f4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80801f8:	2b0a      	cmp	r3, #10
 80801fa:	d108      	bne.n	808020e <_ZN17Adafruit_FRAM_I2C5beginEh+0x34>
  if (prodID != 0x510)
 80801fc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8080200:	f5b3 6fa2 	cmp.w	r3, #1296	; 0x510
 8080204:	d103      	bne.n	808020e <_ZN17Adafruit_FRAM_I2C5beginEh+0x34>
  _framInitialised = true;
 8080206:	2001      	movs	r0, #1
 8080208:	7060      	strb	r0, [r4, #1]
}
 808020a:	b002      	add	sp, #8
 808020c:	bd10      	pop	{r4, pc}
    return false;
 808020e:	2000      	movs	r0, #0
 8080210:	e7fb      	b.n	808020a <_ZN17Adafruit_FRAM_I2C5beginEh+0x30>

08080212 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 8080212:	4770      	bx	lr

08080214 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
 8080214:	6a00      	ldr	r0, [r0, #32]
 8080216:	6803      	ldr	r3, [r0, #0]
 8080218:	68db      	ldr	r3, [r3, #12]
 808021a:	4718      	bx	r3

0808021c <_Z7sendNow6String>:
  }
  else return 0;
}

int sendNow(String command) // Function to force sending data in current hour
{
 808021c:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 808021e:	4904      	ldr	r1, [pc, #16]	; (8080230 <_Z7sendNow6String+0x14>)
 8080220:	f003 fc5c 	bl	8083adc <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080224:	b118      	cbz	r0, 808022e <_Z7sendNow6String+0x12>
  {
    state = REPORTING_STATE;
 8080226:	2204      	movs	r2, #4
    return 1;
 8080228:	2001      	movs	r0, #1
    state = REPORTING_STATE;
 808022a:	4b02      	ldr	r3, [pc, #8]	; (8080234 <_Z7sendNow6String+0x18>)
 808022c:	701a      	strb	r2, [r3, #0]
  }
  else return 0;
}
 808022e:	bd08      	pop	{r3, pc}
 8080230:	0808575c 	.word	0x0808575c
 8080234:	20000178 	.word	0x20000178

08080238 <_Z11watchdogISRv>:
{
 8080238:	b508      	push	{r3, lr}
  if (pettingEnabled) {
 808023a:	4b07      	ldr	r3, [pc, #28]	; (8080258 <_Z11watchdogISRv+0x20>)
 808023c:	781b      	ldrb	r3, [r3, #0]
 808023e:	b14b      	cbz	r3, 8080254 <_Z11watchdogISRv+0x1c>
    digitalWrite(donePin, HIGH);                              // Pet the watchdog
 8080240:	2101      	movs	r1, #1
 8080242:	2006      	movs	r0, #6
 8080244:	f004 f84d 	bl	80842e2 <digitalWrite>
}
 8080248:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    digitalWrite(donePin, LOW);
 808024c:	2100      	movs	r1, #0
 808024e:	2006      	movs	r0, #6
 8080250:	f004 b847 	b.w	80842e2 <digitalWrite>
}
 8080254:	bd08      	pop	{r3, pc}
 8080256:	bf00      	nop
 8080258:	20000004 	.word	0x20000004

0808025c <_Z12hardResetNow6String>:
{
 808025c:	b508      	push	{r3, lr}
 808025e:	4905      	ldr	r1, [pc, #20]	; (8080274 <_Z12hardResetNow6String+0x18>)
 8080260:	f003 fc3c 	bl	8083adc <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080264:	b120      	cbz	r0, 8080270 <_Z12hardResetNow6String+0x14>
    digitalWrite(hardResetPin,HIGH);          // This will cut all power to the Electron AND the carrir board
 8080266:	2004      	movs	r0, #4
 8080268:	2101      	movs	r1, #1
 808026a:	f004 f83a 	bl	80842e2 <digitalWrite>
 808026e:	2001      	movs	r0, #1
}
 8080270:	bd08      	pop	{r3, pc}
 8080272:	bf00      	nop
 8080274:	0808575c 	.word	0x0808575c

08080278 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 8080278:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808027a:	4604      	mov	r4, r0
 808027c:	f89d 5018 	ldrb.w	r5, [sp, #24]
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
 8080280:	431d      	orrs	r5, r3
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8080282:	f88d 5000 	strb.w	r5, [sp]
 8080286:	233c      	movs	r3, #60	; 0x3c
 8080288:	f001 fd96 	bl	8081db8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }
 808028c:	4620      	mov	r0, r4
 808028e:	b003      	add	sp, #12
 8080290:	bd30      	pop	{r4, r5, pc}
	...

08080294 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 8080294:	b510      	push	{r4, lr}
 8080296:	4604      	mov	r4, r0
 8080298:	4b09      	ldr	r3, [pc, #36]	; (80802c0 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 808029a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 808029c:	f002 fbde 	bl	8082a5c <_ZN5spark10LogManager8instanceEv>
 80802a0:	4621      	mov	r1, r4
 80802a2:	f002 fdeb 	bl	8082e7c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 80802a6:	f003 fea7 	bl	8083ff8 <_Z16_fetch_usbserialv>
 80802aa:	f003 fe8b 	bl	8083fc4 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 80802ae:	4620      	mov	r0, r4
 80802b0:	4b04      	ldr	r3, [pc, #16]	; (80802c4 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 80802b2:	f840 3b04 	str.w	r3, [r0], #4
 80802b6:	f002 fccf 	bl	8082c58 <_ZN5spark6detail9LogFilterD1Ev>
    }
 80802ba:	4620      	mov	r0, r4
 80802bc:	bd10      	pop	{r4, pc}
 80802be:	bf00      	nop
 80802c0:	08085a98 	.word	0x08085a98
 80802c4:	08085a80 	.word	0x08085a80

080802c8 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 80802c8:	b510      	push	{r4, lr}
 80802ca:	4604      	mov	r4, r0
    }
 80802cc:	f7ff ffe2 	bl	8080294 <_ZN5spark16SerialLogHandlerD1Ev>
 80802d0:	4620      	mov	r0, r4
 80802d2:	2124      	movs	r1, #36	; 0x24
 80802d4:	f004 f89c 	bl	8084410 <_ZdlPvj>
 80802d8:	4620      	mov	r0, r4
 80802da:	bd10      	pop	{r4, pc}

080802dc <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 80802dc:	2300      	movs	r3, #0
 80802de:	6840      	ldr	r0, [r0, #4]
 80802e0:	461a      	mov	r2, r3
 80802e2:	4619      	mov	r1, r3
 80802e4:	f001 baea 	b.w	80818bc <network_off>

080802e8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80802e8:	2200      	movs	r2, #0
 80802ea:	6840      	ldr	r0, [r0, #4]
 80802ec:	4611      	mov	r1, r2
 80802ee:	f001 bad5 	b.w	808189c <network_ready>

080802f2 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 80802f2:	b40e      	push	{r1, r2, r3}
 80802f4:	b510      	push	{r4, lr}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80802f6:	2300      	movs	r3, #0
    log(LOG_LEVEL_INFO, fmt, args);
 80802f8:	6801      	ldr	r1, [r0, #0]
    attr.flags = 0;
 80802fa:	2020      	movs	r0, #32
inline void spark::Logger::info(const char *fmt, ...) const {
 80802fc:	b08d      	sub	sp, #52	; 0x34
 80802fe:	aa0f      	add	r2, sp, #60	; 0x3c
 8080300:	f852 4b04 	ldr.w	r4, [r2], #4
    attr.flags = 0;
 8080304:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080308:	e9cd 4200 	strd	r4, r2, [sp]
    va_start(args, fmt);
 808030c:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 808030e:	201e      	movs	r0, #30
 8080310:	aa04      	add	r2, sp, #16
 8080312:	f001 f9cd 	bl	80816b0 <log_message_v>
}
 8080316:	b00d      	add	sp, #52	; 0x34
 8080318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808031c:	b003      	add	sp, #12
 808031e:	4770      	bx	lr

08080320 <_Z9FRAMread8j>:
// Begin section
uint8_t FRAMread8(unsigned int address)  // Read 8 bits from FRAM
{
    uint8_t result;
    //Serial.println("In FRAMread8");
    result = fram.read8(address);
 8080320:	b281      	uxth	r1, r0
 8080322:	4801      	ldr	r0, [pc, #4]	; (8080328 <_Z9FRAMread8j+0x8>)
 8080324:	f7ff befe 	b.w	8080124 <_ZN17Adafruit_FRAM_I2C5read8Et>
 8080328:	20000129 	.word	0x20000129

0808032c <_Z10FRAMwrite8jh>:
    return result;
}

void FRAMwrite8(unsigned int address, uint8_t value)    // Write 8 bits to FRAM
{
 808032c:	460a      	mov	r2, r1
    fram.write8(address,value);
 808032e:	b281      	uxth	r1, r0
 8080330:	4801      	ldr	r0, [pc, #4]	; (8080338 <_Z10FRAMwrite8jh+0xc>)
 8080332:	f7ff bed8 	b.w	80800e6 <_ZN17Adafruit_FRAM_I2C6write8Eth>
 8080336:	bf00      	nop
 8080338:	20000129 	.word	0x20000129

0808033c <_Z10FRAMread16j>:
}

int FRAMread16(unsigned int address)
{
 808033c:	b570      	push	{r4, r5, r6, lr}
    long two;
    long one;
    //Read the 2 bytes from  memory.
    two = fram.read8(address);
 808033e:	4e07      	ldr	r6, [pc, #28]	; (808035c <_Z10FRAMread16j+0x20>)
 8080340:	b284      	uxth	r4, r0
 8080342:	4621      	mov	r1, r4
 8080344:	4630      	mov	r0, r6
 8080346:	f7ff feed 	bl	8080124 <_ZN17Adafruit_FRAM_I2C5read8Et>
    one = fram.read8(address + 1);
 808034a:	1c61      	adds	r1, r4, #1
    two = fram.read8(address);
 808034c:	4605      	mov	r5, r0
    one = fram.read8(address + 1);
 808034e:	b289      	uxth	r1, r1
 8080350:	4630      	mov	r0, r6
 8080352:	f7ff fee7 	bl	8080124 <_ZN17Adafruit_FRAM_I2C5read8Et>
    //Return the recomposed long by using bitshift.
    return ((two << 0) & 0xFF) + ((one << 8) & 0xFFFF);
}
 8080356:	eb05 2000 	add.w	r0, r5, r0, lsl #8
 808035a:	bd70      	pop	{r4, r5, r6, pc}
 808035c:	20000129 	.word	0x20000129

08080360 <_Z11FRAMwrite16ji>:

void FRAMwrite16(unsigned int address, int value)   // Write 16 bits to FRAM
{
 8080360:	b570      	push	{r4, r5, r6, lr}
 8080362:	460d      	mov	r5, r1
    //Decomposition from a long to 2 bytes by using bitshift.
    //One = Most significant -> Four = Least significant byte
    uint8_t two = (value & 0xFF);
    uint8_t one = ((value >> 8) & 0xFF);
    //Write the 2 bytes into the eeprom memory.
    fram.write8(address, two);
 8080364:	4e07      	ldr	r6, [pc, #28]	; (8080384 <_Z11FRAMwrite16ji+0x24>)
 8080366:	b284      	uxth	r4, r0
 8080368:	b2ca      	uxtb	r2, r1
 808036a:	4630      	mov	r0, r6
 808036c:	4621      	mov	r1, r4
    fram.write8(address + 1, one);
 808036e:	3401      	adds	r4, #1
    fram.write8(address, two);
 8080370:	f7ff feb9 	bl	80800e6 <_ZN17Adafruit_FRAM_I2C6write8Eth>
    fram.write8(address + 1, one);
 8080374:	4630      	mov	r0, r6
 8080376:	f3c5 2207 	ubfx	r2, r5, #8, #8
 808037a:	b2a1      	uxth	r1, r4
}
 808037c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fram.write8(address + 1, one);
 8080380:	f7ff beb1 	b.w	80800e6 <_ZN17Adafruit_FRAM_I2C6write8Eth>
 8080384:	20000129 	.word	0x20000129

08080388 <_Z11resetCounts6String>:
{
 8080388:	b508      	push	{r3, lr}
 808038a:	490a      	ldr	r1, [pc, #40]	; (80803b4 <_Z11resetCounts6String+0x2c>)
 808038c:	f003 fba6 	bl	8083adc <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080390:	b170      	cbz	r0, 80803b0 <_Z11resetCounts6String+0x28>
    FRAMwrite8(RESETCOUNT,0);          // If so, store incremented number - watchdog must have done This
 8080392:	2100      	movs	r1, #0
 8080394:	2002      	movs	r0, #2
 8080396:	f7ff ffc9 	bl	808032c <_Z10FRAMwrite8jh>
    resetCount = 0;
 808039a:	2100      	movs	r1, #0
 808039c:	4b06      	ldr	r3, [pc, #24]	; (80803b8 <_Z11resetCounts6String+0x30>)
    FRAMwrite16(DAILYPUMPMINUTES,0);
 808039e:	2014      	movs	r0, #20
    resetCount = 0;
 80803a0:	6019      	str	r1, [r3, #0]
    dataInFlight = false;
 80803a2:	4b06      	ldr	r3, [pc, #24]	; (80803bc <_Z11resetCounts6String+0x34>)
 80803a4:	7019      	strb	r1, [r3, #0]
    dailyPumpingMins = 0;
 80803a6:	4b06      	ldr	r3, [pc, #24]	; (80803c0 <_Z11resetCounts6String+0x38>)
 80803a8:	6019      	str	r1, [r3, #0]
    FRAMwrite16(DAILYPUMPMINUTES,0);
 80803aa:	f7ff ffd9 	bl	8080360 <_Z11FRAMwrite16ji>
 80803ae:	2001      	movs	r0, #1
}
 80803b0:	bd08      	pop	{r3, pc}
 80803b2:	bf00      	nop
 80803b4:	0808575c 	.word	0x0808575c
 80803b8:	20000170 	.word	0x20000170
 80803bc:	20000128 	.word	0x20000128
 80803c0:	20000124 	.word	0x20000124

080803c4 <_Z10FRAMread32m>:

unsigned long FRAMread32(unsigned long address)
{
 80803c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    long four;
    long three;
    long two;
    long one;
    //Read the 4 bytes from memory.
    four = fram.read8(address);
 80803c8:	4e0f      	ldr	r6, [pc, #60]	; (8080408 <_Z10FRAMread32m+0x44>)
 80803ca:	b284      	uxth	r4, r0
 80803cc:	4621      	mov	r1, r4
 80803ce:	4630      	mov	r0, r6
 80803d0:	f7ff fea8 	bl	8080124 <_ZN17Adafruit_FRAM_I2C5read8Et>
    three = fram.read8(address + 1);
 80803d4:	1c61      	adds	r1, r4, #1
    four = fram.read8(address);
 80803d6:	4605      	mov	r5, r0
    three = fram.read8(address + 1);
 80803d8:	b289      	uxth	r1, r1
 80803da:	4630      	mov	r0, r6
 80803dc:	f7ff fea2 	bl	8080124 <_ZN17Adafruit_FRAM_I2C5read8Et>
    two = fram.read8(address + 2);
 80803e0:	1ca1      	adds	r1, r4, #2
    three = fram.read8(address + 1);
 80803e2:	4680      	mov	r8, r0
    two = fram.read8(address + 2);
 80803e4:	b289      	uxth	r1, r1
 80803e6:	4630      	mov	r0, r6
 80803e8:	f7ff fe9c 	bl	8080124 <_ZN17Adafruit_FRAM_I2C5read8Et>
    one = fram.read8(address + 3);
 80803ec:	1ce1      	adds	r1, r4, #3
    two = fram.read8(address + 2);
 80803ee:	4607      	mov	r7, r0
    one = fram.read8(address + 3);
 80803f0:	b289      	uxth	r1, r1
 80803f2:	4630      	mov	r0, r6
 80803f4:	f7ff fe96 	bl	8080124 <_ZN17Adafruit_FRAM_I2C5read8Et>
    //Return the recomposed long by using bitshift.
    return ((four << 0) & 0xFF) + ((three << 8) & 0xFFFF) + ((two << 16) & 0xFFFFFF) + ((one << 24) & 0xFFFFFFFF);
 80803f8:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 80803fc:	eb05 4507 	add.w	r5, r5, r7, lsl #16
}
 8080400:	eb05 6000 	add.w	r0, r5, r0, lsl #24
 8080404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8080408:	20000129 	.word	0x20000129

0808040c <_Z17connectToParticlev>:
{
 808040c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (!Cellular.ready())
 8080410:	4d2f      	ldr	r5, [pc, #188]	; (80804d0 <_Z17connectToParticlev+0xc4>)
 8080412:	4628      	mov	r0, r5
 8080414:	f7ff ff68 	bl	80802e8 <_ZN5spark13CellularClass5readyEv>
 8080418:	4604      	mov	r4, r0
 808041a:	b308      	cbz	r0, 8080460 <_Z17connectToParticlev+0x54>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808041c:	f000 fff0 	bl	8081400 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080420:	4d2c      	ldr	r5, [pc, #176]	; (80804d4 <_Z17connectToParticlev+0xc8>)
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080422:	f04f 0a00 	mov.w	sl, #0
 8080426:	6028      	str	r0, [r5, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
 8080428:	f001 f9c8 	bl	80817bc <spark_process>
        spark_cloud_flag_connect();
 808042c:	f001 f9ce 	bl	80817cc <spark_cloud_flag_connect>
 8080430:	2000      	movs	r0, #0
 8080432:	f000 fff5 	bl	8081420 <hal_timer_millis>
        while (_while() && !_condition()) {
 8080436:	f247 582f 	movw	r8, #29999	; 0x752f
        return hal_timer_millis(nullptr);
 808043a:	4604      	mov	r4, r0
        while (_while() && !_condition()) {
 808043c:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
 8080440:	2000      	movs	r0, #0
 8080442:	f000 ffed 	bl	8081420 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 8080446:	1b06      	subs	r6, r0, r4
 8080448:	eb61 070a 	sbc.w	r7, r1, sl
        while (_while() && !_condition()) {
 808044c:	45b9      	cmp	r9, r7
 808044e:	bf08      	it	eq
 8080450:	45b0      	cmpeq	r8, r6
 8080452:	d332      	bcc.n	80804ba <_Z17connectToParticlev+0xae>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080454:	f001 f9c2 	bl	80817dc <spark_cloud_flag_connected>
 8080458:	bb78      	cbnz	r0, 80804ba <_Z17connectToParticlev+0xae>
            spark_process();
 808045a:	f001 f9af 	bl	80817bc <spark_process>
        while (_while() && !_condition()) {
 808045e:	e7ef      	b.n	8080440 <_Z17connectToParticlev+0x34>
        network_on(*this, 0, 0, NULL);
 8080460:	4603      	mov	r3, r0
 8080462:	4602      	mov	r2, r0
 8080464:	4601      	mov	r1, r0
 8080466:	6868      	ldr	r0, [r5, #4]
 8080468:	f001 fa20 	bl	80818ac <network_on>
        network_connect(*this, flags, 0, NULL);
 808046c:	4623      	mov	r3, r4
 808046e:	4622      	mov	r2, r4
 8080470:	4621      	mov	r1, r4
 8080472:	6868      	ldr	r0, [r5, #4]
 8080474:	f001 f9fa 	bl	808186c <network_connect>
        return hal_timer_millis(nullptr);
 8080478:	4620      	mov	r0, r4
 808047a:	f000 ffd1 	bl	8081420 <hal_timer_millis>
 808047e:	4682      	mov	sl, r0
 8080480:	2000      	movs	r0, #0
 8080482:	f000 ffcd 	bl	8081420 <hal_timer_millis>
        while (_while() && !_condition()) {
 8080486:	2300      	movs	r3, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 8080488:	ebb0 080a 	subs.w	r8, r0, sl
        while (_while() && !_condition()) {
 808048c:	4a12      	ldr	r2, [pc, #72]	; (80804d8 <_Z17connectToParticlev+0xcc>)
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 808048e:	eb61 0904 	sbc.w	r9, r1, r4
        while (_while() && !_condition()) {
 8080492:	454b      	cmp	r3, r9
 8080494:	bf08      	it	eq
 8080496:	4542      	cmpeq	r2, r8
 8080498:	d306      	bcc.n	80804a8 <_Z17connectToParticlev+0x9c>
    if(!waitFor(Cellular.ready,90000)) return false;         // Connect to cellular - give it 90 seconds
 808049a:	4628      	mov	r0, r5
 808049c:	f7ff ff24 	bl	80802e8 <_ZN5spark13CellularClass5readyEv>
 80804a0:	b910      	cbnz	r0, 80804a8 <_Z17connectToParticlev+0x9c>
            spark_process();
 80804a2:	f001 f98b 	bl	80817bc <spark_process>
        while (_while() && !_condition()) {
 80804a6:	e7eb      	b.n	8080480 <_Z17connectToParticlev+0x74>
 80804a8:	4809      	ldr	r0, [pc, #36]	; (80804d0 <_Z17connectToParticlev+0xc4>)
 80804aa:	f7ff ff1d 	bl	80802e8 <_ZN5spark13CellularClass5readyEv>
 80804ae:	2800      	cmp	r0, #0
 80804b0:	d1b4      	bne.n	808041c <_Z17connectToParticlev+0x10>
 80804b2:	2400      	movs	r4, #0
}
 80804b4:	4620      	mov	r0, r4
 80804b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80804ba:	f001 f98f 	bl	80817dc <spark_cloud_flag_connected>
  if(!waitFor(Particle.connected,30000)) return false;     // Connect to Particle - give it 30 seconds
 80804be:	4604      	mov	r4, r0
 80804c0:	2800      	cmp	r0, #0
 80804c2:	d0f6      	beq.n	80804b2 <_Z17connectToParticlev+0xa6>
		return HAL_Timer_Get_Milli_Seconds();
 80804c4:	f000 ff9c 	bl	8081400 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
 80804c8:	6028      	str	r0, [r5, #0]
    		spark_process();
 80804ca:	f001 f977 	bl	80817bc <spark_process>
    }
 80804ce:	e7f1      	b.n	80804b4 <_Z17connectToParticlev+0xa8>
 80804d0:	20000194 	.word	0x20000194
 80804d4:	200006d4 	.word	0x200006d4
 80804d8:	00015f8f 	.word	0x00015f8f

080804dc <_Z12notConnectedv>:
bool notConnected() {
 80804dc:	b508      	push	{r3, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80804de:	f001 f97d 	bl	80817dc <spark_cloud_flag_connected>
  return !Particle.connected();                             // This is a requirement to use waitFor
 80804e2:	f080 0001 	eor.w	r0, r0, #1
}
 80804e6:	b2c0      	uxtb	r0, r0
 80804e8:	bd08      	pop	{r3, pc}
	...

080804ec <_Z22disconnectFromParticlev>:
{
 80804ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
 80804f0:	2400      	movs	r4, #0
 80804f2:	b085      	sub	sp, #20
  Particle.disconnect();                                   // Disconnect from Particle in prep for sleep
 80804f4:	a801      	add	r0, sp, #4
 80804f6:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80804fa:	f8ad 400c 	strh.w	r4, [sp, #12]
 80804fe:	f001 fb48 	bl	8081b92 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
 8080502:	4620      	mov	r0, r4
 8080504:	f000 ff8c 	bl	8081420 <hal_timer_millis>
        while (_while() && !_condition()) {
 8080508:	f242 780f 	movw	r8, #9999	; 0x270f
        return hal_timer_millis(nullptr);
 808050c:	4605      	mov	r5, r0
        while (_while() && !_condition()) {
 808050e:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
 8080512:	2000      	movs	r0, #0
 8080514:	f000 ff84 	bl	8081420 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 8080518:	1b46      	subs	r6, r0, r5
 808051a:	eb61 0704 	sbc.w	r7, r1, r4
        while (_while() && !_condition()) {
 808051e:	45b9      	cmp	r9, r7
 8080520:	bf08      	it	eq
 8080522:	45b0      	cmpeq	r8, r6
 8080524:	d305      	bcc.n	8080532 <_Z22disconnectFromParticlev+0x46>
  waitFor(notConnected,10000);
 8080526:	f7ff ffd9 	bl	80804dc <_Z12notConnectedv>
 808052a:	b910      	cbnz	r0, 8080532 <_Z22disconnectFromParticlev+0x46>
            spark_process();
 808052c:	f001 f946 	bl	80817bc <spark_process>
        while (_while() && !_condition()) {
 8080530:	e7ef      	b.n	8080512 <_Z22disconnectFromParticlev+0x26>
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8080532:	4c09      	ldr	r4, [pc, #36]	; (8080558 <_Z22disconnectFromParticlev+0x6c>)
 8080534:	f7ff ffd2 	bl	80804dc <_Z12notConnectedv>
 8080538:	2200      	movs	r2, #0
 808053a:	2102      	movs	r1, #2
 808053c:	6860      	ldr	r0, [r4, #4]
 808053e:	f001 f9a5 	bl	808188c <network_disconnect>
  delay(3000);
 8080542:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8080546:	f001 fa39 	bl	80819bc <delay>
  Cellular.off();                                           // Turn off the cellular modem
 808054a:	4620      	mov	r0, r4
 808054c:	f7ff fec6 	bl	80802dc <_ZN5spark13CellularClass3offEv>
}
 8080550:	2001      	movs	r0, #1
 8080552:	b005      	add	sp, #20
 8080554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8080558:	20000194 	.word	0x20000194

0808055c <_Z16takeMeasurementsv>:
bool takeMeasurements() {
 808055c:	b508      	push	{r3, lr}
  controlRegister = FRAMread8(CONTROLREGISTER);                               // Check the control register
 808055e:	2007      	movs	r0, #7
 8080560:	f7ff fede 	bl	8080320 <_Z9FRAMread8j>
 8080564:	4b01      	ldr	r3, [pc, #4]	; (808056c <_Z16takeMeasurementsv+0x10>)
 8080566:	7018      	strb	r0, [r3, #0]
}
 8080568:	2000      	movs	r0, #0
 808056a:	bd08      	pop	{r3, pc}
 808056c:	20000120 	.word	0x20000120

08080570 <_Z20meterParticlePublishv>:
  if (powerSource == POWER_SOURCE_VIN) return 0;        // Return false if power is good
  else return 1;                                        // Return true otherwise 
}

bool meterParticlePublish(void)
{
 8080570:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8080572:	f000 ff45 	bl	8081400 <HAL_Timer_Get_Milli_Seconds>
  if(millis() - lastPublish >= publishFrequency) return 1;
 8080576:	4b05      	ldr	r3, [pc, #20]	; (808058c <_Z20meterParticlePublishv+0x1c>)
 8080578:	681b      	ldr	r3, [r3, #0]
 808057a:	1ac0      	subs	r0, r0, r3
 808057c:	4b04      	ldr	r3, [pc, #16]	; (8080590 <_Z20meterParticlePublishv+0x20>)
 808057e:	681b      	ldr	r3, [r3, #0]
  else return 0;
}
 8080580:	4298      	cmp	r0, r3
 8080582:	bf34      	ite	cc
 8080584:	2000      	movcc	r0, #0
 8080586:	2001      	movcs	r0, #1
 8080588:	bd08      	pop	{r3, pc}
 808058a:	bf00      	nop
 808058c:	20000130 	.word	0x20000130
 8080590:	20000008 	.word	0x20000008

08080594 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>:
    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
 8080594:	b508      	push	{r3, lr}
    waitUntil(meterParticlePublish);
 8080596:	f7ff ffeb 	bl	8080570 <_Z20meterParticlePublishv>
        while (_while() && !_condition()) {
 808059a:	b910      	cbnz	r0, 80805a2 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0+0xe>
            spark_process();
 808059c:	f001 f90e 	bl	80817bc <spark_process>
        while (_while() && !_condition()) {
 80805a0:	e7f9      	b.n	8080596 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0+0x2>
    }
 80805a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80805a6:	f7ff bfe3 	b.w	8080570 <_Z20meterParticlePublishv>
	...

080805ac <_Z15meterSampleRatev>:

bool meterSampleRate(void)
{
 80805ac:	b508      	push	{r3, lr}
 80805ae:	f000 ff27 	bl	8081400 <HAL_Timer_Get_Milli_Seconds>
  if(millis() - lastSample >= sampleFrequency) return 1;
 80805b2:	4b05      	ldr	r3, [pc, #20]	; (80805c8 <_Z15meterSampleRatev+0x1c>)
 80805b4:	681b      	ldr	r3, [r3, #0]
 80805b6:	1ac0      	subs	r0, r0, r3
 80805b8:	4b04      	ldr	r3, [pc, #16]	; (80805cc <_Z15meterSampleRatev+0x20>)
 80805ba:	681b      	ldr	r3, [r3, #0]
  else return 0;
}
 80805bc:	4298      	cmp	r0, r3
 80805be:	bf34      	ite	cc
 80805c0:	2000      	movcc	r0, #0
 80805c2:	2001      	movcs	r0, #1
 80805c4:	bd08      	pop	{r3, pc}
 80805c6:	bf00      	nop
 80805c8:	20000134 	.word	0x20000134
 80805cc:	20000014 	.word	0x20000014

080805d0 <_Z14fullModemResetv>:
 80805d0:	2300      	movs	r3, #0

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
 80805d2:	b530      	push	{r4, r5, lr}
 80805d4:	b085      	sub	sp, #20

	Particle.disconnect(); 	                                         // Disconnect from the cloud
 80805d6:	a801      	add	r0, sp, #4
 80805d8:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80805dc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80805e0:	f001 fad7 	bl	8081b92 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
 80805e4:	f000 ff0c 	bl	8081400 <HAL_Timer_Get_Milli_Seconds>
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 80805e8:	f643 2597 	movw	r5, #14999	; 0x3a97
 80805ec:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80805ee:	f001 f8f5 	bl	80817dc <spark_cloud_flag_connected>
 80805f2:	b140      	cbz	r0, 8080606 <_Z14fullModemResetv+0x36>
 80805f4:	f000 ff04 	bl	8081400 <HAL_Timer_Get_Milli_Seconds>
 80805f8:	1b00      	subs	r0, r0, r4
 80805fa:	42a8      	cmp	r0, r5
 80805fc:	d803      	bhi.n	8080606 <_Z14fullModemResetv+0x36>
		delay(100);
 80805fe:	2064      	movs	r0, #100	; 0x64
 8080600:	f001 f9dc 	bl	80819bc <delay>
	while(Particle.connected() && millis() - startTime < 15000) {
 8080604:	e7f3      	b.n	80805ee <_Z14fullModemResetv+0x1e>
	}
  Cellular.off();
 8080606:	4808      	ldr	r0, [pc, #32]	; (8080628 <_Z14fullModemResetv+0x58>)
 8080608:	f7ff fe68 	bl	80802dc <_ZN5spark13CellularClass3offEv>
  delay(10000);
 808060c:	f242 7010 	movw	r0, #10000	; 0x2710
 8080610:	f001 f9d4 	bl	80819bc <delay>
	System.sleep(SLEEP_MODE_DEEP, 10);
 8080614:	4b05      	ldr	r3, [pc, #20]	; (808062c <_Z14fullModemResetv+0x5c>)
 8080616:	220a      	movs	r2, #10
 8080618:	2101      	movs	r1, #1
 808061a:	681b      	ldr	r3, [r3, #0]
 808061c:	a801      	add	r0, sp, #4
 808061e:	f003 fad9 	bl	8083bd4 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
 8080622:	b005      	add	sp, #20
 8080624:	bd30      	pop	{r4, r5, pc}
 8080626:	bf00      	nop
 8080628:	20000194 	.word	0x20000194
 808062c:	2000010c 	.word	0x2000010c

08080630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080630:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8080632:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 8080634:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 8080636:	b17c      	cbz	r4, 8080658 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 8080638:	6863      	ldr	r3, [r4, #4]
 808063a:	3b01      	subs	r3, #1
 808063c:	6063      	str	r3, [r4, #4]
 808063e:	b95b      	cbnz	r3, 8080658 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 8080640:	6823      	ldr	r3, [r4, #0]
 8080642:	4620      	mov	r0, r4
 8080644:	689b      	ldr	r3, [r3, #8]
 8080646:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080648:	68a3      	ldr	r3, [r4, #8]
 808064a:	3b01      	subs	r3, #1
 808064c:	60a3      	str	r3, [r4, #8]
 808064e:	b91b      	cbnz	r3, 8080658 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8080650:	6823      	ldr	r3, [r4, #0]
 8080652:	4620      	mov	r0, r4
 8080654:	68db      	ldr	r3, [r3, #12]
 8080656:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 8080658:	4628      	mov	r0, r5
 808065a:	bd38      	pop	{r3, r4, r5, pc}

0808065c <_Z9ResetFRAMv>:
    fram.write8(address + 3, one);
}


void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
 808065c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    byte tempControlReg = FRAMread8(CONTROLREGISTER);
 8080660:	2007      	movs	r0, #7
 8080662:	f7ff fe5d 	bl	8080320 <_Z9FRAMread8j>
    Particle.publish("FRAM","Resetting in progress", PRIVATE);
 8080666:	2300      	movs	r3, #0
 8080668:	f88d 3000 	strb.w	r3, [sp]
 808066c:	4b20      	ldr	r3, [pc, #128]	; (80806f0 <_Z9ResetFRAMv+0x94>)
 808066e:	4a21      	ldr	r2, [pc, #132]	; (80806f4 <_Z9ResetFRAMv+0x98>)
 8080670:	781b      	ldrb	r3, [r3, #0]
 8080672:	4921      	ldr	r1, [pc, #132]	; (80806f8 <_Z9ResetFRAMv+0x9c>)
    byte tempControlReg = FRAMread8(CONTROLREGISTER);
 8080674:	4605      	mov	r5, r0
    Particle.publish("FRAM","Resetting in progress", PRIVATE);
 8080676:	a802      	add	r0, sp, #8
 8080678:	f7ff fdfe 	bl	8080278 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808067c:	a803      	add	r0, sp, #12
 808067e:	f7ff ffd7 	bl	8080630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (unsigned long i=8; i < 32768; i++) {  // Start at 8 to not overwrite permanent settings
 8080682:	2408      	movs	r4, #8
        FRAMwrite8(i,0x0);
        if (i==8192) Serial.println(F("25% done"));
        if (i==16384) Serial.println(F("50% done"));
        if (i==(24576)) Serial.println(F("75% done"));
        if (i==32767) Serial.println(F("Done"));
 8080684:	4e1d      	ldr	r6, [pc, #116]	; (80806fc <_Z9ResetFRAMv+0xa0>)
        if (i==(24576)) Serial.println(F("75% done"));
 8080686:	4f1e      	ldr	r7, [pc, #120]	; (8080700 <_Z9ResetFRAMv+0xa4>)
        if (i==16384) Serial.println(F("50% done"));
 8080688:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8080708 <_Z9ResetFRAMv+0xac>
        FRAMwrite8(i,0x0);
 808068c:	2100      	movs	r1, #0
 808068e:	4620      	mov	r0, r4
 8080690:	f7ff fe4c 	bl	808032c <_Z10FRAMwrite8jh>
        if (i==8192) Serial.println(F("25% done"));
 8080694:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8080698:	d113      	bne.n	80806c2 <_Z9ResetFRAMv+0x66>
 808069a:	f003 fcad 	bl	8083ff8 <_Z16_fetch_usbserialv>
 808069e:	4919      	ldr	r1, [pc, #100]	; (8080704 <_Z9ResetFRAMv+0xa8>)
        if (i==32767) Serial.println(F("Done"));
 80806a0:	f003 f910 	bl	80838c4 <_ZN5Print7printlnEPKc>
    for (unsigned long i=8; i < 32768; i++) {  // Start at 8 to not overwrite permanent settings
 80806a4:	3401      	adds	r4, #1
 80806a6:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80806aa:	d1ef      	bne.n	808068c <_Z9ResetFRAMv+0x30>
    }
    FRAMwrite8(CONTROLREGISTER,tempControlReg);   // Preserce the control register values
 80806ac:	4629      	mov	r1, r5
 80806ae:	2007      	movs	r0, #7
 80806b0:	f7ff fe3c 	bl	808032c <_Z10FRAMwrite8jh>
    FRAMwrite8(VERSIONADDR,VERSIONNUMBER);  // Reset version to match #define value for sketch
 80806b4:	2109      	movs	r1, #9
 80806b6:	2000      	movs	r0, #0
 80806b8:	f7ff fe38 	bl	808032c <_Z10FRAMwrite8jh>
}
 80806bc:	b004      	add	sp, #16
 80806be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (i==16384) Serial.println(F("50% done"));
 80806c2:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 80806c6:	d103      	bne.n	80806d0 <_Z9ResetFRAMv+0x74>
 80806c8:	f003 fc96 	bl	8083ff8 <_Z16_fetch_usbserialv>
 80806cc:	4641      	mov	r1, r8
 80806ce:	e7e7      	b.n	80806a0 <_Z9ResetFRAMv+0x44>
        if (i==(24576)) Serial.println(F("75% done"));
 80806d0:	f5b4 4fc0 	cmp.w	r4, #24576	; 0x6000
 80806d4:	d103      	bne.n	80806de <_Z9ResetFRAMv+0x82>
 80806d6:	f003 fc8f 	bl	8083ff8 <_Z16_fetch_usbserialv>
 80806da:	4639      	mov	r1, r7
 80806dc:	e7e0      	b.n	80806a0 <_Z9ResetFRAMv+0x44>
        if (i==32767) Serial.println(F("Done"));
 80806de:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80806e2:	429c      	cmp	r4, r3
 80806e4:	d1de      	bne.n	80806a4 <_Z9ResetFRAMv+0x48>
 80806e6:	f003 fc87 	bl	8083ff8 <_Z16_fetch_usbserialv>
 80806ea:	4631      	mov	r1, r6
 80806ec:	e7d8      	b.n	80806a0 <_Z9ResetFRAMv+0x44>
 80806ee:	bf00      	nop
 80806f0:	20000110 	.word	0x20000110
 80806f4:	08085783 	.word	0x08085783
 80806f8:	08085a28 	.word	0x08085a28
 80806fc:	080857b4 	.word	0x080857b4
 8080700:	080857ab 	.word	0x080857ab
 8080704:	08085799 	.word	0x08085799
 8080708:	080857a2 	.word	0x080857a2

0808070c <_Z9resetFRAM6String>:
{
 808070c:	b508      	push	{r3, lr}
 808070e:	4904      	ldr	r1, [pc, #16]	; (8080720 <_Z9resetFRAM6String+0x14>)
 8080710:	f003 f9e4 	bl	8083adc <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080714:	b110      	cbz	r0, 808071c <_Z9resetFRAM6String+0x10>
    ResetFRAM();
 8080716:	f7ff ffa1 	bl	808065c <_Z9ResetFRAMv>
    return 1;
 808071a:	2001      	movs	r0, #1
}
 808071c:	bd08      	pop	{r3, pc}
 808071e:	bf00      	nop
 8080720:	0808575c 	.word	0x0808575c

08080724 <_Z12resolveAlertv>:
  char data[128] = "";
 8080724:	2100      	movs	r1, #0
{
 8080726:	b510      	push	{r4, lr}
 8080728:	b0a4      	sub	sp, #144	; 0x90
  char data[128] = "";
 808072a:	227c      	movs	r2, #124	; 0x7c
 808072c:	a805      	add	r0, sp, #20
 808072e:	9104      	str	r1, [sp, #16]
 8080730:	f004 fe3c 	bl	80853ac <memset>
  if (alertValue & 0b00000001) strcat(data,"Booster No Flow 1 - ");
 8080734:	4b20      	ldr	r3, [pc, #128]	; (80807b8 <_Z12resolveAlertv+0x94>)
 8080736:	781c      	ldrb	r4, [r3, #0]
 8080738:	07e2      	lsls	r2, r4, #31
 808073a:	d503      	bpl.n	8080744 <_Z12resolveAlertv+0x20>
 808073c:	491f      	ldr	r1, [pc, #124]	; (80807bc <_Z12resolveAlertv+0x98>)
 808073e:	a804      	add	r0, sp, #16
 8080740:	f004 fe60 	bl	8085404 <strcat>
  if (alertValue & 0b00000010) strcat(data,"Booster No Flow 2 - ");
 8080744:	07a3      	lsls	r3, r4, #30
 8080746:	d503      	bpl.n	8080750 <_Z12resolveAlertv+0x2c>
 8080748:	491d      	ldr	r1, [pc, #116]	; (80807c0 <_Z12resolveAlertv+0x9c>)
 808074a:	a804      	add	r0, sp, #16
 808074c:	f004 fe5a 	bl	8085404 <strcat>
  if (alertValue & 0b00000100) strcat(data,"Storage Tank Low - ");
 8080750:	0760      	lsls	r0, r4, #29
 8080752:	d503      	bpl.n	808075c <_Z12resolveAlertv+0x38>
 8080754:	491b      	ldr	r1, [pc, #108]	; (80807c4 <_Z12resolveAlertv+0xa0>)
 8080756:	a804      	add	r0, sp, #16
 8080758:	f004 fe54 	bl	8085404 <strcat>
  if (alertValue & 0b00001000) strcat(data,"Pump 1 Called - ");
 808075c:	0721      	lsls	r1, r4, #28
 808075e:	d503      	bpl.n	8080768 <_Z12resolveAlertv+0x44>
 8080760:	4919      	ldr	r1, [pc, #100]	; (80807c8 <_Z12resolveAlertv+0xa4>)
 8080762:	a804      	add	r0, sp, #16
 8080764:	f004 fe4e 	bl	8085404 <strcat>
  if (alertValue & 0b00010000) strcat(data,"Pump 2 Called - ");
 8080768:	06e2      	lsls	r2, r4, #27
 808076a:	d503      	bpl.n	8080774 <_Z12resolveAlertv+0x50>
 808076c:	4917      	ldr	r1, [pc, #92]	; (80807cc <_Z12resolveAlertv+0xa8>)
 808076e:	a804      	add	r0, sp, #16
 8080770:	f004 fe48 	bl	8085404 <strcat>
  if (alertValue & 0b10000000) strcat(data,"Lost Power");
 8080774:	0623      	lsls	r3, r4, #24
 8080776:	d503      	bpl.n	8080780 <_Z12resolveAlertv+0x5c>
 8080778:	4915      	ldr	r1, [pc, #84]	; (80807d0 <_Z12resolveAlertv+0xac>)
 808077a:	a804      	add	r0, sp, #16
 808077c:	f004 fe42 	bl	8085404 <strcat>
        return waitConditionWhile(_condition, []{ return true; });
 8080780:	f7ff ff08 	bl	8080594 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
  if(verboseMode) Particle.publish("Alerts",data,PRIVATE);
 8080784:	4b13      	ldr	r3, [pc, #76]	; (80807d4 <_Z12resolveAlertv+0xb0>)
 8080786:	781b      	ldrb	r3, [r3, #0]
 8080788:	b163      	cbz	r3, 80807a4 <_Z12resolveAlertv+0x80>
 808078a:	2300      	movs	r3, #0
 808078c:	f88d 3000 	strb.w	r3, [sp]
 8080790:	4b11      	ldr	r3, [pc, #68]	; (80807d8 <_Z12resolveAlertv+0xb4>)
 8080792:	a802      	add	r0, sp, #8
 8080794:	781b      	ldrb	r3, [r3, #0]
 8080796:	4911      	ldr	r1, [pc, #68]	; (80807dc <_Z12resolveAlertv+0xb8>)
 8080798:	aa04      	add	r2, sp, #16
 808079a:	f7ff fd6d 	bl	8080278 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 808079e:	a803      	add	r0, sp, #12
 80807a0:	f7ff ff46 	bl	8080630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Log.info(data);
 80807a4:	a904      	add	r1, sp, #16
 80807a6:	480e      	ldr	r0, [pc, #56]	; (80807e0 <_Z12resolveAlertv+0xbc>)
 80807a8:	f7ff fda3 	bl	80802f2 <_ZNK5spark6Logger4infoEPKcz>
 80807ac:	f000 fe28 	bl	8081400 <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
 80807b0:	4b0c      	ldr	r3, [pc, #48]	; (80807e4 <_Z12resolveAlertv+0xc0>)
 80807b2:	6018      	str	r0, [r3, #0]
}
 80807b4:	b024      	add	sp, #144	; 0x90
 80807b6:	bd10      	pop	{r4, pc}
 80807b8:	20000111 	.word	0x20000111
 80807bc:	080857b9 	.word	0x080857b9
 80807c0:	080857ce 	.word	0x080857ce
 80807c4:	080857e3 	.word	0x080857e3
 80807c8:	080857f7 	.word	0x080857f7
 80807cc:	08085808 	.word	0x08085808
 80807d0:	08085819 	.word	0x08085819
 80807d4:	2000018c 	.word	0x2000018c
 80807d8:	20000110 	.word	0x20000110
 80807dc:	08085824 	.word	0x08085824
 80807e0:	200001d0 	.word	0x200001d0
 80807e4:	20000130 	.word	0x20000130

080807e8 <_Z9sendEventv>:
{
 80807e8:	b500      	push	{lr}
  snprintf(data, sizeof(data), "{\"alertValue\":%i, \"pumpMins\":%i, \"battery\":%i, \"temp\":%i, \"resets\":%i}",alertValue, dailyPumpingMins, stateOfCharge, temperatureF,resetCount);
 80807ea:	4b14      	ldr	r3, [pc, #80]	; (808083c <_Z9sendEventv+0x54>)
{
 80807ec:	b0c7      	sub	sp, #284	; 0x11c
  snprintf(data, sizeof(data), "{\"alertValue\":%i, \"pumpMins\":%i, \"battery\":%i, \"temp\":%i, \"resets\":%i}",alertValue, dailyPumpingMins, stateOfCharge, temperatureF,resetCount);
 80807ee:	681b      	ldr	r3, [r3, #0]
 80807f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80807f4:	9303      	str	r3, [sp, #12]
 80807f6:	4b12      	ldr	r3, [pc, #72]	; (8080840 <_Z9sendEventv+0x58>)
 80807f8:	4a12      	ldr	r2, [pc, #72]	; (8080844 <_Z9sendEventv+0x5c>)
 80807fa:	681b      	ldr	r3, [r3, #0]
 80807fc:	a806      	add	r0, sp, #24
 80807fe:	9302      	str	r3, [sp, #8]
 8080800:	4b11      	ldr	r3, [pc, #68]	; (8080848 <_Z9sendEventv+0x60>)
 8080802:	681b      	ldr	r3, [r3, #0]
 8080804:	9301      	str	r3, [sp, #4]
 8080806:	4b11      	ldr	r3, [pc, #68]	; (808084c <_Z9sendEventv+0x64>)
 8080808:	681b      	ldr	r3, [r3, #0]
 808080a:	9300      	str	r3, [sp, #0]
 808080c:	4b10      	ldr	r3, [pc, #64]	; (8080850 <_Z9sendEventv+0x68>)
 808080e:	781b      	ldrb	r3, [r3, #0]
 8080810:	f001 f8ac 	bl	808196c <snprintf>
  Particle.publish("Monitoring_Hourly", data, PRIVATE);
 8080814:	2300      	movs	r3, #0
 8080816:	f88d 3000 	strb.w	r3, [sp]
 808081a:	4b0e      	ldr	r3, [pc, #56]	; (8080854 <_Z9sendEventv+0x6c>)
 808081c:	aa06      	add	r2, sp, #24
 808081e:	781b      	ldrb	r3, [r3, #0]
 8080820:	490d      	ldr	r1, [pc, #52]	; (8080858 <_Z9sendEventv+0x70>)
 8080822:	a804      	add	r0, sp, #16
 8080824:	f7ff fd28 	bl	8080278 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 8080828:	a805      	add	r0, sp, #20
 808082a:	f7ff ff01 	bl	8080630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  dataInFlight = true; // set the data inflight flag
 808082e:	2201      	movs	r2, #1
 8080830:	4b0a      	ldr	r3, [pc, #40]	; (808085c <_Z9sendEventv+0x74>)
 8080832:	701a      	strb	r2, [r3, #0]
}
 8080834:	b047      	add	sp, #284	; 0x11c
 8080836:	f85d fb04 	ldr.w	pc, [sp], #4
 808083a:	bf00      	nop
 808083c:	20000170 	.word	0x20000170
 8080840:	20000188 	.word	0x20000188
 8080844:	0808582b 	.word	0x0808582b
 8080848:	2000017c 	.word	0x2000017c
 808084c:	20000124 	.word	0x20000124
 8080850:	20000111 	.word	0x20000111
 8080854:	20000110 	.word	0x20000110
 8080858:	08085872 	.word	0x08085872
 808085c:	20000128 	.word	0x20000128

08080860 <_Z14UbidotsHandlerPKcS0_>:
{
 8080860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (!data) {                                            // First check to see if there is any data
 8080862:	460c      	mov	r4, r1
 8080864:	b999      	cbnz	r1, 808088e <_Z14UbidotsHandlerPKcS0_+0x2e>
 8080866:	f7ff fe95 	bl	8080594 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
    Particle.publish("Ubidots Hook", "No Data",PRIVATE);
 808086a:	4b20      	ldr	r3, [pc, #128]	; (80808ec <_Z14UbidotsHandlerPKcS0_+0x8c>)
 808086c:	f88d 4000 	strb.w	r4, [sp]
 8080870:	781b      	ldrb	r3, [r3, #0]
 8080872:	4a1f      	ldr	r2, [pc, #124]	; (80808f0 <_Z14UbidotsHandlerPKcS0_+0x90>)
 8080874:	491f      	ldr	r1, [pc, #124]	; (80808f4 <_Z14UbidotsHandlerPKcS0_+0x94>)
 8080876:	a802      	add	r0, sp, #8
 8080878:	f7ff fcfe 	bl	8080278 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 808087c:	a803      	add	r0, sp, #12
 808087e:	f7ff fed7 	bl	8080630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080882:	f000 fdbd 	bl	8081400 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 8080886:	4b1c      	ldr	r3, [pc, #112]	; (80808f8 <_Z14UbidotsHandlerPKcS0_+0x98>)
 8080888:	6018      	str	r0, [r3, #0]
}
 808088a:	b004      	add	sp, #16
 808088c:	bd10      	pop	{r4, pc}
  int responseCode = atoi(data);                          // Response is only a single number thanks to Template
 808088e:	4608      	mov	r0, r1
 8080890:	f004 fd60 	bl	8085354 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
 8080894:	38c8      	subs	r0, #200	; 0xc8
 8080896:	2801      	cmp	r0, #1
 8080898:	d819      	bhi.n	80808ce <_Z14UbidotsHandlerPKcS0_+0x6e>
 808089a:	f7ff fe7b 	bl	8080594 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
    if(verboseMode) Particle.publish("State","Response Received",PRIVATE);
 808089e:	4b17      	ldr	r3, [pc, #92]	; (80808fc <_Z14UbidotsHandlerPKcS0_+0x9c>)
 80808a0:	781b      	ldrb	r3, [r3, #0]
 80808a2:	b163      	cbz	r3, 80808be <_Z14UbidotsHandlerPKcS0_+0x5e>
 80808a4:	2300      	movs	r3, #0
 80808a6:	f88d 3000 	strb.w	r3, [sp]
 80808aa:	4b10      	ldr	r3, [pc, #64]	; (80808ec <_Z14UbidotsHandlerPKcS0_+0x8c>)
 80808ac:	a802      	add	r0, sp, #8
 80808ae:	781b      	ldrb	r3, [r3, #0]
 80808b0:	4a13      	ldr	r2, [pc, #76]	; (8080900 <_Z14UbidotsHandlerPKcS0_+0xa0>)
 80808b2:	4914      	ldr	r1, [pc, #80]	; (8080904 <_Z14UbidotsHandlerPKcS0_+0xa4>)
 80808b4:	f7ff fce0 	bl	8080278 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 80808b8:	a803      	add	r0, sp, #12
 80808ba:	f7ff feb9 	bl	8080630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80808be:	f000 fd9f 	bl	8081400 <HAL_Timer_Get_Milli_Seconds>
    dataInFlight = false;                                 // Data has been received
 80808c2:	2200      	movs	r2, #0
    lastPublish = millis();
 80808c4:	4b0c      	ldr	r3, [pc, #48]	; (80808f8 <_Z14UbidotsHandlerPKcS0_+0x98>)
 80808c6:	6018      	str	r0, [r3, #0]
    dataInFlight = false;                                 // Data has been received
 80808c8:	4b0f      	ldr	r3, [pc, #60]	; (8080908 <_Z14UbidotsHandlerPKcS0_+0xa8>)
 80808ca:	701a      	strb	r2, [r3, #0]
 80808cc:	e7dd      	b.n	808088a <_Z14UbidotsHandlerPKcS0_+0x2a>
  else Particle.publish("Ubidots Hook", data, PRIVATE);             // Publish the response code
 80808ce:	2300      	movs	r3, #0
 80808d0:	f88d 3000 	strb.w	r3, [sp]
 80808d4:	4b05      	ldr	r3, [pc, #20]	; (80808ec <_Z14UbidotsHandlerPKcS0_+0x8c>)
 80808d6:	a802      	add	r0, sp, #8
 80808d8:	4622      	mov	r2, r4
 80808da:	781b      	ldrb	r3, [r3, #0]
 80808dc:	4905      	ldr	r1, [pc, #20]	; (80808f4 <_Z14UbidotsHandlerPKcS0_+0x94>)
 80808de:	f7ff fccb 	bl	8080278 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 80808e2:	a803      	add	r0, sp, #12
 80808e4:	f7ff fea4 	bl	8080630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80808e8:	e7cf      	b.n	808088a <_Z14UbidotsHandlerPKcS0_+0x2a>
 80808ea:	bf00      	nop
 80808ec:	20000110 	.word	0x20000110
 80808f0:	08085884 	.word	0x08085884
 80808f4:	0808588c 	.word	0x0808588c
 80808f8:	20000130 	.word	0x20000130
 80808fc:	2000018c 	.word	0x2000018c
 8080900:	08085899 	.word	0x08085899
 8080904:	08085a6f 	.word	0x08085a6f
 8080908:	20000128 	.word	0x20000128

0808090c <_Z14setVerboseMode6String>:
{
 808090c:	b530      	push	{r4, r5, lr}
 808090e:	4923      	ldr	r1, [pc, #140]	; (808099c <_Z14setVerboseMode6String+0x90>)
 8080910:	b085      	sub	sp, #20
 8080912:	4605      	mov	r5, r0
 8080914:	f003 f8e2 	bl	8083adc <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080918:	4604      	mov	r4, r0
 808091a:	b318      	cbz	r0, 8080964 <_Z14setVerboseMode6String+0x58>
    verboseMode = true;
 808091c:	2401      	movs	r4, #1
 808091e:	4b20      	ldr	r3, [pc, #128]	; (80809a0 <_Z14setVerboseMode6String+0x94>)
    FRAMread8(CONTROLREGISTER);
 8080920:	2007      	movs	r0, #7
    verboseMode = true;
 8080922:	701c      	strb	r4, [r3, #0]
    FRAMread8(CONTROLREGISTER);
 8080924:	f7ff fcfc 	bl	8080320 <_Z9FRAMread8j>
    controlRegister = (0b00001000 | controlRegister);                    // Turn on verboseMode
 8080928:	4b1e      	ldr	r3, [pc, #120]	; (80809a4 <_Z14setVerboseMode6String+0x98>)
    FRAMwrite8(CONTROLREGISTER,controlRegister);                        // Write it to the register
 808092a:	2007      	movs	r0, #7
    controlRegister = (0b00001000 | controlRegister);                    // Turn on verboseMode
 808092c:	7819      	ldrb	r1, [r3, #0]
 808092e:	f041 0108 	orr.w	r1, r1, #8
 8080932:	7019      	strb	r1, [r3, #0]
    FRAMwrite8(CONTROLREGISTER,controlRegister);                        // Write it to the register
 8080934:	f7ff fcfa 	bl	808032c <_Z10FRAMwrite8jh>
 8080938:	f7ff fe2c 	bl	8080594 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
 808093c:	2300      	movs	r3, #0
 808093e:	f88d 3000 	strb.w	r3, [sp]
 8080942:	4b19      	ldr	r3, [pc, #100]	; (80809a8 <_Z14setVerboseMode6String+0x9c>)
 8080944:	4a19      	ldr	r2, [pc, #100]	; (80809ac <_Z14setVerboseMode6String+0xa0>)
 8080946:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
 8080948:	4919      	ldr	r1, [pc, #100]	; (80809b0 <_Z14setVerboseMode6String+0xa4>)
 808094a:	a802      	add	r0, sp, #8
 808094c:	f7ff fc94 	bl	8080278 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 8080950:	a803      	add	r0, sp, #12
 8080952:	f7ff fe6d 	bl	8080630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080956:	f000 fd53 	bl	8081400 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 808095a:	4b16      	ldr	r3, [pc, #88]	; (80809b4 <_Z14setVerboseMode6String+0xa8>)
 808095c:	6018      	str	r0, [r3, #0]
    return 1;
 808095e:	2001      	movs	r0, #1
}
 8080960:	b005      	add	sp, #20
 8080962:	bd30      	pop	{r4, r5, pc}
 8080964:	4628      	mov	r0, r5
 8080966:	4914      	ldr	r1, [pc, #80]	; (80809b8 <_Z14setVerboseMode6String+0xac>)
 8080968:	f003 f8b8 	bl	8083adc <_ZNK6String6equalsEPKc>
  else if (command == "0")
 808096c:	2800      	cmp	r0, #0
 808096e:	d0f7      	beq.n	8080960 <_Z14setVerboseMode6String+0x54>
    verboseMode = false;
 8080970:	4b0b      	ldr	r3, [pc, #44]	; (80809a0 <_Z14setVerboseMode6String+0x94>)
    FRAMread8(CONTROLREGISTER);
 8080972:	2007      	movs	r0, #7
    verboseMode = false;
 8080974:	701c      	strb	r4, [r3, #0]
    FRAMread8(CONTROLREGISTER);
 8080976:	f7ff fcd3 	bl	8080320 <_Z9FRAMread8j>
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 808097a:	4b0a      	ldr	r3, [pc, #40]	; (80809a4 <_Z14setVerboseMode6String+0x98>)
    FRAMwrite8(CONTROLREGISTER,controlRegister);                        // Write it to the register
 808097c:	2007      	movs	r0, #7
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 808097e:	7819      	ldrb	r1, [r3, #0]
 8080980:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 8080984:	7019      	strb	r1, [r3, #0]
    FRAMwrite8(CONTROLREGISTER,controlRegister);                        // Write it to the register
 8080986:	f7ff fcd1 	bl	808032c <_Z10FRAMwrite8jh>
 808098a:	f7ff fe03 	bl	8080594 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
 808098e:	4b06      	ldr	r3, [pc, #24]	; (80809a8 <_Z14setVerboseMode6String+0x9c>)
 8080990:	f88d 4000 	strb.w	r4, [sp]
 8080994:	781b      	ldrb	r3, [r3, #0]
 8080996:	4a09      	ldr	r2, [pc, #36]	; (80809bc <_Z14setVerboseMode6String+0xb0>)
 8080998:	e7d6      	b.n	8080948 <_Z14setVerboseMode6String+0x3c>
 808099a:	bf00      	nop
 808099c:	0808575c 	.word	0x0808575c
 80809a0:	2000018c 	.word	0x2000018c
 80809a4:	20000120 	.word	0x20000120
 80809a8:	20000110 	.word	0x20000110
 80809ac:	080858ab 	.word	0x080858ab
 80809b0:	080858ce 	.word	0x080858ce
 80809b4:	20000130 	.word	0x20000130
 80809b8:	080858bc 	.word	0x080858bc
 80809bc:	080858be 	.word	0x080858be

080809c0 <_Z15setPumpingState6String>:
{
 80809c0:	b530      	push	{r4, r5, lr}
 80809c2:	4925      	ldr	r1, [pc, #148]	; (8080a58 <_Z15setPumpingState6String+0x98>)
 80809c4:	b085      	sub	sp, #20
 80809c6:	4605      	mov	r5, r0
 80809c8:	f003 f888 	bl	8083adc <_ZNK6String6equalsEPKc>
  if (command == "1")
 80809cc:	4604      	mov	r4, r0
 80809ce:	b320      	cbz	r0, 8080a1a <_Z15setPumpingState6String+0x5a>
    alertValue = (0b00010000 | alertValue);                    // Turn on pump
 80809d0:	4a22      	ldr	r2, [pc, #136]	; (8080a5c <_Z15setPumpingState6String+0x9c>)
    alertValueInt = int(alertValue);
 80809d2:	4c23      	ldr	r4, [pc, #140]	; (8080a60 <_Z15setPumpingState6String+0xa0>)
    alertValue = (0b00010000 | alertValue);                    // Turn on pump
 80809d4:	7813      	ldrb	r3, [r2, #0]
 80809d6:	f043 0310 	orr.w	r3, r3, #16
 80809da:	7013      	strb	r3, [r2, #0]
    alertValueInt = int(alertValue);
 80809dc:	6023      	str	r3, [r4, #0]
 80809de:	f7ff fdd9 	bl	8080594 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
    Particle.publish("Mode","Turned on Pump Called",PRIVATE);
 80809e2:	2300      	movs	r3, #0
 80809e4:	f88d 3000 	strb.w	r3, [sp]
 80809e8:	4b1e      	ldr	r3, [pc, #120]	; (8080a64 <_Z15setPumpingState6String+0xa4>)
 80809ea:	4a1f      	ldr	r2, [pc, #124]	; (8080a68 <_Z15setPumpingState6String+0xa8>)
 80809ec:	491f      	ldr	r1, [pc, #124]	; (8080a6c <_Z15setPumpingState6String+0xac>)
 80809ee:	781b      	ldrb	r3, [r3, #0]
 80809f0:	a802      	add	r0, sp, #8
 80809f2:	f7ff fc41 	bl	8080278 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 80809f6:	a803      	add	r0, sp, #12
 80809f8:	f7ff fe1a 	bl	8080630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Log.info("Pump called alerts = %i",alertValueInt);
 80809fc:	6822      	ldr	r2, [r4, #0]
 80809fe:	491c      	ldr	r1, [pc, #112]	; (8080a70 <_Z15setPumpingState6String+0xb0>)
    Log.info("Pump cancelled alerts = %i",alertValueInt);
 8080a00:	481c      	ldr	r0, [pc, #112]	; (8080a74 <_Z15setPumpingState6String+0xb4>)
 8080a02:	f7ff fc76 	bl	80802f2 <_ZNK5spark6Logger4infoEPKcz>
 8080a06:	f000 fcfb 	bl	8081400 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 8080a0a:	4b1b      	ldr	r3, [pc, #108]	; (8080a78 <_Z15setPumpingState6String+0xb8>)
    state = REPORTING_STATE;
 8080a0c:	2204      	movs	r2, #4
    lastPublish = millis();
 8080a0e:	6018      	str	r0, [r3, #0]
    return 1;
 8080a10:	2001      	movs	r0, #1
    state = REPORTING_STATE;
 8080a12:	4b1a      	ldr	r3, [pc, #104]	; (8080a7c <_Z15setPumpingState6String+0xbc>)
 8080a14:	701a      	strb	r2, [r3, #0]
}
 8080a16:	b005      	add	sp, #20
 8080a18:	bd30      	pop	{r4, r5, pc}
 8080a1a:	4628      	mov	r0, r5
 8080a1c:	4918      	ldr	r1, [pc, #96]	; (8080a80 <_Z15setPumpingState6String+0xc0>)
 8080a1e:	f003 f85d 	bl	8083adc <_ZNK6String6equalsEPKc>
  else if (command == "0")
 8080a22:	2800      	cmp	r0, #0
 8080a24:	d0f7      	beq.n	8080a16 <_Z15setPumpingState6String+0x56>
    alertValue = (0b11101111 & alertValue);                    // Turn off pump
 8080a26:	4a0d      	ldr	r2, [pc, #52]	; (8080a5c <_Z15setPumpingState6String+0x9c>)
    alertValueInt = (int)alertValue;
 8080a28:	4d0d      	ldr	r5, [pc, #52]	; (8080a60 <_Z15setPumpingState6String+0xa0>)
    alertValue = (0b11101111 & alertValue);                    // Turn off pump
 8080a2a:	7813      	ldrb	r3, [r2, #0]
 8080a2c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8080a30:	7013      	strb	r3, [r2, #0]
    alertValueInt = (int)alertValue;
 8080a32:	602b      	str	r3, [r5, #0]
 8080a34:	f7ff fdae 	bl	8080594 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
    Particle.publish("Mode","Cleared Pump Called",PRIVATE);
 8080a38:	4b0a      	ldr	r3, [pc, #40]	; (8080a64 <_Z15setPumpingState6String+0xa4>)
 8080a3a:	f88d 4000 	strb.w	r4, [sp]
 8080a3e:	4a11      	ldr	r2, [pc, #68]	; (8080a84 <_Z15setPumpingState6String+0xc4>)
 8080a40:	490a      	ldr	r1, [pc, #40]	; (8080a6c <_Z15setPumpingState6String+0xac>)
 8080a42:	781b      	ldrb	r3, [r3, #0]
 8080a44:	a802      	add	r0, sp, #8
 8080a46:	f7ff fc17 	bl	8080278 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 8080a4a:	a803      	add	r0, sp, #12
 8080a4c:	f7ff fdf0 	bl	8080630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Log.info("Pump cancelled alerts = %i",alertValueInt);
 8080a50:	682a      	ldr	r2, [r5, #0]
 8080a52:	490d      	ldr	r1, [pc, #52]	; (8080a88 <_Z15setPumpingState6String+0xc8>)
 8080a54:	e7d4      	b.n	8080a00 <_Z15setPumpingState6String+0x40>
 8080a56:	bf00      	nop
 8080a58:	0808575c 	.word	0x0808575c
 8080a5c:	20000111 	.word	0x20000111
 8080a60:	20000114 	.word	0x20000114
 8080a64:	20000110 	.word	0x20000110
 8080a68:	080858d3 	.word	0x080858d3
 8080a6c:	080858ce 	.word	0x080858ce
 8080a70:	080858e9 	.word	0x080858e9
 8080a74:	200001d0 	.word	0x200001d0
 8080a78:	20000130 	.word	0x20000130
 8080a7c:	20000178 	.word	0x20000178
 8080a80:	080858bc 	.word	0x080858bc
 8080a84:	08085901 	.word	0x08085901
 8080a88:	08085915 	.word	0x08085915

08080a8c <_Z11setTimeZone6String>:
{
 8080a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080a8e:	b0cb      	sub	sp, #300	; 0x12c
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8080a90:	220a      	movs	r2, #10
 8080a92:	6800      	ldr	r0, [r0, #0]
 8080a94:	a903      	add	r1, sp, #12
 8080a96:	f004 fdc3 	bl	8085620 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 8080a9a:	b2c5      	uxtb	r5, r0
 8080a9c:	f105 030c 	add.w	r3, r5, #12
 8080aa0:	b2db      	uxtb	r3, r3
 8080aa2:	2b18      	cmp	r3, #24
 8080aa4:	d844      	bhi.n	8080b30 <_Z11setTimeZone6String+0xa4>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8080aa6:	b244      	sxtb	r4, r0
  Time.zone((float)tempTimeZoneOffset);
 8080aa8:	4620      	mov	r0, r4
 8080aaa:	f004 f9b3 	bl	8084e14 <__aeabi_i2f>
 8080aae:	f003 f90d 	bl	8083ccc <_ZN9TimeClass4zoneEf>
  FRAMwrite8(TIMEZONE,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
 8080ab2:	4629      	mov	r1, r5
 8080ab4:	2004      	movs	r0, #4
 8080ab6:	f7ff fc39 	bl	808032c <_Z10FRAMwrite8jh>
  t = Time.now();
 8080aba:	f003 f97a 	bl	8083db2 <_ZN9TimeClass3nowEv>
        val_(0) {
 8080abe:	2600      	movs	r6, #0
 8080ac0:	4f1c      	ldr	r7, [pc, #112]	; (8080b34 <_Z11setTimeZone6String+0xa8>)
 8080ac2:	17c1      	asrs	r1, r0, #31
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 8080ac4:	4623      	mov	r3, r4
  t = Time.now();
 8080ac6:	e9c7 0100 	strd	r0, r1, [r7]
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 8080aca:	4a1b      	ldr	r2, [pc, #108]	; (8080b38 <_Z11setTimeZone6String+0xac>)
 8080acc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8080ad0:	4d1a      	ldr	r5, [pc, #104]	; (8080b3c <_Z11setTimeZone6String+0xb0>)
 8080ad2:	a80a      	add	r0, sp, #40	; 0x28
 8080ad4:	f000 ff4a 	bl	808196c <snprintf>
 8080ad8:	f7ff fd5c 	bl	8080594 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
  Particle.publish("Time",data, PRIVATE);
 8080adc:	f88d 6000 	strb.w	r6, [sp]
 8080ae0:	4917      	ldr	r1, [pc, #92]	; (8080b40 <_Z11setTimeZone6String+0xb4>)
 8080ae2:	782b      	ldrb	r3, [r5, #0]
 8080ae4:	aa0a      	add	r2, sp, #40	; 0x28
 8080ae6:	a806      	add	r0, sp, #24
 8080ae8:	f7ff fbc6 	bl	8080278 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 8080aec:	a807      	add	r0, sp, #28
 8080aee:	f7ff fd9f 	bl	8080630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080af2:	f000 fc85 	bl	8081400 <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
 8080af6:	4c13      	ldr	r4, [pc, #76]	; (8080b44 <_Z11setTimeZone6String+0xb8>)
 8080af8:	6020      	str	r0, [r4, #0]
 8080afa:	f7ff fd4b 	bl	8080594 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
  Particle.publish("Time",Time.timeStr(t), PRIVATE);
 8080afe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8080b02:	a806      	add	r0, sp, #24
 8080b04:	f003 f900 	bl	8083d08 <_ZN9TimeClass7timeStrEx>
 8080b08:	f88d 6000 	strb.w	r6, [sp]
 8080b0c:	782b      	ldrb	r3, [r5, #0]
 8080b0e:	9a06      	ldr	r2, [sp, #24]
 8080b10:	490b      	ldr	r1, [pc, #44]	; (8080b40 <_Z11setTimeZone6String+0xb4>)
 8080b12:	a804      	add	r0, sp, #16
 8080b14:	f7ff fbb0 	bl	8080278 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 8080b18:	a805      	add	r0, sp, #20
 8080b1a:	f7ff fd89 	bl	8080630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080b1e:	a806      	add	r0, sp, #24
 8080b20:	f002 ff3d 	bl	808399e <_ZN6StringD1Ev>
 8080b24:	f000 fc6c 	bl	8081400 <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
 8080b28:	6020      	str	r0, [r4, #0]
  return 1;
 8080b2a:	2001      	movs	r0, #1
}
 8080b2c:	b04b      	add	sp, #300	; 0x12c
 8080b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 8080b30:	2000      	movs	r0, #0
 8080b32:	e7fb      	b.n	8080b2c <_Z11setTimeZone6String+0xa0>
 8080b34:	20000180 	.word	0x20000180
 8080b38:	08085930 	.word	0x08085930
 8080b3c:	20000110 	.word	0x20000110
 8080b40:	08085944 	.word	0x08085944
 8080b44:	20000130 	.word	0x20000130

08080b48 <_Z22publishStateTransitionv>:

void publishStateTransition(void) {                                     // Mainly for troubleshooting - publishes the transition between states
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 8080b48:	230e      	movs	r3, #14
void publishStateTransition(void) {                                     // Mainly for troubleshooting - publishes the transition between states
 8080b4a:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 8080b4c:	4c19      	ldr	r4, [pc, #100]	; (8080bb4 <_Z22publishStateTransitionv+0x6c>)
 8080b4e:	491a      	ldr	r1, [pc, #104]	; (8080bb8 <_Z22publishStateTransitionv+0x70>)
 8080b50:	7822      	ldrb	r2, [r4, #0]
 8080b52:	4d1a      	ldr	r5, [pc, #104]	; (8080bbc <_Z22publishStateTransitionv+0x74>)
 8080b54:	fb03 1202 	mla	r2, r3, r2, r1
 8080b58:	7828      	ldrb	r0, [r5, #0]
void publishStateTransition(void) {                                     // Mainly for troubleshooting - publishes the transition between states
 8080b5a:	b08f      	sub	sp, #60	; 0x3c
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 8080b5c:	fb03 1300 	mla	r3, r3, r0, r1
 8080b60:	9200      	str	r2, [sp, #0]
 8080b62:	2128      	movs	r1, #40	; 0x28
 8080b64:	4a16      	ldr	r2, [pc, #88]	; (8080bc0 <_Z22publishStateTransitionv+0x78>)
 8080b66:	a804      	add	r0, sp, #16
 8080b68:	f000 ff00 	bl	808196c <snprintf>
 8080b6c:	f000 fe36 	bl	80817dc <spark_cloud_flag_connected>
  if(Particle.connected() && verboseMode) {
 8080b70:	b188      	cbz	r0, 8080b96 <_Z22publishStateTransitionv+0x4e>
 8080b72:	4b14      	ldr	r3, [pc, #80]	; (8080bc4 <_Z22publishStateTransitionv+0x7c>)
 8080b74:	781b      	ldrb	r3, [r3, #0]
 8080b76:	b173      	cbz	r3, 8080b96 <_Z22publishStateTransitionv+0x4e>
 8080b78:	f7ff fd0c 	bl	8080594 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
    waitUntil(meterParticlePublish);
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
 8080b7c:	2300      	movs	r3, #0
 8080b7e:	f88d 3000 	strb.w	r3, [sp]
 8080b82:	4b11      	ldr	r3, [pc, #68]	; (8080bc8 <_Z22publishStateTransitionv+0x80>)
 8080b84:	a802      	add	r0, sp, #8
 8080b86:	781b      	ldrb	r3, [r3, #0]
 8080b88:	4910      	ldr	r1, [pc, #64]	; (8080bcc <_Z22publishStateTransitionv+0x84>)
 8080b8a:	aa04      	add	r2, sp, #16
 8080b8c:	f7ff fb74 	bl	8080278 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 8080b90:	a803      	add	r0, sp, #12
 8080b92:	f7ff fd4d 	bl	8080630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  Log.info(stateTransitionString);
 8080b96:	a904      	add	r1, sp, #16
 8080b98:	480d      	ldr	r0, [pc, #52]	; (8080bd0 <_Z22publishStateTransitionv+0x88>)
 8080b9a:	f7ff fbaa 	bl	80802f2 <_ZNK5spark6Logger4infoEPKcz>
  Log.info("AlertValue = %i",alertValue);
 8080b9e:	4b0d      	ldr	r3, [pc, #52]	; (8080bd4 <_Z22publishStateTransitionv+0x8c>)
 8080ba0:	490d      	ldr	r1, [pc, #52]	; (8080bd8 <_Z22publishStateTransitionv+0x90>)
 8080ba2:	781a      	ldrb	r2, [r3, #0]
 8080ba4:	480a      	ldr	r0, [pc, #40]	; (8080bd0 <_Z22publishStateTransitionv+0x88>)
 8080ba6:	f7ff fba4 	bl	80802f2 <_ZNK5spark6Logger4infoEPKcz>
  oldState = state;
 8080baa:	7823      	ldrb	r3, [r4, #0]
 8080bac:	702b      	strb	r3, [r5, #0]
}
 8080bae:	b00f      	add	sp, #60	; 0x3c
 8080bb0:	bd30      	pop	{r4, r5, pc}
 8080bb2:	bf00      	nop
 8080bb4:	20000178 	.word	0x20000178
 8080bb8:	20000018 	.word	0x20000018
 8080bbc:	20000160 	.word	0x20000160
 8080bc0:	08085949 	.word	0x08085949
 8080bc4:	2000018c 	.word	0x2000018c
 8080bc8:	20000110 	.word	0x20000110
 8080bcc:	08085957 	.word	0x08085957
 8080bd0:	200001d0 	.word	0x200001d0
 8080bd4:	20000111 	.word	0x20000111
 8080bd8:	08085968 	.word	0x08085968

08080bdc <loop>:
{
 8080bdc:	b530      	push	{r4, r5, lr}
  switch(state) {
 8080bde:	4c94      	ldr	r4, [pc, #592]	; (8080e30 <loop+0x254>)
{
 8080be0:	b085      	sub	sp, #20
 8080be2:	7823      	ldrb	r3, [r4, #0]
 8080be4:	3b01      	subs	r3, #1
 8080be6:	2b04      	cmp	r3, #4
 8080be8:	d862      	bhi.n	8080cb0 <loop+0xd4>
 8080bea:	e8df f013 	tbh	[pc, r3, lsl #1]
 8080bee:	00f2      	.short	0x00f2
 8080bf0:	003d0005 	.word	0x003d0005
 8080bf4:	00b80078 	.word	0x00b80078
    if (state != oldState) publishStateTransition();
 8080bf8:	4b8e      	ldr	r3, [pc, #568]	; (8080e34 <loop+0x258>)
 8080bfa:	781b      	ldrb	r3, [r3, #0]
 8080bfc:	2b02      	cmp	r3, #2
 8080bfe:	d001      	beq.n	8080c04 <loop+0x28>
 8080c00:	f7ff ffa2 	bl	8080b48 <_Z22publishStateTransitionv>
    waitUntil(meterSampleRate);
 8080c04:	f7ff fcd2 	bl	80805ac <_Z15meterSampleRatev>
        while (_while() && !_condition()) {
 8080c08:	b910      	cbnz	r0, 8080c10 <loop+0x34>
            spark_process();
 8080c0a:	f000 fdd7 	bl	80817bc <spark_process>
        while (_while() && !_condition()) {
 8080c0e:	e7f9      	b.n	8080c04 <loop+0x28>
 8080c10:	f7ff fccc 	bl	80805ac <_Z15meterSampleRatev>
    if(takeMeasurements()) state = REPORTING_STATE;
 8080c14:	f7ff fca2 	bl	808055c <_Z16takeMeasurementsv>
 8080c18:	b108      	cbz	r0, 8080c1e <loop+0x42>
 8080c1a:	2304      	movs	r3, #4
 8080c1c:	7023      	strb	r3, [r4, #0]
 8080c1e:	f000 fbef 	bl	8081400 <HAL_Timer_Get_Milli_Seconds>
    lastSample = millis();
 8080c22:	4b85      	ldr	r3, [pc, #532]	; (8080e38 <loop+0x25c>)
 8080c24:	6018      	str	r0, [r3, #0]
    if (Time.hour() != currentHourlyPeriod) {
 8080c26:	f003 f8d5 	bl	8083dd4 <_ZN9TimeClass4hourEv>
 8080c2a:	4b84      	ldr	r3, [pc, #528]	; (8080e3c <loop+0x260>)
 8080c2c:	781b      	ldrb	r3, [r3, #0]
 8080c2e:	4298      	cmp	r0, r3
 8080c30:	d011      	beq.n	8080c56 <loop+0x7a>
      state = REPORTING_STATE;                                    // We want to report on the hour
 8080c32:	2304      	movs	r3, #4
 8080c34:	7023      	strb	r3, [r4, #0]
      if (Time.hour() == 0) {                                     // Check to see if it is midnight
 8080c36:	f003 f8cd 	bl	8083dd4 <_ZN9TimeClass4hourEv>
 8080c3a:	4605      	mov	r5, r0
 8080c3c:	b958      	cbnz	r0, 8080c56 <loop+0x7a>
        dailyPumpingMins = 0;                                     // Reset each day.
 8080c3e:	4b80      	ldr	r3, [pc, #512]	; (8080e40 <loop+0x264>)
        FRAMwrite16(DAILYPUMPMINUTES,0);                          // And zero the value in FRAM
 8080c40:	4601      	mov	r1, r0
        dailyPumpingMins = 0;                                     // Reset each day.
 8080c42:	6018      	str	r0, [r3, #0]
        FRAMwrite16(DAILYPUMPMINUTES,0);                          // And zero the value in FRAM
 8080c44:	2014      	movs	r0, #20
 8080c46:	f7ff fb8b 	bl	8080360 <_Z11FRAMwrite16ji>
 8080c4a:	f000 fdc7 	bl	80817dc <spark_cloud_flag_connected>
        if (!connected()) {
 8080c4e:	b110      	cbz	r0, 8080c56 <loop+0x7a>
        return spark_sync_time(NULL);
 8080c50:	4628      	mov	r0, r5
 8080c52:	f000 fde3 	bl	808181c <spark_sync_time>
    if (stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE; // The battery is low - sleep
 8080c56:	4b7b      	ldr	r3, [pc, #492]	; (8080e44 <loop+0x268>)
 8080c58:	681a      	ldr	r2, [r3, #0]
 8080c5a:	4b7b      	ldr	r3, [pc, #492]	; (8080e48 <loop+0x26c>)
 8080c5c:	681b      	ldr	r3, [r3, #0]
 8080c5e:	429a      	cmp	r2, r3
 8080c60:	dc26      	bgt.n	8080cb0 <loop+0xd4>
 8080c62:	2303      	movs	r3, #3
        state = ERROR_STATE;
 8080c64:	7023      	strb	r3, [r4, #0]
        break;
 8080c66:	e023      	b.n	8080cb0 <loop+0xd4>
      if (state != oldState) publishStateTransition();
 8080c68:	4b72      	ldr	r3, [pc, #456]	; (8080e34 <loop+0x258>)
 8080c6a:	781b      	ldrb	r3, [r3, #0]
 8080c6c:	2b03      	cmp	r3, #3
 8080c6e:	d001      	beq.n	8080c74 <loop+0x98>
 8080c70:	f7ff ff6a 	bl	8080b48 <_Z22publishStateTransitionv>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080c74:	f000 fdb2 	bl	80817dc <spark_cloud_flag_connected>
      if (Particle.connected()) {
 8080c78:	b108      	cbz	r0, 8080c7e <loop+0xa2>
        disconnectFromParticle();                               // If connected, we need to disconned and power down the modem
 8080c7a:	f7ff fc37 	bl	80804ec <_Z22disconnectFromParticlev>
      ledState = false;
 8080c7e:	2400      	movs	r4, #0
 8080c80:	4b72      	ldr	r3, [pc, #456]	; (8080e4c <loop+0x270>)
      digitalWrite(blueLED,LOW);                                // Turn off the LED
 8080c82:	4621      	mov	r1, r4
 8080c84:	2007      	movs	r0, #7
      ledState = false;
 8080c86:	701c      	strb	r4, [r3, #0]
      digitalWrite(blueLED,LOW);                                // Turn off the LED
 8080c88:	f003 fb2b 	bl	80842e2 <digitalWrite>
      digitalWrite(tmp36Shutdwn, LOW);                          // Turns off the temp sensor
 8080c8c:	4621      	mov	r1, r4
 8080c8e:	201d      	movs	r0, #29
 8080c90:	f003 fb27 	bl	80842e2 <digitalWrite>
      watchdogISR();                                            // Pet the watchdog
 8080c94:	f7ff fad0 	bl	8080238 <_Z11watchdogISRv>
      int secondsToHour = (60*(60 - Time.minute()));            // Time till the top of the hour
 8080c98:	f003 f8a8 	bl	8083dec <_ZN9TimeClass6minuteEv>
      System.sleep(SLEEP_MODE_DEEP,secondsToHour);              // Very deep sleep till the next hour - then resets
 8080c9c:	223c      	movs	r2, #60	; 0x3c
 8080c9e:	4b6c      	ldr	r3, [pc, #432]	; (8080e50 <loop+0x274>)
      int secondsToHour = (60*(60 - Time.minute()));            // Time till the top of the hour
 8080ca0:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
      System.sleep(SLEEP_MODE_DEEP,secondsToHour);              // Very deep sleep till the next hour - then resets
 8080ca4:	4342      	muls	r2, r0
 8080ca6:	2101      	movs	r1, #1
 8080ca8:	681b      	ldr	r3, [r3, #0]
 8080caa:	a802      	add	r0, sp, #8
 8080cac:	f002 ff92 	bl	8083bd4 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
 8080cb0:	f000 fd94 	bl	80817dc <spark_cloud_flag_connected>
  if (!Particle.connected() && (millis() - lastConnectionCheck > 30000)) {
 8080cb4:	b988      	cbnz	r0, 8080cda <loop+0xfe>
 8080cb6:	f000 fba3 	bl	8081400 <HAL_Timer_Get_Milli_Seconds>
 8080cba:	4c66      	ldr	r4, [pc, #408]	; (8080e54 <loop+0x278>)
 8080cbc:	6823      	ldr	r3, [r4, #0]
 8080cbe:	1ac0      	subs	r0, r0, r3
 8080cc0:	f247 5330 	movw	r3, #30000	; 0x7530
 8080cc4:	4298      	cmp	r0, r3
 8080cc6:	d908      	bls.n	8080cda <loop+0xfe>
        spark_cloud_flag_connect();
 8080cc8:	f000 fd80 	bl	80817cc <spark_cloud_flag_connect>
 8080ccc:	f000 fb98 	bl	8081400 <HAL_Timer_Get_Milli_Seconds>
    Log.info("Attempting to reconnect to Particle");
 8080cd0:	4961      	ldr	r1, [pc, #388]	; (8080e58 <loop+0x27c>)
    lastConnectionCheck = millis();
 8080cd2:	6020      	str	r0, [r4, #0]
    Log.info("Attempting to reconnect to Particle");
 8080cd4:	4861      	ldr	r0, [pc, #388]	; (8080e5c <loop+0x280>)
 8080cd6:	f7ff fb0c 	bl	80802f2 <_ZNK5spark6Logger4infoEPKcz>
}
 8080cda:	b005      	add	sp, #20
 8080cdc:	bd30      	pop	{r4, r5, pc}
    if (state != oldState) publishStateTransition();
 8080cde:	4b55      	ldr	r3, [pc, #340]	; (8080e34 <loop+0x258>)
 8080ce0:	781b      	ldrb	r3, [r3, #0]
 8080ce2:	2b04      	cmp	r3, #4
 8080ce4:	d001      	beq.n	8080cea <loop+0x10e>
 8080ce6:	f7ff ff2f 	bl	8080b48 <_Z22publishStateTransitionv>
    watchdogISR();                                    // Pet the watchdog once an hour
 8080cea:	f7ff faa5 	bl	8080238 <_Z11watchdogISRv>
    pettingEnabled = false;                           // see this reporort cycle through
 8080cee:	2300      	movs	r3, #0
 8080cf0:	4d5b      	ldr	r5, [pc, #364]	; (8080e60 <loop+0x284>)
 8080cf2:	702b      	strb	r3, [r5, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080cf4:	f000 fd72 	bl	80817dc <spark_cloud_flag_connected>
    if (!Particle.connected()) {
 8080cf8:	b940      	cbnz	r0, 8080d0c <loop+0x130>
      if (!connectToParticle()) {
 8080cfa:	f7ff fb87 	bl	808040c <_Z17connectToParticlev>
 8080cfe:	b928      	cbnz	r0, 8080d0c <loop+0x130>
 8080d00:	f000 fb7e 	bl	8081400 <HAL_Timer_Get_Milli_Seconds>
        resetTimeStamp = millis();
 8080d04:	4b57      	ldr	r3, [pc, #348]	; (8080e64 <loop+0x288>)
 8080d06:	6018      	str	r0, [r3, #0]
        state = ERROR_STATE;
 8080d08:	2301      	movs	r3, #1
 8080d0a:	e7ab      	b.n	8080c64 <loop+0x88>
    if (alertValue != 0) resolveAlert();
 8080d0c:	4b56      	ldr	r3, [pc, #344]	; (8080e68 <loop+0x28c>)
 8080d0e:	781b      	ldrb	r3, [r3, #0]
 8080d10:	b10b      	cbz	r3, 8080d16 <loop+0x13a>
 8080d12:	f7ff fd07 	bl	8080724 <_Z12resolveAlertv>
    sendEvent();
 8080d16:	f7ff fd67 	bl	80807e8 <_Z9sendEventv>
 8080d1a:	f000 fb71 	bl	8081400 <HAL_Timer_Get_Milli_Seconds>
    webhookTimeStamp = millis();
 8080d1e:	4b53      	ldr	r3, [pc, #332]	; (8080e6c <loop+0x290>)
 8080d20:	6018      	str	r0, [r3, #0]
    currentHourlyPeriod = Time.hour();                // Change the time period since we have reported for this one
 8080d22:	f003 f857 	bl	8083dd4 <_ZN9TimeClass4hourEv>
 8080d26:	4b45      	ldr	r3, [pc, #276]	; (8080e3c <loop+0x260>)
 8080d28:	7018      	strb	r0, [r3, #0]
        return waitConditionWhile(_condition, []{ return true; });
 8080d2a:	f7ff fc33 	bl	8080594 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
    if (verboseMode) Particle.publish("State","Waiting for Response",PRIVATE);
 8080d2e:	4b50      	ldr	r3, [pc, #320]	; (8080e70 <loop+0x294>)
 8080d30:	781b      	ldrb	r3, [r3, #0]
 8080d32:	b163      	cbz	r3, 8080d4e <loop+0x172>
 8080d34:	2300      	movs	r3, #0
 8080d36:	f88d 3000 	strb.w	r3, [sp]
 8080d3a:	4b4e      	ldr	r3, [pc, #312]	; (8080e74 <loop+0x298>)
 8080d3c:	a802      	add	r0, sp, #8
 8080d3e:	781b      	ldrb	r3, [r3, #0]
 8080d40:	4a4d      	ldr	r2, [pc, #308]	; (8080e78 <loop+0x29c>)
 8080d42:	494e      	ldr	r1, [pc, #312]	; (8080e7c <loop+0x2a0>)
 8080d44:	f7ff fa98 	bl	8080278 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 8080d48:	a803      	add	r0, sp, #12
 8080d4a:	f7ff fc71 	bl	8080630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080d4e:	f000 fb57 	bl	8081400 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 8080d52:	4b4b      	ldr	r3, [pc, #300]	; (8080e80 <loop+0x2a4>)
 8080d54:	6018      	str	r0, [r3, #0]
    pettingEnabled = true;
 8080d56:	2301      	movs	r3, #1
 8080d58:	702b      	strb	r3, [r5, #0]
    state = RESP_WAIT_STATE;                            // Wait for Response
 8080d5a:	2305      	movs	r3, #5
 8080d5c:	e782      	b.n	8080c64 <loop+0x88>
    if (state != oldState) publishStateTransition();
 8080d5e:	4b35      	ldr	r3, [pc, #212]	; (8080e34 <loop+0x258>)
 8080d60:	781b      	ldrb	r3, [r3, #0]
 8080d62:	2b05      	cmp	r3, #5
 8080d64:	d001      	beq.n	8080d6a <loop+0x18e>
 8080d66:	f7ff feef 	bl	8080b48 <_Z22publishStateTransitionv>
    if (!dataInFlight)                                  // Response received
 8080d6a:	4b46      	ldr	r3, [pc, #280]	; (8080e84 <loop+0x2a8>)
 8080d6c:	781d      	ldrb	r5, [r3, #0]
 8080d6e:	b9bd      	cbnz	r5, 8080da0 <loop+0x1c4>
      state = IDLE_STATE;
 8080d70:	2302      	movs	r3, #2
 8080d72:	7023      	strb	r3, [r4, #0]
 8080d74:	f7ff fc0e 	bl	8080594 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
      if (verboseMode) Particle.publish("State","Idle",PRIVATE);
 8080d78:	4b3d      	ldr	r3, [pc, #244]	; (8080e70 <loop+0x294>)
 8080d7a:	781b      	ldrb	r3, [r3, #0]
 8080d7c:	b15b      	cbz	r3, 8080d96 <loop+0x1ba>
 8080d7e:	4b3d      	ldr	r3, [pc, #244]	; (8080e74 <loop+0x298>)
 8080d80:	f88d 5000 	strb.w	r5, [sp]
 8080d84:	781b      	ldrb	r3, [r3, #0]
 8080d86:	4a40      	ldr	r2, [pc, #256]	; (8080e88 <loop+0x2ac>)
 8080d88:	a802      	add	r0, sp, #8
 8080d8a:	493c      	ldr	r1, [pc, #240]	; (8080e7c <loop+0x2a0>)
 8080d8c:	f7ff fa74 	bl	8080278 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 8080d90:	a803      	add	r0, sp, #12
 8080d92:	f7ff fc4d 	bl	8080630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080d96:	f000 fb33 	bl	8081400 <HAL_Timer_Get_Milli_Seconds>
      lastPublish = millis();
 8080d9a:	4b39      	ldr	r3, [pc, #228]	; (8080e80 <loop+0x2a4>)
 8080d9c:	6018      	str	r0, [r3, #0]
 8080d9e:	e787      	b.n	8080cb0 <loop+0xd4>
 8080da0:	f000 fb2e 	bl	8081400 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp >= webhookWait) {                                         // If it takes too long - will need to reset
 8080da4:	4b31      	ldr	r3, [pc, #196]	; (8080e6c <loop+0x290>)
 8080da6:	681b      	ldr	r3, [r3, #0]
 8080da8:	1ac0      	subs	r0, r0, r3
 8080daa:	4b38      	ldr	r3, [pc, #224]	; (8080e8c <loop+0x2b0>)
 8080dac:	681b      	ldr	r3, [r3, #0]
 8080dae:	4298      	cmp	r0, r3
 8080db0:	f4ff af7e 	bcc.w	8080cb0 <loop+0xd4>
 8080db4:	f000 fb24 	bl	8081400 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 8080db8:	4b2a      	ldr	r3, [pc, #168]	; (8080e64 <loop+0x288>)
 8080dba:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;  // Response timed out
 8080dbc:	2301      	movs	r3, #1
 8080dbe:	7023      	strb	r3, [r4, #0]
 8080dc0:	f7ff fbe8 	bl	8080594 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
      Particle.publish("State","Response Timeout Error",PRIVATE);
 8080dc4:	2300      	movs	r3, #0
 8080dc6:	f88d 3000 	strb.w	r3, [sp]
 8080dca:	4b2a      	ldr	r3, [pc, #168]	; (8080e74 <loop+0x298>)
 8080dcc:	4a30      	ldr	r2, [pc, #192]	; (8080e90 <loop+0x2b4>)
 8080dce:	781b      	ldrb	r3, [r3, #0]
 8080dd0:	e7da      	b.n	8080d88 <loop+0x1ac>
      if (state != oldState) publishStateTransition();
 8080dd2:	4b18      	ldr	r3, [pc, #96]	; (8080e34 <loop+0x258>)
 8080dd4:	781b      	ldrb	r3, [r3, #0]
 8080dd6:	2b01      	cmp	r3, #1
 8080dd8:	d001      	beq.n	8080dde <loop+0x202>
 8080dda:	f7ff feb5 	bl	8080b48 <_Z22publishStateTransitionv>
 8080dde:	f000 fb0f 	bl	8081400 <HAL_Timer_Get_Milli_Seconds>
      if (millis() - resetTimeStamp >= resetWait)
 8080de2:	4b20      	ldr	r3, [pc, #128]	; (8080e64 <loop+0x288>)
 8080de4:	681b      	ldr	r3, [r3, #0]
 8080de6:	1ac0      	subs	r0, r0, r3
 8080de8:	4b2a      	ldr	r3, [pc, #168]	; (8080e94 <loop+0x2b8>)
 8080dea:	681b      	ldr	r3, [r3, #0]
 8080dec:	4298      	cmp	r0, r3
 8080dee:	f4ff af5f 	bcc.w	8080cb0 <loop+0xd4>
 8080df2:	2400      	movs	r4, #0
        Particle.publish("State","ERROR_STATE - Resetting",PRIVATE);
 8080df4:	4b1f      	ldr	r3, [pc, #124]	; (8080e74 <loop+0x298>)
 8080df6:	f88d 4000 	strb.w	r4, [sp]
 8080dfa:	781b      	ldrb	r3, [r3, #0]
 8080dfc:	4a26      	ldr	r2, [pc, #152]	; (8080e98 <loop+0x2bc>)
 8080dfe:	491f      	ldr	r1, [pc, #124]	; (8080e7c <loop+0x2a0>)
 8080e00:	a802      	add	r0, sp, #8
 8080e02:	f7ff fa39 	bl	8080278 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 8080e06:	a803      	add	r0, sp, #12
 8080e08:	f7ff fc12 	bl	8080630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);                                          // Delay so publish can finish
 8080e0c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080e10:	f000 fdd4 	bl	80819bc <delay>
        if (resetCount <= 3)  System.reset();                 // Today, only way out is reset
 8080e14:	4b21      	ldr	r3, [pc, #132]	; (8080e9c <loop+0x2c0>)
 8080e16:	681b      	ldr	r3, [r3, #0]
 8080e18:	2b03      	cmp	r3, #3
 8080e1a:	dc02      	bgt.n	8080e22 <loop+0x246>
 8080e1c:	f002 fed7 	bl	8083bce <_ZN11SystemClass5resetEv>
 8080e20:	e746      	b.n	8080cb0 <loop+0xd4>
          FRAMwrite8(RESETCOUNT,0);                           // Zero the ResetCount
 8080e22:	4621      	mov	r1, r4
 8080e24:	2002      	movs	r0, #2
 8080e26:	f7ff fa81 	bl	808032c <_Z10FRAMwrite8jh>
          fullModemReset();                                   // Full Modem reset and reboot
 8080e2a:	f7ff fbd1 	bl	80805d0 <_Z14fullModemResetv>
 8080e2e:	e73f      	b.n	8080cb0 <loop+0xd4>
 8080e30:	20000178 	.word	0x20000178
 8080e34:	20000160 	.word	0x20000160
 8080e38:	20000134 	.word	0x20000134
 8080e3c:	20000121 	.word	0x20000121
 8080e40:	20000124 	.word	0x20000124
 8080e44:	2000017c 	.word	0x2000017c
 8080e48:	20000000 	.word	0x20000000
 8080e4c:	20000138 	.word	0x20000138
 8080e50:	2000010c 	.word	0x2000010c
 8080e54:	2000012c 	.word	0x2000012c
 8080e58:	080859c1 	.word	0x080859c1
 8080e5c:	200001d0 	.word	0x200001d0
 8080e60:	20000004 	.word	0x20000004
 8080e64:	20000174 	.word	0x20000174
 8080e68:	20000111 	.word	0x20000111
 8080e6c:	20000190 	.word	0x20000190
 8080e70:	2000018c 	.word	0x2000018c
 8080e74:	20000110 	.word	0x20000110
 8080e78:	08085978 	.word	0x08085978
 8080e7c:	08085a6f 	.word	0x08085a6f
 8080e80:	20000130 	.word	0x20000130
 8080e84:	20000128 	.word	0x20000128
 8080e88:	0808598d 	.word	0x0808598d
 8080e8c:	20000088 	.word	0x20000088
 8080e90:	08085992 	.word	0x08085992
 8080e94:	20000010 	.word	0x20000010
 8080e98:	080859a9 	.word	0x080859a9
 8080e9c:	20000170 	.word	0x20000170

08080ea0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 8080ea0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 8080ea2:	2614      	movs	r6, #20
 8080ea4:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 8080ea8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 8080eaa:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 8080eae:	42ae      	cmp	r6, r5
 8080eb0:	d004      	beq.n	8080ebc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 8080eb2:	4628      	mov	r0, r5
 8080eb4:	f002 fd73 	bl	808399e <_ZN6StringD1Ev>
 8080eb8:	3514      	adds	r5, #20
 8080eba:	e7f8      	b.n	8080eae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 8080ebc:	6820      	ldr	r0, [r4, #0]
 8080ebe:	f000 fd3d 	bl	808193c <free>
    AllocatorT::free(data_);
}
 8080ec2:	4620      	mov	r0, r4
 8080ec4:	bd70      	pop	{r4, r5, r6, pc}
	...

08080ec8 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>:
    static inline bool function(const T &name, Types ... args)
 8080ec8:	4602      	mov	r2, r0
        return register_function(call_raw_user_function, (void*)func, funcKey);
 8080eca:	4801      	ldr	r0, [pc, #4]	; (8080ed0 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_+0x8>)
 8080ecc:	f000 be50 	b.w	8081b70 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080ed0:	08081b45 	.word	0x08081b45

08080ed4 <setup>:
{
 8080ed4:	b530      	push	{r4, r5, lr}
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 8080ed6:	2400      	movs	r4, #0
 8080ed8:	b0a9      	sub	sp, #164	; 0xa4
  delay(1000);                                                    // Give serial time to come up
 8080eda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080ede:	f000 fd6d 	bl	80819bc <delay>
  pinMode(boosterNoFlow1Pin,INPUT);                               // Voltage Sensor Interrupt pin
 8080ee2:	2100      	movs	r1, #0
 8080ee4:	2019      	movs	r0, #25
 8080ee6:	f003 f9eb 	bl	80842c0 <pinMode>
  pinMode(boosterNoFlow2Pin,INPUT);                               // Voltage Sensor Interrupt pin
 8080eea:	2100      	movs	r1, #0
 8080eec:	201a      	movs	r0, #26
 8080eee:	f003 f9e7 	bl	80842c0 <pinMode>
  pinMode(storageTankLowPin,INPUT);                               // Voltage Sensor Interrupt pin
 8080ef2:	2100      	movs	r1, #0
 8080ef4:	201b      	movs	r0, #27
 8080ef6:	f003 f9e3 	bl	80842c0 <pinMode>
  pinMode(pump1CalledPin,INPUT);                                  // Voltage Sensor Interrupt pin
 8080efa:	2100      	movs	r1, #0
 8080efc:	201c      	movs	r0, #28
 8080efe:	f003 f9df 	bl	80842c0 <pinMode>
  pinMode(pump2CalledPin,INPUT);                                  // Voltage Sensor Interrupt pin
 8080f02:	2100      	movs	r1, #0
 8080f04:	200e      	movs	r0, #14
 8080f06:	f003 f9db 	bl	80842c0 <pinMode>
  pinMode(wakeUpPin,INPUT);                                       // This pin is active HIGH
 8080f0a:	2100      	movs	r1, #0
 8080f0c:	2011      	movs	r0, #17
 8080f0e:	f003 f9d7 	bl	80842c0 <pinMode>
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input
 8080f12:	2100      	movs	r1, #0
 8080f14:	2005      	movs	r0, #5
 8080f16:	f003 f9d3 	bl	80842c0 <pinMode>
  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
 8080f1a:	2101      	movs	r1, #1
 8080f1c:	2007      	movs	r0, #7
 8080f1e:	f003 f9cf 	bl	80842c0 <pinMode>
  pinMode(tmp36Shutdwn,OUTPUT);                                   // Supports shutting down the TMP-36 to save juice
 8080f22:	2101      	movs	r1, #1
 8080f24:	201d      	movs	r0, #29
 8080f26:	f003 f9cb 	bl	80842c0 <pinMode>
  digitalWrite(tmp36Shutdwn, HIGH);                               // Turns on the temp sensor
 8080f2a:	2101      	movs	r1, #1
 8080f2c:	201d      	movs	r0, #29
 8080f2e:	f003 f9d8 	bl	80842e2 <digitalWrite>
  pinMode(donePin,OUTPUT);                                        // Allows us to pet the watchdog
 8080f32:	2101      	movs	r1, #1
 8080f34:	2006      	movs	r0, #6
 8080f36:	f003 f9c3 	bl	80842c0 <pinMode>
  watchdogISR();                                                  // Pet the watchdog
 8080f3a:	f7ff f97d 	bl	8080238 <_Z11watchdogISRv>
  pinMode(hardResetPin,OUTPUT);                                   // For a hard reset active HIGH
 8080f3e:	2101      	movs	r1, #1
 8080f40:	2004      	movs	r0, #4
 8080f42:	f003 f9bd 	bl	80842c0 <pinMode>
    static String deviceID(void) { return spark_deviceID(); }
 8080f46:	a804      	add	r0, sp, #16
 8080f48:	f000 fc50 	bl	80817ec <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
 8080f4c:	2300      	movs	r3, #0
 8080f4e:	227d      	movs	r2, #125	; 0x7d
 8080f50:	a908      	add	r1, sp, #32
 8080f52:	a804      	add	r0, sp, #16
 8080f54:	f002 fdd4 	bl	8083b00 <_ZNK6String8getBytesEPhjj>
 8080f58:	4623      	mov	r3, r4
 8080f5a:	4622      	mov	r2, r4
 8080f5c:	4970      	ldr	r1, [pc, #448]	; (8081120 <setup+0x24c>)
 8080f5e:	e9cd 4400 	strd	r4, r4, [sp]
 8080f62:	a808      	add	r0, sp, #32
 8080f64:	f000 fc52 	bl	808180c <spark_subscribe>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 8080f68:	4623      	mov	r3, r4
 8080f6a:	2202      	movs	r2, #2
 8080f6c:	496d      	ldr	r1, [pc, #436]	; (8081124 <setup+0x250>)
 8080f6e:	486e      	ldr	r0, [pc, #440]	; (8081128 <setup+0x254>)
 8080f70:	f000 fc14 	bl	808179c <spark_variable>
 8080f74:	4623      	mov	r3, r4
 8080f76:	2204      	movs	r2, #4
 8080f78:	496c      	ldr	r1, [pc, #432]	; (808112c <setup+0x258>)
 8080f7a:	486d      	ldr	r0, [pc, #436]	; (8081130 <setup+0x25c>)
 8080f7c:	f000 fc0e 	bl	808179c <spark_variable>
 8080f80:	4623      	mov	r3, r4
 8080f82:	2202      	movs	r2, #2
 8080f84:	496b      	ldr	r1, [pc, #428]	; (8081134 <setup+0x260>)
 8080f86:	486c      	ldr	r0, [pc, #432]	; (8081138 <setup+0x264>)
 8080f88:	f000 fc08 	bl	808179c <spark_variable>
 8080f8c:	4623      	mov	r3, r4
 8080f8e:	2202      	movs	r2, #2
 8080f90:	496a      	ldr	r1, [pc, #424]	; (808113c <setup+0x268>)
 8080f92:	486b      	ldr	r0, [pc, #428]	; (8081140 <setup+0x26c>)
 8080f94:	f000 fc02 	bl	808179c <spark_variable>
 8080f98:	496a      	ldr	r1, [pc, #424]	; (8081144 <setup+0x270>)
 8080f9a:	4623      	mov	r3, r4
 8080f9c:	2204      	movs	r2, #4
 8080f9e:	6809      	ldr	r1, [r1, #0]
 8080fa0:	4869      	ldr	r0, [pc, #420]	; (8081148 <setup+0x274>)
 8080fa2:	f000 fbfb 	bl	808179c <spark_variable>
 8080fa6:	4623      	mov	r3, r4
 8080fa8:	2202      	movs	r2, #2
 8080faa:	4968      	ldr	r1, [pc, #416]	; (808114c <setup+0x278>)
 8080fac:	4868      	ldr	r0, [pc, #416]	; (8081150 <setup+0x27c>)
 8080fae:	f000 fbf5 	bl	808179c <spark_variable>
 8080fb2:	4623      	mov	r3, r4
 8080fb4:	2202      	movs	r2, #2
 8080fb6:	4967      	ldr	r1, [pc, #412]	; (8081154 <setup+0x280>)
 8080fb8:	4867      	ldr	r0, [pc, #412]	; (8081158 <setup+0x284>)
 8080fba:	f000 fbef 	bl	808179c <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 8080fbe:	4a67      	ldr	r2, [pc, #412]	; (808115c <setup+0x288>)
 8080fc0:	4967      	ldr	r1, [pc, #412]	; (8081160 <setup+0x28c>)
 8080fc2:	4868      	ldr	r0, [pc, #416]	; (8081164 <setup+0x290>)
 8080fc4:	f000 fdd4 	bl	8081b70 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  Particle.function("Reset-Counts",resetCounts);
 8080fc8:	4967      	ldr	r1, [pc, #412]	; (8081168 <setup+0x294>)
 8080fca:	4868      	ldr	r0, [pc, #416]	; (808116c <setup+0x298>)
 8080fcc:	f7ff ff7c 	bl	8080ec8 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
 8080fd0:	4a67      	ldr	r2, [pc, #412]	; (8081170 <setup+0x29c>)
 8080fd2:	4968      	ldr	r1, [pc, #416]	; (8081174 <setup+0x2a0>)
 8080fd4:	4863      	ldr	r0, [pc, #396]	; (8081164 <setup+0x290>)
 8080fd6:	f000 fdcb 	bl	8081b70 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080fda:	4a67      	ldr	r2, [pc, #412]	; (8081178 <setup+0x2a4>)
 8080fdc:	4967      	ldr	r1, [pc, #412]	; (808117c <setup+0x2a8>)
 8080fde:	4861      	ldr	r0, [pc, #388]	; (8081164 <setup+0x290>)
 8080fe0:	f000 fdc6 	bl	8081b70 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  Particle.function("Verbose-Mode",setVerboseMode);
 8080fe4:	4966      	ldr	r1, [pc, #408]	; (8081180 <setup+0x2ac>)
 8080fe6:	4867      	ldr	r0, [pc, #412]	; (8081184 <setup+0x2b0>)
 8080fe8:	f7ff ff6e 	bl	8080ec8 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Timezone",setTimeZone);
 8080fec:	4966      	ldr	r1, [pc, #408]	; (8081188 <setup+0x2b4>)
 8080fee:	4867      	ldr	r0, [pc, #412]	; (808118c <setup+0x2b8>)
 8080ff0:	f7ff ff6a 	bl	8080ec8 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetPumpState",setPumpingState);
 8080ff4:	4966      	ldr	r1, [pc, #408]	; (8081190 <setup+0x2bc>)
 8080ff6:	4867      	ldr	r0, [pc, #412]	; (8081194 <setup+0x2c0>)
 8080ff8:	f7ff ff66 	bl	8080ec8 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
  if (!fram.begin()) {                                                  // You can stick the new i2c addr in here, e.g. begin(0x51);
 8080ffc:	2150      	movs	r1, #80	; 0x50
 8080ffe:	4866      	ldr	r0, [pc, #408]	; (8081198 <setup+0x2c4>)
 8081000:	f7ff f8eb 	bl	80801da <_ZN17Adafruit_FRAM_I2C5beginEh>
 8081004:	4d65      	ldr	r5, [pc, #404]	; (808119c <setup+0x2c8>)
 8081006:	2800      	cmp	r0, #0
 8081008:	d176      	bne.n	80810f8 <setup+0x224>
 808100a:	f000 f9f9 	bl	8081400 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 808100e:	4b64      	ldr	r3, [pc, #400]	; (80811a0 <setup+0x2cc>)
 8081010:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;   // Resetting did not fix the issue
 8081012:	2301      	movs	r3, #1
 8081014:	702b      	strb	r3, [r5, #0]
  resetCount = FRAMread8(RESETCOUNT);                                   // Retrive system recount data from FRAM
 8081016:	2002      	movs	r0, #2
 8081018:	f7ff f982 	bl	8080320 <_Z9FRAMread8j>
        int reason = RESET_REASON_NONE;
 808101c:	2200      	movs	r2, #0
 808101e:	4c45      	ldr	r4, [pc, #276]	; (8081134 <setup+0x260>)
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8081020:	4611      	mov	r1, r2
 8081022:	6020      	str	r0, [r4, #0]
 8081024:	a802      	add	r0, sp, #8
        int reason = RESET_REASON_NONE;
 8081026:	9202      	str	r2, [sp, #8]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8081028:	f000 f9d2 	bl	80813d0 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 808102c:	9b02      	ldr	r3, [sp, #8]
  if (System.resetReason() == RESET_REASON_PIN_RESET)                   // Check to see if we are starting from a pin reset
 808102e:	2b14      	cmp	r3, #20
 8081030:	d106      	bne.n	8081040 <setup+0x16c>
    resetCount++;
 8081032:	6821      	ldr	r1, [r4, #0]
    FRAMwrite8(RESETCOUNT,static_cast<uint8_t>(resetCount));            // If so, store incremented number - watchdog must have done This
 8081034:	2002      	movs	r0, #2
    resetCount++;
 8081036:	3101      	adds	r1, #1
 8081038:	6021      	str	r1, [r4, #0]
    FRAMwrite8(RESETCOUNT,static_cast<uint8_t>(resetCount));            // If so, store incremented number - watchdog must have done This
 808103a:	b2c9      	uxtb	r1, r1
 808103c:	f7ff f976 	bl	808032c <_Z10FRAMwrite8jh>
  if (resetCount >=6) {                                                 // If we get to resetCount 4, we are resetting without entering the main loop
 8081040:	6823      	ldr	r3, [r4, #0]
 8081042:	2b05      	cmp	r3, #5
 8081044:	dd05      	ble.n	8081052 <setup+0x17e>
    FRAMwrite8(RESETCOUNT,4);                                            // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
 8081046:	2104      	movs	r1, #4
 8081048:	2002      	movs	r0, #2
 808104a:	f7ff f96f 	bl	808032c <_Z10FRAMwrite8jh>
    fullModemReset();                                                   // This will reset the modem and the device will reboot
 808104e:	f7ff fabf 	bl	80805d0 <_Z14fullModemResetv>
  int8_t tempTimeZoneOffset = FRAMread8(TIMEZONE);                  // Load Time zone data from FRAM
 8081052:	2004      	movs	r0, #4
 8081054:	f7ff f964 	bl	8080320 <_Z9FRAMread8j>
  if (tempTimeZoneOffset > -12 && tempTimeZoneOffset < 12) Time.zone((float)tempTimeZoneOffset);
 8081058:	f100 030b 	add.w	r3, r0, #11
 808105c:	b2db      	uxtb	r3, r3
 808105e:	2b16      	cmp	r3, #22
 8081060:	d85c      	bhi.n	808111c <setup+0x248>
 8081062:	b240      	sxtb	r0, r0
 8081064:	f003 fed6 	bl	8084e14 <__aeabi_i2f>
  else Time.zone(-5);                                               // Defaults to EST if invalid value in FRAM
 8081068:	f002 fe30 	bl	8083ccc <_ZN9TimeClass4zoneEf>
  controlRegister = FRAMread8(CONTROLREGISTER);                         // Read the Control Register for system modes so they stick even after reset
 808106c:	2007      	movs	r0, #7
 808106e:	f7ff f957 	bl	8080320 <_Z9FRAMread8j>
 8081072:	4c4c      	ldr	r4, [pc, #304]	; (80811a4 <setup+0x2d0>)
  verboseMode = (0b00001000 & controlRegister);                         // verboseMode
 8081074:	4b4c      	ldr	r3, [pc, #304]	; (80811a8 <setup+0x2d4>)
  controlRegister = FRAMread8(CONTROLREGISTER);                         // Read the Control Register for system modes so they stick even after reset
 8081076:	7020      	strb	r0, [r4, #0]
  verboseMode = (0b00001000 & controlRegister);                         // verboseMode
 8081078:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 808107c:	7018      	strb	r0, [r3, #0]
  dailyPumpingMins = FRAMread16(DAILYPUMPMINUTES);                      // Reload so we don't loose track
 808107e:	2014      	movs	r0, #20
 8081080:	f7ff f95c 	bl	808033c <_Z10FRAMread16j>
 8081084:	4b33      	ldr	r3, [pc, #204]	; (8081154 <setup+0x280>)
 8081086:	6018      	str	r0, [r3, #0]
  if (controlRegister & 0b00000010) {                                   // This means we reset while pumpting
 8081088:	7823      	ldrb	r3, [r4, #0]
 808108a:	079b      	lsls	r3, r3, #30
 808108c:	d506      	bpl.n	808109c <setup+0x1c8>
    pumpingStart = FRAMread32(CURRENTCOUNTSTIME);                       // Reload the pumping start time
 808108e:	200e      	movs	r0, #14
 8081090:	f7ff f998 	bl	80803c4 <_Z10FRAMread32m>
 8081094:	2200      	movs	r2, #0
 8081096:	4b45      	ldr	r3, [pc, #276]	; (80811ac <setup+0x2d8>)
 8081098:	6018      	str	r0, [r3, #0]
 808109a:	605a      	str	r2, [r3, #4]
  stateOfCharge = int(batteryMonitor.getSoC());                         // Percentage of full charge
 808109c:	4844      	ldr	r0, [pc, #272]	; (80811b0 <setup+0x2dc>)
 808109e:	f001 f85b 	bl	8082158 <_ZN9FuelGauge6getSoCEv>
 80810a2:	f004 f8d1 	bl	8085248 <__aeabi_f2iz>
 80810a6:	4b29      	ldr	r3, [pc, #164]	; (808114c <setup+0x278>)
 80810a8:	6018      	str	r0, [r3, #0]
  if (stateOfCharge > lowBattLimit) connectToParticle();                // If not low battery, we can connect
 80810aa:	4b42      	ldr	r3, [pc, #264]	; (80811b4 <setup+0x2e0>)
 80810ac:	681b      	ldr	r3, [r3, #0]
 80810ae:	4298      	cmp	r0, r3
 80810b0:	dd01      	ble.n	80810b6 <setup+0x1e2>
 80810b2:	f7ff f9ab 	bl	808040c <_Z17connectToParticlev>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);   // The watchdog timer will signal us and we have to respond
 80810b6:	2400      	movs	r4, #0
 80810b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80810bc:	2201      	movs	r2, #1
 80810be:	493e      	ldr	r1, [pc, #248]	; (80811b8 <setup+0x2e4>)
 80810c0:	9400      	str	r4, [sp, #0]
 80810c2:	2011      	movs	r0, #17
 80810c4:	f001 f91c 	bl	8082300 <_Z15attachInterrupttPFvvE13InterruptModeah>
  if (state != ERROR_STATE) state = IDLE_STATE;                         // IDLE unless error from above code
 80810c8:	782b      	ldrb	r3, [r5, #0]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
 80810ca:	f64e 2160 	movw	r1, #60000	; 0xea60
 80810ce:	2b01      	cmp	r3, #1
 80810d0:	bf1c      	itt	ne
 80810d2:	2302      	movne	r3, #2
 80810d4:	702b      	strbne	r3, [r5, #0]
        conn_prop.size = sizeof(conn_prop);
 80810d6:	2308      	movs	r3, #8
 80810d8:	f8ad 3008 	strh.w	r3, [sp, #8]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
 80810dc:	2301      	movs	r3, #1
 80810de:	9303      	str	r3, [sp, #12]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
 80810e0:	2300      	movs	r3, #0
 80810e2:	aa02      	add	r2, sp, #8
 80810e4:	4618      	mov	r0, r3
        particle::protocol::connection_properties_t conn_prop = {0};
 80810e6:	f8ad 400a 	strh.w	r4, [sp, #10]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
 80810ea:	f000 fba7 	bl	808183c <spark_set_connection_property>
  String deviceID = System.deviceID();                                // Multiple Electrons share the same hook - keeps things straight
 80810ee:	a804      	add	r0, sp, #16
 80810f0:	f002 fc55 	bl	808399e <_ZN6StringD1Ev>
}
 80810f4:	b029      	add	sp, #164	; 0xa4
 80810f6:	bd30      	pop	{r4, r5, pc}
  else if (FRAMread8(VERSIONADDR) != VERSIONNUMBER) {                   // Check to see if the memory map in the sketch matches the data on the chip
 80810f8:	4620      	mov	r0, r4
 80810fa:	f7ff f911 	bl	8080320 <_Z9FRAMread8j>
 80810fe:	2809      	cmp	r0, #9
 8081100:	d089      	beq.n	8081016 <setup+0x142>
    ResetFRAM();                                                        // Reset the FRAM to correct the issue
 8081102:	f7ff faab 	bl	808065c <_Z9ResetFRAMv>
    if (FRAMread8(VERSIONADDR) != VERSIONNUMBER) {
 8081106:	4620      	mov	r0, r4
 8081108:	f7ff f90a 	bl	8080320 <_Z9FRAMread8j>
 808110c:	2809      	cmp	r0, #9
 808110e:	f47f af7c 	bne.w	808100a <setup+0x136>
      FRAMwrite8(CONTROLREGISTER,0);                                    // Need to reset so not in low power or low battery mode
 8081112:	4621      	mov	r1, r4
 8081114:	2007      	movs	r0, #7
 8081116:	f7ff f909 	bl	808032c <_Z10FRAMwrite8jh>
 808111a:	e77c      	b.n	8081016 <setup+0x142>
  else Time.zone(-5);                                               // Defaults to EST if invalid value in FRAM
 808111c:	4827      	ldr	r0, [pc, #156]	; (80811bc <setup+0x2e8>)
 808111e:	e7a3      	b.n	8081068 <setup+0x194>
 8081120:	08080861 	.word	0x08080861
 8081124:	20000114 	.word	0x20000114
 8081128:	08085824 	.word	0x08085824
 808112c:	40024000 	.word	0x40024000
 8081130:	080859e5 	.word	0x080859e5
 8081134:	20000170 	.word	0x20000170
 8081138:	080859ec 	.word	0x080859ec
 808113c:	20000188 	.word	0x20000188
 8081140:	080859f7 	.word	0x080859f7
 8081144:	2000000c 	.word	0x2000000c
 8081148:	08085a03 	.word	0x08085a03
 808114c:	2000017c 	.word	0x2000017c
 8081150:	08085a0b 	.word	0x08085a0b
 8081154:	20000124 	.word	0x20000124
 8081158:	08085a16 	.word	0x08085a16
 808115c:	08085a22 	.word	0x08085a22
 8081160:	0808070d 	.word	0x0808070d
 8081164:	08081b45 	.word	0x08081b45
 8081168:	08080389 	.word	0x08080389
 808116c:	08085a2d 	.word	0x08085a2d
 8081170:	08085a3a 	.word	0x08085a3a
 8081174:	0808025d 	.word	0x0808025d
 8081178:	08085a45 	.word	0x08085a45
 808117c:	0808021d 	.word	0x0808021d
 8081180:	0808090d 	.word	0x0808090d
 8081184:	08085a4e 	.word	0x08085a4e
 8081188:	08080a8d 	.word	0x08080a8d
 808118c:	08085a5b 	.word	0x08085a5b
 8081190:	080809c1 	.word	0x080809c1
 8081194:	08085a68 	.word	0x08085a68
 8081198:	20000129 	.word	0x20000129
 808119c:	20000178 	.word	0x20000178
 80811a0:	20000174 	.word	0x20000174
 80811a4:	20000120 	.word	0x20000120
 80811a8:	2000018c 	.word	0x2000018c
 80811ac:	20000168 	.word	0x20000168
 80811b0:	20000118 	.word	0x20000118
 80811b4:	20000000 	.word	0x20000000
 80811b8:	08080239 	.word	0x08080239
 80811bc:	c0a00000 	.word	0xc0a00000

080811c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 80811c0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80811c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80811c4:	4604      	mov	r4, r0
 80811c6:	460d      	mov	r5, r1
 80811c8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80811ca:	d916      	bls.n	80811fa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 80811cc:	4290      	cmp	r0, r2
 80811ce:	d215      	bcs.n	80811fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 80811d0:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 80811d4:	1a75      	subs	r5, r6, r1
 80811d6:	f1a1 0714 	sub.w	r7, r1, #20
 80811da:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 80811dc:	42b7      	cmp	r7, r6
 80811de:	d01c      	beq.n	808121a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 80811e0:	b12c      	cbz	r4, 80811ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 80811e2:	4631      	mov	r1, r6
 80811e4:	4620      	mov	r0, r4
 80811e6:	f002 fc54 	bl	8083a92 <_ZN6StringC1EOS_>
 80811ea:	7c33      	ldrb	r3, [r6, #16]
 80811ec:	7423      	strb	r3, [r4, #16]
 80811ee:	4630      	mov	r0, r6
 80811f0:	f002 fbd5 	bl	808399e <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 80811f4:	3e14      	subs	r6, #20
 80811f6:	3c14      	subs	r4, #20
 80811f8:	e7f0      	b.n	80811dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 80811fa:	d00e      	beq.n	808121a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 80811fc:	42b5      	cmp	r5, r6
 80811fe:	d00c      	beq.n	808121a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 8081200:	b12c      	cbz	r4, 808120e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 8081202:	4629      	mov	r1, r5
 8081204:	4620      	mov	r0, r4
 8081206:	f002 fc44 	bl	8083a92 <_ZN6StringC1EOS_>
 808120a:	7c2b      	ldrb	r3, [r5, #16]
 808120c:	7423      	strb	r3, [r4, #16]
 808120e:	4628      	mov	r0, r5
 8081210:	f002 fbc5 	bl	808399e <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 8081214:	3514      	adds	r5, #20
 8081216:	3414      	adds	r4, #20
 8081218:	e7f0      	b.n	80811fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 808121a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808121c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 808121c:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 808121e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 8081222:	e9c0 3300 	strd	r3, r3, [r0]
 8081226:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 8081228:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 808122a:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 808122c:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 808122e:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 8081230:	dd24      	ble.n	808127c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 8081232:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 8081236:	fb08 f007 	mul.w	r0, r8, r7
 808123a:	f000 fb77 	bl	808192c <malloc>
            if (!d) {
 808123e:	4605      	mov	r5, r0
 8081240:	b1e0      	cbz	r0, 808127c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 8081242:	e9d4 1200 	ldrd	r1, r2, [r4]
 8081246:	fb08 1202 	mla	r2, r8, r2, r1
 808124a:	f7ff ffb9 	bl	80811c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 808124e:	6820      	ldr	r0, [r4, #0]
 8081250:	f000 fb74 	bl	808193c <free>
        data_ = d;
 8081254:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 8081256:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 8081258:	e9d6 7300 	ldrd	r7, r3, [r6]
 808125c:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 8081260:	45b8      	cmp	r8, r7
 8081262:	d009      	beq.n	8081278 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 8081264:	4639      	mov	r1, r7
 8081266:	4628      	mov	r0, r5
 8081268:	f002 fc2d 	bl	8083ac6 <_ZN6StringC1ERKS_>
 808126c:	7c3b      	ldrb	r3, [r7, #16]
 808126e:	3514      	adds	r5, #20
 8081270:	f805 3c04 	strb.w	r3, [r5, #-4]
 8081274:	3714      	adds	r7, #20
 8081276:	e7f3      	b.n	8081260 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 8081278:	6873      	ldr	r3, [r6, #4]
 808127a:	6063      	str	r3, [r4, #4]
}
 808127c:	4620      	mov	r0, r4
 808127e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08081284 <_GLOBAL__sub_I_fram>:
}
 8081284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        val_(val) {
 8081288:	2400      	movs	r4, #0
 808128a:	2601      	movs	r6, #1
 808128c:	4b2d      	ldr	r3, [pc, #180]	; (8081344 <_GLOBAL__sub_I_fram+0xc0>)
 808128e:	b08c      	sub	sp, #48	; 0x30
 8081290:	601c      	str	r4, [r3, #0]
 8081292:	4b2d      	ldr	r3, [pc, #180]	; (8081348 <_GLOBAL__sub_I_fram+0xc4>)
Adafruit_FRAM_I2C fram = Adafruit_FRAM_I2C(); // Init the FRAM
 8081294:	482d      	ldr	r0, [pc, #180]	; (808134c <_GLOBAL__sub_I_fram+0xc8>)
 8081296:	701e      	strb	r6, [r3, #0]
 8081298:	f7fe ff22 	bl	80800e0 <_ZN17Adafruit_FRAM_I2CC1Ev>
        capacity_(0) {
 808129c:	e9cd 4400 	strd	r4, r4, [sp]
 80812a0:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 80812a2:	f002 fea9 	bl	8083ff8 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 80812a6:	4d2a      	ldr	r5, [pc, #168]	; (8081350 <_GLOBAL__sub_I_fram+0xcc>)
 80812a8:	4607      	mov	r7, r0
 80812aa:	46a8      	mov	r8, r5
 80812ac:	4669      	mov	r1, sp
 80812ae:	a803      	add	r0, sp, #12
 80812b0:	f7ff ffb4 	bl	808121c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 80812b4:	a903      	add	r1, sp, #12
 80812b6:	a806      	add	r0, sp, #24
 80812b8:	f7ff ffb0 	bl	808121c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 80812bc:	4b25      	ldr	r3, [pc, #148]	; (8081354 <_GLOBAL__sub_I_fram+0xd0>)
 80812be:	a906      	add	r1, sp, #24
 80812c0:	f848 3b04 	str.w	r3, [r8], #4
 80812c4:	a809      	add	r0, sp, #36	; 0x24
 80812c6:	f7ff ffa9 	bl	808121c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80812ca:	aa09      	add	r2, sp, #36	; 0x24
 80812cc:	211e      	movs	r1, #30
 80812ce:	4640      	mov	r0, r8
 80812d0:	f001 ff2c 	bl	808312c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80812d4:	a809      	add	r0, sp, #36	; 0x24
 80812d6:	f7ff fde3 	bl	8080ea0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 80812da:	a806      	add	r0, sp, #24
 80812dc:	f7ff fde0 	bl	8080ea0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80812e0:	4b1d      	ldr	r3, [pc, #116]	; (8081358 <_GLOBAL__sub_I_fram+0xd4>)
 80812e2:	a803      	add	r0, sp, #12
 80812e4:	602b      	str	r3, [r5, #0]
 80812e6:	622f      	str	r7, [r5, #32]
 80812e8:	f7ff fdda 	bl	8080ea0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80812ec:	4b1b      	ldr	r3, [pc, #108]	; (808135c <_GLOBAL__sub_I_fram+0xd8>)
 80812ee:	602b      	str	r3, [r5, #0]
        Serial.begin();
 80812f0:	f002 fe82 	bl	8083ff8 <_Z16_fetch_usbserialv>
 80812f4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80812f8:	f002 fe60 	bl	8083fbc <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 80812fc:	f001 fbae 	bl	8082a5c <_ZN5spark10LogManager8instanceEv>
 8081300:	4629      	mov	r1, r5
 8081302:	f001 fea6 	bl	8083052 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
 8081306:	4668      	mov	r0, sp
 8081308:	f7ff fdca 	bl	8080ea0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
              error_(SYSTEM_ERROR_NONE) {
 808130c:	4b14      	ldr	r3, [pc, #80]	; (8081360 <_GLOBAL__sub_I_fram+0xdc>)
    SleepResult() {}
 808130e:	4a15      	ldr	r2, [pc, #84]	; (8081364 <_GLOBAL__sub_I_fram+0xe0>)
              error_(SYSTEM_ERROR_NONE) {
 8081310:	601c      	str	r4, [r3, #0]
 8081312:	809c      	strh	r4, [r3, #4]
    SleepResult() {}
 8081314:	719c      	strb	r4, [r3, #6]
 8081316:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 8081318:	2002      	movs	r0, #2
 808131a:	f000 f9e9 	bl	80816f0 <set_system_mode>
SYSTEM_THREAD(ENABLED);         // Means my code will not be held up by Particle processes.
 808131e:	4621      	mov	r1, r4
 8081320:	4630      	mov	r0, r6
 8081322:	f000 f9fd 	bl	8081720 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
 8081326:	4631      	mov	r1, r6
 8081328:	2004      	movs	r0, #4
 808132a:	f000 f849 	bl	80813c0 <HAL_Feature_Set>
FuelGauge batteryMonitor;       // Prototype for the fuel gauge (included in Particle core library)
 808132e:	4621      	mov	r1, r4
 8081330:	480d      	ldr	r0, [pc, #52]	; (8081368 <_GLOBAL__sub_I_fram+0xe4>)
 8081332:	f000 fec3 	bl	80820bc <_ZN9FuelGaugeC1Eb>
PMIC power;                      //Initalize the PMIC class so you can call the Power Management functions below.
 8081336:	4621      	mov	r1, r4
 8081338:	480c      	ldr	r0, [pc, #48]	; (808136c <_GLOBAL__sub_I_fram+0xe8>)
 808133a:	f002 fa86 	bl	808384a <_ZN4PMICC1Eb>
}
 808133e:	b00c      	add	sp, #48	; 0x30
 8081340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081344:	2000010c 	.word	0x2000010c
 8081348:	20000110 	.word	0x20000110
 808134c:	20000129 	.word	0x20000129
 8081350:	2000013c 	.word	0x2000013c
 8081354:	08085a80 	.word	0x08085a80
 8081358:	08085bdc 	.word	0x08085bdc
 808135c:	08085a98 	.word	0x08085a98
 8081360:	20000100 	.word	0x20000100
 8081364:	ffff0000 	.word	0xffff0000
 8081368:	20000118 	.word	0x20000118
 808136c:	20000161 	.word	0x20000161

08081370 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8081370:	b508      	push	{r3, lr}
 8081372:	4b02      	ldr	r3, [pc, #8]	; (808137c <inet_gethostbyname+0xc>)
 8081374:	681b      	ldr	r3, [r3, #0]
 8081376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081378:	9301      	str	r3, [sp, #4]
 808137a:	bd08      	pop	{r3, pc}
 808137c:	08060020 	.word	0x08060020

08081380 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 8081380:	b508      	push	{r3, lr}
 8081382:	4b02      	ldr	r3, [pc, #8]	; (808138c <os_mutex_recursive_create+0xc>)
 8081384:	681b      	ldr	r3, [r3, #0]
 8081386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081388:	9301      	str	r3, [sp, #4]
 808138a:	bd08      	pop	{r3, pc}
 808138c:	080401d0 	.word	0x080401d0

08081390 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 8081390:	b508      	push	{r3, lr}
 8081392:	4b02      	ldr	r3, [pc, #8]	; (808139c <os_mutex_recursive_destroy+0xc>)
 8081394:	681b      	ldr	r3, [r3, #0]
 8081396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081398:	9301      	str	r3, [sp, #4]
 808139a:	bd08      	pop	{r3, pc}
 808139c:	080401d0 	.word	0x080401d0

080813a0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80813a0:	b508      	push	{r3, lr}
 80813a2:	4b02      	ldr	r3, [pc, #8]	; (80813ac <os_mutex_recursive_lock+0xc>)
 80813a4:	681b      	ldr	r3, [r3, #0]
 80813a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80813a8:	9301      	str	r3, [sp, #4]
 80813aa:	bd08      	pop	{r3, pc}
 80813ac:	080401d0 	.word	0x080401d0

080813b0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80813b0:	b508      	push	{r3, lr}
 80813b2:	4b02      	ldr	r3, [pc, #8]	; (80813bc <os_mutex_recursive_unlock+0xc>)
 80813b4:	681b      	ldr	r3, [r3, #0]
 80813b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80813b8:	9301      	str	r3, [sp, #4]
 80813ba:	bd08      	pop	{r3, pc}
 80813bc:	080401d0 	.word	0x080401d0

080813c0 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 80813c0:	b508      	push	{r3, lr}
 80813c2:	4b02      	ldr	r3, [pc, #8]	; (80813cc <HAL_Feature_Set+0xc>)
 80813c4:	681b      	ldr	r3, [r3, #0]
 80813c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80813c8:	9301      	str	r3, [sp, #4]
 80813ca:	bd08      	pop	{r3, pc}
 80813cc:	080401b8 	.word	0x080401b8

080813d0 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80813d0:	b508      	push	{r3, lr}
 80813d2:	4b02      	ldr	r3, [pc, #8]	; (80813dc <HAL_Core_Get_Last_Reset_Info+0xc>)
 80813d4:	681b      	ldr	r3, [r3, #0]
 80813d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80813d8:	9301      	str	r3, [sp, #4]
 80813da:	bd08      	pop	{r3, pc}
 80813dc:	080401b8 	.word	0x080401b8

080813e0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80813e0:	b508      	push	{r3, lr}
 80813e2:	4b02      	ldr	r3, [pc, #8]	; (80813ec <HAL_RNG_GetRandomNumber+0xc>)
 80813e4:	681b      	ldr	r3, [r3, #0]
 80813e6:	685b      	ldr	r3, [r3, #4]
 80813e8:	9301      	str	r3, [sp, #4]
 80813ea:	bd08      	pop	{r3, pc}
 80813ec:	0804019c 	.word	0x0804019c

080813f0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80813f0:	b508      	push	{r3, lr}
 80813f2:	4b02      	ldr	r3, [pc, #8]	; (80813fc <HAL_Delay_Microseconds+0xc>)
 80813f4:	681b      	ldr	r3, [r3, #0]
 80813f6:	68db      	ldr	r3, [r3, #12]
 80813f8:	9301      	str	r3, [sp, #4]
 80813fa:	bd08      	pop	{r3, pc}
 80813fc:	0804019c 	.word	0x0804019c

08081400 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8081400:	b508      	push	{r3, lr}
 8081402:	4b02      	ldr	r3, [pc, #8]	; (808140c <HAL_Timer_Get_Milli_Seconds+0xc>)
 8081404:	681b      	ldr	r3, [r3, #0]
 8081406:	695b      	ldr	r3, [r3, #20]
 8081408:	9301      	str	r3, [sp, #4]
 808140a:	bd08      	pop	{r3, pc}
 808140c:	0804019c 	.word	0x0804019c

08081410 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 8081410:	b508      	push	{r3, lr}
 8081412:	4b02      	ldr	r3, [pc, #8]	; (808141c <hal_rtc_time_is_valid+0xc>)
 8081414:	681b      	ldr	r3, [r3, #0]
 8081416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081418:	9301      	str	r3, [sp, #4]
 808141a:	bd08      	pop	{r3, pc}
 808141c:	0804019c 	.word	0x0804019c

08081420 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 8081420:	b508      	push	{r3, lr}
 8081422:	4b02      	ldr	r3, [pc, #8]	; (808142c <hal_timer_millis+0xc>)
 8081424:	681b      	ldr	r3, [r3, #0]
 8081426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081428:	9301      	str	r3, [sp, #4]
 808142a:	bd08      	pop	{r3, pc}
 808142c:	0804019c 	.word	0x0804019c

08081430 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 8081430:	b508      	push	{r3, lr}
 8081432:	4b02      	ldr	r3, [pc, #8]	; (808143c <hal_rtc_get_time+0xc>)
 8081434:	681b      	ldr	r3, [r3, #0]
 8081436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8081438:	9301      	str	r3, [sp, #4]
 808143a:	bd08      	pop	{r3, pc}
 808143c:	0804019c 	.word	0x0804019c

08081440 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8081440:	b508      	push	{r3, lr}
 8081442:	4b02      	ldr	r3, [pc, #8]	; (808144c <HAL_Pin_Mode+0xc>)
 8081444:	681b      	ldr	r3, [r3, #0]
 8081446:	689b      	ldr	r3, [r3, #8]
 8081448:	9301      	str	r3, [sp, #4]
 808144a:	bd08      	pop	{r3, pc}
 808144c:	080401b0 	.word	0x080401b0

08081450 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8081450:	b508      	push	{r3, lr}
 8081452:	4b02      	ldr	r3, [pc, #8]	; (808145c <HAL_Get_Pin_Mode+0xc>)
 8081454:	681b      	ldr	r3, [r3, #0]
 8081456:	68db      	ldr	r3, [r3, #12]
 8081458:	9301      	str	r3, [sp, #4]
 808145a:	bd08      	pop	{r3, pc}
 808145c:	080401b0 	.word	0x080401b0

08081460 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8081460:	b508      	push	{r3, lr}
 8081462:	4b02      	ldr	r3, [pc, #8]	; (808146c <HAL_GPIO_Write+0xc>)
 8081464:	681b      	ldr	r3, [r3, #0]
 8081466:	691b      	ldr	r3, [r3, #16]
 8081468:	9301      	str	r3, [sp, #4]
 808146a:	bd08      	pop	{r3, pc}
 808146c:	080401b0 	.word	0x080401b0

08081470 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 8081470:	b508      	push	{r3, lr}
 8081472:	4b02      	ldr	r3, [pc, #8]	; (808147c <HAL_Interrupts_Attach+0xc>)
 8081474:	681b      	ldr	r3, [r3, #0]
 8081476:	699b      	ldr	r3, [r3, #24]
 8081478:	9301      	str	r3, [sp, #4]
 808147a:	bd08      	pop	{r3, pc}
 808147c:	080401b0 	.word	0x080401b0

08081480 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 8081480:	b508      	push	{r3, lr}
 8081482:	4b02      	ldr	r3, [pc, #8]	; (808148c <HAL_Interrupts_Detach+0xc>)
 8081484:	681b      	ldr	r3, [r3, #0]
 8081486:	69db      	ldr	r3, [r3, #28]
 8081488:	9301      	str	r3, [sp, #4]
 808148a:	bd08      	pop	{r3, pc}
 808148c:	080401b0 	.word	0x080401b0

08081490 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 8081490:	b508      	push	{r3, lr}
 8081492:	4b02      	ldr	r3, [pc, #8]	; (808149c <hal_i2c_begin+0xc>)
 8081494:	681b      	ldr	r3, [r3, #0]
 8081496:	68db      	ldr	r3, [r3, #12]
 8081498:	9301      	str	r3, [sp, #4]
 808149a:	bd08      	pop	{r3, pc}
 808149c:	080401ac 	.word	0x080401ac

080814a0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80814a0:	b508      	push	{r3, lr}
 80814a2:	4b02      	ldr	r3, [pc, #8]	; (80814ac <hal_i2c_begin_transmission+0xc>)
 80814a4:	681b      	ldr	r3, [r3, #0]
 80814a6:	699b      	ldr	r3, [r3, #24]
 80814a8:	9301      	str	r3, [sp, #4]
 80814aa:	bd08      	pop	{r3, pc}
 80814ac:	080401ac 	.word	0x080401ac

080814b0 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80814b0:	b508      	push	{r3, lr}
 80814b2:	4b02      	ldr	r3, [pc, #8]	; (80814bc <hal_i2c_end_transmission+0xc>)
 80814b4:	681b      	ldr	r3, [r3, #0]
 80814b6:	69db      	ldr	r3, [r3, #28]
 80814b8:	9301      	str	r3, [sp, #4]
 80814ba:	bd08      	pop	{r3, pc}
 80814bc:	080401ac 	.word	0x080401ac

080814c0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80814c0:	b508      	push	{r3, lr}
 80814c2:	4b02      	ldr	r3, [pc, #8]	; (80814cc <hal_i2c_write+0xc>)
 80814c4:	681b      	ldr	r3, [r3, #0]
 80814c6:	6a1b      	ldr	r3, [r3, #32]
 80814c8:	9301      	str	r3, [sp, #4]
 80814ca:	bd08      	pop	{r3, pc}
 80814cc:	080401ac 	.word	0x080401ac

080814d0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80814d0:	b508      	push	{r3, lr}
 80814d2:	4b02      	ldr	r3, [pc, #8]	; (80814dc <hal_i2c_available+0xc>)
 80814d4:	681b      	ldr	r3, [r3, #0]
 80814d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80814d8:	9301      	str	r3, [sp, #4]
 80814da:	bd08      	pop	{r3, pc}
 80814dc:	080401ac 	.word	0x080401ac

080814e0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80814e0:	b508      	push	{r3, lr}
 80814e2:	4b02      	ldr	r3, [pc, #8]	; (80814ec <hal_i2c_read+0xc>)
 80814e4:	681b      	ldr	r3, [r3, #0]
 80814e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80814e8:	9301      	str	r3, [sp, #4]
 80814ea:	bd08      	pop	{r3, pc}
 80814ec:	080401ac 	.word	0x080401ac

080814f0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80814f0:	b508      	push	{r3, lr}
 80814f2:	4b02      	ldr	r3, [pc, #8]	; (80814fc <hal_i2c_peek+0xc>)
 80814f4:	681b      	ldr	r3, [r3, #0]
 80814f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80814f8:	9301      	str	r3, [sp, #4]
 80814fa:	bd08      	pop	{r3, pc}
 80814fc:	080401ac 	.word	0x080401ac

08081500 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 8081500:	b508      	push	{r3, lr}
 8081502:	4b02      	ldr	r3, [pc, #8]	; (808150c <hal_i2c_flush+0xc>)
 8081504:	681b      	ldr	r3, [r3, #0]
 8081506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081508:	9301      	str	r3, [sp, #4]
 808150a:	bd08      	pop	{r3, pc}
 808150c:	080401ac 	.word	0x080401ac

08081510 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 8081510:	b508      	push	{r3, lr}
 8081512:	4b02      	ldr	r3, [pc, #8]	; (808151c <hal_i2c_is_enabled+0xc>)
 8081514:	681b      	ldr	r3, [r3, #0]
 8081516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081518:	9301      	str	r3, [sp, #4]
 808151a:	bd08      	pop	{r3, pc}
 808151c:	080401ac 	.word	0x080401ac

08081520 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 8081520:	b508      	push	{r3, lr}
 8081522:	4b02      	ldr	r3, [pc, #8]	; (808152c <hal_i2c_init+0xc>)
 8081524:	681b      	ldr	r3, [r3, #0]
 8081526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081528:	9301      	str	r3, [sp, #4]
 808152a:	bd08      	pop	{r3, pc}
 808152c:	080401ac 	.word	0x080401ac

08081530 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
 8081530:	b508      	push	{r3, lr}
 8081532:	4b02      	ldr	r3, [pc, #8]	; (808153c <hal_i2c_lock+0xc>)
 8081534:	681b      	ldr	r3, [r3, #0]
 8081536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081538:	9301      	str	r3, [sp, #4]
 808153a:	bd08      	pop	{r3, pc}
 808153c:	080401ac 	.word	0x080401ac

08081540 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
 8081540:	b508      	push	{r3, lr}
 8081542:	4b02      	ldr	r3, [pc, #8]	; (808154c <hal_i2c_unlock+0xc>)
 8081544:	681b      	ldr	r3, [r3, #0]
 8081546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8081548:	9301      	str	r3, [sp, #4]
 808154a:	bd08      	pop	{r3, pc}
 808154c:	080401ac 	.word	0x080401ac

08081550 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 8081550:	b508      	push	{r3, lr}
 8081552:	4b02      	ldr	r3, [pc, #8]	; (808155c <hal_i2c_request_ex+0xc>)
 8081554:	681b      	ldr	r3, [r3, #0]
 8081556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8081558:	9301      	str	r3, [sp, #4]
 808155a:	bd08      	pop	{r3, pc}
 808155c:	080401ac 	.word	0x080401ac

08081560 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 8081560:	b508      	push	{r3, lr}
 8081562:	4b02      	ldr	r3, [pc, #8]	; (808156c <hal_spi_init+0xc>)
 8081564:	681b      	ldr	r3, [r3, #0]
 8081566:	69db      	ldr	r3, [r3, #28]
 8081568:	9301      	str	r3, [sp, #4]
 808156a:	bd08      	pop	{r3, pc}
 808156c:	080401b4 	.word	0x080401b4

08081570 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 8081570:	b508      	push	{r3, lr}
 8081572:	4b02      	ldr	r3, [pc, #8]	; (808157c <hal_spi_is_enabled+0xc>)
 8081574:	681b      	ldr	r3, [r3, #0]
 8081576:	6a1b      	ldr	r3, [r3, #32]
 8081578:	9301      	str	r3, [sp, #4]
 808157a:	bd08      	pop	{r3, pc}
 808157c:	080401b4 	.word	0x080401b4

08081580 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 8081580:	b508      	push	{r3, lr}
 8081582:	4b02      	ldr	r3, [pc, #8]	; (808158c <hal_usart_init+0xc>)
 8081584:	681b      	ldr	r3, [r3, #0]
 8081586:	699b      	ldr	r3, [r3, #24]
 8081588:	9301      	str	r3, [sp, #4]
 808158a:	bd08      	pop	{r3, pc}
 808158c:	080401c4 	.word	0x080401c4

08081590 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 8081590:	b508      	push	{r3, lr}
 8081592:	4b02      	ldr	r3, [pc, #8]	; (808159c <hal_usart_end+0xc>)
 8081594:	681b      	ldr	r3, [r3, #0]
 8081596:	6a1b      	ldr	r3, [r3, #32]
 8081598:	9301      	str	r3, [sp, #4]
 808159a:	bd08      	pop	{r3, pc}
 808159c:	080401c4 	.word	0x080401c4

080815a0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80815a0:	b508      	push	{r3, lr}
 80815a2:	4b02      	ldr	r3, [pc, #8]	; (80815ac <hal_usart_write+0xc>)
 80815a4:	681b      	ldr	r3, [r3, #0]
 80815a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80815a8:	9301      	str	r3, [sp, #4]
 80815aa:	bd08      	pop	{r3, pc}
 80815ac:	080401c4 	.word	0x080401c4

080815b0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80815b0:	b508      	push	{r3, lr}
 80815b2:	4b02      	ldr	r3, [pc, #8]	; (80815bc <hal_usart_available+0xc>)
 80815b4:	681b      	ldr	r3, [r3, #0]
 80815b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80815b8:	9301      	str	r3, [sp, #4]
 80815ba:	bd08      	pop	{r3, pc}
 80815bc:	080401c4 	.word	0x080401c4

080815c0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80815c0:	b508      	push	{r3, lr}
 80815c2:	4b02      	ldr	r3, [pc, #8]	; (80815cc <hal_usart_read+0xc>)
 80815c4:	681b      	ldr	r3, [r3, #0]
 80815c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80815c8:	9301      	str	r3, [sp, #4]
 80815ca:	bd08      	pop	{r3, pc}
 80815cc:	080401c4 	.word	0x080401c4

080815d0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80815d0:	b508      	push	{r3, lr}
 80815d2:	4b02      	ldr	r3, [pc, #8]	; (80815dc <hal_usart_peek+0xc>)
 80815d4:	681b      	ldr	r3, [r3, #0]
 80815d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80815d8:	9301      	str	r3, [sp, #4]
 80815da:	bd08      	pop	{r3, pc}
 80815dc:	080401c4 	.word	0x080401c4

080815e0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80815e0:	b508      	push	{r3, lr}
 80815e2:	4b02      	ldr	r3, [pc, #8]	; (80815ec <hal_usart_flush+0xc>)
 80815e4:	681b      	ldr	r3, [r3, #0]
 80815e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80815e8:	9301      	str	r3, [sp, #4]
 80815ea:	bd08      	pop	{r3, pc}
 80815ec:	080401c4 	.word	0x080401c4

080815f0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80815f0:	b508      	push	{r3, lr}
 80815f2:	4b02      	ldr	r3, [pc, #8]	; (80815fc <hal_usart_is_enabled+0xc>)
 80815f4:	681b      	ldr	r3, [r3, #0]
 80815f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80815f8:	9301      	str	r3, [sp, #4]
 80815fa:	bd08      	pop	{r3, pc}
 80815fc:	080401c4 	.word	0x080401c4

08081600 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 8081600:	b508      	push	{r3, lr}
 8081602:	4b02      	ldr	r3, [pc, #8]	; (808160c <hal_usart_available_data_for_write+0xc>)
 8081604:	681b      	ldr	r3, [r3, #0]
 8081606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081608:	9301      	str	r3, [sp, #4]
 808160a:	bd08      	pop	{r3, pc}
 808160c:	080401c4 	.word	0x080401c4

08081610 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 8081610:	b508      	push	{r3, lr}
 8081612:	4b02      	ldr	r3, [pc, #8]	; (808161c <hal_usart_begin_config+0xc>)
 8081614:	681b      	ldr	r3, [r3, #0]
 8081616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8081618:	9301      	str	r3, [sp, #4]
 808161a:	bd08      	pop	{r3, pc}
 808161c:	080401c4 	.word	0x080401c4

08081620 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8081620:	b508      	push	{r3, lr}
 8081622:	4b02      	ldr	r3, [pc, #8]	; (808162c <HAL_USB_USART_Init+0xc>)
 8081624:	681b      	ldr	r3, [r3, #0]
 8081626:	681b      	ldr	r3, [r3, #0]
 8081628:	9301      	str	r3, [sp, #4]
 808162a:	bd08      	pop	{r3, pc}
 808162c:	0806001c 	.word	0x0806001c

08081630 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 8081630:	b508      	push	{r3, lr}
 8081632:	4b02      	ldr	r3, [pc, #8]	; (808163c <HAL_USB_USART_Begin+0xc>)
 8081634:	681b      	ldr	r3, [r3, #0]
 8081636:	685b      	ldr	r3, [r3, #4]
 8081638:	9301      	str	r3, [sp, #4]
 808163a:	bd08      	pop	{r3, pc}
 808163c:	0806001c 	.word	0x0806001c

08081640 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 8081640:	b508      	push	{r3, lr}
 8081642:	4b02      	ldr	r3, [pc, #8]	; (808164c <HAL_USB_USART_End+0xc>)
 8081644:	681b      	ldr	r3, [r3, #0]
 8081646:	689b      	ldr	r3, [r3, #8]
 8081648:	9301      	str	r3, [sp, #4]
 808164a:	bd08      	pop	{r3, pc}
 808164c:	0806001c 	.word	0x0806001c

08081650 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8081650:	b508      	push	{r3, lr}
 8081652:	4b02      	ldr	r3, [pc, #8]	; (808165c <HAL_USB_USART_Available_Data+0xc>)
 8081654:	681b      	ldr	r3, [r3, #0]
 8081656:	691b      	ldr	r3, [r3, #16]
 8081658:	9301      	str	r3, [sp, #4]
 808165a:	bd08      	pop	{r3, pc}
 808165c:	0806001c 	.word	0x0806001c

08081660 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8081660:	b508      	push	{r3, lr}
 8081662:	4b02      	ldr	r3, [pc, #8]	; (808166c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8081664:	681b      	ldr	r3, [r3, #0]
 8081666:	695b      	ldr	r3, [r3, #20]
 8081668:	9301      	str	r3, [sp, #4]
 808166a:	bd08      	pop	{r3, pc}
 808166c:	0806001c 	.word	0x0806001c

08081670 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081670:	b508      	push	{r3, lr}
 8081672:	4b02      	ldr	r3, [pc, #8]	; (808167c <HAL_USB_USART_Receive_Data+0xc>)
 8081674:	681b      	ldr	r3, [r3, #0]
 8081676:	699b      	ldr	r3, [r3, #24]
 8081678:	9301      	str	r3, [sp, #4]
 808167a:	bd08      	pop	{r3, pc}
 808167c:	0806001c 	.word	0x0806001c

08081680 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081680:	b508      	push	{r3, lr}
 8081682:	4b02      	ldr	r3, [pc, #8]	; (808168c <HAL_USB_USART_Send_Data+0xc>)
 8081684:	681b      	ldr	r3, [r3, #0]
 8081686:	69db      	ldr	r3, [r3, #28]
 8081688:	9301      	str	r3, [sp, #4]
 808168a:	bd08      	pop	{r3, pc}
 808168c:	0806001c 	.word	0x0806001c

08081690 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8081690:	b508      	push	{r3, lr}
 8081692:	4b02      	ldr	r3, [pc, #8]	; (808169c <HAL_USB_USART_Flush_Data+0xc>)
 8081694:	681b      	ldr	r3, [r3, #0]
 8081696:	6a1b      	ldr	r3, [r3, #32]
 8081698:	9301      	str	r3, [sp, #4]
 808169a:	bd08      	pop	{r3, pc}
 808169c:	0806001c 	.word	0x0806001c

080816a0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80816a0:	b508      	push	{r3, lr}
 80816a2:	4b02      	ldr	r3, [pc, #8]	; (80816ac <panic_+0xc>)
 80816a4:	681b      	ldr	r3, [r3, #0]
 80816a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80816a8:	9301      	str	r3, [sp, #4]
 80816aa:	bd08      	pop	{r3, pc}
 80816ac:	080201a0 	.word	0x080201a0

080816b0 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 80816b0:	b508      	push	{r3, lr}
 80816b2:	4b02      	ldr	r3, [pc, #8]	; (80816bc <log_message_v+0xc>)
 80816b4:	681b      	ldr	r3, [r3, #0]
 80816b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80816b8:	9301      	str	r3, [sp, #4]
 80816ba:	bd08      	pop	{r3, pc}
 80816bc:	080201a0 	.word	0x080201a0

080816c0 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 80816c0:	b508      	push	{r3, lr}
 80816c2:	4b02      	ldr	r3, [pc, #8]	; (80816cc <log_level_name+0xc>)
 80816c4:	681b      	ldr	r3, [r3, #0]
 80816c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80816c8:	9301      	str	r3, [sp, #4]
 80816ca:	bd08      	pop	{r3, pc}
 80816cc:	080201a0 	.word	0x080201a0

080816d0 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 80816d0:	b508      	push	{r3, lr}
 80816d2:	4b02      	ldr	r3, [pc, #8]	; (80816dc <log_set_callbacks+0xc>)
 80816d4:	681b      	ldr	r3, [r3, #0]
 80816d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80816d8:	9301      	str	r3, [sp, #4]
 80816da:	bd08      	pop	{r3, pc}
 80816dc:	080201a0 	.word	0x080201a0

080816e0 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80816e0:	b508      	push	{r3, lr}
 80816e2:	4b02      	ldr	r3, [pc, #8]	; (80816ec <system_mode+0xc>)
 80816e4:	681b      	ldr	r3, [r3, #0]
 80816e6:	681b      	ldr	r3, [r3, #0]
 80816e8:	9301      	str	r3, [sp, #4]
 80816ea:	bd08      	pop	{r3, pc}
 80816ec:	080401a4 	.word	0x080401a4

080816f0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80816f0:	b508      	push	{r3, lr}
 80816f2:	4b02      	ldr	r3, [pc, #8]	; (80816fc <set_system_mode+0xc>)
 80816f4:	681b      	ldr	r3, [r3, #0]
 80816f6:	685b      	ldr	r3, [r3, #4]
 80816f8:	9301      	str	r3, [sp, #4]
 80816fa:	bd08      	pop	{r3, pc}
 80816fc:	080401a4 	.word	0x080401a4

08081700 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8081700:	b508      	push	{r3, lr}
 8081702:	4b02      	ldr	r3, [pc, #8]	; (808170c <system_delay_ms+0xc>)
 8081704:	681b      	ldr	r3, [r3, #0]
 8081706:	695b      	ldr	r3, [r3, #20]
 8081708:	9301      	str	r3, [sp, #4]
 808170a:	bd08      	pop	{r3, pc}
 808170c:	080401a4 	.word	0x080401a4

08081710 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 8081710:	b508      	push	{r3, lr}
 8081712:	4b02      	ldr	r3, [pc, #8]	; (808171c <system_sleep+0xc>)
 8081714:	681b      	ldr	r3, [r3, #0]
 8081716:	699b      	ldr	r3, [r3, #24]
 8081718:	9301      	str	r3, [sp, #4]
 808171a:	bd08      	pop	{r3, pc}
 808171c:	080401a4 	.word	0x080401a4

08081720 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8081720:	b508      	push	{r3, lr}
 8081722:	4b02      	ldr	r3, [pc, #8]	; (808172c <system_thread_set_state+0xc>)
 8081724:	681b      	ldr	r3, [r3, #0]
 8081726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081728:	9301      	str	r3, [sp, #4]
 808172a:	bd08      	pop	{r3, pc}
 808172c:	080401a4 	.word	0x080401a4

08081730 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8081730:	b508      	push	{r3, lr}
 8081732:	4b02      	ldr	r3, [pc, #8]	; (808173c <application_thread_current+0xc>)
 8081734:	681b      	ldr	r3, [r3, #0]
 8081736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8081738:	9301      	str	r3, [sp, #4]
 808173a:	bd08      	pop	{r3, pc}
 808173c:	080401a4 	.word	0x080401a4

08081740 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8081740:	b508      	push	{r3, lr}
 8081742:	4b02      	ldr	r3, [pc, #8]	; (808174c <application_thread_invoke+0xc>)
 8081744:	681b      	ldr	r3, [r3, #0]
 8081746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081748:	9301      	str	r3, [sp, #4]
 808174a:	bd08      	pop	{r3, pc}
 808174c:	080401a4 	.word	0x080401a4

08081750 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8081750:	b508      	push	{r3, lr}
 8081752:	4b02      	ldr	r3, [pc, #8]	; (808175c <system_thread_get_state+0xc>)
 8081754:	681b      	ldr	r3, [r3, #0]
 8081756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081758:	9301      	str	r3, [sp, #4]
 808175a:	bd08      	pop	{r3, pc}
 808175c:	080401a4 	.word	0x080401a4

08081760 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8081760:	b508      	push	{r3, lr}
 8081762:	4b03      	ldr	r3, [pc, #12]	; (8081770 <system_ctrl_set_app_request_handler+0x10>)
 8081764:	681b      	ldr	r3, [r3, #0]
 8081766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808176a:	9301      	str	r3, [sp, #4]
 808176c:	bd08      	pop	{r3, pc}
 808176e:	0000      	.short	0x0000
 8081770:	080401a4 	.word	0x080401a4

08081774 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8081774:	b508      	push	{r3, lr}
 8081776:	4b03      	ldr	r3, [pc, #12]	; (8081784 <system_ctrl_set_result+0x10>)
 8081778:	681b      	ldr	r3, [r3, #0]
 808177a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 808177e:	9301      	str	r3, [sp, #4]
 8081780:	bd08      	pop	{r3, pc}
 8081782:	0000      	.short	0x0000
 8081784:	080401a4 	.word	0x080401a4

08081788 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 8081788:	b508      	push	{r3, lr}
 808178a:	4b03      	ldr	r3, [pc, #12]	; (8081798 <system_reset+0x10>)
 808178c:	681b      	ldr	r3, [r3, #0]
 808178e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8081792:	9301      	str	r3, [sp, #4]
 8081794:	bd08      	pop	{r3, pc}
 8081796:	0000      	.short	0x0000
 8081798:	080401a4 	.word	0x080401a4

0808179c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 808179c:	b508      	push	{r3, lr}
 808179e:	4b02      	ldr	r3, [pc, #8]	; (80817a8 <spark_variable+0xc>)
 80817a0:	681b      	ldr	r3, [r3, #0]
 80817a2:	681b      	ldr	r3, [r3, #0]
 80817a4:	9301      	str	r3, [sp, #4]
 80817a6:	bd08      	pop	{r3, pc}
 80817a8:	080401cc 	.word	0x080401cc

080817ac <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80817ac:	b508      	push	{r3, lr}
 80817ae:	4b02      	ldr	r3, [pc, #8]	; (80817b8 <spark_function+0xc>)
 80817b0:	681b      	ldr	r3, [r3, #0]
 80817b2:	685b      	ldr	r3, [r3, #4]
 80817b4:	9301      	str	r3, [sp, #4]
 80817b6:	bd08      	pop	{r3, pc}
 80817b8:	080401cc 	.word	0x080401cc

080817bc <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80817bc:	b508      	push	{r3, lr}
 80817be:	4b02      	ldr	r3, [pc, #8]	; (80817c8 <spark_process+0xc>)
 80817c0:	681b      	ldr	r3, [r3, #0]
 80817c2:	689b      	ldr	r3, [r3, #8]
 80817c4:	9301      	str	r3, [sp, #4]
 80817c6:	bd08      	pop	{r3, pc}
 80817c8:	080401cc 	.word	0x080401cc

080817cc <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80817cc:	b508      	push	{r3, lr}
 80817ce:	4b02      	ldr	r3, [pc, #8]	; (80817d8 <spark_cloud_flag_connect+0xc>)
 80817d0:	681b      	ldr	r3, [r3, #0]
 80817d2:	68db      	ldr	r3, [r3, #12]
 80817d4:	9301      	str	r3, [sp, #4]
 80817d6:	bd08      	pop	{r3, pc}
 80817d8:	080401cc 	.word	0x080401cc

080817dc <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80817dc:	b508      	push	{r3, lr}
 80817de:	4b02      	ldr	r3, [pc, #8]	; (80817e8 <spark_cloud_flag_connected+0xc>)
 80817e0:	681b      	ldr	r3, [r3, #0]
 80817e2:	695b      	ldr	r3, [r3, #20]
 80817e4:	9301      	str	r3, [sp, #4]
 80817e6:	bd08      	pop	{r3, pc}
 80817e8:	080401cc 	.word	0x080401cc

080817ec <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 80817ec:	b508      	push	{r3, lr}
 80817ee:	4b02      	ldr	r3, [pc, #8]	; (80817f8 <spark_deviceID+0xc>)
 80817f0:	681b      	ldr	r3, [r3, #0]
 80817f2:	69db      	ldr	r3, [r3, #28]
 80817f4:	9301      	str	r3, [sp, #4]
 80817f6:	bd08      	pop	{r3, pc}
 80817f8:	080401cc 	.word	0x080401cc

080817fc <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80817fc:	b508      	push	{r3, lr}
 80817fe:	4b02      	ldr	r3, [pc, #8]	; (8081808 <spark_send_event+0xc>)
 8081800:	681b      	ldr	r3, [r3, #0]
 8081802:	6a1b      	ldr	r3, [r3, #32]
 8081804:	9301      	str	r3, [sp, #4]
 8081806:	bd08      	pop	{r3, pc}
 8081808:	080401cc 	.word	0x080401cc

0808180c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 808180c:	b508      	push	{r3, lr}
 808180e:	4b02      	ldr	r3, [pc, #8]	; (8081818 <spark_subscribe+0xc>)
 8081810:	681b      	ldr	r3, [r3, #0]
 8081812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081814:	9301      	str	r3, [sp, #4]
 8081816:	bd08      	pop	{r3, pc}
 8081818:	080401cc 	.word	0x080401cc

0808181c <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 808181c:	b508      	push	{r3, lr}
 808181e:	4b02      	ldr	r3, [pc, #8]	; (8081828 <spark_sync_time+0xc>)
 8081820:	681b      	ldr	r3, [r3, #0]
 8081822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081824:	9301      	str	r3, [sp, #4]
 8081826:	bd08      	pop	{r3, pc}
 8081828:	080401cc 	.word	0x080401cc

0808182c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 808182c:	b508      	push	{r3, lr}
 808182e:	4b02      	ldr	r3, [pc, #8]	; (8081838 <spark_sync_time_pending+0xc>)
 8081830:	681b      	ldr	r3, [r3, #0]
 8081832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081834:	9301      	str	r3, [sp, #4]
 8081836:	bd08      	pop	{r3, pc}
 8081838:	080401cc 	.word	0x080401cc

0808183c <spark_set_connection_property>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
 808183c:	b508      	push	{r3, lr}
 808183e:	4b02      	ldr	r3, [pc, #8]	; (8081848 <spark_set_connection_property+0xc>)
 8081840:	681b      	ldr	r3, [r3, #0]
 8081842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8081844:	9301      	str	r3, [sp, #4]
 8081846:	bd08      	pop	{r3, pc}
 8081848:	080401cc 	.word	0x080401cc

0808184c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 808184c:	b508      	push	{r3, lr}
 808184e:	4b02      	ldr	r3, [pc, #8]	; (8081858 <spark_set_random_seed_from_cloud_handler+0xc>)
 8081850:	681b      	ldr	r3, [r3, #0]
 8081852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081854:	9301      	str	r3, [sp, #4]
 8081856:	bd08      	pop	{r3, pc}
 8081858:	080401cc 	.word	0x080401cc

0808185c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 808185c:	b508      	push	{r3, lr}
 808185e:	4b02      	ldr	r3, [pc, #8]	; (8081868 <spark_cloud_disconnect+0xc>)
 8081860:	681b      	ldr	r3, [r3, #0]
 8081862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081864:	9301      	str	r3, [sp, #4]
 8081866:	bd08      	pop	{r3, pc}
 8081868:	080401cc 	.word	0x080401cc

0808186c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 808186c:	b508      	push	{r3, lr}
 808186e:	4b02      	ldr	r3, [pc, #8]	; (8081878 <network_connect+0xc>)
 8081870:	681b      	ldr	r3, [r3, #0]
 8081872:	685b      	ldr	r3, [r3, #4]
 8081874:	9301      	str	r3, [sp, #4]
 8081876:	bd08      	pop	{r3, pc}
 8081878:	080401c8 	.word	0x080401c8

0808187c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 808187c:	b508      	push	{r3, lr}
 808187e:	4b02      	ldr	r3, [pc, #8]	; (8081888 <network_connecting+0xc>)
 8081880:	681b      	ldr	r3, [r3, #0]
 8081882:	689b      	ldr	r3, [r3, #8]
 8081884:	9301      	str	r3, [sp, #4]
 8081886:	bd08      	pop	{r3, pc}
 8081888:	080401c8 	.word	0x080401c8

0808188c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 808188c:	b508      	push	{r3, lr}
 808188e:	4b02      	ldr	r3, [pc, #8]	; (8081898 <network_disconnect+0xc>)
 8081890:	681b      	ldr	r3, [r3, #0]
 8081892:	68db      	ldr	r3, [r3, #12]
 8081894:	9301      	str	r3, [sp, #4]
 8081896:	bd08      	pop	{r3, pc}
 8081898:	080401c8 	.word	0x080401c8

0808189c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 808189c:	b508      	push	{r3, lr}
 808189e:	4b02      	ldr	r3, [pc, #8]	; (80818a8 <network_ready+0xc>)
 80818a0:	681b      	ldr	r3, [r3, #0]
 80818a2:	691b      	ldr	r3, [r3, #16]
 80818a4:	9301      	str	r3, [sp, #4]
 80818a6:	bd08      	pop	{r3, pc}
 80818a8:	080401c8 	.word	0x080401c8

080818ac <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80818ac:	b508      	push	{r3, lr}
 80818ae:	4b02      	ldr	r3, [pc, #8]	; (80818b8 <network_on+0xc>)
 80818b0:	681b      	ldr	r3, [r3, #0]
 80818b2:	695b      	ldr	r3, [r3, #20]
 80818b4:	9301      	str	r3, [sp, #4]
 80818b6:	bd08      	pop	{r3, pc}
 80818b8:	080401c8 	.word	0x080401c8

080818bc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80818bc:	b508      	push	{r3, lr}
 80818be:	4b02      	ldr	r3, [pc, #8]	; (80818c8 <network_off+0xc>)
 80818c0:	681b      	ldr	r3, [r3, #0]
 80818c2:	699b      	ldr	r3, [r3, #24]
 80818c4:	9301      	str	r3, [sp, #4]
 80818c6:	bd08      	pop	{r3, pc}
 80818c8:	080401c8 	.word	0x080401c8

080818cc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80818cc:	b508      	push	{r3, lr}
 80818ce:	4b02      	ldr	r3, [pc, #8]	; (80818d8 <network_listen+0xc>)
 80818d0:	681b      	ldr	r3, [r3, #0]
 80818d2:	69db      	ldr	r3, [r3, #28]
 80818d4:	9301      	str	r3, [sp, #4]
 80818d6:	bd08      	pop	{r3, pc}
 80818d8:	080401c8 	.word	0x080401c8

080818dc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80818dc:	b508      	push	{r3, lr}
 80818de:	4b02      	ldr	r3, [pc, #8]	; (80818e8 <network_listening+0xc>)
 80818e0:	681b      	ldr	r3, [r3, #0]
 80818e2:	6a1b      	ldr	r3, [r3, #32]
 80818e4:	9301      	str	r3, [sp, #4]
 80818e6:	bd08      	pop	{r3, pc}
 80818e8:	080401c8 	.word	0x080401c8

080818ec <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80818ec:	b508      	push	{r3, lr}
 80818ee:	4b02      	ldr	r3, [pc, #8]	; (80818f8 <network_set_listen_timeout+0xc>)
 80818f0:	681b      	ldr	r3, [r3, #0]
 80818f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80818f4:	9301      	str	r3, [sp, #4]
 80818f6:	bd08      	pop	{r3, pc}
 80818f8:	080401c8 	.word	0x080401c8

080818fc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80818fc:	b508      	push	{r3, lr}
 80818fe:	4b02      	ldr	r3, [pc, #8]	; (8081908 <network_get_listen_timeout+0xc>)
 8081900:	681b      	ldr	r3, [r3, #0]
 8081902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081904:	9301      	str	r3, [sp, #4]
 8081906:	bd08      	pop	{r3, pc}
 8081908:	080401c8 	.word	0x080401c8

0808190c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 808190c:	b508      	push	{r3, lr}
 808190e:	4b02      	ldr	r3, [pc, #8]	; (8081918 <network_is_on+0xc>)
 8081910:	681b      	ldr	r3, [r3, #0]
 8081912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081914:	9301      	str	r3, [sp, #4]
 8081916:	bd08      	pop	{r3, pc}
 8081918:	080401c8 	.word	0x080401c8

0808191c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 808191c:	b508      	push	{r3, lr}
 808191e:	4b02      	ldr	r3, [pc, #8]	; (8081928 <network_is_off+0xc>)
 8081920:	681b      	ldr	r3, [r3, #0]
 8081922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081924:	9301      	str	r3, [sp, #4]
 8081926:	bd08      	pop	{r3, pc}
 8081928:	080401c8 	.word	0x080401c8

0808192c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 808192c:	b508      	push	{r3, lr}
 808192e:	4b02      	ldr	r3, [pc, #8]	; (8081938 <malloc+0xc>)
 8081930:	681b      	ldr	r3, [r3, #0]
 8081932:	681b      	ldr	r3, [r3, #0]
 8081934:	9301      	str	r3, [sp, #4]
 8081936:	bd08      	pop	{r3, pc}
 8081938:	080401a0 	.word	0x080401a0

0808193c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 808193c:	b508      	push	{r3, lr}
 808193e:	4b02      	ldr	r3, [pc, #8]	; (8081948 <free+0xc>)
 8081940:	681b      	ldr	r3, [r3, #0]
 8081942:	685b      	ldr	r3, [r3, #4]
 8081944:	9301      	str	r3, [sp, #4]
 8081946:	bd08      	pop	{r3, pc}
 8081948:	080401a0 	.word	0x080401a0

0808194c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 808194c:	b508      	push	{r3, lr}
 808194e:	4b02      	ldr	r3, [pc, #8]	; (8081958 <realloc+0xc>)
 8081950:	681b      	ldr	r3, [r3, #0]
 8081952:	689b      	ldr	r3, [r3, #8]
 8081954:	9301      	str	r3, [sp, #4]
 8081956:	bd08      	pop	{r3, pc}
 8081958:	080401a0 	.word	0x080401a0

0808195c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 808195c:	b508      	push	{r3, lr}
 808195e:	4b02      	ldr	r3, [pc, #8]	; (8081968 <siprintf+0xc>)
 8081960:	681b      	ldr	r3, [r3, #0]
 8081962:	691b      	ldr	r3, [r3, #16]
 8081964:	9301      	str	r3, [sp, #4]
 8081966:	bd08      	pop	{r3, pc}
 8081968:	080401a0 	.word	0x080401a0

0808196c <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 808196c:	b508      	push	{r3, lr}
 808196e:	4b02      	ldr	r3, [pc, #8]	; (8081978 <snprintf+0xc>)
 8081970:	681b      	ldr	r3, [r3, #0]
 8081972:	69db      	ldr	r3, [r3, #28]
 8081974:	9301      	str	r3, [sp, #4]
 8081976:	bd08      	pop	{r3, pc}
 8081978:	080401a0 	.word	0x080401a0

0808197c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 808197c:	b508      	push	{r3, lr}
 808197e:	4b02      	ldr	r3, [pc, #8]	; (8081988 <vsnprintf+0xc>)
 8081980:	681b      	ldr	r3, [r3, #0]
 8081982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081984:	9301      	str	r3, [sp, #4]
 8081986:	bd08      	pop	{r3, pc}
 8081988:	080401a0 	.word	0x080401a0

0808198c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 808198c:	b508      	push	{r3, lr}
 808198e:	4b02      	ldr	r3, [pc, #8]	; (8081998 <abort+0xc>)
 8081990:	681b      	ldr	r3, [r3, #0]
 8081992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081994:	9301      	str	r3, [sp, #4]
 8081996:	bd08      	pop	{r3, pc}
 8081998:	080401a0 	.word	0x080401a0

0808199c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 808199c:	b508      	push	{r3, lr}
 808199e:	4b02      	ldr	r3, [pc, #8]	; (80819a8 <_malloc_r+0xc>)
 80819a0:	681b      	ldr	r3, [r3, #0]
 80819a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80819a4:	9301      	str	r3, [sp, #4]
 80819a6:	bd08      	pop	{r3, pc}
 80819a8:	080401a0 	.word	0x080401a0

080819ac <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80819ac:	b508      	push	{r3, lr}
 80819ae:	4b02      	ldr	r3, [pc, #8]	; (80819b8 <newlib_impure_ptr_callback+0xc>)
 80819b0:	681b      	ldr	r3, [r3, #0]
 80819b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80819b4:	9301      	str	r3, [sp, #4]
 80819b6:	bd08      	pop	{r3, pc}
 80819b8:	080401a0 	.word	0x080401a0

080819bc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80819bc:	2100      	movs	r1, #0
 80819be:	f7ff be9f 	b.w	8081700 <system_delay_ms>

080819c2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80819c2:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80819c4:	6883      	ldr	r3, [r0, #8]
 80819c6:	4604      	mov	r4, r0
 80819c8:	b90b      	cbnz	r3, 80819ce <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80819ca:	f002 fd27 	bl	808441c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80819ce:	68c3      	ldr	r3, [r0, #12]
 80819d0:	4798      	blx	r3
      if (_M_manager)
 80819d2:	68a3      	ldr	r3, [r4, #8]
 80819d4:	b11b      	cbz	r3, 80819de <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80819d6:	2203      	movs	r2, #3
 80819d8:	4621      	mov	r1, r4
 80819da:	4620      	mov	r0, r4
 80819dc:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80819de:	4620      	mov	r0, r4
}
 80819e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80819e4:	2110      	movs	r1, #16
 80819e6:	f002 bd13 	b.w	8084410 <_ZdlPvj>

080819ea <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80819ea:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 80819ec:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 80819ee:	b085      	sub	sp, #20
 80819f0:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80819f2:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 80819f4:	460f      	mov	r7, r1
 80819f6:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 80819f8:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80819fa:	f003 fd56 	bl	80854aa <strlen>
 80819fe:	687b      	ldr	r3, [r7, #4]
 8081a00:	b281      	uxth	r1, r0
 8081a02:	9600      	str	r6, [sp, #0]
 8081a04:	4628      	mov	r0, r5
 8081a06:	aa03      	add	r2, sp, #12
 8081a08:	f7ff fcb2 	bl	8081370 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8081a0c:	b130      	cbz	r0, 8081a1c <_ZN5spark13CellularClass7resolveEPKc+0x32>
 8081a0e:	4631      	mov	r1, r6
 8081a10:	4620      	mov	r0, r4
 8081a12:	f000 fcd1 	bl	80823b8 <_ZN9IPAddressC1Em>
    }
 8081a16:	4620      	mov	r0, r4
 8081a18:	b005      	add	sp, #20
 8081a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8081a1c:	4620      	mov	r0, r4
 8081a1e:	a903      	add	r1, sp, #12
 8081a20:	f000 fcc2 	bl	80823a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 8081a24:	e7f7      	b.n	8081a16 <_ZN5spark13CellularClass7resolveEPKc+0x2c>

08081a26 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 8081a26:	2200      	movs	r2, #0
 8081a28:	6840      	ldr	r0, [r0, #4]
 8081a2a:	4611      	mov	r1, r2
 8081a2c:	f7ff bf56 	b.w	80818dc <network_listening>

08081a30 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 8081a30:	2200      	movs	r2, #0
 8081a32:	6840      	ldr	r0, [r0, #4]
 8081a34:	4611      	mov	r1, r2
 8081a36:	f7ff bf61 	b.w	80818fc <network_get_listen_timeout>

08081a3a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 8081a3a:	2200      	movs	r2, #0
 8081a3c:	6840      	ldr	r0, [r0, #4]
 8081a3e:	f7ff bf55 	b.w	80818ec <network_set_listen_timeout>

08081a42 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 8081a42:	2200      	movs	r2, #0
 8081a44:	6840      	ldr	r0, [r0, #4]
 8081a46:	f081 0101 	eor.w	r1, r1, #1
 8081a4a:	f7ff bf3f 	b.w	80818cc <network_listen>

08081a4e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 8081a4e:	2300      	movs	r3, #0
 8081a50:	6840      	ldr	r0, [r0, #4]
 8081a52:	461a      	mov	r2, r3
 8081a54:	4619      	mov	r1, r3
 8081a56:	f7ff bf29 	b.w	80818ac <network_on>

08081a5a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 8081a5a:	2200      	movs	r2, #0
 8081a5c:	6840      	ldr	r0, [r0, #4]
 8081a5e:	4611      	mov	r1, r2
 8081a60:	f7ff bf0c 	b.w	808187c <network_connecting>

08081a64 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8081a64:	2200      	movs	r2, #0
 8081a66:	2102      	movs	r1, #2
 8081a68:	6840      	ldr	r0, [r0, #4]
 8081a6a:	f7ff bf0f 	b.w	808188c <network_disconnect>

08081a6e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 8081a6e:	2300      	movs	r3, #0
 8081a70:	6840      	ldr	r0, [r0, #4]
 8081a72:	461a      	mov	r2, r3
 8081a74:	f7ff befa 	b.w	808186c <network_connect>

08081a78 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8081a78:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8081a7a:	2428      	movs	r4, #40	; 0x28
 8081a7c:	4b07      	ldr	r3, [pc, #28]	; (8081a9c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8081a7e:	4622      	mov	r2, r4
 8081a80:	4618      	mov	r0, r3
 8081a82:	2100      	movs	r1, #0
 8081a84:	f003 fc92 	bl	80853ac <memset>
        cid = -1;
 8081a88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8081a8c:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8081a8e:	2204      	movs	r2, #4
 8081a90:	4b03      	ldr	r3, [pc, #12]	; (8081aa0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 8081a92:	8004      	strh	r4, [r0, #0]
 8081a94:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8081a96:	4a03      	ldr	r2, [pc, #12]	; (8081aa4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 8081a98:	601a      	str	r2, [r3, #0]
 8081a9a:	bd10      	pop	{r4, pc}
 8081a9c:	2000019c 	.word	0x2000019c
 8081aa0:	20000194 	.word	0x20000194
 8081aa4:	08085ab0 	.word	0x08085ab0

08081aa8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8081aa8:	4770      	bx	lr

08081aaa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 8081aaa:	2000      	movs	r0, #0
 8081aac:	4770      	bx	lr

08081aae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8081aae:	b510      	push	{r4, lr}
 8081ab0:	4604      	mov	r4, r0
 8081ab2:	2110      	movs	r1, #16
 8081ab4:	f002 fcac 	bl	8084410 <_ZdlPvj>
 8081ab8:	4620      	mov	r0, r4
 8081aba:	bd10      	pop	{r4, pc}

08081abc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8081abc:	b508      	push	{r3, lr}
      { delete this; }
 8081abe:	f7ff fff6 	bl	8081aae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8081ac2:	bd08      	pop	{r3, pc}

08081ac4 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 8081ac4:	b510      	push	{r4, lr}
      if (_M_manager)
 8081ac6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 8081ac8:	4604      	mov	r4, r0
      if (_M_manager)
 8081aca:	b113      	cbz	r3, 8081ad2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081acc:	2203      	movs	r2, #3
 8081ace:	4601      	mov	r1, r0
 8081ad0:	4798      	blx	r3
    }
 8081ad2:	4620      	mov	r0, r4
 8081ad4:	bd10      	pop	{r4, pc}

08081ad6 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8081ad6:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8081ad8:	b530      	push	{r4, r5, lr}
        type_(type) {
 8081ada:	f64f 749c 	movw	r4, #65436	; 0xff9c
 8081ade:	6002      	str	r2, [r0, #0]
 8081ae0:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081ae2:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8081ae4:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 8081ae6:	680c      	ldr	r4, [r1, #0]
 8081ae8:	8085      	strh	r5, [r0, #4]
 8081aea:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8081aec:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 8081aee:	bd30      	pop	{r4, r5, pc}

08081af0 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8081af0:	b510      	push	{r4, lr}
 8081af2:	4604      	mov	r4, r0
    free((void*)msg_);
 8081af4:	6800      	ldr	r0, [r0, #0]
 8081af6:	f7ff ff21 	bl	808193c <free>
}
 8081afa:	4620      	mov	r0, r4
 8081afc:	bd10      	pop	{r4, pc}

08081afe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8081afe:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8081b00:	68c4      	ldr	r4, [r0, #12]
 8081b02:	b1f4      	cbz	r4, 8081b42 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 8081b04:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8081b06:	2b02      	cmp	r3, #2
 8081b08:	d103      	bne.n	8081b12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 8081b0a:	f104 000c 	add.w	r0, r4, #12
 8081b0e:	f7ff ffef 	bl	8081af0 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 8081b12:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 8081b14:	b135      	cbz	r5, 8081b24 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 8081b16:	4628      	mov	r0, r5
 8081b18:	f7ff ffd4 	bl	8081ac4 <_ZNSt14_Function_baseD1Ev>
 8081b1c:	2110      	movs	r1, #16
 8081b1e:	4628      	mov	r0, r5
 8081b20:	f002 fc76 	bl	8084410 <_ZdlPvj>
 8081b24:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8081b26:	b135      	cbz	r5, 8081b36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8081b28:	4628      	mov	r0, r5
 8081b2a:	f7ff ffcb 	bl	8081ac4 <_ZNSt14_Function_baseD1Ev>
 8081b2e:	2110      	movs	r1, #16
 8081b30:	4628      	mov	r0, r5
 8081b32:	f002 fc6d 	bl	8084410 <_ZdlPvj>
 8081b36:	4620      	mov	r0, r4
 8081b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8081b3c:	2114      	movs	r1, #20
 8081b3e:	f002 bc67 	b.w	8084410 <_ZdlPvj>
 8081b42:	bd38      	pop	{r3, r4, r5, pc}

08081b44 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8081b44:	b510      	push	{r4, lr}
 8081b46:	b088      	sub	sp, #32
 8081b48:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8081b4a:	4668      	mov	r0, sp
 8081b4c:	f001 ff71 	bl	8083a32 <_ZN6StringC1EPKc>
    return (*fn)(p);
 8081b50:	4669      	mov	r1, sp
 8081b52:	a804      	add	r0, sp, #16
 8081b54:	f001 ffb7 	bl	8083ac6 <_ZN6StringC1ERKS_>
 8081b58:	a804      	add	r0, sp, #16
 8081b5a:	47a0      	blx	r4
 8081b5c:	4604      	mov	r4, r0
 8081b5e:	a804      	add	r0, sp, #16
 8081b60:	f001 ff1d 	bl	808399e <_ZN6StringD1Ev>
    String p(param);
 8081b64:	4668      	mov	r0, sp
 8081b66:	f001 ff1a 	bl	808399e <_ZN6StringD1Ev>
}
 8081b6a:	4620      	mov	r0, r4
 8081b6c:	b008      	add	sp, #32
 8081b6e:	bd10      	pop	{r4, pc}

08081b70 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8081b70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 8081b72:	2300      	movs	r3, #0
         size = sizeof(*this);
 8081b74:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 8081b76:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 8081b7a:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8081b7c:	4669      	mov	r1, sp
 8081b7e:	461a      	mov	r2, r3
 8081b80:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 8081b82:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 8081b86:	f8ad 4000 	strh.w	r4, [sp]
 8081b8a:	f7ff fe0f 	bl	80817ac <spark_function>
}
 8081b8e:	b004      	add	sp, #16
 8081b90:	bd10      	pop	{r4, pc}

08081b92 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 8081b92:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
 8081b94:	230c      	movs	r3, #12
    spark_cloud_disconnect_options opts = {};
 8081b96:	2100      	movs	r1, #0
    opts.size = sizeof(opts);
 8081b98:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
 8081b9c:	6803      	ldr	r3, [r0, #0]
    spark_cloud_disconnect_options opts = {};
 8081b9e:	f8ad 100d 	strh.w	r1, [sp, #13]
    opts.flags = flags_;
 8081ba2:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
 8081ba6:	7a03      	ldrb	r3, [r0, #8]
    spark_cloud_disconnect_options opts = {};
 8081ba8:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.graceful = graceful_;
 8081bac:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
 8081bb0:	6843      	ldr	r3, [r0, #4]
 8081bb2:	9302      	str	r3, [sp, #8]
    opts.clear_session = clearSession_;
 8081bb4:	7a43      	ldrb	r3, [r0, #9]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 8081bb6:	a801      	add	r0, sp, #4
    opts.clear_session = clearSession_;
 8081bb8:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 8081bbc:	f7ff fe4e 	bl	808185c <spark_cloud_disconnect>
}
 8081bc0:	b005      	add	sp, #20
 8081bc2:	f85d fb04 	ldr.w	pc, [sp], #4

08081bc6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 8081bc6:	680b      	ldr	r3, [r1, #0]
 8081bc8:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 8081bca:	b113      	cbz	r3, 8081bd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 8081bcc:	685a      	ldr	r2, [r3, #4]
 8081bce:	3201      	adds	r2, #1
 8081bd0:	605a      	str	r2, [r3, #4]
      }
 8081bd2:	4770      	bx	lr

08081bd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8081bd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081bd6:	460e      	mov	r6, r1
 8081bd8:	4604      	mov	r4, r0
 8081bda:	f856 3b04 	ldr.w	r3, [r6], #4
 8081bde:	460d      	mov	r5, r1
 8081be0:	a801      	add	r0, sp, #4
 8081be2:	4631      	mov	r1, r6
 8081be4:	9300      	str	r3, [sp, #0]
 8081be6:	f7ff ffee 	bl	8081bc6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8081bea:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8081bec:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8081bee:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 8081bf0:	2300      	movs	r3, #0
	_M_pi = __tmp;
 8081bf2:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 8081bf4:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 8081bf6:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8081bf8:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 8081bfa:	f7fe fd19 	bl	8080630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081bfe:	4630      	mov	r0, r6
 8081c00:	f7fe fd16 	bl	8080630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 8081c04:	4628      	mov	r0, r5
 8081c06:	2108      	movs	r1, #8
 8081c08:	f002 fc02 	bl	8084410 <_ZdlPvj>
        return p;
    }
 8081c0c:	4620      	mov	r0, r4
 8081c0e:	b002      	add	sp, #8
 8081c10:	bd70      	pop	{r4, r5, r6, pc}

08081c12 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 8081c12:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081c14:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 8081c16:	460b      	mov	r3, r1
 8081c18:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081c1a:	c803      	ldmia	r0, {r0, r1}
 8081c1c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8081c20:	e893 0003 	ldmia.w	r3, {r0, r1}
 8081c24:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8081c28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8081c2c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8081c30:	b002      	add	sp, #8
 8081c32:	bd10      	pop	{r4, pc}

08081c34 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 8081c34:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 8081c36:	b510      	push	{r4, lr}
      if (_M_empty())
 8081c38:	b90a      	cbnz	r2, 8081c3e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8081c3a:	f002 fbef 	bl	808441c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081c3e:	68c3      	ldr	r3, [r0, #12]
    }
 8081c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081c44:	4718      	bx	r3

08081c46 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081c46:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8081c48:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8081c4a:	f100 0110 	add.w	r1, r0, #16
 8081c4e:	f7ff fff1 	bl	8081c34 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 8081c52:	bd08      	pop	{r3, pc}

08081c54 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 8081c54:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 8081c56:	b510      	push	{r4, lr}
      if (_M_empty())
 8081c58:	b90a      	cbnz	r2, 8081c5e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8081c5a:	f002 fbdf 	bl	808441c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081c5e:	68c3      	ldr	r3, [r0, #12]
    }
 8081c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081c64:	4718      	bx	r3

08081c66 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081c66:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8081c68:	6800      	ldr	r0, [r0, #0]
 8081c6a:	f100 0110 	add.w	r1, r0, #16
 8081c6e:	f7ff fff1 	bl	8081c54 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 8081c72:	bd08      	pop	{r3, pc}

08081c74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 8081c74:	b538      	push	{r3, r4, r5, lr}
 8081c76:	2300      	movs	r3, #0
 8081c78:	4604      	mov	r4, r0
 8081c7a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081c7c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 8081c7e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081c80:	f7fe fa11 	bl	80800a6 <_Znwj>
 8081c84:	b128      	cbz	r0, 8081c92 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 8081c86:	2301      	movs	r3, #1
 8081c88:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 8081c8c:	4b02      	ldr	r3, [pc, #8]	; (8081c98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8081c8e:	60c5      	str	r5, [r0, #12]
 8081c90:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081c92:	6020      	str	r0, [r4, #0]
	}
 8081c94:	4620      	mov	r0, r4
 8081c96:	bd38      	pop	{r3, r4, r5, pc}
 8081c98:	08085aec 	.word	0x08085aec

08081c9c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 8081c9c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8081c9e:	2300      	movs	r3, #0
 8081ca0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8081ca2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8081ca4:	4604      	mov	r4, r0
 8081ca6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8081ca8:	b12b      	cbz	r3, 8081cb6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081caa:	2202      	movs	r2, #2
 8081cac:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081cae:	68eb      	ldr	r3, [r5, #12]
 8081cb0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8081cb2:	68ab      	ldr	r3, [r5, #8]
 8081cb4:	60a3      	str	r3, [r4, #8]
    }
 8081cb6:	4620      	mov	r0, r4
 8081cb8:	bd38      	pop	{r3, r4, r5, pc}
	...

08081cbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 8081cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081cbe:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8081cc0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 8081cc2:	4668      	mov	r0, sp
 8081cc4:	f7ff ff07 	bl	8081ad6 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 8081cc8:	f04f 0302 	mov.w	r3, #2
 8081ccc:	e8d4 2f4f 	ldrexb	r2, [r4]
 8081cd0:	2a00      	cmp	r2, #0
 8081cd2:	d103      	bne.n	8081cdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 8081cd4:	e8c4 3f41 	strexb	r1, r3, [r4]
 8081cd8:	2900      	cmp	r1, #0
 8081cda:	d1f7      	bne.n	8081ccc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 8081cdc:	d125      	bne.n	8081d2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 8081cde:	f104 050c 	add.w	r5, r4, #12
 8081ce2:	4669      	mov	r1, sp
 8081ce4:	4628      	mov	r0, r5
 8081ce6:	f7ff fef6 	bl	8081ad6 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 8081cea:	2301      	movs	r3, #1
 8081cec:	f3bf 8f5b 	dmb	ish
 8081cf0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 8081cf2:	2000      	movs	r0, #0
 8081cf4:	f3bf 8f5b 	dmb	ish
 8081cf8:	f104 0308 	add.w	r3, r4, #8
 8081cfc:	e853 6f00 	ldrex	r6, [r3]
 8081d00:	e843 0200 	strex	r2, r0, [r3]
 8081d04:	2a00      	cmp	r2, #0
 8081d06:	d1f9      	bne.n	8081cfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 8081d08:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 8081d0c:	b16e      	cbz	r6, 8081d2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 8081d0e:	f7ff fd0f 	bl	8081730 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 8081d12:	b178      	cbz	r0, 8081d34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8081d14:	4629      	mov	r1, r5
 8081d16:	4630      	mov	r0, r6
 8081d18:	f7ff ff8c 	bl	8081c34 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 8081d1c:	4630      	mov	r0, r6
 8081d1e:	f7ff fed1 	bl	8081ac4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 8081d22:	2110      	movs	r1, #16
 8081d24:	4630      	mov	r0, r6
 8081d26:	f002 fb73 	bl	8084410 <_ZdlPvj>
        p_->setError(std::move(error));
 8081d2a:	4668      	mov	r0, sp
 8081d2c:	f7ff fee0 	bl	8081af0 <_ZN8particle5ErrorD1Ev>
    }
 8081d30:	b009      	add	sp, #36	; 0x24
 8081d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8081d34:	4631      	mov	r1, r6
 8081d36:	a802      	add	r0, sp, #8
 8081d38:	f7ff ffb0 	bl	8081c9c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 8081d3c:	68e0      	ldr	r0, [r4, #12]
 8081d3e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8081d42:	b108      	cbz	r0, 8081d48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 8081d44:	f003 fb96 	bl	8085474 <strdup>
        type_(type) {
 8081d48:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8081d4a:	2010      	movs	r0, #16
 8081d4c:	f8ad 501c 	strh.w	r5, [sp, #28]
 8081d50:	f7fe f9a9 	bl	80800a6 <_Znwj>
 8081d54:	4605      	mov	r5, r0
 8081d56:	b1e8      	cbz	r0, 8081d94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 8081d58:	2700      	movs	r7, #0
 8081d5a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081d5c:	2018      	movs	r0, #24
 8081d5e:	f7fe f9a2 	bl	80800a6 <_Znwj>
 8081d62:	4604      	mov	r4, r0
 8081d64:	b188      	cbz	r0, 8081d8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 8081d66:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8081d68:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8081d6a:	a802      	add	r0, sp, #8
 8081d6c:	f7ff ff51 	bl	8081c12 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081d70:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8081d72:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8081d74:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081d76:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8081d78:	9204      	str	r2, [sp, #16]
 8081d7a:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8081d7c:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8081d7e:	60e3      	str	r3, [r4, #12]
 8081d80:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 8081d84:	9205      	str	r2, [sp, #20]
 8081d86:	f7ff fea6 	bl	8081ad6 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 8081d8a:	4b08      	ldr	r3, [pc, #32]	; (8081dac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081d8c:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8081d8e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8081d90:	4b07      	ldr	r3, [pc, #28]	; (8081db0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 8081d92:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 8081d94:	a806      	add	r0, sp, #24
 8081d96:	f7ff feab 	bl	8081af0 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 8081d9a:	a802      	add	r0, sp, #8
 8081d9c:	f7ff fe92 	bl	8081ac4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8081da0:	2200      	movs	r2, #0
 8081da2:	4629      	mov	r1, r5
 8081da4:	4803      	ldr	r0, [pc, #12]	; (8081db4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 8081da6:	f7ff fccb 	bl	8081740 <application_thread_invoke>
 8081daa:	e7b7      	b.n	8081d1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 8081dac:	08081c47 	.word	0x08081c47
 8081db0:	08081edd 	.word	0x08081edd
 8081db4:	080819c3 	.word	0x080819c3

08081db8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8081db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8081dbc:	b08a      	sub	sp, #40	; 0x28
 8081dbe:	4605      	mov	r5, r0
 8081dc0:	460c      	mov	r4, r1
 8081dc2:	4617      	mov	r7, r2
 8081dc4:	4698      	mov	r8, r3
 8081dc6:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8081dca:	f7ff fd07 	bl	80817dc <spark_cloud_flag_connected>
 8081dce:	ae07      	add	r6, sp, #28
    if (!connected()) {
 8081dd0:	4682      	mov	sl, r0
 8081dd2:	bb38      	cbnz	r0, 8081e24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 8081dd4:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8081dd8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8081dda:	a905      	add	r1, sp, #20
 8081ddc:	4630      	mov	r0, r6
 8081dde:	f8ad 3018 	strh.w	r3, [sp, #24]
 8081de2:	f7ff fe78 	bl	8081ad6 <_ZN8particle5ErrorC1EOS0_>
 8081de6:	2014      	movs	r0, #20
 8081de8:	f7fe f95d 	bl	80800a6 <_Znwj>
 8081dec:	4604      	mov	r4, r0
 8081dee:	b148      	cbz	r0, 8081e04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8081df0:	2302      	movs	r3, #2
 8081df2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8081df4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8081df6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8081dfa:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 8081dfc:	4631      	mov	r1, r6
 8081dfe:	300c      	adds	r0, #12
 8081e00:	f7ff fe69 	bl	8081ad6 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8081e04:	4628      	mov	r0, r5
	: __shared_count(__p)
 8081e06:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8081e08:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 8081e0c:	f7ff ff32 	bl	8081c74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8081e10:	4630      	mov	r0, r6
 8081e12:	f7ff fe6d 	bl	8081af0 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 8081e16:	a805      	add	r0, sp, #20
 8081e18:	f7ff fe6a 	bl	8081af0 <_ZN8particle5ErrorD1Ev>
}
 8081e1c:	4628      	mov	r0, r5
 8081e1e:	b00a      	add	sp, #40	; 0x28
 8081e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8081e24:	230c      	movs	r3, #12
 8081e26:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8081e2a:	2014      	movs	r0, #20
 8081e2c:	e9cd aa08 	strd	sl, sl, [sp, #32]
 8081e30:	9307      	str	r3, [sp, #28]
 8081e32:	f7fe f938 	bl	80800a6 <_Znwj>
 8081e36:	4601      	mov	r1, r0
 8081e38:	b128      	cbz	r0, 8081e46 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8081e3a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 8081e3e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8081e42:	f880 a001 	strb.w	sl, [r0, #1]
 8081e46:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8081e48:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 8081e4a:	f7ff ff13 	bl	8081c74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 8081e4e:	4b22      	ldr	r3, [pc, #136]	; (8081ed8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8081e50:	2008      	movs	r0, #8
 8081e52:	9308      	str	r3, [sp, #32]
 8081e54:	f7fe f927 	bl	80800a6 <_Znwj>
 8081e58:	4682      	mov	sl, r0
 8081e5a:	b128      	cbz	r0, 8081e68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081e5c:	9b03      	ldr	r3, [sp, #12]
 8081e5e:	a904      	add	r1, sp, #16
 8081e60:	f840 3b04 	str.w	r3, [r0], #4
 8081e64:	f7ff feaf 	bl	8081bc6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8081e68:	4642      	mov	r2, r8
 8081e6a:	4639      	mov	r1, r7
 8081e6c:	4620      	mov	r0, r4
 8081e6e:	9600      	str	r6, [sp, #0]
 8081e70:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 8081e74:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8081e78:	f7ff fcc0 	bl	80817fc <spark_send_event>
 8081e7c:	b9b8      	cbnz	r0, 8081eae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 8081e7e:	9b03      	ldr	r3, [sp, #12]
 8081e80:	785b      	ldrb	r3, [r3, #1]
 8081e82:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8081e86:	b993      	cbnz	r3, 8081eae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 8081e88:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 8081e8c:	a905      	add	r1, sp, #20
 8081e8e:	a803      	add	r0, sp, #12
 8081e90:	9205      	str	r2, [sp, #20]
 8081e92:	f8ad 3018 	strh.w	r3, [sp, #24]
 8081e96:	f7ff ff11 	bl	8081cbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8081e9a:	a805      	add	r0, sp, #20
 8081e9c:	f7ff fe28 	bl	8081af0 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8081ea0:	a805      	add	r0, sp, #20
 8081ea2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8081ea4:	f7ff fe96 	bl	8081bd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 8081ea8:	a806      	add	r0, sp, #24
 8081eaa:	f7fe fbc1 	bl	8080630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081eae:	9b03      	ldr	r3, [sp, #12]
 8081eb0:	a904      	add	r1, sp, #16
 8081eb2:	a806      	add	r0, sp, #24
 8081eb4:	9305      	str	r3, [sp, #20]
 8081eb6:	f7ff fe86 	bl	8081bc6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 8081eba:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8081ebc:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8081ebe:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 8081ec0:	2300      	movs	r3, #0
	_M_pi = __tmp;
 8081ec2:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 8081ec4:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 8081ec6:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 8081ec8:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 8081eca:	f7fe fbb1 	bl	8080630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081ece:	a804      	add	r0, sp, #16
 8081ed0:	f7fe fbae 	bl	8080630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 8081ed4:	e7a2      	b.n	8081e1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 8081ed6:	bf00      	nop
 8081ed8:	08081fa1 	.word	0x08081fa1

08081edc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 8081edc:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8081ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081ee0:	4605      	mov	r5, r0
	  switch (__op)
 8081ee2:	d007      	beq.n	8081ef4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 8081ee4:	2a03      	cmp	r2, #3
 8081ee6:	d018      	beq.n	8081f1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 8081ee8:	2a01      	cmp	r2, #1
 8081eea:	d101      	bne.n	8081ef0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 8081eec:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8081eee:	6003      	str	r3, [r0, #0]
	}
 8081ef0:	2000      	movs	r0, #0
 8081ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8081ef4:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 8081ef6:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8081ef8:	f7fe f8d5 	bl	80800a6 <_Znwj>
 8081efc:	4604      	mov	r4, r0
 8081efe:	b150      	cbz	r0, 8081f16 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8081f00:	4631      	mov	r1, r6
 8081f02:	f7ff fecb 	bl	8081c9c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 8081f06:	6930      	ldr	r0, [r6, #16]
 8081f08:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8081f0c:	b108      	cbz	r0, 8081f12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 8081f0e:	f003 fab1 	bl	8085474 <strdup>
        type_(type) {
 8081f12:	6120      	str	r0, [r4, #16]
 8081f14:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 8081f16:	602c      	str	r4, [r5, #0]
	}
 8081f18:	e7ea      	b.n	8081ef0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 8081f1a:	6804      	ldr	r4, [r0, #0]
 8081f1c:	2c00      	cmp	r4, #0
 8081f1e:	d0e7      	beq.n	8081ef0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 8081f20:	f104 0010 	add.w	r0, r4, #16
 8081f24:	f7ff fde4 	bl	8081af0 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 8081f28:	4620      	mov	r0, r4
 8081f2a:	f7ff fdcb 	bl	8081ac4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8081f2e:	2118      	movs	r1, #24
 8081f30:	4620      	mov	r0, r4
 8081f32:	f002 fa6d 	bl	8084410 <_ZdlPvj>
 8081f36:	e7db      	b.n	8081ef0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

08081f38 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8081f38:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8081f3a:	2300      	movs	r3, #0
 8081f3c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8081f3e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8081f40:	4604      	mov	r4, r0
 8081f42:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8081f44:	b12b      	cbz	r3, 8081f52 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081f46:	2202      	movs	r2, #2
 8081f48:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081f4a:	68eb      	ldr	r3, [r5, #12]
 8081f4c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8081f4e:	68ab      	ldr	r3, [r5, #8]
 8081f50:	60a3      	str	r3, [r4, #8]
    }
 8081f52:	4620      	mov	r0, r4
 8081f54:	bd38      	pop	{r3, r4, r5, pc}

08081f56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 8081f56:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8081f58:	b570      	push	{r4, r5, r6, lr}
 8081f5a:	4604      	mov	r4, r0
	  switch (__op)
 8081f5c:	d007      	beq.n	8081f6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 8081f5e:	2a03      	cmp	r2, #3
 8081f60:	d012      	beq.n	8081f88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 8081f62:	2a01      	cmp	r2, #1
 8081f64:	d101      	bne.n	8081f6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 8081f66:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8081f68:	6003      	str	r3, [r0, #0]
	}
 8081f6a:	2000      	movs	r0, #0
 8081f6c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8081f6e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 8081f70:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8081f72:	f7fe f898 	bl	80800a6 <_Znwj>
 8081f76:	4605      	mov	r5, r0
 8081f78:	b120      	cbz	r0, 8081f84 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 8081f7a:	4631      	mov	r1, r6
 8081f7c:	f7ff ffdc 	bl	8081f38 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8081f80:	7c33      	ldrb	r3, [r6, #16]
 8081f82:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 8081f84:	6025      	str	r5, [r4, #0]
	}
 8081f86:	e7f0      	b.n	8081f6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 8081f88:	6804      	ldr	r4, [r0, #0]
 8081f8a:	2c00      	cmp	r4, #0
 8081f8c:	d0ed      	beq.n	8081f6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 8081f8e:	4620      	mov	r0, r4
 8081f90:	f7ff fd98 	bl	8081ac4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8081f94:	2114      	movs	r1, #20
 8081f96:	4620      	mov	r0, r4
 8081f98:	f002 fa3a 	bl	8084410 <_ZdlPvj>
 8081f9c:	e7e5      	b.n	8081f6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

08081fa0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8081fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081fa2:	4604      	mov	r4, r0
 8081fa4:	b089      	sub	sp, #36	; 0x24
 8081fa6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8081fa8:	a801      	add	r0, sp, #4
 8081faa:	4611      	mov	r1, r2
 8081fac:	f7ff fe12 	bl	8081bd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8081fb0:	b1a4      	cbz	r4, 8081fdc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 8081fb2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8081fb4:	b11d      	cbz	r5, 8081fbe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 8081fb6:	4628      	mov	r0, r5
 8081fb8:	f003 fa5c 	bl	8085474 <strdup>
 8081fbc:	4605      	mov	r5, r0
 8081fbe:	a801      	add	r0, sp, #4
 8081fc0:	a903      	add	r1, sp, #12
        type_(type) {
 8081fc2:	9503      	str	r5, [sp, #12]
 8081fc4:	f8ad 4010 	strh.w	r4, [sp, #16]
 8081fc8:	f7ff fe78 	bl	8081cbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8081fcc:	a803      	add	r0, sp, #12
 8081fce:	f7ff fd8f 	bl	8081af0 <_ZN8particle5ErrorD1Ev>
 8081fd2:	a802      	add	r0, sp, #8
 8081fd4:	f7fe fb2c 	bl	8080630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8081fd8:	b009      	add	sp, #36	; 0x24
 8081fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 8081fdc:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8081fde:	9d01      	ldr	r5, [sp, #4]
 8081fe0:	e8d5 2f4f 	ldrexb	r2, [r5]
 8081fe4:	2a00      	cmp	r2, #0
 8081fe6:	d103      	bne.n	8081ff0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 8081fe8:	e8c5 3f41 	strexb	r1, r3, [r5]
 8081fec:	2900      	cmp	r1, #0
 8081fee:	d1f7      	bne.n	8081fe0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 8081ff0:	d1ef      	bne.n	8081fd2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 8081ff2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 8081ff4:	f3bf 8f5b 	dmb	ish
 8081ff8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 8081ffa:	f3bf 8f5b 	dmb	ish
 8081ffe:	1d2b      	adds	r3, r5, #4
 8082000:	e853 6f00 	ldrex	r6, [r3]
 8082004:	e843 4200 	strex	r2, r4, [r3]
 8082008:	2a00      	cmp	r2, #0
 808200a:	d1f9      	bne.n	8082000 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 808200c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 8082010:	2e00      	cmp	r6, #0
 8082012:	d0de      	beq.n	8081fd2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 8082014:	4620      	mov	r0, r4
 8082016:	f7ff fb8b 	bl	8081730 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 808201a:	4607      	mov	r7, r0
 808201c:	b160      	cbz	r0, 8082038 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808201e:	4630      	mov	r0, r6
 8082020:	f105 010c 	add.w	r1, r5, #12
 8082024:	f7ff fe16 	bl	8081c54 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 8082028:	4630      	mov	r0, r6
 808202a:	f7ff fd4b 	bl	8081ac4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 808202e:	2110      	movs	r1, #16
 8082030:	4630      	mov	r0, r6
 8082032:	f002 f9ed 	bl	8084410 <_ZdlPvj>
 8082036:	e7cc      	b.n	8081fd2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8082038:	4631      	mov	r1, r6
 808203a:	a803      	add	r0, sp, #12
 808203c:	f7ff ff7c 	bl	8081f38 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8082040:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8082042:	2010      	movs	r0, #16
 8082044:	f88d 301c 	strb.w	r3, [sp, #28]
 8082048:	f7fe f82d 	bl	80800a6 <_Znwj>
 808204c:	4605      	mov	r5, r0
 808204e:	b1d0      	cbz	r0, 8082086 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 8082050:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082052:	2014      	movs	r0, #20
 8082054:	f7fe f827 	bl	80800a6 <_Znwj>
 8082058:	4604      	mov	r4, r0
 808205a:	b178      	cbz	r0, 808207c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 808205c:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 808205e:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8082060:	a803      	add	r0, sp, #12
 8082062:	f7ff fdd6 	bl	8081c12 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082066:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8082068:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808206a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808206c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 808206e:	9205      	str	r2, [sp, #20]
 8082070:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8082072:	60e3      	str	r3, [r4, #12]
 8082074:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 8082078:	9206      	str	r2, [sp, #24]
 808207a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 808207c:	4b06      	ldr	r3, [pc, #24]	; (8082098 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808207e:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8082080:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8082082:	4b06      	ldr	r3, [pc, #24]	; (808209c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 8082084:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 8082086:	a803      	add	r0, sp, #12
 8082088:	f7ff fd1c 	bl	8081ac4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808208c:	2200      	movs	r2, #0
 808208e:	4629      	mov	r1, r5
 8082090:	4803      	ldr	r0, [pc, #12]	; (80820a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 8082092:	f7ff fb55 	bl	8081740 <application_thread_invoke>
 8082096:	e7c7      	b.n	8082028 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 8082098:	08081c67 	.word	0x08081c67
 808209c:	08081f57 	.word	0x08081f57
 80820a0:	080819c3 	.word	0x080819c3

080820a4 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
 80820a4:	6800      	ldr	r0, [r0, #0]
 80820a6:	f000 b917 	b.w	80822d8 <_ZN7TwoWire4lockEv>

080820aa <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 80820aa:	b510      	push	{r4, lr}
 80820ac:	4604      	mov	r4, r0
      lock_(_lock) {
 80820ae:	6001      	str	r1, [r0, #0]
 80820b0:	7102      	strb	r2, [r0, #4]
    if (lock_) {
 80820b2:	b10a      	cbz	r2, 80820b8 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 80820b4:	f7ff fff6 	bl	80820a4 <_ZN9FuelGauge4lockEv>
}
 80820b8:	4620      	mov	r0, r4
 80820ba:	bd10      	pop	{r4, pc}

080820bc <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
 80820bc:	b538      	push	{r3, r4, r5, lr}
 80820be:	4604      	mov	r4, r0
 80820c0:	460d      	mov	r5, r1
            return &Wire3;
 80820c2:	f002 f973 	bl	80843ac <_Z20__fetch_global_Wire3v>
        : FuelGauge(*fuelWireInstance(), _lock)
 80820c6:	462a      	mov	r2, r5
            return &Wire3;
 80820c8:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
 80820ca:	4620      	mov	r0, r4
 80820cc:	f7ff ffed 	bl	80820aa <_ZN9FuelGaugeC1ER7TwoWireb>
}
 80820d0:	4620      	mov	r0, r4
 80820d2:	bd38      	pop	{r3, r4, r5, pc}

080820d4 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
 80820d4:	6800      	ldr	r0, [r0, #0]
 80820d6:	f000 b908 	b.w	80822ea <_ZN7TwoWire6unlockEv>

080820da <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 80820da:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80820de:	4604      	mov	r4, r0
 80820e0:	460d      	mov	r5, r1
 80820e2:	4617      	mov	r7, r2
 80820e4:	461e      	mov	r6, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
 80820e6:	f7ff ffdd 	bl	80820a4 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80820ea:	2336      	movs	r3, #54	; 0x36
 80820ec:	f88d 3000 	strb.w	r3, [sp]
 80820f0:	2300      	movs	r3, #0
 80820f2:	f04f 0801 	mov.w	r8, #1
 80820f6:	9301      	str	r3, [sp, #4]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
 80820f8:	230a      	movs	r3, #10
    i2c_.beginTransmission(config);
 80820fa:	4669      	mov	r1, sp
 80820fc:	6820      	ldr	r0, [r4, #0]
 80820fe:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8082100:	f88d 8008 	strb.w	r8, [sp, #8]
 8082104:	f000 f8c9 	bl	808229a <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
 8082108:	6820      	ldr	r0, [r4, #0]
 808210a:	4629      	mov	r1, r5
 808210c:	6803      	ldr	r3, [r0, #0]
 808210e:	689b      	ldr	r3, [r3, #8]
 8082110:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
 8082112:	4641      	mov	r1, r8
 8082114:	6820      	ldr	r0, [r4, #0]
 8082116:	f000 f8d8 	bl	80822ca <_ZN7TwoWire15endTransmissionEh>
 808211a:	4605      	mov	r5, r0
 808211c:	b140      	cbz	r0, 8082130 <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
 808211e:	f06f 059f 	mvn.w	r5, #159	; 0x9f

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 8082122:	4620      	mov	r0, r4
 8082124:	f7ff ffd6 	bl	80820d4 <_ZN9FuelGauge6unlockEv>
}
 8082128:	4628      	mov	r0, r5
 808212a:	b004      	add	sp, #16
 808212c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
 8082130:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
 8082132:	4669      	mov	r1, sp
 8082134:	6820      	ldr	r0, [r4, #0]
 8082136:	9301      	str	r3, [sp, #4]
 8082138:	f000 f87c 	bl	8082234 <_ZN7TwoWire11requestFromERK16WireTransmission>
 808213c:	2802      	cmp	r0, #2
 808213e:	d1ee      	bne.n	808211e <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
 8082140:	6820      	ldr	r0, [r4, #0]
 8082142:	6803      	ldr	r3, [r0, #0]
 8082144:	695b      	ldr	r3, [r3, #20]
 8082146:	4798      	blx	r3
 8082148:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
 808214a:	6820      	ldr	r0, [r4, #0]
 808214c:	6803      	ldr	r3, [r0, #0]
 808214e:	695b      	ldr	r3, [r3, #20]
 8082150:	4798      	blx	r3
 8082152:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
 8082154:	e7e5      	b.n	8082122 <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>
	...

08082158 <_ZN9FuelGauge6getSoCEv>:
    byte MSB = 0;
 8082158:	2300      	movs	r3, #0
float FuelGauge::getSoC() {
 808215a:	b513      	push	{r0, r1, r4, lr}
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 808215c:	2104      	movs	r1, #4
    byte MSB = 0;
 808215e:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
 8082162:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 8082166:	f10d 0206 	add.w	r2, sp, #6
 808216a:	f10d 0307 	add.w	r3, sp, #7
 808216e:	f7ff ffb4 	bl	80820da <_ZN9FuelGauge12readRegisterEhRhS0_>
 8082172:	b9a0      	cbnz	r0, 808219e <_ZN9FuelGauge6getSoCEv+0x46>
        float decimal = LSB / 256.0;
 8082174:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8082178:	f002 faa6 	bl	80846c8 <__aeabi_i2d>
 808217c:	2200      	movs	r2, #0
 808217e:	4b09      	ldr	r3, [pc, #36]	; (80821a4 <_ZN9FuelGauge6getSoCEv+0x4c>)
 8082180:	f002 fb0c 	bl	808479c <__aeabi_dmul>
 8082184:	f002 fd3c 	bl	8084c00 <__aeabi_d2f>
 8082188:	4604      	mov	r4, r0
        return MSB + decimal;
 808218a:	f89d 0006 	ldrb.w	r0, [sp, #6]
 808218e:	f002 fe41 	bl	8084e14 <__aeabi_i2f>
 8082192:	4601      	mov	r1, r0
 8082194:	4620      	mov	r0, r4
 8082196:	f002 fd89 	bl	8084cac <__addsf3>
}
 808219a:	b002      	add	sp, #8
 808219c:	bd10      	pop	{r4, pc}
        return -1.0f;
 808219e:	4802      	ldr	r0, [pc, #8]	; (80821a8 <_ZN9FuelGauge6getSoCEv+0x50>)
 80821a0:	e7fb      	b.n	808219a <_ZN9FuelGauge6getSoCEv+0x42>
 80821a2:	bf00      	nop
 80821a4:	3f700000 	.word	0x3f700000
 80821a8:	bf800000 	.word	0xbf800000

080821ac <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80821ac:	4770      	bx	lr

080821ae <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80821ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80821b0:	4606      	mov	r6, r0
 80821b2:	4615      	mov	r5, r2
 80821b4:	460c      	mov	r4, r1
 80821b6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80821b8:	42bc      	cmp	r4, r7
 80821ba:	d006      	beq.n	80821ca <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80821bc:	6833      	ldr	r3, [r6, #0]
 80821be:	4630      	mov	r0, r6
 80821c0:	689b      	ldr	r3, [r3, #8]
 80821c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80821c6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80821c8:	e7f6      	b.n	80821b8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80821ca:	4628      	mov	r0, r5
 80821cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080821ce <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80821ce:	2200      	movs	r2, #0
 80821d0:	7c00      	ldrb	r0, [r0, #16]
 80821d2:	f7ff b975 	b.w	80814c0 <hal_i2c_write>

080821d6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80821d6:	2100      	movs	r1, #0
 80821d8:	7c00      	ldrb	r0, [r0, #16]
 80821da:	f7ff b979 	b.w	80814d0 <hal_i2c_available>

080821de <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80821de:	2100      	movs	r1, #0
 80821e0:	7c00      	ldrb	r0, [r0, #16]
 80821e2:	f7ff b97d 	b.w	80814e0 <hal_i2c_read>

080821e6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80821e6:	2100      	movs	r1, #0
 80821e8:	7c00      	ldrb	r0, [r0, #16]
 80821ea:	f7ff b981 	b.w	80814f0 <hal_i2c_peek>

080821ee <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80821ee:	2100      	movs	r1, #0
 80821f0:	7c00      	ldrb	r0, [r0, #16]
 80821f2:	f7ff b985 	b.w	8081500 <hal_i2c_flush>

080821f6 <_ZN7TwoWireD0Ev>:
 80821f6:	b510      	push	{r4, lr}
 80821f8:	4604      	mov	r4, r0
 80821fa:	2114      	movs	r1, #20
 80821fc:	f002 f908 	bl	8084410 <_ZdlPvj>
 8082200:	4620      	mov	r0, r4
 8082202:	bd10      	pop	{r4, pc}

08082204 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 8082204:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8082206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808220a:	4604      	mov	r4, r0
 808220c:	4608      	mov	r0, r1
 808220e:	2100      	movs	r1, #0
 8082210:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8082214:	4b03      	ldr	r3, [pc, #12]	; (8082224 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 8082216:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 8082218:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 808221a:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 808221c:	f7ff f980 	bl	8081520 <hal_i2c_init>
}
 8082220:	4620      	mov	r0, r4
 8082222:	bd10      	pop	{r4, pc}
 8082224:	08085b08 	.word	0x08085b08

08082228 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 8082228:	2300      	movs	r3, #0
 808222a:	7c00      	ldrb	r0, [r0, #16]
 808222c:	461a      	mov	r2, r3
 808222e:	4619      	mov	r1, r3
 8082230:	f7ff b92e 	b.w	8081490 <hal_i2c_begin>

08082234 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 8082234:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 8082236:	2200      	movs	r2, #0
 8082238:	2314      	movs	r3, #20
 808223a:	e9cd 2201 	strd	r2, r2, [sp, #4]
 808223e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 8082242:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 8082244:	7c00      	ldrb	r0, [r0, #16]
 8082246:	f88d 3008 	strb.w	r3, [sp, #8]
 808224a:	684b      	ldr	r3, [r1, #4]
 808224c:	9303      	str	r3, [sp, #12]
 808224e:	68cb      	ldr	r3, [r1, #12]
 8082250:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 8082252:	7a0b      	ldrb	r3, [r1, #8]
 8082254:	a901      	add	r1, sp, #4
 8082256:	9305      	str	r3, [sp, #20]
 8082258:	f7ff f97a 	bl	8081550 <hal_i2c_request_ex>
}
 808225c:	b007      	add	sp, #28
 808225e:	f85d fb04 	ldr.w	pc, [sp], #4

08082262 <_ZN7TwoWire11requestFromEhjh>:
{
 8082262:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 8082264:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8082266:	f88d 1000 	strb.w	r1, [sp]
 808226a:	f04f 0164 	mov.w	r1, #100	; 0x64
 808226e:	bf18      	it	ne
 8082270:	2301      	movne	r3, #1
 8082272:	9103      	str	r1, [sp, #12]
 8082274:	4669      	mov	r1, sp
    size_ = size;
 8082276:	9201      	str	r2, [sp, #4]
 8082278:	f88d 3008 	strb.w	r3, [sp, #8]
 808227c:	f7ff ffda 	bl	8082234 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 8082280:	b005      	add	sp, #20
 8082282:	f85d fb04 	ldr.w	pc, [sp], #4

08082286 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 8082286:	2301      	movs	r3, #1
 8082288:	f7ff bfeb 	b.w	8082262 <_ZN7TwoWire11requestFromEhjh>

0808228c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 808228c:	2200      	movs	r2, #0
 808228e:	7c00      	ldrb	r0, [r0, #16]
 8082290:	f7ff b906 	b.w	80814a0 <hal_i2c_begin_transmission>

08082294 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 8082294:	b2c9      	uxtb	r1, r1
 8082296:	f7ff bff9 	b.w	808228c <_ZN7TwoWire17beginTransmissionEh>

0808229a <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
 808229a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 808229c:	2200      	movs	r2, #0
 808229e:	460b      	mov	r3, r1
 80822a0:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80822a4:	2214      	movs	r2, #20
 80822a6:	f8ad 2004 	strh.w	r2, [sp, #4]
    };
 80822aa:	685a      	ldr	r2, [r3, #4]
      .address = address_,
 80822ac:	7809      	ldrb	r1, [r1, #0]
    };
 80822ae:	9203      	str	r2, [sp, #12]
 80822b0:	68da      	ldr	r2, [r3, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80822b2:	7a1b      	ldrb	r3, [r3, #8]
    };
 80822b4:	9204      	str	r2, [sp, #16]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
 80822b6:	7c00      	ldrb	r0, [r0, #16]
 80822b8:	aa01      	add	r2, sp, #4
 80822ba:	f88d 1008 	strb.w	r1, [sp, #8]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80822be:	9305      	str	r3, [sp, #20]
 80822c0:	f7ff f8ee 	bl	80814a0 <hal_i2c_begin_transmission>
}
 80822c4:	b007      	add	sp, #28
 80822c6:	f85d fb04 	ldr.w	pc, [sp], #4

080822ca <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80822ca:	2200      	movs	r2, #0
 80822cc:	7c00      	ldrb	r0, [r0, #16]
 80822ce:	f7ff b8ef 	b.w	80814b0 <hal_i2c_end_transmission>

080822d2 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80822d2:	2101      	movs	r1, #1
 80822d4:	f7ff bff9 	b.w	80822ca <_ZN7TwoWire15endTransmissionEh>

080822d8 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 80822d8:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
 80822da:	2100      	movs	r1, #0
 80822dc:	7c00      	ldrb	r0, [r0, #16]
 80822de:	f7ff f927 	bl	8081530 <hal_i2c_lock>
}
 80822e2:	fab0 f080 	clz	r0, r0
 80822e6:	0940      	lsrs	r0, r0, #5
 80822e8:	bd08      	pop	{r3, pc}

080822ea <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 80822ea:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
 80822ec:	2100      	movs	r1, #0
 80822ee:	7c00      	ldrb	r0, [r0, #16]
 80822f0:	f7ff f926 	bl	8081540 <hal_i2c_unlock>
}
 80822f4:	fab0 f080 	clz	r0, r0
 80822f8:	0940      	lsrs	r0, r0, #5
 80822fa:	bd08      	pop	{r3, pc}

080822fc <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80822fc:	4700      	bx	r0
	...

08082300 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 8082300:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 8082304:	2400      	movs	r4, #0
{
 8082306:	461d      	mov	r5, r3
 8082308:	460f      	mov	r7, r1
 808230a:	4690      	mov	r8, r2
 808230c:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
 808230e:	f7ff f8b7 	bl	8081480 <HAL_Interrupts_Detach>
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8082312:	2304      	movs	r3, #4
  if (priority >= 0) {
 8082314:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8082316:	f88d 300c 	strb.w	r3, [sp, #12]
    extra.IRQChannelSubPriority = subpriority;
 808231a:	bfa8      	it	ge
 808231c:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    HAL_InterruptExtraConfiguration extra = {0};
 8082320:	f8ad 400d 	strh.w	r4, [sp, #13]
 8082324:	f88d 400f 	strb.w	r4, [sp, #15]
    return &extra;
 8082328:	bfa4      	itt	ge
 808232a:	ac03      	addge	r4, sp, #12
    extra.IRQChannelSubPriority = subpriority;
 808232c:	f88d 300e 	strbge.w	r3, [sp, #14]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8082330:	463a      	mov	r2, r7
 8082332:	4643      	mov	r3, r8
 8082334:	4630      	mov	r0, r6
 8082336:	4906      	ldr	r1, [pc, #24]	; (8082350 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
 8082338:	9400      	str	r4, [sp, #0]
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 808233a:	bfa8      	it	ge
 808233c:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8082340:	f7ff f896 	bl	8081470 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 8082344:	fab0 f080 	clz	r0, r0
 8082348:	0940      	lsrs	r0, r0, #5
 808234a:	b004      	add	sp, #16
 808234c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082350:	080822fd 	.word	0x080822fd

08082354 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8082354:	4770      	bx	lr

08082356 <_ZN9IPAddressD0Ev>:
 8082356:	b510      	push	{r4, lr}
 8082358:	4604      	mov	r4, r0
 808235a:	2108      	movs	r1, #8
 808235c:	f002 f858 	bl	8084410 <_ZdlPvj>
 8082360:	4620      	mov	r0, r4
 8082362:	bd10      	pop	{r4, pc}

08082364 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8082364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082366:	460e      	mov	r6, r1
 8082368:	2400      	movs	r4, #0
 808236a:	f100 0708 	add.w	r7, r0, #8
 808236e:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 8082370:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 8082374:	220a      	movs	r2, #10
 8082376:	4630      	mov	r0, r6
 8082378:	f001 faae 	bl	80838d8 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808237c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808237e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 8082380:	d101      	bne.n	8082386 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 8082382:	4620      	mov	r0, r4
 8082384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 8082386:	2c00      	cmp	r4, #0
 8082388:	d0f2      	beq.n	8082370 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 808238a:	212e      	movs	r1, #46	; 0x2e
 808238c:	4630      	mov	r0, r6
 808238e:	f001 fa8a 	bl	80838a6 <_ZN5Print5printEc>
 8082392:	4404      	add	r4, r0
 8082394:	e7ec      	b.n	8082370 <_ZNK9IPAddress7printToER5Print+0xc>
	...

08082398 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 8082398:	4a02      	ldr	r2, [pc, #8]	; (80823a4 <_ZN9IPAddressC1Ev+0xc>)
 808239a:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 808239c:	2200      	movs	r2, #0
 808239e:	6042      	str	r2, [r0, #4]
}
 80823a0:	4770      	bx	lr
 80823a2:	bf00      	nop
 80823a4:	08085b30 	.word	0x08085b30

080823a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80823a8:	4a02      	ldr	r2, [pc, #8]	; (80823b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 80823aa:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 80823ac:	680a      	ldr	r2, [r1, #0]
 80823ae:	6042      	str	r2, [r0, #4]
}
 80823b0:	4770      	bx	lr
 80823b2:	bf00      	nop
 80823b4:	08085b30 	.word	0x08085b30

080823b8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80823b8:	4a01      	ldr	r2, [pc, #4]	; (80823c0 <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 80823ba:	e9c0 2100 	strd	r2, r1, [r0]
}
 80823be:	4770      	bx	lr
 80823c0:	08085b30 	.word	0x08085b30

080823c4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80823c4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80823c6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80823ca:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80823ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80823d2:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80823d6:	6044      	str	r4, [r0, #4]
}
 80823d8:	bd10      	pop	{r4, pc}
	...

080823dc <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80823dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80823de:	4d04      	ldr	r5, [pc, #16]	; (80823f0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80823e0:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80823e2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80823e6:	9500      	str	r5, [sp, #0]
 80823e8:	f7ff ffec 	bl	80823c4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80823ec:	b003      	add	sp, #12
 80823ee:	bd30      	pop	{r4, r5, pc}
 80823f0:	08085b30 	.word	0x08085b30

080823f4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 80823f4:	2201      	movs	r2, #1
 80823f6:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 80823fa:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 80823fe:	4618      	mov	r0, r3
 8082400:	2901      	cmp	r1, #1
 8082402:	d108      	bne.n	8082416 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 8082404:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8082408:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 808240c:	3a01      	subs	r2, #1
 808240e:	f103 0310 	add.w	r3, r3, #16
 8082412:	d1f2      	bne.n	80823fa <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 8082414:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 8082416:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 8082418:	bf04      	itt	eq
 808241a:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 808241e:	1852      	addeq	r2, r2, r1
 8082420:	e7f4      	b.n	808240c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

08082422 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 8082422:	b40e      	push	{r1, r2, r3}
 8082424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082428:	b087      	sub	sp, #28
 808242a:	af00      	add	r7, sp, #0
 808242c:	f107 0534 	add.w	r5, r7, #52	; 0x34
 8082430:	f855 8b04 	ldr.w	r8, [r5], #4
 8082434:	4604      	mov	r4, r0
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 8082436:	462b      	mov	r3, r5
 8082438:	4642      	mov	r2, r8
 808243a:	2110      	movs	r1, #16
 808243c:	f107 0008 	add.w	r0, r7, #8
    va_start(args, fmt);
 8082440:	607d      	str	r5, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 8082442:	f7ff fa9b 	bl	808197c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 8082446:	280f      	cmp	r0, #15
 8082448:	d91b      	bls.n	8082482 <_ZN5spark10JSONWriter6printfEPKcz+0x60>
        char buf[n + 1]; // Use larger buffer
 808244a:	f100 0308 	add.w	r3, r0, #8
 808244e:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 8082452:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 8082454:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 8082458:	4642      	mov	r2, r8
 808245a:	1c41      	adds	r1, r0, #1
 808245c:	462b      	mov	r3, r5
 808245e:	4668      	mov	r0, sp
        va_start(args, fmt);
 8082460:	607d      	str	r5, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 8082462:	f7ff fa8b 	bl	808197c <vsnprintf>
        if (n > 0) {
 8082466:	1e02      	subs	r2, r0, #0
 8082468:	dd04      	ble.n	8082474 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
 808246a:	6823      	ldr	r3, [r4, #0]
 808246c:	4669      	mov	r1, sp
 808246e:	4620      	mov	r0, r4
 8082470:	689b      	ldr	r3, [r3, #8]
 8082472:	4798      	blx	r3
 8082474:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 8082476:	371c      	adds	r7, #28
 8082478:	46bd      	mov	sp, r7
 808247a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 808247e:	b003      	add	sp, #12
 8082480:	4770      	bx	lr
    } else if (n > 0) {
 8082482:	2800      	cmp	r0, #0
 8082484:	d0f7      	beq.n	8082476 <_ZN5spark10JSONWriter6printfEPKcz+0x54>
        write(buf, n);
 8082486:	6823      	ldr	r3, [r4, #0]
 8082488:	4602      	mov	r2, r0
 808248a:	689b      	ldr	r3, [r3, #8]
 808248c:	4620      	mov	r0, r4
 808248e:	f107 0108 	add.w	r1, r7, #8
 8082492:	4798      	blx	r3
}
 8082494:	e7ef      	b.n	8082476 <_ZN5spark10JSONWriter6printfEPKcz+0x54>

08082496 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
 8082496:	b510      	push	{r4, lr}
 8082498:	4604      	mov	r4, r0
          _M_dispose();
 808249a:	6803      	ldr	r3, [r0, #0]
 808249c:	689b      	ldr	r3, [r3, #8]
 808249e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80824a0:	68a3      	ldr	r3, [r4, #8]
 80824a2:	3b01      	subs	r3, #1
 80824a4:	60a3      	str	r3, [r4, #8]
 80824a6:	b92b      	cbnz	r3, 80824b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
 80824a8:	6823      	ldr	r3, [r4, #0]
 80824aa:	4620      	mov	r0, r4
    }
 80824ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 80824b0:	68db      	ldr	r3, [r3, #12]
 80824b2:	4718      	bx	r3
    }
 80824b4:	bd10      	pop	{r4, pc}

080824b6 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 80824b6:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 80824b8:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 80824ba:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 80824be:	2201      	movs	r2, #1
 80824c0:	689b      	ldr	r3, [r3, #8]
 80824c2:	f10d 0107 	add.w	r1, sp, #7
 80824c6:	4798      	blx	r3
}
 80824c8:	b003      	add	sp, #12
 80824ca:	f85d fb04 	ldr.w	pc, [sp], #4

080824ce <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
 80824ce:	b538      	push	{r3, r4, r5, lr}
 80824d0:	680b      	ldr	r3, [r1, #0]
 80824d2:	4604      	mov	r4, r0
 80824d4:	6003      	str	r3, [r0, #0]
 80824d6:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 80824d8:	6843      	ldr	r3, [r0, #4]
 80824da:	429d      	cmp	r5, r3
 80824dc:	d00c      	beq.n	80824f8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
 80824de:	b115      	cbz	r5, 80824e6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
 80824e0:	686b      	ldr	r3, [r5, #4]
 80824e2:	3301      	adds	r3, #1
 80824e4:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 80824e6:	6860      	ldr	r0, [r4, #4]
 80824e8:	b128      	cbz	r0, 80824f6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
 80824ea:	6843      	ldr	r3, [r0, #4]
 80824ec:	3b01      	subs	r3, #1
 80824ee:	6043      	str	r3, [r0, #4]
 80824f0:	b90b      	cbnz	r3, 80824f6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
 80824f2:	f7ff ffd0 	bl	8082496 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
 80824f6:	6065      	str	r5, [r4, #4]
    class __shared_ptr
 80824f8:	4620      	mov	r0, r4
 80824fa:	bd38      	pop	{r3, r4, r5, pc}

080824fc <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 80824fc:	460b      	mov	r3, r1
 80824fe:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 8082500:	2200      	movs	r2, #0
 8082502:	b510      	push	{r4, lr}
 8082504:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 8082506:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 808250a:	6083      	str	r3, [r0, #8]
    if (t) {
 808250c:	b90b      	cbnz	r3, 8082512 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 808250e:	4620      	mov	r0, r4
 8082510:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 8082512:	f7ff ffdc 	bl	80824ce <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
 8082516:	e7fa      	b.n	808250e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

08082518 <_ZNK5spark9JSONValue4typeEv>:
spark::JSONType spark::JSONValue::type() const {
 8082518:	4603      	mov	r3, r0
    if (!t_) {
 808251a:	6880      	ldr	r0, [r0, #8]
 808251c:	b320      	cbz	r0, 8082568 <_ZNK5spark9JSONValue4typeEv+0x50>
    switch (t_->type) {
 808251e:	7802      	ldrb	r2, [r0, #0]
 8082520:	2a03      	cmp	r2, #3
 8082522:	d81a      	bhi.n	808255a <_ZNK5spark9JSONValue4typeEv+0x42>
 8082524:	e8df f002 	tbb	[pc, r2]
 8082528:	1b021704 	.word	0x1b021704
 808252c:	2005      	movs	r0, #5
 808252e:	4770      	bx	lr
        const char c = d_->json[t_->start];
 8082530:	681b      	ldr	r3, [r3, #0]
 8082532:	685a      	ldr	r2, [r3, #4]
 8082534:	6843      	ldr	r3, [r0, #4]
 8082536:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 8082538:	282d      	cmp	r0, #45	; 0x2d
 808253a:	d012      	beq.n	8082562 <_ZNK5spark9JSONValue4typeEv+0x4a>
 808253c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8082540:	2b09      	cmp	r3, #9
 8082542:	d90e      	bls.n	8082562 <_ZNK5spark9JSONValue4typeEv+0x4a>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 8082544:	2874      	cmp	r0, #116	; 0x74
 8082546:	d00e      	beq.n	8082566 <_ZNK5spark9JSONValue4typeEv+0x4e>
 8082548:	2866      	cmp	r0, #102	; 0x66
 808254a:	d00c      	beq.n	8082566 <_ZNK5spark9JSONValue4typeEv+0x4e>
        return JSON_TYPE_INVALID;
 808254c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 8082550:	4258      	negs	r0, r3
 8082552:	4158      	adcs	r0, r3
 8082554:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 8082556:	2006      	movs	r0, #6
 8082558:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 808255a:	2000      	movs	r0, #0
 808255c:	4770      	bx	lr
        return JSON_TYPE_STRING;
 808255e:	2004      	movs	r0, #4
 8082560:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 8082562:	2003      	movs	r0, #3
 8082564:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 8082566:	2002      	movs	r0, #2
}
 8082568:	4770      	bx	lr

0808256a <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 808256a:	b510      	push	{r4, lr}
 808256c:	4604      	mov	r4, r0
    switch (type()) {
 808256e:	f7ff ffd3 	bl	8082518 <_ZNK5spark9JSONValue4typeEv>
 8082572:	2802      	cmp	r0, #2
 8082574:	d00e      	beq.n	8082594 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 8082576:	1ec3      	subs	r3, r0, #3
 8082578:	b2db      	uxtb	r3, r3
 808257a:	2b01      	cmp	r3, #1
 808257c:	d814      	bhi.n	80825a8 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 808257e:	6822      	ldr	r2, [r4, #0]
 8082580:	68a3      	ldr	r3, [r4, #8]
 8082582:	6850      	ldr	r0, [r2, #4]
 8082584:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 8082586:	220a      	movs	r2, #10
}
 8082588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 808258c:	2100      	movs	r1, #0
 808258e:	4418      	add	r0, r3
 8082590:	f003 b846 	b.w	8085620 <strtol>
        const char* const s = d_->json + t_->start;
 8082594:	6822      	ldr	r2, [r4, #0]
 8082596:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 8082598:	6852      	ldr	r2, [r2, #4]
 808259a:	685b      	ldr	r3, [r3, #4]
 808259c:	5cd0      	ldrb	r0, [r2, r3]
 808259e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 80825a2:	4258      	negs	r0, r3
 80825a4:	4158      	adcs	r0, r3
}
 80825a6:	bd10      	pop	{r4, pc}
    switch (type()) {
 80825a8:	2000      	movs	r0, #0
 80825aa:	e7fc      	b.n	80825a6 <_ZNK5spark9JSONValue5toIntEv+0x3c>

080825ac <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 80825ac:	460b      	mov	r3, r1
 80825ae:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 80825b0:	2200      	movs	r2, #0
 80825b2:	b510      	push	{r4, lr}
 80825b4:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 80825b6:	e9c0 2200 	strd	r2, r2, [r0]
        n_(0) {
 80825ba:	480d      	ldr	r0, [pc, #52]	; (80825f0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 80825bc:	e9c4 0202 	strd	r0, r2, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 80825c0:	b1a3      	cbz	r3, 80825ec <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
 80825c2:	781a      	ldrb	r2, [r3, #0]
 80825c4:	2a03      	cmp	r2, #3
 80825c6:	d006      	beq.n	80825d6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
 80825c8:	b982      	cbnz	r2, 80825ec <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 80825ca:	680a      	ldr	r2, [r1, #0]
 80825cc:	6850      	ldr	r0, [r2, #4]
 80825ce:	685a      	ldr	r2, [r3, #4]
 80825d0:	5c82      	ldrb	r2, [r0, r2]
 80825d2:	2a6e      	cmp	r2, #110	; 0x6e
 80825d4:	d007      	beq.n	80825e6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3a>
            s_ = d->json + t->start;
 80825d6:	680a      	ldr	r2, [r1, #0]
 80825d8:	6858      	ldr	r0, [r3, #4]
 80825da:	6852      	ldr	r2, [r2, #4]
            n_ = t->end - t->start;
 80825dc:	689b      	ldr	r3, [r3, #8]
            s_ = d->json + t->start;
 80825de:	4402      	add	r2, r0
            n_ = t->end - t->start;
 80825e0:	1a1b      	subs	r3, r3, r0
            s_ = d->json + t->start;
 80825e2:	60a2      	str	r2, [r4, #8]
            n_ = t->end - t->start;
 80825e4:	60e3      	str	r3, [r4, #12]
 80825e6:	4620      	mov	r0, r4
 80825e8:	f7ff ff71 	bl	80824ce <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 80825ec:	4620      	mov	r0, r4
 80825ee:	bd10      	pop	{r4, pc}
 80825f0:	08085ba2 	.word	0x08085ba2

080825f4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 80825f4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 80825f6:	2500      	movs	r5, #0
 80825f8:	460b      	mov	r3, r1
 80825fa:	4604      	mov	r4, r0
 80825fc:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 80825fe:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 8082602:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8082606:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 808260a:	b14b      	cbz	r3, 8082620 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 808260c:	781a      	ldrb	r2, [r3, #0]
 808260e:	2a01      	cmp	r2, #1
 8082610:	d106      	bne.n	8082620 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 8082612:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 8082616:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 8082618:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 808261a:	6143      	str	r3, [r0, #20]
 808261c:	f7ff ff57 	bl	80824ce <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 8082620:	4620      	mov	r0, r4
 8082622:	bd38      	pop	{r3, r4, r5, pc}

08082624 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 8082624:	b510      	push	{r4, lr}
    if (!n_) {
 8082626:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 8082628:	4604      	mov	r4, r0
    if (!n_) {
 808262a:	b163      	cbz	r3, 8082646 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 808262c:	6880      	ldr	r0, [r0, #8]
    --n_;
 808262e:	3b01      	subs	r3, #1
    k_ = t_; // Name
 8082630:	60e0      	str	r0, [r4, #12]
    ++t_;
 8082632:	3010      	adds	r0, #16
 8082634:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 8082636:	6120      	str	r0, [r4, #16]
    --n_;
 8082638:	6163      	str	r3, [r4, #20]
    if (n_) {
 808263a:	b113      	cbz	r3, 8082642 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 808263c:	f7ff feda 	bl	80823f4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 8082640:	60a0      	str	r0, [r4, #8]
    return true;
 8082642:	2001      	movs	r0, #1
 8082644:	e000      	b.n	8082648 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 8082646:	4618      	mov	r0, r3
}
 8082648:	bd10      	pop	{r4, pc}

0808264a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 808264a:	b510      	push	{r4, lr}
    write('}');
 808264c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 808264e:	4604      	mov	r4, r0
    write('}');
 8082650:	f7ff ff31 	bl	80824b6 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 8082654:	2301      	movs	r3, #1
}
 8082656:	4620      	mov	r0, r4
    state_ = NEXT;
 8082658:	7123      	strb	r3, [r4, #4]
}
 808265a:	bd10      	pop	{r4, pc}

0808265c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 808265c:	b508      	push	{r3, lr}
    switch (state_) {
 808265e:	7903      	ldrb	r3, [r0, #4]
 8082660:	2b01      	cmp	r3, #1
 8082662:	d002      	beq.n	808266a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 8082664:	2b02      	cmp	r3, #2
 8082666:	d004      	beq.n	8082672 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 8082668:	bd08      	pop	{r3, pc}
        write(',');
 808266a:	212c      	movs	r1, #44	; 0x2c
        write(':');
 808266c:	f7ff ff23 	bl	80824b6 <_ZN5spark10JSONWriter5writeEc>
}
 8082670:	e7fa      	b.n	8082668 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 8082672:	213a      	movs	r1, #58	; 0x3a
 8082674:	e7fa      	b.n	808266c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

08082676 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 8082676:	b510      	push	{r4, lr}
 8082678:	4604      	mov	r4, r0
    writeSeparator();
 808267a:	f7ff ffef 	bl	808265c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 808267e:	4620      	mov	r0, r4
 8082680:	217b      	movs	r1, #123	; 0x7b
 8082682:	f7ff ff18 	bl	80824b6 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 8082686:	2300      	movs	r3, #0
}
 8082688:	4620      	mov	r0, r4
    state_ = BEGIN;
 808268a:	7123      	strb	r3, [r4, #4]
}
 808268c:	bd10      	pop	{r4, pc}
	...

08082690 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 8082690:	b538      	push	{r3, r4, r5, lr}
 8082692:	4604      	mov	r4, r0
 8082694:	460d      	mov	r5, r1
    writeSeparator();
 8082696:	f7ff ffe1 	bl	808265c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 808269a:	6823      	ldr	r3, [r4, #0]
 808269c:	4620      	mov	r0, r4
 808269e:	462a      	mov	r2, r5
 80826a0:	68db      	ldr	r3, [r3, #12]
 80826a2:	4903      	ldr	r1, [pc, #12]	; (80826b0 <_ZN5spark10JSONWriter5valueEi+0x20>)
 80826a4:	4798      	blx	r3
    state_ = NEXT;
 80826a6:	2301      	movs	r3, #1
}
 80826a8:	4620      	mov	r0, r4
    state_ = NEXT;
 80826aa:	7123      	strb	r3, [r4, #4]
}
 80826ac:	bd38      	pop	{r3, r4, r5, pc}
 80826ae:	bf00      	nop
 80826b0:	08085b3c 	.word	0x08085b3c

080826b4 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 80826b4:	b538      	push	{r3, r4, r5, lr}
 80826b6:	4604      	mov	r4, r0
 80826b8:	460d      	mov	r5, r1
    writeSeparator();
 80826ba:	f7ff ffcf 	bl	808265c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 80826be:	6823      	ldr	r3, [r4, #0]
 80826c0:	4620      	mov	r0, r4
 80826c2:	462a      	mov	r2, r5
 80826c4:	68db      	ldr	r3, [r3, #12]
 80826c6:	4903      	ldr	r1, [pc, #12]	; (80826d4 <_ZN5spark10JSONWriter5valueEj+0x20>)
 80826c8:	4798      	blx	r3
    state_ = NEXT;
 80826ca:	2301      	movs	r3, #1
}
 80826cc:	4620      	mov	r0, r4
    state_ = NEXT;
 80826ce:	7123      	strb	r3, [r4, #4]
}
 80826d0:	bd38      	pop	{r3, r4, r5, pc}
 80826d2:	bf00      	nop
 80826d4:	08085b3f 	.word	0x08085b3f

080826d8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80826d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80826dc:	460d      	mov	r5, r1
 80826de:	4617      	mov	r7, r2
    write('"');
 80826e0:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80826e2:	4604      	mov	r4, r0
    write('"');
 80826e4:	f7ff fee7 	bl	80824b6 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
 80826e8:	4629      	mov	r1, r5
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 80826ea:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8082784 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
    const char* const end = str + size;
 80826ee:	442f      	add	r7, r5
    while (s != end) {
 80826f0:	42bd      	cmp	r5, r7
 80826f2:	462a      	mov	r2, r5
 80826f4:	d038      	beq.n	8082768 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
 80826f6:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 80826fa:	2e22      	cmp	r6, #34	; 0x22
 80826fc:	d003      	beq.n	8082706 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 80826fe:	2e5c      	cmp	r6, #92	; 0x5c
 8082700:	d001      	beq.n	8082706 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 8082702:	2e1f      	cmp	r6, #31
 8082704:	d8f4      	bhi.n	80826f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 8082706:	6823      	ldr	r3, [r4, #0]
 8082708:	1a52      	subs	r2, r2, r1
 808270a:	4620      	mov	r0, r4
 808270c:	689b      	ldr	r3, [r3, #8]
 808270e:	4798      	blx	r3
            write('\\');
 8082710:	215c      	movs	r1, #92	; 0x5c
 8082712:	4620      	mov	r0, r4
 8082714:	f7ff fecf 	bl	80824b6 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 8082718:	2e0d      	cmp	r6, #13
 808271a:	d80a      	bhi.n	8082732 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
 808271c:	2e07      	cmp	r6, #7
 808271e:	d91c      	bls.n	808275a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 8082720:	f1a6 0308 	sub.w	r3, r6, #8
 8082724:	2b05      	cmp	r3, #5
 8082726:	d818      	bhi.n	808275a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 8082728:	e8df f003 	tbb	[pc, r3]
 808272c:	17110f0d 	.word	0x17110f0d
 8082730:	1513      	.short	0x1513
 8082732:	2e22      	cmp	r6, #34	; 0x22
 8082734:	d001      	beq.n	808273a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 8082736:	2e5c      	cmp	r6, #92	; 0x5c
 8082738:	d10f      	bne.n	808275a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
 808273a:	4631      	mov	r1, r6
                write('b');
 808273c:	4620      	mov	r0, r4
 808273e:	f7ff feba 	bl	80824b6 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 8082742:	4629      	mov	r1, r5
    while (s != end) {
 8082744:	e7d4      	b.n	80826f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 8082746:	2162      	movs	r1, #98	; 0x62
 8082748:	e7f8      	b.n	808273c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
 808274a:	2174      	movs	r1, #116	; 0x74
 808274c:	e7f6      	b.n	808273c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
 808274e:	216e      	movs	r1, #110	; 0x6e
 8082750:	e7f4      	b.n	808273c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
 8082752:	2166      	movs	r1, #102	; 0x66
 8082754:	e7f2      	b.n	808273c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
 8082756:	2172      	movs	r1, #114	; 0x72
 8082758:	e7f0      	b.n	808273c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
 808275a:	6823      	ldr	r3, [r4, #0]
 808275c:	4632      	mov	r2, r6
 808275e:	4641      	mov	r1, r8
 8082760:	4620      	mov	r0, r4
 8082762:	68db      	ldr	r3, [r3, #12]
 8082764:	4798      	blx	r3
                break;
 8082766:	e7ec      	b.n	8082742 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
 8082768:	428d      	cmp	r5, r1
 808276a:	d004      	beq.n	8082776 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
 808276c:	6823      	ldr	r3, [r4, #0]
 808276e:	4620      	mov	r0, r4
 8082770:	689b      	ldr	r3, [r3, #8]
 8082772:	1a6a      	subs	r2, r5, r1
 8082774:	4798      	blx	r3
    }
    write('"');
 8082776:	2122      	movs	r1, #34	; 0x22
 8082778:	4620      	mov	r0, r4
 808277a:	f7ff fe9c 	bl	80824b6 <_ZN5spark10JSONWriter5writeEc>
}
 808277e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082782:	bf00      	nop
 8082784:	08085b42 	.word	0x08085b42

08082788 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 8082788:	b570      	push	{r4, r5, r6, lr}
 808278a:	4604      	mov	r4, r0
 808278c:	460d      	mov	r5, r1
 808278e:	4616      	mov	r6, r2
    writeSeparator();
 8082790:	f7ff ff64 	bl	808265c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 8082794:	4620      	mov	r0, r4
 8082796:	4632      	mov	r2, r6
 8082798:	4629      	mov	r1, r5
 808279a:	f7ff ff9d 	bl	80826d8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 808279e:	2302      	movs	r3, #2
}
 80827a0:	4620      	mov	r0, r4
    state_ = VALUE;
 80827a2:	7123      	strb	r3, [r4, #4]
}
 80827a4:	bd70      	pop	{r4, r5, r6, pc}

080827a6 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 80827a6:	b570      	push	{r4, r5, r6, lr}
 80827a8:	4604      	mov	r4, r0
 80827aa:	460d      	mov	r5, r1
 80827ac:	4616      	mov	r6, r2
    writeSeparator();
 80827ae:	f7ff ff55 	bl	808265c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 80827b2:	4620      	mov	r0, r4
 80827b4:	4632      	mov	r2, r6
 80827b6:	4629      	mov	r1, r5
 80827b8:	f7ff ff8e 	bl	80826d8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 80827bc:	2301      	movs	r3, #1
}
 80827be:	4620      	mov	r0, r4
    state_ = NEXT;
 80827c0:	7123      	strb	r3, [r4, #4]
}
 80827c2:	bd70      	pop	{r4, r5, r6, pc}

080827c4 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 80827c4:	6880      	ldr	r0, [r0, #8]
 80827c6:	6803      	ldr	r3, [r0, #0]
 80827c8:	68db      	ldr	r3, [r3, #12]
 80827ca:	4718      	bx	r3

080827cc <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 80827cc:	4770      	bx	lr

080827ce <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 80827ce:	4608      	mov	r0, r1
 80827d0:	b111      	cbz	r1, 80827d8 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 80827d2:	680b      	ldr	r3, [r1, #0]
 80827d4:	685b      	ldr	r3, [r3, #4]
 80827d6:	4718      	bx	r3
}
 80827d8:	4770      	bx	lr

080827da <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 80827da:	4770      	bx	lr

080827dc <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 80827dc:	4770      	bx	lr

080827de <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 80827de:	4770      	bx	lr

080827e0 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 80827e0:	4770      	bx	lr

080827e2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 80827e2:	b538      	push	{r3, r4, r5, lr}
 80827e4:	4604      	mov	r4, r0
 80827e6:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 80827e8:	6800      	ldr	r0, [r0, #0]
 80827ea:	212e      	movs	r1, #46	; 0x2e
 80827ec:	f002 fe26 	bl	808543c <strchrnul>
    size = s - category;
 80827f0:	6823      	ldr	r3, [r4, #0]
    const char *s = strchrnul(category, '.');
 80827f2:	4602      	mov	r2, r0
    size = s - category;
 80827f4:	1ac0      	subs	r0, r0, r3
 80827f6:	6028      	str	r0, [r5, #0]
    if (size) {
 80827f8:	b120      	cbz	r0, 8082804 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x22>
        if (*s) {
 80827fa:	7813      	ldrb	r3, [r2, #0]
 80827fc:	b103      	cbz	r3, 8082800 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1e>
            ++s;
 80827fe:	3201      	adds	r2, #1
 8082800:	6820      	ldr	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8082802:	6022      	str	r2, [r4, #0]
}
 8082804:	bd38      	pop	{r3, r4, r5, pc}

08082806 <_ZN5spark16JSONStreamWriterD0Ev>:
 8082806:	b510      	push	{r4, lr}
 8082808:	4604      	mov	r4, r0
 808280a:	210c      	movs	r1, #12
 808280c:	f001 fe00 	bl	8084410 <_ZdlPvj>
 8082810:	4620      	mov	r0, r4
 8082812:	bd10      	pop	{r4, pc}

08082814 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 8082814:	b510      	push	{r4, lr}
 8082816:	4604      	mov	r4, r0
 8082818:	2104      	movs	r1, #4
 808281a:	f001 fdf9 	bl	8084410 <_ZdlPvj>
 808281e:	4620      	mov	r0, r4
 8082820:	bd10      	pop	{r4, pc}

08082822 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 8082822:	b510      	push	{r4, lr}
 8082824:	4604      	mov	r4, r0
 8082826:	2104      	movs	r1, #4
 8082828:	f001 fdf2 	bl	8084410 <_ZdlPvj>
 808282c:	4620      	mov	r0, r4
 808282e:	bd10      	pop	{r4, pc}

08082830 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 8082830:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 8082832:	f002 fe0d 	bl	8085450 <strcmp>
}
 8082836:	fab0 f080 	clz	r0, r0
 808283a:	0940      	lsrs	r0, r0, #5
 808283c:	bd08      	pop	{r3, pc}

0808283e <__tcf_1>:
 808283e:	4770      	bx	lr

08082840 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 8082840:	b510      	push	{r4, lr}
 8082842:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
 8082844:	f001 fbd8 	bl	8083ff8 <_Z16_fetch_usbserialv>
 8082848:	4284      	cmp	r4, r0
 808284a:	d105      	bne.n	8082858 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 808284c:	f001 fbd4 	bl	8083ff8 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 8082850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        USBSerial1.end();
 8082854:	f001 bbb6 	b.w	8083fc4 <_ZN9USBSerial3endEv>
    if (stream == &USBSerial1) {
 8082858:	f001 fc08 	bl	808406c <_Z17_fetch_usbserial1v>
 808285c:	4284      	cmp	r4, r0
 808285e:	d102      	bne.n	8082866 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x26>
        USBSerial1.end();
 8082860:	f001 fc04 	bl	808406c <_Z17_fetch_usbserial1v>
 8082864:	e7f4      	b.n	8082850 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x10>
    if (stream == &Serial1) {
 8082866:	f001 fb33 	bl	8083ed0 <_Z22__fetch_global_Serial1v>
 808286a:	4284      	cmp	r4, r0
 808286c:	d105      	bne.n	808287a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
        Serial1.end();
 808286e:	f001 fb2f 	bl	8083ed0 <_Z22__fetch_global_Serial1v>
}
 8082872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 8082876:	f001 bb28 	b.w	8083eca <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 808287a:	b12c      	cbz	r4, 8082888 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x48>
 808287c:	6823      	ldr	r3, [r4, #0]
 808287e:	4620      	mov	r0, r4
}
 8082880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8082884:	685b      	ldr	r3, [r3, #4]
 8082886:	4718      	bx	r3
 8082888:	bd10      	pop	{r4, pc}

0808288a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 808288a:	b538      	push	{r3, r4, r5, lr}
 808288c:	4605      	mov	r5, r0
    return value(val, strlen(val));
 808288e:	4608      	mov	r0, r1
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 8082890:	460c      	mov	r4, r1
    return value(val, strlen(val));
 8082892:	f002 fe0a 	bl	80854aa <strlen>
 8082896:	4621      	mov	r1, r4
 8082898:	4602      	mov	r2, r0
 808289a:	4628      	mov	r0, r5
}
 808289c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return value(val, strlen(val));
 80828a0:	f7ff bf81 	b.w	80827a6 <_ZN5spark10JSONWriter5valueEPKcj>

080828a4 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 80828a4:	b570      	push	{r4, r5, r6, lr}
 80828a6:	4604      	mov	r4, r0
    write(str, strlen(str));
 80828a8:	4608      	mov	r0, r1
inline void spark::StreamLogHandler::write(const char *str) {
 80828aa:	460d      	mov	r5, r1
    write(str, strlen(str));
 80828ac:	f002 fdfd 	bl	80854aa <strlen>
 80828b0:	6823      	ldr	r3, [r4, #0]
 80828b2:	4602      	mov	r2, r0
 80828b4:	4629      	mov	r1, r5
 80828b6:	4620      	mov	r0, r4
}
 80828b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    write(str, strlen(str));
 80828bc:	68db      	ldr	r3, [r3, #12]
 80828be:	4718      	bx	r3

080828c0 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 80828c0:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 80828c2:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 80828c4:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 80828c8:	2201      	movs	r2, #1
 80828ca:	68db      	ldr	r3, [r3, #12]
 80828cc:	f10d 0107 	add.w	r1, sp, #7
 80828d0:	4798      	blx	r3
}
 80828d2:	b003      	add	sp, #12
 80828d4:	f85d fb04 	ldr.w	pc, [sp], #4

080828d8 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
 80828d8:	b40e      	push	{r1, r2, r3}
 80828da:	b503      	push	{r0, r1, lr}
 80828dc:	ab03      	add	r3, sp, #12
 80828de:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
 80828e2:	2100      	movs	r1, #0
 80828e4:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
 80828e6:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
 80828e8:	f001 f813 	bl	8083912 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
 80828ec:	b002      	add	sp, #8
 80828ee:	f85d eb04 	ldr.w	lr, [sp], #4
 80828f2:	b003      	add	sp, #12
 80828f4:	4770      	bx	lr
	...

080828f8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80828f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 80828fc:	f04f 0814 	mov.w	r8, #20
 8082900:	e9d0 9500 	ldrd	r9, r5, [r0]
 8082904:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 8082906:	464c      	mov	r4, r9
 8082908:	fb08 f505 	mul.w	r5, r8, r5
 808290c:	9300      	str	r3, [sp, #0]
 808290e:	10ab      	asrs	r3, r5, #2
 8082910:	4d17      	ldr	r5, [pc, #92]	; (8082970 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 8082912:	435d      	muls	r5, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 8082914:	2d00      	cmp	r5, #0
 8082916:	dd23      	ble.n	8082960 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
 8082918:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 808291a:	fb08 f006 	mul.w	r0, r8, r6
 808291e:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 8082922:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8082926:	463a      	mov	r2, r7
 8082928:	455f      	cmp	r7, fp
 808292a:	bf28      	it	cs
 808292c:	465a      	movcs	r2, fp
 808292e:	5820      	ldr	r0, [r4, r0]
 8082930:	9101      	str	r1, [sp, #4]
 8082932:	f002 fdc2 	bl	80854ba <strncmp>
                if (cmp == 0) {
 8082936:	2301      	movs	r3, #1
 8082938:	9901      	ldr	r1, [sp, #4]
 808293a:	b978      	cbnz	r0, 808295c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
 808293c:	455f      	cmp	r7, fp
 808293e:	d103      	bne.n	8082948 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 8082940:	9a00      	ldr	r2, [sp, #0]
 8082942:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 8082944:	4635      	mov	r5, r6
 8082946:	e7e5      	b.n	8082914 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
 8082948:	bf8c      	ite	hi
 808294a:	2001      	movhi	r0, #1
 808294c:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 808294e:	2800      	cmp	r0, #0
 8082950:	d0f8      	beq.n	8082944 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 8082952:	1bae      	subs	r6, r5, r6
	      ++__first;
 8082954:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
 8082958:	3e01      	subs	r6, #1
 808295a:	e7f3      	b.n	8082944 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
 808295c:	0fc0      	lsrs	r0, r0, #31
 808295e:	e7f6      	b.n	808294e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
 8082960:	eba4 0409 	sub.w	r4, r4, r9
}
 8082964:	4802      	ldr	r0, [pc, #8]	; (8082970 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 8082966:	10a4      	asrs	r4, r4, #2
 8082968:	4360      	muls	r0, r4
 808296a:	b003      	add	sp, #12
 808296c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082970:	cccccccd 	.word	0xcccccccd

08082974 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 8082974:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 8082976:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 8082978:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 808297a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 808297c:	b303      	cbz	r3, 80829c0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 808297e:	b1f9      	cbz	r1, 80829c0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 8082980:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 8082982:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 8082986:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 8082988:	a903      	add	r1, sp, #12
 808298a:	a801      	add	r0, sp, #4
 808298c:	f7ff ff29 	bl	80827e2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 8082990:	4601      	mov	r1, r0
 8082992:	b1a8      	cbz	r0, 80829c0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 8082994:	f10d 030b 	add.w	r3, sp, #11
 8082998:	4620      	mov	r0, r4
 808299a:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 808299c:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 80829a0:	f7ff ffaa 	bl	80828f8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 80829a4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80829a8:	b153      	cbz	r3, 80829c0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 80829aa:	2314      	movs	r3, #20
 80829ac:	6824      	ldr	r4, [r4, #0]
 80829ae:	fb03 4400 	mla	r4, r3, r0, r4
            if (node.level >= 0) {
 80829b2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 80829b6:	3408      	adds	r4, #8
            if (node.level >= 0) {
 80829b8:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 80829ba:	bfa8      	it	ge
 80829bc:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
 80829be:	e7e3      	b.n	8082988 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 80829c0:	4630      	mov	r0, r6
 80829c2:	b004      	add	sp, #16
 80829c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080829c8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 80829c8:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 80829ca:	4c09      	ldr	r4, [pc, #36]	; (80829f0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 80829cc:	7823      	ldrb	r3, [r4, #0]
 80829ce:	f3bf 8f5b 	dmb	ish
 80829d2:	07db      	lsls	r3, r3, #31
 80829d4:	d409      	bmi.n	80829ea <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
 80829d6:	4620      	mov	r0, r4
 80829d8:	f7fd fb76 	bl	80800c8 <__cxa_guard_acquire>
 80829dc:	b128      	cbz	r0, 80829ea <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
 80829de:	4620      	mov	r0, r4
 80829e0:	f7fd fb77 	bl	80800d2 <__cxa_guard_release>
 80829e4:	4803      	ldr	r0, [pc, #12]	; (80829f4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 80829e6:	f002 fcaf 	bl	8085348 <atexit>
}
 80829ea:	4803      	ldr	r0, [pc, #12]	; (80829f8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
 80829ec:	bd10      	pop	{r4, pc}
 80829ee:	bf00      	nop
 80829f0:	200001c8 	.word	0x200001c8
 80829f4:	080827db 	.word	0x080827db
 80829f8:	2000008c 	.word	0x2000008c

080829fc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 80829fc:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 80829fe:	4c09      	ldr	r4, [pc, #36]	; (8082a24 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 8082a00:	7823      	ldrb	r3, [r4, #0]
 8082a02:	f3bf 8f5b 	dmb	ish
 8082a06:	07db      	lsls	r3, r3, #31
 8082a08:	d409      	bmi.n	8082a1e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
 8082a0a:	4620      	mov	r0, r4
 8082a0c:	f7fd fb5c 	bl	80800c8 <__cxa_guard_acquire>
 8082a10:	b128      	cbz	r0, 8082a1e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
 8082a12:	4620      	mov	r0, r4
 8082a14:	f7fd fb5d 	bl	80800d2 <__cxa_guard_release>
 8082a18:	4803      	ldr	r0, [pc, #12]	; (8082a28 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 8082a1a:	f002 fc95 	bl	8085348 <atexit>
    return &factory;
}
 8082a1e:	4803      	ldr	r0, [pc, #12]	; (8082a2c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
 8082a20:	bd10      	pop	{r4, pc}
 8082a22:	bf00      	nop
 8082a24:	200001cc 	.word	0x200001cc
 8082a28:	0808283f 	.word	0x0808283f
 8082a2c:	20000090 	.word	0x20000090

08082a30 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 8082a30:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 8082a32:	2500      	movs	r5, #0
 8082a34:	4604      	mov	r4, r0
 8082a36:	e9c0 5500 	strd	r5, r5, [r0]
 8082a3a:	e9c0 5504 	strd	r5, r5, [r0, #16]
 8082a3e:	6085      	str	r5, [r0, #8]
 8082a40:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 8082a42:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
 8082a46:	f7fe fc9b 	bl	8081380 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 8082a4a:	f7ff ffbd 	bl	80829c8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 8082a4e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 8082a50:	f7ff ffd4 	bl	80829fc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 8082a54:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 8082a56:	6220      	str	r0, [r4, #32]
}
 8082a58:	4620      	mov	r0, r4
 8082a5a:	bd38      	pop	{r3, r4, r5, pc}

08082a5c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 8082a5c:	b510      	push	{r4, lr}
    static LogManager mgr;
 8082a5e:	4c0a      	ldr	r4, [pc, #40]	; (8082a88 <_ZN5spark10LogManager8instanceEv+0x2c>)
 8082a60:	7823      	ldrb	r3, [r4, #0]
 8082a62:	f3bf 8f5b 	dmb	ish
 8082a66:	07db      	lsls	r3, r3, #31
 8082a68:	d40c      	bmi.n	8082a84 <_ZN5spark10LogManager8instanceEv+0x28>
 8082a6a:	4620      	mov	r0, r4
 8082a6c:	f7fd fb2c 	bl	80800c8 <__cxa_guard_acquire>
 8082a70:	b140      	cbz	r0, 8082a84 <_ZN5spark10LogManager8instanceEv+0x28>
 8082a72:	4806      	ldr	r0, [pc, #24]	; (8082a8c <_ZN5spark10LogManager8instanceEv+0x30>)
 8082a74:	f7ff ffdc 	bl	8082a30 <_ZN5spark10LogManagerC1Ev>
 8082a78:	4620      	mov	r0, r4
 8082a7a:	f7fd fb2a 	bl	80800d2 <__cxa_guard_release>
 8082a7e:	4804      	ldr	r0, [pc, #16]	; (8082a90 <_ZN5spark10LogManager8instanceEv+0x34>)
 8082a80:	f002 fc62 	bl	8085348 <atexit>
    return &mgr;
}
 8082a84:	4801      	ldr	r0, [pc, #4]	; (8082a8c <_ZN5spark10LogManager8instanceEv+0x30>)
 8082a86:	bd10      	pop	{r4, pc}
 8082a88:	200001c4 	.word	0x200001c4
 8082a8c:	200001d4 	.word	0x200001d4
 8082a90:	08082f59 	.word	0x08082f59

08082a94 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 8082a94:	2300      	movs	r3, #0
 8082a96:	4a02      	ldr	r2, [pc, #8]	; (8082aa0 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 8082a98:	4902      	ldr	r1, [pc, #8]	; (8082aa4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 8082a9a:	4803      	ldr	r0, [pc, #12]	; (8082aa8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 8082a9c:	f7fe be18 	b.w	80816d0 <log_set_callbacks>
 8082aa0:	08082de5 	.word	0x08082de5
 8082aa4:	08082d71 	.word	0x08082d71
 8082aa8:	08082cf1 	.word	0x08082cf1

08082aac <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 8082aac:	2300      	movs	r3, #0
 8082aae:	461a      	mov	r2, r3
 8082ab0:	4619      	mov	r1, r3
 8082ab2:	4618      	mov	r0, r3
 8082ab4:	f7fe be0c 	b.w	80816d0 <log_set_callbacks>

08082ab8 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 8082ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082aba:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 8082abc:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082abe:	f851 3b04 	ldr.w	r3, [r1], #4
 8082ac2:	a801      	add	r0, sp, #4
 8082ac4:	9300      	str	r3, [sp, #0]
 8082ac6:	f7ff f87e 	bl	8081bc6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8082aca:	466a      	mov	r2, sp
 8082acc:	4629      	mov	r1, r5
 8082ace:	4620      	mov	r0, r4
 8082ad0:	f7ff fd14 	bl	80824fc <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 8082ad4:	a801      	add	r0, sp, #4
 8082ad6:	f7fd fdab 	bl	8080630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8082ada:	4620      	mov	r0, r4
 8082adc:	b003      	add	sp, #12
 8082ade:	bd30      	pop	{r4, r5, pc}

08082ae0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 8082ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082ae2:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 8082ae4:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082ae6:	f851 3b04 	ldr.w	r3, [r1], #4
 8082aea:	a801      	add	r0, sp, #4
 8082aec:	9300      	str	r3, [sp, #0]
 8082aee:	f7ff f86a 	bl	8081bc6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8082af2:	466a      	mov	r2, sp
 8082af4:	4629      	mov	r1, r5
 8082af6:	4620      	mov	r0, r4
 8082af8:	f7ff fd7c 	bl	80825f4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 8082afc:	a801      	add	r0, sp, #4
 8082afe:	f7fd fd97 	bl	8080630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8082b02:	4620      	mov	r0, r4
 8082b04:	b003      	add	sp, #12
 8082b06:	bd30      	pop	{r4, r5, pc}

08082b08 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 8082b08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082b0a:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 8082b0c:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082b0e:	f851 3b04 	ldr.w	r3, [r1], #4
 8082b12:	a801      	add	r0, sp, #4
 8082b14:	9300      	str	r3, [sp, #0]
 8082b16:	f7ff f856 	bl	8081bc6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8082b1a:	466a      	mov	r2, sp
 8082b1c:	4629      	mov	r1, r5
 8082b1e:	4620      	mov	r0, r4
 8082b20:	f7ff fd44 	bl	80825ac <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 8082b24:	a801      	add	r0, sp, #4
 8082b26:	f7fd fd83 	bl	8080630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8082b2a:	4620      	mov	r0, r4
 8082b2c:	b003      	add	sp, #12
 8082b2e:	bd30      	pop	{r4, r5, pc}

08082b30 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 8082b30:	b570      	push	{r4, r5, r6, lr}
 8082b32:	b08a      	sub	sp, #40	; 0x28
 8082b34:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 8082b36:	4601      	mov	r1, r0
 8082b38:	a804      	add	r0, sp, #16
 8082b3a:	f7ff ffd1 	bl	8082ae0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 8082b3e:	4e14      	ldr	r6, [pc, #80]	; (8082b90 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 8082b40:	a804      	add	r0, sp, #16
 8082b42:	f7ff fd6f 	bl	8082624 <_ZN5spark18JSONObjectIterator4nextEv>
 8082b46:	b1e8      	cbz	r0, 8082b84 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 8082b48:	4668      	mov	r0, sp
 8082b4a:	a904      	add	r1, sp, #16
 8082b4c:	f7ff ffdc 	bl	8082b08 <_ZNK5spark18JSONObjectIterator4nameEv>
 8082b50:	4631      	mov	r1, r6
 8082b52:	9802      	ldr	r0, [sp, #8]
 8082b54:	f7ff fe6c 	bl	8082830 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 8082b58:	4604      	mov	r4, r0
 8082b5a:	b110      	cbz	r0, 8082b62 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 8082b5c:	1e2c      	subs	r4, r5, #0
 8082b5e:	bf18      	it	ne
 8082b60:	2401      	movne	r4, #1
 8082b62:	a801      	add	r0, sp, #4
 8082b64:	f7fd fd64 	bl	8080630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082b68:	2c00      	cmp	r4, #0
 8082b6a:	d0e9      	beq.n	8082b40 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 8082b6c:	4668      	mov	r0, sp
 8082b6e:	a904      	add	r1, sp, #16
 8082b70:	f7ff ffa2 	bl	8082ab8 <_ZNK5spark18JSONObjectIterator5valueEv>
 8082b74:	4668      	mov	r0, sp
 8082b76:	f7ff fcf8 	bl	808256a <_ZNK5spark9JSONValue5toIntEv>
 8082b7a:	6028      	str	r0, [r5, #0]
 8082b7c:	a801      	add	r0, sp, #4
 8082b7e:	f7fd fd57 	bl	8080630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082b82:	e7dd      	b.n	8082b40 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 8082b84:	a805      	add	r0, sp, #20
 8082b86:	f7fd fd53 	bl	8080630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8082b8a:	b00a      	add	sp, #40	; 0x28
 8082b8c:	bd70      	pop	{r4, r5, r6, pc}
 8082b8e:	bf00      	nop
 8082b90:	08085b48 	.word	0x08085b48

08082b94 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 8082b94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082b96:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 8082b98:	4919      	ldr	r1, [pc, #100]	; (8082c00 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6c>)
 8082b9a:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 8082b9c:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 8082b9e:	f002 fc57 	bl	8085450 <strcmp>
 8082ba2:	b948      	cbnz	r0, 8082bb8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
 8082ba4:	f001 fa28 	bl	8083ff8 <_Z16_fetch_usbserialv>
 8082ba8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8082bac:	f001 fa06 	bl	8083fbc <_ZN9USBSerial5beginEl>
        return &Serial;
 8082bb0:	f001 fa22 	bl	8083ff8 <_Z16_fetch_usbserialv>
}
 8082bb4:	b003      	add	sp, #12
 8082bb6:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "USBSerial1") == 0) {
 8082bb8:	4620      	mov	r0, r4
 8082bba:	4912      	ldr	r1, [pc, #72]	; (8082c04 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x70>)
 8082bbc:	f002 fc48 	bl	8085450 <strcmp>
 8082bc0:	b940      	cbnz	r0, 8082bd4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x40>
        USBSerial1.begin();
 8082bc2:	f001 fa53 	bl	808406c <_Z17_fetch_usbserial1v>
 8082bc6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8082bca:	f001 f9f7 	bl	8083fbc <_ZN9USBSerial5beginEl>
        return &USBSerial1;
 8082bce:	f001 fa4d 	bl	808406c <_Z17_fetch_usbserial1v>
 8082bd2:	e7ef      	b.n	8082bb4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    if (strcmp(type, "Serial1") == 0) {
 8082bd4:	4620      	mov	r0, r4
 8082bd6:	490c      	ldr	r1, [pc, #48]	; (8082c08 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x74>)
 8082bd8:	f002 fc3a 	bl	8085450 <strcmp>
 8082bdc:	b970      	cbnz	r0, 8082bfc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x68>
        int baud = 9600;
 8082bde:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 8082be2:	a901      	add	r1, sp, #4
 8082be4:	4628      	mov	r0, r5
        int baud = 9600;
 8082be6:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 8082be8:	f7ff ffa2 	bl	8082b30 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 8082bec:	f001 f970 	bl	8083ed0 <_Z22__fetch_global_Serial1v>
 8082bf0:	9901      	ldr	r1, [sp, #4]
 8082bf2:	f001 f967 	bl	8083ec4 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 8082bf6:	f001 f96b 	bl	8083ed0 <_Z22__fetch_global_Serial1v>
 8082bfa:	e7db      	b.n	8082bb4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
 8082bfc:	2000      	movs	r0, #0
 8082bfe:	e7d9      	b.n	8082bb4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
 8082c00:	08085b4d 	.word	0x08085b4d
 8082c04:	08085b54 	.word	0x08085b54
 8082c08:	08085b57 	.word	0x08085b57

08082c0c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 8082c0c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 8082c0e:	2614      	movs	r6, #20
 8082c10:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 8082c14:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 8082c16:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 8082c1a:	42ae      	cmp	r6, r5
 8082c1c:	d005      	beq.n	8082c2a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 8082c1e:	f105 0008 	add.w	r0, r5, #8
 8082c22:	f7ff fff3 	bl	8082c0c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 8082c26:	3514      	adds	r5, #20
 8082c28:	e7f7      	b.n	8082c1a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 8082c2a:	6820      	ldr	r0, [r4, #0]
 8082c2c:	f7fe fe86 	bl	808193c <free>
}
 8082c30:	4620      	mov	r0, r4
 8082c32:	bd70      	pop	{r4, r5, r6, pc}

08082c34 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 8082c34:	b570      	push	{r4, r5, r6, lr}
 8082c36:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 8082c38:	e9d0 5300 	ldrd	r5, r3, [r0]
 8082c3c:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 8082c40:	42ae      	cmp	r6, r5
 8082c42:	d004      	beq.n	8082c4e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 8082c44:	4628      	mov	r0, r5
 8082c46:	f000 feaa 	bl	808399e <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 8082c4a:	3510      	adds	r5, #16
 8082c4c:	e7f8      	b.n	8082c40 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 8082c4e:	6820      	ldr	r0, [r4, #0]
 8082c50:	f7fe fe74 	bl	808193c <free>
}
 8082c54:	4620      	mov	r0, r4
 8082c56:	bd70      	pop	{r4, r5, r6, pc}

08082c58 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 8082c58:	b510      	push	{r4, lr}
 8082c5a:	4604      	mov	r4, r0
 8082c5c:	300c      	adds	r0, #12
 8082c5e:	f7ff ffd5 	bl	8082c0c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 8082c62:	4620      	mov	r0, r4
 8082c64:	f7ff ffe6 	bl	8082c34 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 8082c68:	4620      	mov	r0, r4
 8082c6a:	bd10      	pop	{r4, pc}

08082c6c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 8082c6c:	b510      	push	{r4, lr}
 8082c6e:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 8082c70:	4b03      	ldr	r3, [pc, #12]	; (8082c80 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 8082c72:	f840 3b04 	str.w	r3, [r0], #4
 8082c76:	f7ff ffef 	bl	8082c58 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 8082c7a:	4620      	mov	r0, r4
 8082c7c:	bd10      	pop	{r4, pc}
 8082c7e:	bf00      	nop
 8082c80:	08085a80 	.word	0x08085a80

08082c84 <_ZN5spark16StreamLogHandlerD0Ev>:
 8082c84:	b510      	push	{r4, lr}
 8082c86:	4604      	mov	r4, r0
 8082c88:	f7ff fff0 	bl	8082c6c <_ZN5spark16StreamLogHandlerD1Ev>
 8082c8c:	4620      	mov	r0, r4
 8082c8e:	2124      	movs	r1, #36	; 0x24
 8082c90:	f001 fbbe 	bl	8084410 <_ZdlPvj>
 8082c94:	4620      	mov	r0, r4
 8082c96:	bd10      	pop	{r4, pc}

08082c98 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 8082c98:	b510      	push	{r4, lr}
 8082c9a:	4604      	mov	r4, r0
 8082c9c:	4b02      	ldr	r3, [pc, #8]	; (8082ca8 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 8082c9e:	6003      	str	r3, [r0, #0]
 8082ca0:	f7ff ffe4 	bl	8082c6c <_ZN5spark16StreamLogHandlerD1Ev>
 8082ca4:	4620      	mov	r0, r4
 8082ca6:	bd10      	pop	{r4, pc}
 8082ca8:	08085bf4 	.word	0x08085bf4

08082cac <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 8082cac:	b510      	push	{r4, lr}
 8082cae:	4604      	mov	r4, r0
 8082cb0:	f7ff fff2 	bl	8082c98 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 8082cb4:	4620      	mov	r0, r4
 8082cb6:	2124      	movs	r1, #36	; 0x24
 8082cb8:	f001 fbaa 	bl	8084410 <_ZdlPvj>
 8082cbc:	4620      	mov	r0, r4
 8082cbe:	bd10      	pop	{r4, pc}

08082cc0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 8082cc0:	2200      	movs	r2, #0
 8082cc2:	e9c0 2200 	strd	r2, r2, [r0]
 8082cc6:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 8082cc8:	b510      	push	{r4, lr}
      __a = _GLIBCXX_MOVE(__b);
 8082cca:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8082ccc:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 8082cce:	6004      	str	r4, [r0, #0]
 8082cd0:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8082cd2:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 8082cd4:	6044      	str	r4, [r0, #4]
 8082cd6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8082cd8:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 8082cda:	6084      	str	r4, [r0, #8]
}
 8082cdc:	bd10      	pop	{r4, pc}

08082cde <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
 8082cde:	b510      	push	{r4, lr}
 8082ce0:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8082ce2:	6803      	ldr	r3, [r0, #0]
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 8082ce4:	6818      	ldr	r0, [r3, #0]
 8082ce6:	f7fe fb63 	bl	80813b0 <os_mutex_recursive_unlock>
 8082cea:	4620      	mov	r0, r4
 8082cec:	bd10      	pop	{r4, pc}
	...

08082cf0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 8082cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082cf4:	b087      	sub	sp, #28
 8082cf6:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 8082cf8:	4b1c      	ldr	r3, [pc, #112]	; (8082d6c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 8082cfa:	4680      	mov	r8, r0
 8082cfc:	685b      	ldr	r3, [r3, #4]
 8082cfe:	4689      	mov	r9, r1
 8082d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8082d04:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 8082d06:	b96b      	cbnz	r3, 8082d24 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 8082d08:	f7ff fea8 	bl	8082a5c <_ZN5spark10LogManager8instanceEv>
 8082d0c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 8082d0e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 8082d12:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082d14:	9305      	str	r3, [sp, #20]
 8082d16:	f7fe fb43 	bl	80813a0 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
 8082d1a:	7b23      	ldrb	r3, [r4, #12]
 8082d1c:	b12b      	cbz	r3, 8082d2a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 8082d1e:	a805      	add	r0, sp, #20
 8082d20:	f7ff ffdd 	bl	8082cde <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 8082d24:	b007      	add	sp, #28
 8082d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 8082d2a:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 8082d2c:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 8082d30:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 8082d32:	e9d4 5300 	ldrd	r5, r3, [r4]
 8082d36:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 8082d3a:	45aa      	cmp	sl, r5
 8082d3c:	d012      	beq.n	8082d64 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 8082d3e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 8082d42:	4631      	mov	r1, r6
 8082d44:	1d38      	adds	r0, r7, #4
 8082d46:	f7ff fe15 	bl	8082974 <_ZNK5spark6detail9LogFilter5levelEPKc>
 8082d4a:	4581      	cmp	r9, r0
 8082d4c:	d3f5      	bcc.n	8082d3a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 8082d4e:	9a03      	ldr	r2, [sp, #12]
 8082d50:	683b      	ldr	r3, [r7, #0]
 8082d52:	9200      	str	r2, [sp, #0]
 8082d54:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8082d58:	464a      	mov	r2, r9
 8082d5a:	4633      	mov	r3, r6
 8082d5c:	4641      	mov	r1, r8
 8082d5e:	4638      	mov	r0, r7
 8082d60:	47d8      	blx	fp
 8082d62:	e7ea      	b.n	8082d3a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 8082d64:	2300      	movs	r3, #0
 8082d66:	7323      	strb	r3, [r4, #12]
 8082d68:	e7d9      	b.n	8082d1e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 8082d6a:	bf00      	nop
 8082d6c:	e000ed00 	.word	0xe000ed00

08082d70 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 8082d70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082d74:	469b      	mov	fp, r3
 8082d76:	4b1a      	ldr	r3, [pc, #104]	; (8082de0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 8082d78:	4680      	mov	r8, r0
 8082d7a:	685b      	ldr	r3, [r3, #4]
 8082d7c:	4689      	mov	r9, r1
 8082d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8082d82:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
 8082d84:	b96b      	cbnz	r3, 8082da2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 8082d86:	f7ff fe69 	bl	8082a5c <_ZN5spark10LogManager8instanceEv>
 8082d8a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 8082d8c:	f100 0324 	add.w	r3, r0, #36	; 0x24
 8082d90:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8082d92:	9301      	str	r3, [sp, #4]
 8082d94:	f7fe fb04 	bl	80813a0 <os_mutex_recursive_lock>
        if (that->isActive()) {
 8082d98:	7b23      	ldrb	r3, [r4, #12]
 8082d9a:	b12b      	cbz	r3, 8082da8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 8082d9c:	a801      	add	r0, sp, #4
 8082d9e:	f7ff ff9e 	bl	8082cde <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 8082da2:	b003      	add	sp, #12
 8082da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 8082da8:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 8082daa:	b2f6      	uxtb	r6, r6
 8082dac:	7323      	strb	r3, [r4, #12]
 8082dae:	e9d4 5300 	ldrd	r5, r3, [r4]
 8082db2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 8082db6:	4555      	cmp	r5, sl
 8082db8:	d00e      	beq.n	8082dd8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 8082dba:	f855 7b04 	ldr.w	r7, [r5], #4
 8082dbe:	4659      	mov	r1, fp
 8082dc0:	1d38      	adds	r0, r7, #4
 8082dc2:	f7ff fdd7 	bl	8082974 <_ZNK5spark6detail9LogFilter5levelEPKc>
 8082dc6:	4286      	cmp	r6, r0
 8082dc8:	d3f5      	bcc.n	8082db6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 8082dca:	683b      	ldr	r3, [r7, #0]
 8082dcc:	464a      	mov	r2, r9
 8082dce:	4641      	mov	r1, r8
 8082dd0:	4638      	mov	r0, r7
 8082dd2:	68db      	ldr	r3, [r3, #12]
 8082dd4:	4798      	blx	r3
 8082dd6:	e7ee      	b.n	8082db6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 8082dd8:	2300      	movs	r3, #0
 8082dda:	7323      	strb	r3, [r4, #12]
 8082ddc:	e7de      	b.n	8082d9c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 8082dde:	bf00      	nop
 8082de0:	e000ed00 	.word	0xe000ed00

08082de4 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 8082de4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8082de8:	4b16      	ldr	r3, [pc, #88]	; (8082e44 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 8082dea:	4605      	mov	r5, r0
 8082dec:	685b      	ldr	r3, [r3, #4]
 8082dee:	460f      	mov	r7, r1
 8082df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (HAL_IsISR()) {
 8082df4:	bb1b      	cbnz	r3, 8082e3e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 8082df6:	f7ff fe31 	bl	8082a5c <_ZN5spark10LogManager8instanceEv>
 8082dfa:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 8082dfc:	f100 0324 	add.w	r3, r0, #36	; 0x24
 8082e00:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8082e02:	9301      	str	r3, [sp, #4]
 8082e04:	f7fe facc 	bl	80813a0 <os_mutex_recursive_lock>
 8082e08:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 8082e0c:	2446      	movs	r4, #70	; 0x46
 8082e0e:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 8082e12:	45b0      	cmp	r8, r6
 8082e14:	d109      	bne.n	8082e2a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 8082e16:	a801      	add	r0, sp, #4
 8082e18:	f7ff ff61 	bl	8082cde <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 8082e1c:	42a5      	cmp	r5, r4
 8082e1e:	bfb4      	ite	lt
 8082e20:	2000      	movlt	r0, #0
 8082e22:	2001      	movge	r0, #1
}
 8082e24:	b002      	add	sp, #8
 8082e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 8082e2a:	f856 0b04 	ldr.w	r0, [r6], #4
 8082e2e:	4639      	mov	r1, r7
 8082e30:	3004      	adds	r0, #4
 8082e32:	f7ff fd9f 	bl	8082974 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 8082e36:	4284      	cmp	r4, r0
 8082e38:	bfa8      	it	ge
 8082e3a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 8082e3c:	e7e9      	b.n	8082e12 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 8082e3e:	2000      	movs	r0, #0
 8082e40:	e7f0      	b.n	8082e24 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 8082e42:	bf00      	nop
 8082e44:	e000ed00 	.word	0xe000ed00

08082e48 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 8082e48:	460b      	mov	r3, r1
 8082e4a:	b570      	push	{r4, r5, r6, lr}
 8082e4c:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 8082e4e:	c805      	ldmia	r0, {r0, r2}
 8082e50:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 8082e54:	4282      	cmp	r2, r0
 8082e56:	d007      	beq.n	8082e68 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x20>
 8082e58:	4601      	mov	r1, r0
            if (*p == value) {
 8082e5a:	681d      	ldr	r5, [r3, #0]
 8082e5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8082e60:	42ae      	cmp	r6, r5
 8082e62:	d003      	beq.n	8082e6c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
 8082e64:	4608      	mov	r0, r1
 8082e66:	e7f5      	b.n	8082e54 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
        return false;
 8082e68:	2000      	movs	r0, #0
}
 8082e6a:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
 8082e6c:	1a52      	subs	r2, r2, r1
 8082e6e:	f002 fa83 	bl	8085378 <memmove>
    --size_;
 8082e72:	6863      	ldr	r3, [r4, #4]
    return true;
 8082e74:	2001      	movs	r0, #1
    --size_;
 8082e76:	3b01      	subs	r3, #1
 8082e78:	6063      	str	r3, [r4, #4]
    return true;
 8082e7a:	e7f6      	b.n	8082e6a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>

08082e7c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 8082e7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8082e7e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 8082e80:	f100 0324 	add.w	r3, r0, #36	; 0x24
 8082e84:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 8082e86:	9101      	str	r1, [sp, #4]
 8082e88:	9303      	str	r3, [sp, #12]
 8082e8a:	f7fe fa89 	bl	80813a0 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 8082e8e:	4620      	mov	r0, r4
 8082e90:	a901      	add	r1, sp, #4
 8082e92:	f7ff ffd9 	bl	8082e48 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 8082e96:	b118      	cbz	r0, 8082ea0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 8082e98:	6863      	ldr	r3, [r4, #4]
 8082e9a:	b90b      	cbnz	r3, 8082ea0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 8082e9c:	f7ff fe06 	bl	8082aac <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 8082ea0:	a803      	add	r0, sp, #12
 8082ea2:	f7ff ff1c 	bl	8082cde <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 8082ea6:	b004      	add	sp, #16
 8082ea8:	bd10      	pop	{r4, pc}

08082eaa <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 8082eaa:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 8082eac:	b570      	push	{r4, r5, r6, lr}
 8082eae:	4604      	mov	r4, r0
 8082eb0:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 8082eb4:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 8082eb8:	42ae      	cmp	r6, r5
 8082eba:	d015      	beq.n	8082ee8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 8082ebc:	4620      	mov	r0, r4
 8082ebe:	f105 0110 	add.w	r1, r5, #16
 8082ec2:	f7ff ffc1 	bl	8082e48 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 8082ec6:	6863      	ldr	r3, [r4, #4]
 8082ec8:	b90b      	cbnz	r3, 8082ece <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 8082eca:	f7ff fdef 	bl	8082aac <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 8082ece:	69e0      	ldr	r0, [r4, #28]
 8082ed0:	6929      	ldr	r1, [r5, #16]
 8082ed2:	6803      	ldr	r3, [r0, #0]
 8082ed4:	68db      	ldr	r3, [r3, #12]
 8082ed6:	4798      	blx	r3
        if (h.stream) {
 8082ed8:	6969      	ldr	r1, [r5, #20]
 8082eda:	b119      	cbz	r1, 8082ee4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 8082edc:	6a20      	ldr	r0, [r4, #32]
 8082ede:	6803      	ldr	r3, [r0, #0]
 8082ee0:	68db      	ldr	r3, [r3, #12]
 8082ee2:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 8082ee4:	3518      	adds	r5, #24
 8082ee6:	e7e7      	b.n	8082eb8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 8082ee8:	2618      	movs	r6, #24
 8082eea:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 8082eee:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 8082ef2:	42ae      	cmp	r6, r5
 8082ef4:	d004      	beq.n	8082f00 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 8082ef6:	4628      	mov	r0, r5
 8082ef8:	f000 fd51 	bl	808399e <_ZN6StringD1Ev>
 8082efc:	3518      	adds	r5, #24
 8082efe:	e7f8      	b.n	8082ef2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 8082f00:	2300      	movs	r3, #0
 8082f02:	6163      	str	r3, [r4, #20]
}
 8082f04:	bd70      	pop	{r4, r5, r6, pc}

08082f06 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 8082f06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8082f08:	4604      	mov	r4, r0
    resetSystemCallbacks();
 8082f0a:	f7ff fdcf 	bl	8082aac <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 8082f0e:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8082f12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8082f14:	9301      	str	r3, [sp, #4]
 8082f16:	f7fe fa43 	bl	80813a0 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
 8082f1a:	4620      	mov	r0, r4
 8082f1c:	f7ff ffc5 	bl	8082eaa <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 8082f20:	a801      	add	r0, sp, #4
 8082f22:	f7ff fedc 	bl	8082cde <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 8082f26:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8082f28:	b108      	cbz	r0, 8082f2e <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 8082f2a:	f7fe fa31 	bl	8081390 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 8082f2e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 8082f32:	2618      	movs	r6, #24
 8082f34:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 8082f38:	42ae      	cmp	r6, r5
 8082f3a:	d004      	beq.n	8082f46 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 8082f3c:	4628      	mov	r0, r5
 8082f3e:	f000 fd2e 	bl	808399e <_ZN6StringD1Ev>
 8082f42:	3518      	adds	r5, #24
 8082f44:	e7f8      	b.n	8082f38 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 8082f46:	6920      	ldr	r0, [r4, #16]
 8082f48:	f7fe fcf8 	bl	808193c <free>
 8082f4c:	6820      	ldr	r0, [r4, #0]
 8082f4e:	f7fe fcf5 	bl	808193c <free>
}
 8082f52:	4620      	mov	r0, r4
 8082f54:	b002      	add	sp, #8
 8082f56:	bd70      	pop	{r4, r5, r6, pc}

08082f58 <__tcf_2>:
    static LogManager mgr;
 8082f58:	4801      	ldr	r0, [pc, #4]	; (8082f60 <__tcf_2+0x8>)
 8082f5a:	f7ff bfd4 	b.w	8082f06 <_ZN5spark10LogManagerD1Ev>
 8082f5e:	bf00      	nop
 8082f60:	200001d4 	.word	0x200001d4

08082f64 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 8082f64:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 8082f66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082f68:	4606      	mov	r6, r0
 8082f6a:	460c      	mov	r4, r1
 8082f6c:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 8082f6e:	d927      	bls.n	8082fc0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
 8082f70:	4290      	cmp	r0, r2
 8082f72:	d226      	bcs.n	8082fc2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
        capacity_(0) {
 8082f74:	2600      	movs	r6, #0
            --end;
 8082f76:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
 8082f7a:	1a6c      	subs	r4, r5, r1
 8082f7c:	f1a1 0714 	sub.w	r7, r1, #20
 8082f80:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 8082f82:	42af      	cmp	r7, r5
 8082f84:	d03d      	beq.n	8083002 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
 8082f86:	b1a4      	cbz	r4, 8082fb2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
 8082f88:	682b      	ldr	r3, [r5, #0]
 8082f8a:	6023      	str	r3, [r4, #0]
 8082f8c:	88ab      	ldrh	r3, [r5, #4]
 8082f8e:	80a3      	strh	r3, [r4, #4]
 8082f90:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
        capacity_(0) {
 8082f94:	e9c4 6602 	strd	r6, r6, [r4, #8]
 8082f98:	6126      	str	r6, [r4, #16]
 8082f9a:	80e3      	strh	r3, [r4, #6]
 8082f9c:	68ab      	ldr	r3, [r5, #8]
 8082f9e:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8082fa0:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082fa2:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 8082fa4:	68ea      	ldr	r2, [r5, #12]
 8082fa6:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8082fa8:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082faa:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 8082fac:	692a      	ldr	r2, [r5, #16]
 8082fae:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8082fb0:	612b      	str	r3, [r5, #16]
 8082fb2:	f105 0008 	add.w	r0, r5, #8
 8082fb6:	f7ff fe29 	bl	8082c0c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 8082fba:	3d14      	subs	r5, #20
 8082fbc:	3c14      	subs	r4, #20
 8082fbe:	e7e0      	b.n	8082f82 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
 8082fc0:	d01f      	beq.n	8083002 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
 8082fc2:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
 8082fc4:	42ac      	cmp	r4, r5
 8082fc6:	d01c      	beq.n	8083002 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
 8082fc8:	b1a6      	cbz	r6, 8082ff4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
 8082fca:	6823      	ldr	r3, [r4, #0]
 8082fcc:	6033      	str	r3, [r6, #0]
 8082fce:	88a3      	ldrh	r3, [r4, #4]
 8082fd0:	80b3      	strh	r3, [r6, #4]
 8082fd2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
        capacity_(0) {
 8082fd6:	e9c6 7702 	strd	r7, r7, [r6, #8]
 8082fda:	6137      	str	r7, [r6, #16]
 8082fdc:	80f3      	strh	r3, [r6, #6]
      __a = _GLIBCXX_MOVE(__b);
 8082fde:	68a3      	ldr	r3, [r4, #8]
 8082fe0:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8082fe2:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082fe4:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
 8082fe6:	68e2      	ldr	r2, [r4, #12]
 8082fe8:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8082fea:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082fec:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
 8082fee:	6922      	ldr	r2, [r4, #16]
 8082ff0:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8082ff2:	6123      	str	r3, [r4, #16]
 8082ff4:	f104 0008 	add.w	r0, r4, #8
 8082ff8:	f7ff fe08 	bl	8082c0c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 8082ffc:	3414      	adds	r4, #20
 8082ffe:	3614      	adds	r6, #20
 8083000:	e7e0      	b.n	8082fc4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
 8083002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08083004 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 8083004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8083006:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 808300a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 808300c:	4604      	mov	r4, r0
 808300e:	460e      	mov	r6, r1
 8083010:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8083012:	db0d      	blt.n	8083030 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
 8083014:	3501      	adds	r5, #1
        if (n > 0) {
 8083016:	2d00      	cmp	r5, #0
 8083018:	6800      	ldr	r0, [r0, #0]
 808301a:	dd04      	ble.n	8083026 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
 808301c:	00a9      	lsls	r1, r5, #2
 808301e:	f7fe fc95 	bl	808194c <realloc>
            if (!d) {
 8083022:	b918      	cbnz	r0, 808302c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
 8083024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 8083026:	f7fe fc89 	bl	808193c <free>
        T* d = nullptr;
 808302a:	2000      	movs	r0, #0
        data_ = d;
 808302c:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 808302e:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
 8083030:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
 8083032:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 8083034:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
 8083038:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 808303a:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
 808303e:	1d08      	adds	r0, r1, #4
 8083040:	f002 f99a 	bl	8085378 <memmove>
    new(p) T(std::move(value));
 8083044:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
 8083048:	6863      	ldr	r3, [r4, #4]
    return true;
 808304a:	2001      	movs	r0, #1
    ++size_;
 808304c:	3301      	adds	r3, #1
 808304e:	6063      	str	r3, [r4, #4]
    return true;
 8083050:	e7e8      	b.n	8083024 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

08083052 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 8083052:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8083054:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 8083056:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 808305a:	6a40      	ldr	r0, [r0, #36]	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
 808305c:	460d      	mov	r5, r1
 808305e:	9301      	str	r3, [sp, #4]
 8083060:	f7fe f99e 	bl	80813a0 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
 8083064:	e9d4 3100 	ldrd	r3, r1, [r4]
 8083068:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
 808306c:	4283      	cmp	r3, r0
 808306e:	461a      	mov	r2, r3
 8083070:	d00a      	beq.n	8083088 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 8083072:	6812      	ldr	r2, [r2, #0]
 8083074:	3304      	adds	r3, #4
 8083076:	42aa      	cmp	r2, r5
 8083078:	d1f8      	bne.n	808306c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
 808307a:	a801      	add	r0, sp, #4
 808307c:	f7ff fe2f 	bl	8082cde <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
 8083080:	2500      	movs	r5, #0
}
 8083082:	4628      	mov	r0, r5
 8083084:	b003      	add	sp, #12
 8083086:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
 8083088:	462a      	mov	r2, r5
 808308a:	4620      	mov	r0, r4
 808308c:	f7ff ffba 	bl	8083004 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 8083090:	4605      	mov	r5, r0
 8083092:	2800      	cmp	r0, #0
 8083094:	d0f1      	beq.n	808307a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 8083096:	6863      	ldr	r3, [r4, #4]
 8083098:	2b01      	cmp	r3, #1
 808309a:	d101      	bne.n	80830a0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 808309c:	f7ff fcfa 	bl	8082a94 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80830a0:	a801      	add	r0, sp, #4
 80830a2:	f7ff fe1c 	bl	8082cde <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 80830a6:	e7ec      	b.n	8083082 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

080830a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 80830a8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80830aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80830ac:	4604      	mov	r4, r0
 80830ae:	460d      	mov	r5, r1
 80830b0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80830b2:	d914      	bls.n	80830de <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 80830b4:	4290      	cmp	r0, r2
 80830b6:	d213      	bcs.n	80830e0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 80830b8:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 80830bc:	1a75      	subs	r5, r6, r1
 80830be:	f1a1 0710 	sub.w	r7, r1, #16
 80830c2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 80830c4:	42b7      	cmp	r7, r6
 80830c6:	d018      	beq.n	80830fa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 80830c8:	b11c      	cbz	r4, 80830d2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 80830ca:	4631      	mov	r1, r6
 80830cc:	4620      	mov	r0, r4
 80830ce:	f000 fce0 	bl	8083a92 <_ZN6StringC1EOS_>
                end->~T();
 80830d2:	4630      	mov	r0, r6
 80830d4:	f000 fc63 	bl	808399e <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 80830d8:	3e10      	subs	r6, #16
 80830da:	3c10      	subs	r4, #16
 80830dc:	e7f2      	b.n	80830c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 80830de:	d00c      	beq.n	80830fa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 80830e0:	42b5      	cmp	r5, r6
 80830e2:	d00a      	beq.n	80830fa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 80830e4:	b11c      	cbz	r4, 80830ee <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 80830e6:	4629      	mov	r1, r5
 80830e8:	4620      	mov	r0, r4
 80830ea:	f000 fcd2 	bl	8083a92 <_ZN6StringC1EOS_>
                p->~T();
 80830ee:	4628      	mov	r0, r5
 80830f0:	f000 fc55 	bl	808399e <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 80830f4:	3510      	adds	r5, #16
 80830f6:	3410      	adds	r4, #16
 80830f8:	e7f2      	b.n	80830e0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 80830fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080830fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 80830fc:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 80830fe:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 8083100:	4605      	mov	r5, r0
        if (n > 0) {
 8083102:	dd11      	ble.n	8083128 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 8083104:	0130      	lsls	r0, r6, #4
 8083106:	f7fe fc11 	bl	808192c <malloc>
            if (!d) {
 808310a:	4604      	mov	r4, r0
 808310c:	b158      	cbz	r0, 8083126 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 808310e:	e9d5 1200 	ldrd	r1, r2, [r5]
 8083112:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8083116:	f7ff ffc7 	bl	80830a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 808311a:	6828      	ldr	r0, [r5, #0]
 808311c:	f7fe fc0e 	bl	808193c <free>
        return true;
 8083120:	2001      	movs	r0, #1
        data_ = d;
 8083122:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 8083124:	60ae      	str	r6, [r5, #8]
    }
 8083126:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 8083128:	2400      	movs	r4, #0
 808312a:	e7f6      	b.n	808311a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

0808312c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 808312c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8083130:	4691      	mov	r9, r2
        capacity_(0) {
 8083132:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 8083134:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 8083136:	b097      	sub	sp, #92	; 0x5c
 8083138:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
 808313a:	f8d9 1004 	ldr.w	r1, [r9, #4]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 808313e:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 8083140:	4299      	cmp	r1, r3
        capacity_(0) {
 8083142:	e9c0 3300 	strd	r3, r3, [r0]
 8083146:	e9c0 3302 	strd	r3, r3, [r0, #8]
 808314a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 808314e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 8083152:	7602      	strb	r2, [r0, #24]
 8083154:	930c      	str	r3, [sp, #48]	; 0x30
    if (n > capacity_ && !realloc(n)) {
 8083156:	dc23      	bgt.n	80831a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 8083158:	e9d9 5700 	ldrd	r5, r7, [r9]
 808315c:	2314      	movs	r3, #20
 808315e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 8083162:	42af      	cmp	r7, r5
 8083164:	d03b      	beq.n	80831de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 8083166:	4629      	mov	r1, r5
 8083168:	a80d      	add	r0, sp, #52	; 0x34
 808316a:	f000 fc92 	bl	8083a92 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 808316e:	a90d      	add	r1, sp, #52	; 0x34
 8083170:	a811      	add	r0, sp, #68	; 0x44
 8083172:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8083174:	f000 fc8d 	bl	8083a92 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8083178:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 808317c:	4299      	cmp	r1, r3
 808317e:	da1b      	bge.n	80831b8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 8083180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
 8083182:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
 8083184:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 8083188:	4631      	mov	r1, r6
 808318a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 808318e:	f106 0010 	add.w	r0, r6, #16
 8083192:	f7ff ff89 	bl	80830a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 8083196:	b9ee      	cbnz	r6, 80831d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 8083198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 808319a:	3301      	adds	r3, #1
 808319c:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
 808319e:	e011      	b.n	80831c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 80831a0:	a80a      	add	r0, sp, #40	; 0x28
 80831a2:	f7ff ffab 	bl	80830fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80831a6:	2800      	cmp	r0, #0
 80831a8:	d1d6      	bne.n	8083158 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
 80831aa:	a80a      	add	r0, sp, #40	; 0x28
 80831ac:	f7ff fd42 	bl	8082c34 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80831b0:	4620      	mov	r0, r4
 80831b2:	b017      	add	sp, #92	; 0x5c
 80831b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80831b8:	3101      	adds	r1, #1
 80831ba:	a80a      	add	r0, sp, #40	; 0x28
 80831bc:	f7ff ff9e 	bl	80830fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80831c0:	2800      	cmp	r0, #0
 80831c2:	d1dd      	bne.n	8083180 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 80831c4:	a811      	add	r0, sp, #68	; 0x44
 80831c6:	f000 fbea 	bl	808399e <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 80831ca:	a80d      	add	r0, sp, #52	; 0x34
 80831cc:	f000 fbe7 	bl	808399e <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 80831d0:	3514      	adds	r5, #20
 80831d2:	e7c6      	b.n	8083162 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 80831d4:	4630      	mov	r0, r6
 80831d6:	a911      	add	r1, sp, #68	; 0x44
 80831d8:	f000 fc5b 	bl	8083a92 <_ZN6StringC1EOS_>
 80831dc:	e7dc      	b.n	8083198 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 80831de:	2600      	movs	r6, #0
 80831e0:	f04f 0a14 	mov.w	sl, #20
        size_t size = 0; // Name length
 80831e4:	4637      	mov	r7, r6
 80831e6:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
 80831ea:	960f      	str	r6, [sp, #60]	; 0x3c
    for (int i = 0; i < cats.size(); ++i) {
 80831ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80831f0:	429e      	cmp	r6, r3
 80831f2:	f280 8097 	bge.w	8083324 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
 80831f6:	0133      	lsls	r3, r6, #4
 80831f8:	58d3      	ldr	r3, [r2, r3]
 80831fa:	9308      	str	r3, [sp, #32]
        if (!category) {
 80831fc:	b90b      	cbnz	r3, 8083202 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
 80831fe:	3601      	adds	r6, #1
 8083200:	e7f4      	b.n	80831ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
 8083202:	fb0a f306 	mul.w	r3, sl, r6
 8083206:	9709      	str	r7, [sp, #36]	; 0x24
 8083208:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
 808320a:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
 808320c:	a909      	add	r1, sp, #36	; 0x24
 808320e:	a808      	add	r0, sp, #32
 8083210:	f7ff fae7 	bl	80827e2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 8083214:	4683      	mov	fp, r0
 8083216:	2800      	cmp	r0, #0
 8083218:	d0f1      	beq.n	80831fe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
 808321a:	4601      	mov	r1, r0
 808321c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808321e:	4628      	mov	r0, r5
 8083220:	f10d 031f 	add.w	r3, sp, #31
            bool found = false;
 8083224:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 8083228:	f7ff fb66 	bl	80828f8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 808322c:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 8083230:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 8083232:	f1b8 0f00 	cmp.w	r8, #0
 8083236:	d166      	bne.n	8083306 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
 8083238:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 808323c:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
            level(-1) {
 8083240:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 8083244:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8083248:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 808324c:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8083250:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8083254:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 8083258:	4293      	cmp	r3, r2
 808325a:	db1a      	blt.n	8083292 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
 808325c:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
 8083260:	f1bb 0f00 	cmp.w	fp, #0
 8083264:	dd4a      	ble.n	80832fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
 8083266:	fb0a f00b 	mul.w	r0, sl, fp
 808326a:	f7fe fb5f 	bl	808192c <malloc>
            if (!d) {
 808326e:	9004      	str	r0, [sp, #16]
 8083270:	2800      	cmp	r0, #0
 8083272:	d045      	beq.n	8083300 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
 8083274:	e9d5 1200 	ldrd	r1, r2, [r5]
 8083278:	fb0a 1202 	mla	r2, sl, r2, r1
 808327c:	f7ff fe72 	bl	8082f64 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
 8083280:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
 8083282:	6828      	ldr	r0, [r5, #0]
 8083284:	9304      	str	r3, [sp, #16]
 8083286:	f7fe fb59 	bl	808193c <free>
        data_ = d;
 808328a:	9b04      	ldr	r3, [sp, #16]
        capacity_ = n;
 808328c:	f8c5 b008 	str.w	fp, [r5, #8]
        data_ = d;
 8083290:	602b      	str	r3, [r5, #0]
    T* const p = data_ + i;
 8083292:	9b01      	ldr	r3, [sp, #4]
 8083294:	f8d5 b000 	ldr.w	fp, [r5]
 8083298:	fb0a f303 	mul.w	r3, sl, r3
    move(p + 1, p, data_ + size_);
 808329c:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
 808329e:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
 80832a2:	f101 0014 	add.w	r0, r1, #20
 80832a6:	fb0a b202 	mla	r2, sl, r2, fp
 80832aa:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
 80832ac:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
 80832ae:	f7ff fe59 	bl	8082f64 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 80832b2:	9904      	ldr	r1, [sp, #16]
 80832b4:	b1a9      	cbz	r1, 80832e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
 80832b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80832b8:	9b05      	ldr	r3, [sp, #20]
 80832ba:	f84b 2003 	str.w	r2, [fp, r3]
 80832be:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80832c2:	808b      	strh	r3, [r1, #4]
 80832c4:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
        capacity_(0) {
 80832c8:	e9c1 7702 	strd	r7, r7, [r1, #8]
 80832cc:	610f      	str	r7, [r1, #16]
 80832ce:	80cb      	strh	r3, [r1, #6]
      __a = _GLIBCXX_MOVE(__b);
 80832d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80832d2:	608b      	str	r3, [r1, #8]
 80832d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
 80832d6:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
 80832d8:	60cb      	str	r3, [r1, #12]
 80832da:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
 80832dc:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
 80832de:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80832e0:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
 80832e2:	686b      	ldr	r3, [r5, #4]
 80832e4:	3301      	adds	r3, #1
 80832e6:	606b      	str	r3, [r5, #4]
 80832e8:	a813      	add	r0, sp, #76	; 0x4c
 80832ea:	f7ff fc8f 	bl	8082c0c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80832ee:	f1b8 0f00 	cmp.w	r8, #0
 80832f2:	d008      	beq.n	8083306 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
 80832f4:	a80d      	add	r0, sp, #52	; 0x34
 80832f6:	f7ff fc89 	bl	8082c0c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80832fa:	e756      	b.n	80831aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 80832fc:	4643      	mov	r3, r8
 80832fe:	e7c0      	b.n	8083282 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 8083300:	f04f 0801 	mov.w	r8, #1
 8083304:	e7f0      	b.n	80832e8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
 8083306:	9b01      	ldr	r3, [sp, #4]
 8083308:	682d      	ldr	r5, [r5, #0]
 808330a:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
 808330e:	9b08      	ldr	r3, [sp, #32]
 8083310:	781b      	ldrb	r3, [r3, #0]
 8083312:	b92b      	cbnz	r3, 8083320 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
 8083314:	f8d9 3000 	ldr.w	r3, [r9]
 8083318:	9a02      	ldr	r2, [sp, #8]
 808331a:	4413      	add	r3, r2
 808331c:	7c1b      	ldrb	r3, [r3, #16]
 808331e:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 8083320:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 8083322:	e773      	b.n	808320c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8083324:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 8083326:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8083328:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 808332a:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808332c:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808332e:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
 8083330:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 8083332:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8083334:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 8083336:	60a2      	str	r2, [r4, #8]
 8083338:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 808333a:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808333c:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 808333e:	60e2      	str	r2, [r4, #12]
 8083340:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
 8083342:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8083344:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 8083346:	6122      	str	r2, [r4, #16]
 8083348:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
 808334a:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
 808334c:	9b03      	ldr	r3, [sp, #12]
 808334e:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
 8083350:	6162      	str	r2, [r4, #20]
 8083352:	7623      	strb	r3, [r4, #24]
 8083354:	e7ce      	b.n	80832f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

08083358 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 8083358:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
 808335a:	4605      	mov	r5, r0
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 808335c:	460e      	mov	r6, r1
 808335e:	4604      	mov	r4, r0
        filter_(level, filters) {
 8083360:	4b08      	ldr	r3, [pc, #32]	; (8083384 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
 8083362:	4611      	mov	r1, r2
 8083364:	f845 3b04 	str.w	r3, [r5], #4
 8083368:	a801      	add	r0, sp, #4
 808336a:	f7fd ff57 	bl	808121c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 808336e:	4631      	mov	r1, r6
 8083370:	aa01      	add	r2, sp, #4
 8083372:	4628      	mov	r0, r5
 8083374:	f7ff feda 	bl	808312c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8083378:	a801      	add	r0, sp, #4
 808337a:	f7fd fd91 	bl	8080ea0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 808337e:	4620      	mov	r0, r4
 8083380:	b004      	add	sp, #16
 8083382:	bd70      	pop	{r4, r5, r6, pc}
 8083384:	08085a80 	.word	0x08085a80

08083388 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 8083388:	b5f0      	push	{r4, r5, r6, r7, lr}
 808338a:	460f      	mov	r7, r1
 808338c:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 808338e:	4638      	mov	r0, r7
 8083390:	4925      	ldr	r1, [pc, #148]	; (8083428 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
 8083392:	4616      	mov	r6, r2
 8083394:	461d      	mov	r5, r3
 8083396:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 8083398:	f002 f85a 	bl	8085450 <strcmp>
 808339c:	bb00      	cbnz	r0, 80833e0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
 808339e:	b1e4      	cbz	r4, 80833da <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 80833a0:	4629      	mov	r1, r5
 80833a2:	4668      	mov	r0, sp
 80833a4:	f7ff fc8c 	bl	8082cc0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80833a8:	2024      	movs	r0, #36	; 0x24
 80833aa:	4920      	ldr	r1, [pc, #128]	; (808342c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 80833ac:	f001 f832 	bl	8084414 <_ZnwjRKSt9nothrow_t>
 80833b0:	4605      	mov	r5, r0
 80833b2:	b170      	cbz	r0, 80833d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 80833b4:	4669      	mov	r1, sp
 80833b6:	a803      	add	r0, sp, #12
 80833b8:	f7fd ff30 	bl	808121c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80833bc:	4631      	mov	r1, r6
 80833be:	aa03      	add	r2, sp, #12
 80833c0:	4628      	mov	r0, r5
 80833c2:	f7ff ffc9 	bl	8083358 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80833c6:	a803      	add	r0, sp, #12
 80833c8:	f7fd fd6a 	bl	8080ea0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
 80833cc:	4b18      	ldr	r3, [pc, #96]	; (8083430 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
 80833ce:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
 80833d0:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 80833d2:	4668      	mov	r0, sp
 80833d4:	f7fd fd64 	bl	8080ea0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80833d8:	462c      	mov	r4, r5
}
 80833da:	4620      	mov	r0, r4
 80833dc:	b007      	add	sp, #28
 80833de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 80833e0:	4638      	mov	r0, r7
 80833e2:	4914      	ldr	r1, [pc, #80]	; (8083434 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
 80833e4:	f002 f834 	bl	8085450 <strcmp>
 80833e8:	b9e0      	cbnz	r0, 8083424 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
 80833ea:	2c00      	cmp	r4, #0
 80833ec:	d0f5      	beq.n	80833da <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 80833ee:	4629      	mov	r1, r5
 80833f0:	4668      	mov	r0, sp
 80833f2:	f7ff fc65 	bl	8082cc0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80833f6:	2024      	movs	r0, #36	; 0x24
 80833f8:	490c      	ldr	r1, [pc, #48]	; (808342c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 80833fa:	f001 f80b 	bl	8084414 <_ZnwjRKSt9nothrow_t>
 80833fe:	4605      	mov	r5, r0
 8083400:	2800      	cmp	r0, #0
 8083402:	d0e6      	beq.n	80833d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 8083404:	4669      	mov	r1, sp
 8083406:	a803      	add	r0, sp, #12
 8083408:	f7fd ff08 	bl	808121c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 808340c:	4631      	mov	r1, r6
 808340e:	aa03      	add	r2, sp, #12
 8083410:	4628      	mov	r0, r5
 8083412:	f7ff ffa1 	bl	8083358 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8083416:	a803      	add	r0, sp, #12
 8083418:	f7fd fd42 	bl	8080ea0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 808341c:	4b06      	ldr	r3, [pc, #24]	; (8083438 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
 808341e:	622c      	str	r4, [r5, #32]
 8083420:	602b      	str	r3, [r5, #0]
}
 8083422:	e7d6      	b.n	80833d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
 8083424:	2400      	movs	r4, #0
 8083426:	e7d8      	b.n	80833da <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
 8083428:	08085b5f 	.word	0x08085b5f
 808342c:	08085cec 	.word	0x08085cec
 8083430:	08085bf4 	.word	0x08085bf4
 8083434:	08085b63 	.word	0x08085b63
 8083438:	08085bdc 	.word	0x08085bdc

0808343c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 808343c:	4b01      	ldr	r3, [pc, #4]	; (8083444 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 808343e:	4a02      	ldr	r2, [pc, #8]	; (8083448 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8083440:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 8083442:	4770      	bx	lr
 8083444:	200001d0 	.word	0x200001d0
 8083448:	08085b74 	.word	0x08085b74

0808344c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 808344c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8083450:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 8083452:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8083456:	4604      	mov	r4, r0
 8083458:	460e      	mov	r6, r1
 808345a:	4617      	mov	r7, r2
 808345c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 808345e:	f000 fdcb 	bl	8083ff8 <_Z16_fetch_usbserialv>
 8083462:	4581      	cmp	r9, r0
 8083464:	d04d      	beq.n	8083502 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 8083466:	792b      	ldrb	r3, [r5, #4]
 8083468:	0719      	lsls	r1, r3, #28
 808346a:	d504      	bpl.n	8083476 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 808346c:	4620      	mov	r0, r4
 808346e:	696a      	ldr	r2, [r5, #20]
 8083470:	4954      	ldr	r1, [pc, #336]	; (80835c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 8083472:	f7ff fa31 	bl	80828d8 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 8083476:	f1b8 0f00 	cmp.w	r8, #0
 808347a:	d00d      	beq.n	8083498 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 808347c:	215b      	movs	r1, #91	; 0x5b
 808347e:	4620      	mov	r0, r4
 8083480:	f7ff fa1e 	bl	80828c0 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 8083484:	4641      	mov	r1, r8
 8083486:	4620      	mov	r0, r4
 8083488:	f7ff fa0c 	bl	80828a4 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 808348c:	6823      	ldr	r3, [r4, #0]
 808348e:	2202      	movs	r2, #2
 8083490:	4620      	mov	r0, r4
 8083492:	68db      	ldr	r3, [r3, #12]
 8083494:	494c      	ldr	r1, [pc, #304]	; (80835c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 8083496:	4798      	blx	r3
    if (attr.has_file) {
 8083498:	792b      	ldrb	r3, [r5, #4]
 808349a:	07da      	lsls	r2, r3, #31
 808349c:	d524      	bpl.n	80834e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 808349e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 80834a2:	212f      	movs	r1, #47	; 0x2f
 80834a4:	4640      	mov	r0, r8
 80834a6:	f002 f82d 	bl	8085504 <strrchr>
    if (s1) {
 80834aa:	b108      	cbz	r0, 80834b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 80834ac:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 80834b0:	4641      	mov	r1, r8
 80834b2:	4620      	mov	r0, r4
 80834b4:	f7ff f9f6 	bl	80828a4 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 80834b8:	792b      	ldrb	r3, [r5, #4]
 80834ba:	079b      	lsls	r3, r3, #30
 80834bc:	d508      	bpl.n	80834d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 80834be:	213a      	movs	r1, #58	; 0x3a
 80834c0:	4620      	mov	r0, r4
 80834c2:	f7ff f9fd 	bl	80828c0 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 80834c6:	4620      	mov	r0, r4
 80834c8:	68ea      	ldr	r2, [r5, #12]
 80834ca:	4940      	ldr	r1, [pc, #256]	; (80835cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 80834cc:	f7ff fa04 	bl	80828d8 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 80834d0:	792a      	ldrb	r2, [r5, #4]
 80834d2:	6823      	ldr	r3, [r4, #0]
 80834d4:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 80834d8:	4620      	mov	r0, r4
            write(", ", 2);
 80834da:	f04f 0202 	mov.w	r2, #2
 80834de:	68db      	ldr	r3, [r3, #12]
 80834e0:	bf14      	ite	ne
 80834e2:	493b      	ldrne	r1, [pc, #236]	; (80835d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 80834e4:	493b      	ldreq	r1, [pc, #236]	; (80835d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 80834e6:	4798      	blx	r3
    if (attr.has_function) {
 80834e8:	792b      	ldrb	r3, [r5, #4]
 80834ea:	0758      	lsls	r0, r3, #29
 80834ec:	d51d      	bpl.n	808352a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80834ee:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 80834f0:	460b      	mov	r3, r1
 80834f2:	461a      	mov	r2, r3
    for (; *s; ++s) {
 80834f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80834f8:	b160      	cbz	r0, 8083514 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 80834fa:	2820      	cmp	r0, #32
 80834fc:	d108      	bne.n	8083510 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 80834fe:	4619      	mov	r1, r3
 8083500:	e7f7      	b.n	80834f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 8083502:	4835      	ldr	r0, [pc, #212]	; (80835d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 8083504:	f000 f967 	bl	80837d6 <_ZN5spark12NetworkClass9listeningEv>
 8083508:	2800      	cmp	r0, #0
 808350a:	d0ac      	beq.n	8083466 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 808350c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 8083510:	2828      	cmp	r0, #40	; 0x28
 8083512:	d1ee      	bne.n	80834f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 8083514:	6823      	ldr	r3, [r4, #0]
 8083516:	1a52      	subs	r2, r2, r1
 8083518:	4620      	mov	r0, r4
 808351a:	68db      	ldr	r3, [r3, #12]
 808351c:	4798      	blx	r3
        write("(): ", 4);
 808351e:	6823      	ldr	r3, [r4, #0]
 8083520:	2204      	movs	r2, #4
 8083522:	4620      	mov	r0, r4
 8083524:	68db      	ldr	r3, [r3, #12]
 8083526:	492d      	ldr	r1, [pc, #180]	; (80835dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 8083528:	4798      	blx	r3
    return log_level_name(level, nullptr);
 808352a:	2100      	movs	r1, #0
 808352c:	4638      	mov	r0, r7
 808352e:	f7fe f8c7 	bl	80816c0 <log_level_name>
 8083532:	4601      	mov	r1, r0
    write(s);
 8083534:	4620      	mov	r0, r4
 8083536:	f7ff f9b5 	bl	80828a4 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 808353a:	6823      	ldr	r3, [r4, #0]
 808353c:	2202      	movs	r2, #2
 808353e:	4620      	mov	r0, r4
 8083540:	68db      	ldr	r3, [r3, #12]
 8083542:	4924      	ldr	r1, [pc, #144]	; (80835d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 8083544:	4798      	blx	r3
    if (msg) {
 8083546:	b11e      	cbz	r6, 8083550 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 8083548:	4631      	mov	r1, r6
 808354a:	4620      	mov	r0, r4
 808354c:	f7ff f9aa 	bl	80828a4 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 8083550:	792b      	ldrb	r3, [r5, #4]
 8083552:	f013 0f30 	tst.w	r3, #48	; 0x30
 8083556:	d02c      	beq.n	80835b2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 8083558:	6823      	ldr	r3, [r4, #0]
 808355a:	4921      	ldr	r1, [pc, #132]	; (80835e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 808355c:	68db      	ldr	r3, [r3, #12]
 808355e:	2202      	movs	r2, #2
 8083560:	4620      	mov	r0, r4
 8083562:	4798      	blx	r3
        if (attr.has_code) {
 8083564:	792b      	ldrb	r3, [r5, #4]
 8083566:	06d9      	lsls	r1, r3, #27
 8083568:	d50a      	bpl.n	8083580 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 808356a:	6823      	ldr	r3, [r4, #0]
 808356c:	2207      	movs	r2, #7
 808356e:	4620      	mov	r0, r4
 8083570:	491c      	ldr	r1, [pc, #112]	; (80835e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 8083572:	68db      	ldr	r3, [r3, #12]
 8083574:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 8083576:	4620      	mov	r0, r4
 8083578:	69aa      	ldr	r2, [r5, #24]
 808357a:	491b      	ldr	r1, [pc, #108]	; (80835e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 808357c:	f7ff f9ac 	bl	80828d8 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 8083580:	792b      	ldrb	r3, [r5, #4]
 8083582:	069a      	lsls	r2, r3, #26
 8083584:	d511      	bpl.n	80835aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 8083586:	06db      	lsls	r3, r3, #27
 8083588:	d505      	bpl.n	8083596 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 808358a:	6823      	ldr	r3, [r4, #0]
 808358c:	2202      	movs	r2, #2
 808358e:	4620      	mov	r0, r4
 8083590:	68db      	ldr	r3, [r3, #12]
 8083592:	490f      	ldr	r1, [pc, #60]	; (80835d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 8083594:	4798      	blx	r3
            write("details = ", 10);
 8083596:	6823      	ldr	r3, [r4, #0]
 8083598:	4620      	mov	r0, r4
 808359a:	4914      	ldr	r1, [pc, #80]	; (80835ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 808359c:	220a      	movs	r2, #10
 808359e:	68db      	ldr	r3, [r3, #12]
 80835a0:	4798      	blx	r3
            write(attr.details);
 80835a2:	4620      	mov	r0, r4
 80835a4:	69e9      	ldr	r1, [r5, #28]
 80835a6:	f7ff f97d 	bl	80828a4 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 80835aa:	215d      	movs	r1, #93	; 0x5d
 80835ac:	4620      	mov	r0, r4
 80835ae:	f7ff f987 	bl	80828c0 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 80835b2:	6823      	ldr	r3, [r4, #0]
 80835b4:	4620      	mov	r0, r4
}
 80835b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 80835ba:	2202      	movs	r2, #2
 80835bc:	68db      	ldr	r3, [r3, #12]
 80835be:	490c      	ldr	r1, [pc, #48]	; (80835f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 80835c0:	4718      	bx	r3
 80835c2:	bf00      	nop
 80835c4:	08085b78 	.word	0x08085b78
 80835c8:	08085b7f 	.word	0x08085b7f
 80835cc:	08085b3c 	.word	0x08085b3c
 80835d0:	08085b82 	.word	0x08085b82
 80835d4:	08085b87 	.word	0x08085b87
 80835d8:	200001fc 	.word	0x200001fc
 80835dc:	08085b85 	.word	0x08085b85
 80835e0:	08085b8a 	.word	0x08085b8a
 80835e4:	08085b8d 	.word	0x08085b8d
 80835e8:	08085975 	.word	0x08085975
 80835ec:	08085b95 	.word	0x08085b95
 80835f0:	08085ba0 	.word	0x08085ba0

080835f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80835f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80835f8:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
 80835fa:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80835fe:	4605      	mov	r5, r0
 8083600:	460f      	mov	r7, r1
 8083602:	4690      	mov	r8, r2
 8083604:	461e      	mov	r6, r3
 8083606:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 8083608:	f000 fcf6 	bl	8083ff8 <_Z16_fetch_usbserialv>
 808360c:	4581      	cmp	r9, r0
 808360e:	d105      	bne.n	808361c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 8083610:	4849      	ldr	r0, [pc, #292]	; (8083738 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 8083612:	f000 f8e0 	bl	80837d6 <_ZN5spark12NetworkClass9listeningEv>
 8083616:	2800      	cmp	r0, #0
 8083618:	f040 808a 	bne.w	8083730 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 808361c:	f04f 0900 	mov.w	r9, #0
    JSONStreamWriter json(*this->stream());
 8083620:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 8083622:	4a46      	ldr	r2, [pc, #280]	; (808373c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 8083624:	a801      	add	r0, sp, #4
 8083626:	9201      	str	r2, [sp, #4]
 8083628:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 808362a:	f88d 9008 	strb.w	r9, [sp, #8]
 808362e:	f7ff f822 	bl	8082676 <_ZN5spark10JSONWriter11beginObjectEv>
 8083632:	4649      	mov	r1, r9
 8083634:	4640      	mov	r0, r8
 8083636:	f7fe f843 	bl	80816c0 <log_level_name>
 808363a:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 808363c:	4940      	ldr	r1, [pc, #256]	; (8083740 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 808363e:	2201      	movs	r2, #1
 8083640:	a801      	add	r0, sp, #4
 8083642:	f7ff f8a1 	bl	8082788 <_ZN5spark10JSONWriter4nameEPKcj>
 8083646:	4641      	mov	r1, r8
 8083648:	f7ff f91f 	bl	808288a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 808364c:	b13f      	cbz	r7, 808365e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 808364e:	493d      	ldr	r1, [pc, #244]	; (8083744 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 8083650:	2201      	movs	r2, #1
 8083652:	a801      	add	r0, sp, #4
 8083654:	f7ff f898 	bl	8082788 <_ZN5spark10JSONWriter4nameEPKcj>
 8083658:	4639      	mov	r1, r7
 808365a:	f7ff f916 	bl	808288a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 808365e:	b13e      	cbz	r6, 8083670 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 8083660:	4939      	ldr	r1, [pc, #228]	; (8083748 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 8083662:	2201      	movs	r2, #1
 8083664:	a801      	add	r0, sp, #4
 8083666:	f7ff f88f 	bl	8082788 <_ZN5spark10JSONWriter4nameEPKcj>
 808366a:	4631      	mov	r1, r6
 808366c:	f7ff f90d 	bl	808288a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 8083670:	7923      	ldrb	r3, [r4, #4]
 8083672:	07df      	lsls	r7, r3, #31
 8083674:	d50e      	bpl.n	8083694 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 8083676:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 8083678:	212f      	movs	r1, #47	; 0x2f
 808367a:	4630      	mov	r0, r6
 808367c:	f001 ff42 	bl	8085504 <strrchr>
    if (s1) {
 8083680:	b100      	cbz	r0, 8083684 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 8083682:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 8083684:	4931      	ldr	r1, [pc, #196]	; (808374c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 8083686:	2201      	movs	r2, #1
 8083688:	a801      	add	r0, sp, #4
 808368a:	f7ff f87d 	bl	8082788 <_ZN5spark10JSONWriter4nameEPKcj>
 808368e:	4631      	mov	r1, r6
 8083690:	f7ff f8fb 	bl	808288a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 8083694:	7923      	ldrb	r3, [r4, #4]
 8083696:	079e      	lsls	r6, r3, #30
 8083698:	d507      	bpl.n	80836aa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 808369a:	492d      	ldr	r1, [pc, #180]	; (8083750 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 808369c:	2202      	movs	r2, #2
 808369e:	a801      	add	r0, sp, #4
 80836a0:	f7ff f872 	bl	8082788 <_ZN5spark10JSONWriter4nameEPKcj>
 80836a4:	68e1      	ldr	r1, [r4, #12]
 80836a6:	f7fe fff3 	bl	8082690 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 80836aa:	7923      	ldrb	r3, [r4, #4]
 80836ac:	0758      	lsls	r0, r3, #29
 80836ae:	d514      	bpl.n	80836da <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80836b0:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 80836b2:	4633      	mov	r3, r6
 80836b4:	461f      	mov	r7, r3
    for (; *s; ++s) {
 80836b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80836ba:	b12a      	cbz	r2, 80836c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 80836bc:	2a20      	cmp	r2, #32
 80836be:	d101      	bne.n	80836c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 80836c0:	461e      	mov	r6, r3
 80836c2:	e7f7      	b.n	80836b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 80836c4:	2a28      	cmp	r2, #40	; 0x28
 80836c6:	d1f5      	bne.n	80836b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 80836c8:	2202      	movs	r2, #2
 80836ca:	4922      	ldr	r1, [pc, #136]	; (8083754 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 80836cc:	a801      	add	r0, sp, #4
 80836ce:	f7ff f85b 	bl	8082788 <_ZN5spark10JSONWriter4nameEPKcj>
 80836d2:	4631      	mov	r1, r6
 80836d4:	1bba      	subs	r2, r7, r6
 80836d6:	f7ff f866 	bl	80827a6 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 80836da:	7923      	ldrb	r3, [r4, #4]
 80836dc:	0719      	lsls	r1, r3, #28
 80836de:	d507      	bpl.n	80836f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 80836e0:	491d      	ldr	r1, [pc, #116]	; (8083758 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 80836e2:	2201      	movs	r2, #1
 80836e4:	a801      	add	r0, sp, #4
 80836e6:	f7ff f84f 	bl	8082788 <_ZN5spark10JSONWriter4nameEPKcj>
 80836ea:	6961      	ldr	r1, [r4, #20]
 80836ec:	f7fe ffe2 	bl	80826b4 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 80836f0:	7923      	ldrb	r3, [r4, #4]
 80836f2:	06da      	lsls	r2, r3, #27
 80836f4:	d508      	bpl.n	8083708 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 80836f6:	2204      	movs	r2, #4
 80836f8:	4918      	ldr	r1, [pc, #96]	; (808375c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 80836fa:	eb0d 0002 	add.w	r0, sp, r2
 80836fe:	f7ff f843 	bl	8082788 <_ZN5spark10JSONWriter4nameEPKcj>
 8083702:	69a1      	ldr	r1, [r4, #24]
 8083704:	f7fe ffc4 	bl	8082690 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 8083708:	7923      	ldrb	r3, [r4, #4]
 808370a:	069b      	lsls	r3, r3, #26
 808370c:	d507      	bpl.n	808371e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 808370e:	4914      	ldr	r1, [pc, #80]	; (8083760 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 8083710:	2206      	movs	r2, #6
 8083712:	a801      	add	r0, sp, #4
 8083714:	f7ff f838 	bl	8082788 <_ZN5spark10JSONWriter4nameEPKcj>
 8083718:	69e1      	ldr	r1, [r4, #28]
 808371a:	f7ff f8b6 	bl	808288a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 808371e:	a801      	add	r0, sp, #4
 8083720:	f7fe ff93 	bl	808264a <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
 8083724:	6a28      	ldr	r0, [r5, #32]
 8083726:	2202      	movs	r2, #2
 8083728:	6803      	ldr	r3, [r0, #0]
 808372a:	490e      	ldr	r1, [pc, #56]	; (8083764 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 808372c:	68db      	ldr	r3, [r3, #12]
 808372e:	4798      	blx	r3
}
 8083730:	b005      	add	sp, #20
 8083732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8083736:	bf00      	nop
 8083738:	200001fc 	.word	0x200001fc
 808373c:	08085bc4 	.word	0x08085bc4
 8083740:	08085b52 	.word	0x08085b52
 8083744:	0808576c 	.word	0x0808576c
 8083748:	08085ba3 	.word	0x08085ba3
 808374c:	08085ba5 	.word	0x08085ba5
 8083750:	08085ba7 	.word	0x08085ba7
 8083754:	08085baa 	.word	0x08085baa
 8083758:	0808577c 	.word	0x0808577c
 808375c:	08085bad 	.word	0x08085bad
 8083760:	08085bb2 	.word	0x08085bb2
 8083764:	08085ba0 	.word	0x08085ba0

08083768 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8083768:	2300      	movs	r3, #0
 808376a:	6840      	ldr	r0, [r0, #4]
 808376c:	461a      	mov	r2, r3
 808376e:	f7fe b87d 	b.w	808186c <network_connect>

08083772 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8083772:	2200      	movs	r2, #0
 8083774:	2102      	movs	r1, #2
 8083776:	6840      	ldr	r0, [r0, #4]
 8083778:	f7fe b888 	b.w	808188c <network_disconnect>

0808377c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 808377c:	2200      	movs	r2, #0
 808377e:	6840      	ldr	r0, [r0, #4]
 8083780:	4611      	mov	r1, r2
 8083782:	f7fe b87b 	b.w	808187c <network_connecting>

08083786 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8083786:	2200      	movs	r2, #0
 8083788:	6840      	ldr	r0, [r0, #4]
 808378a:	4611      	mov	r1, r2
 808378c:	f7fe b886 	b.w	808189c <network_ready>

08083790 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8083790:	2300      	movs	r3, #0
 8083792:	6840      	ldr	r0, [r0, #4]
 8083794:	461a      	mov	r2, r3
 8083796:	4619      	mov	r1, r3
 8083798:	f7fe b888 	b.w	80818ac <network_on>

0808379c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 808379c:	2300      	movs	r3, #0
 808379e:	6840      	ldr	r0, [r0, #4]
 80837a0:	461a      	mov	r2, r3
 80837a2:	4619      	mov	r1, r3
 80837a4:	f7fe b88a 	b.w	80818bc <network_off>

080837a8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80837a8:	2100      	movs	r1, #0
 80837aa:	6840      	ldr	r0, [r0, #4]
 80837ac:	f7fe b8ae 	b.w	808190c <network_is_on>

080837b0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80837b0:	2100      	movs	r1, #0
 80837b2:	6840      	ldr	r0, [r0, #4]
 80837b4:	f7fe b8b2 	b.w	808191c <network_is_off>

080837b8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80837b8:	2200      	movs	r2, #0
 80837ba:	6840      	ldr	r0, [r0, #4]
 80837bc:	f081 0101 	eor.w	r1, r1, #1
 80837c0:	f7fe b884 	b.w	80818cc <network_listen>

080837c4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80837c4:	2200      	movs	r2, #0
 80837c6:	6840      	ldr	r0, [r0, #4]
 80837c8:	f7fe b890 	b.w	80818ec <network_set_listen_timeout>

080837cc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80837cc:	2200      	movs	r2, #0
 80837ce:	6840      	ldr	r0, [r0, #4]
 80837d0:	4611      	mov	r1, r2
 80837d2:	f7fe b893 	b.w	80818fc <network_get_listen_timeout>

080837d6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80837d6:	2200      	movs	r2, #0
 80837d8:	6840      	ldr	r0, [r0, #4]
 80837da:	4611      	mov	r1, r2
 80837dc:	f7fe b87e 	b.w	80818dc <network_listening>

080837e0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80837e0:	b570      	push	{r4, r5, r6, lr}
 80837e2:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 80837e4:	2600      	movs	r6, #0
 80837e6:	b086      	sub	sp, #24
 80837e8:	4604      	mov	r4, r0
    IPAddress addr;
 80837ea:	a804      	add	r0, sp, #16
 80837ec:	f7fe fdd4 	bl	8082398 <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80837f0:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 80837f2:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80837f4:	f001 fe59 	bl	80854aa <strlen>
 80837f8:	4b0a      	ldr	r3, [pc, #40]	; (8083824 <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 80837fa:	9600      	str	r6, [sp, #0]
 80837fc:	b281      	uxth	r1, r0
 80837fe:	685b      	ldr	r3, [r3, #4]
 8083800:	4628      	mov	r0, r5
 8083802:	aa03      	add	r2, sp, #12
 8083804:	f7fd fdb4 	bl	8081370 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8083808:	b130      	cbz	r0, 8083818 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 808380a:	4631      	mov	r1, r6
 808380c:	4620      	mov	r0, r4
 808380e:	f7fe fdd3 	bl	80823b8 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8083812:	4620      	mov	r0, r4
 8083814:	b006      	add	sp, #24
 8083816:	bd70      	pop	{r4, r5, r6, pc}
 8083818:	4620      	mov	r0, r4
 808381a:	a903      	add	r1, sp, #12
 808381c:	f7fe fdc4 	bl	80823a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 8083820:	e7f7      	b.n	8083812 <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 8083822:	bf00      	nop
 8083824:	20000194 	.word	0x20000194

08083828 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8083828:	4b02      	ldr	r3, [pc, #8]	; (8083834 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 808382a:	4a03      	ldr	r2, [pc, #12]	; (8083838 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 808382c:	601a      	str	r2, [r3, #0]
 808382e:	2200      	movs	r2, #0
 8083830:	605a      	str	r2, [r3, #4]

} // spark
 8083832:	4770      	bx	lr
 8083834:	200001fc 	.word	0x200001fc
 8083838:	08085c3c 	.word	0x08085c3c

0808383c <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 808383c:	b508      	push	{r3, lr}
            return &Wire3;
 808383e:	f000 fdb5 	bl	80843ac <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}
 8083842:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
 8083846:	f7fe bd47 	b.w	80822d8 <_ZN7TwoWire4lockEv>

0808384a <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
 808384a:	b510      	push	{r4, lr}
 808384c:	4604      	mov	r4, r0
    lock_(_lock)
 808384e:	7001      	strb	r1, [r0, #0]
    if (lock_) {
 8083850:	b109      	cbz	r1, 8083856 <_ZN4PMICC1Eb+0xc>
        lock();
 8083852:	f7ff fff3 	bl	808383c <_ZN4PMIC4lockEv.constprop.0>
}
 8083856:	4620      	mov	r0, r4
 8083858:	bd10      	pop	{r4, pc}

0808385a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 808385a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808385c:	4606      	mov	r6, r0
 808385e:	460d      	mov	r5, r1
  size_t n = 0;
 8083860:	2400      	movs	r4, #0
 8083862:	188f      	adds	r7, r1, r2
  while (size--) {
 8083864:	42bd      	cmp	r5, r7
 8083866:	d00c      	beq.n	8083882 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8083868:	6833      	ldr	r3, [r6, #0]
 808386a:	4630      	mov	r0, r6
 808386c:	689b      	ldr	r3, [r3, #8]
 808386e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8083872:	4798      	blx	r3
     if (chunk>=0)
 8083874:	1e03      	subs	r3, r0, #0
 8083876:	db01      	blt.n	808387c <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8083878:	441c      	add	r4, r3
  while (size--) {
 808387a:	e7f3      	b.n	8083864 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 808387c:	2c00      	cmp	r4, #0
 808387e:	bf08      	it	eq
 8083880:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 8083882:	4620      	mov	r0, r4
 8083884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08083886 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 8083886:	b570      	push	{r4, r5, r6, lr}
 8083888:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 808388a:	460c      	mov	r4, r1
    }
 808388c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 808388e:	b149      	cbz	r1, 80838a4 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8083890:	f001 fe0b 	bl	80854aa <strlen>
 8083894:	682b      	ldr	r3, [r5, #0]
 8083896:	4602      	mov	r2, r0
 8083898:	4621      	mov	r1, r4
 808389a:	4628      	mov	r0, r5
    }
 808389c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80838a0:	68db      	ldr	r3, [r3, #12]
 80838a2:	4718      	bx	r3
    }
 80838a4:	bd70      	pop	{r4, r5, r6, pc}

080838a6 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80838a6:	6803      	ldr	r3, [r0, #0]
 80838a8:	689b      	ldr	r3, [r3, #8]
 80838aa:	4718      	bx	r3

080838ac <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80838ac:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80838ae:	210d      	movs	r1, #13
{
 80838b0:	4605      	mov	r5, r0
  size_t n = print('\r');
 80838b2:	f7ff fff8 	bl	80838a6 <_ZN5Print5printEc>
  n += print('\n');
 80838b6:	210a      	movs	r1, #10
  size_t n = print('\r');
 80838b8:	4604      	mov	r4, r0
  n += print('\n');
 80838ba:	4628      	mov	r0, r5
 80838bc:	f7ff fff3 	bl	80838a6 <_ZN5Print5printEc>
  return n;
}
 80838c0:	4420      	add	r0, r4
 80838c2:	bd38      	pop	{r3, r4, r5, pc}

080838c4 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80838c4:	b538      	push	{r3, r4, r5, lr}
 80838c6:	4605      	mov	r5, r0
  return write(str);
 80838c8:	f7ff ffdd 	bl	8083886 <_ZN5Print5writeEPKc>
 80838cc:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80838ce:	4628      	mov	r0, r5
 80838d0:	f7ff ffec 	bl	80838ac <_ZN5Print7printlnEv>
  return n;
}
 80838d4:	4420      	add	r0, r4
 80838d6:	bd38      	pop	{r3, r4, r5, pc}

080838d8 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80838d8:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80838da:	2a01      	cmp	r2, #1
 80838dc:	bf98      	it	ls
 80838de:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80838e0:	b530      	push	{r4, r5, lr}
 80838e2:	b08b      	sub	sp, #44	; 0x2c
 80838e4:	460c      	mov	r4, r1
  *str = '\0';
 80838e6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80838ea:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80838ec:	4625      	mov	r5, r4
 80838ee:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80838f2:	fb04 5312 	mls	r3, r4, r2, r5
 80838f6:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80838f8:	2b09      	cmp	r3, #9
 80838fa:	bf94      	ite	ls
 80838fc:	3330      	addls	r3, #48	; 0x30
 80838fe:	3337      	addhi	r3, #55	; 0x37
 8083900:	b2db      	uxtb	r3, r3
  } while(n);
 8083902:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8083904:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 8083908:	d9f0      	bls.n	80838ec <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 808390a:	f7ff ffbc 	bl	8083886 <_ZN5Print5writeEPKc>
}
 808390e:	b00b      	add	sp, #44	; 0x2c
 8083910:	bd30      	pop	{r4, r5, pc}

08083912 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 8083912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083916:	b086      	sub	sp, #24
 8083918:	af00      	add	r7, sp, #0
 808391a:	4605      	mov	r5, r0
 808391c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 808391e:	1d38      	adds	r0, r7, #4
 8083920:	2114      	movs	r1, #20
{
 8083922:	4614      	mov	r4, r2
    va_copy(args2, args);
 8083924:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 8083926:	f7fe f829 	bl	808197c <vsnprintf>

    if (n<bufsize)
 808392a:	2813      	cmp	r0, #19
 808392c:	d80e      	bhi.n	808394c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 808392e:	4628      	mov	r0, r5
 8083930:	1d39      	adds	r1, r7, #4
 8083932:	f7ff ffa8 	bl	8083886 <_ZN5Print5writeEPKc>
 8083936:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 8083938:	b11e      	cbz	r6, 8083942 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 808393a:	4628      	mov	r0, r5
 808393c:	f7ff ffb6 	bl	80838ac <_ZN5Print7printlnEv>
 8083940:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 8083942:	4620      	mov	r0, r4
 8083944:	3718      	adds	r7, #24
 8083946:	46bd      	mov	sp, r7
 8083948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 808394c:	f100 0308 	add.w	r3, r0, #8
 8083950:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 8083954:	46e8      	mov	r8, sp
        char bigger[n+1];
 8083956:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 808395a:	4622      	mov	r2, r4
 808395c:	1c41      	adds	r1, r0, #1
 808395e:	683b      	ldr	r3, [r7, #0]
 8083960:	4668      	mov	r0, sp
 8083962:	f7fe f80b 	bl	808197c <vsnprintf>
  return write(str);
 8083966:	4669      	mov	r1, sp
 8083968:	4628      	mov	r0, r5
 808396a:	f7ff ff8c 	bl	8083886 <_ZN5Print5writeEPKc>
 808396e:	4604      	mov	r4, r0
 8083970:	46c5      	mov	sp, r8
 8083972:	e7e1      	b.n	8083938 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

08083974 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 8083974:	2200      	movs	r2, #0
 8083976:	4b01      	ldr	r3, [pc, #4]	; (808397c <_GLOBAL__sub_I_RGB+0x8>)
 8083978:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 808397a:	4770      	bx	lr
 808397c:	20000204 	.word	0x20000204

08083980 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 8083980:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 8083982:	2600      	movs	r6, #0
 8083984:	4604      	mov	r4, r0
 8083986:	460d      	mov	r5, r1
 8083988:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 808398c:	f7fd fcf8 	bl	8081380 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 8083990:	4628      	mov	r0, r5
    _spi = spi;
 8083992:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 8083994:	f7fd fde4 	bl	8081560 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 8083998:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 808399a:	6066      	str	r6, [r4, #4]
}
 808399c:	bd70      	pop	{r4, r5, r6, pc}

0808399e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 808399e:	b510      	push	{r4, lr}
 80839a0:	4604      	mov	r4, r0
{
	free(buffer);
 80839a2:	6800      	ldr	r0, [r0, #0]
 80839a4:	f7fd ffca 	bl	808193c <free>
}
 80839a8:	4620      	mov	r0, r4
 80839aa:	bd10      	pop	{r4, pc}

080839ac <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80839ac:	b510      	push	{r4, lr}
 80839ae:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80839b0:	6800      	ldr	r0, [r0, #0]
 80839b2:	b108      	cbz	r0, 80839b8 <_ZN6String10invalidateEv+0xc>
 80839b4:	f7fd ffc2 	bl	808193c <free>
	buffer = NULL;
 80839b8:	2300      	movs	r3, #0
	capacity = len = 0;
 80839ba:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80839be:	6023      	str	r3, [r4, #0]
}
 80839c0:	bd10      	pop	{r4, pc}

080839c2 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80839c2:	b538      	push	{r3, r4, r5, lr}
 80839c4:	4604      	mov	r4, r0
 80839c6:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80839c8:	6800      	ldr	r0, [r0, #0]
 80839ca:	3101      	adds	r1, #1
 80839cc:	f7fd ffbe 	bl	808194c <realloc>
	if (newbuffer) {
 80839d0:	b110      	cbz	r0, 80839d8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80839d2:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80839d6:	2001      	movs	r0, #1
	}
	return 0;
}
 80839d8:	bd38      	pop	{r3, r4, r5, pc}

080839da <_ZN6String7reserveEj>:
{
 80839da:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80839dc:	6803      	ldr	r3, [r0, #0]
{
 80839de:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80839e0:	b123      	cbz	r3, 80839ec <_ZN6String7reserveEj+0x12>
 80839e2:	6843      	ldr	r3, [r0, #4]
 80839e4:	428b      	cmp	r3, r1
 80839e6:	d301      	bcc.n	80839ec <_ZN6String7reserveEj+0x12>
 80839e8:	2001      	movs	r0, #1
}
 80839ea:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80839ec:	4620      	mov	r0, r4
 80839ee:	f7ff ffe8 	bl	80839c2 <_ZN6String12changeBufferEj>
 80839f2:	2800      	cmp	r0, #0
 80839f4:	d0f9      	beq.n	80839ea <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80839f6:	68a3      	ldr	r3, [r4, #8]
 80839f8:	2b00      	cmp	r3, #0
 80839fa:	d1f5      	bne.n	80839e8 <_ZN6String7reserveEj+0xe>
 80839fc:	6822      	ldr	r2, [r4, #0]
 80839fe:	7013      	strb	r3, [r2, #0]
 8083a00:	e7f2      	b.n	80839e8 <_ZN6String7reserveEj+0xe>

08083a02 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8083a02:	b570      	push	{r4, r5, r6, lr}
 8083a04:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8083a06:	4611      	mov	r1, r2
{
 8083a08:	4604      	mov	r4, r0
 8083a0a:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8083a0c:	f7ff ffe5 	bl	80839da <_ZN6String7reserveEj>
 8083a10:	b920      	cbnz	r0, 8083a1c <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 8083a12:	4620      	mov	r0, r4
 8083a14:	f7ff ffca 	bl	80839ac <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 8083a18:	4620      	mov	r0, r4
 8083a1a:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 8083a1c:	462a      	mov	r2, r5
 8083a1e:	4631      	mov	r1, r6
 8083a20:	6820      	ldr	r0, [r4, #0]
	len = length;
 8083a22:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8083a24:	f001 fc9a 	bl	808535c <memcpy>
	buffer[len] = 0;
 8083a28:	2100      	movs	r1, #0
 8083a2a:	6822      	ldr	r2, [r4, #0]
 8083a2c:	68a3      	ldr	r3, [r4, #8]
 8083a2e:	54d1      	strb	r1, [r2, r3]
	return *this;
 8083a30:	e7f2      	b.n	8083a18 <_ZN6String4copyEPKcj+0x16>

08083a32 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 8083a32:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 8083a34:	2300      	movs	r3, #0
String::String(const char *cstr)
 8083a36:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 8083a38:	460d      	mov	r5, r1
	capacity = 0;
 8083a3a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8083a3e:	6083      	str	r3, [r0, #8]
	flags = 0;
 8083a40:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 8083a42:	b139      	cbz	r1, 8083a54 <_ZN6StringC1EPKc+0x22>
 8083a44:	4608      	mov	r0, r1
 8083a46:	f001 fd30 	bl	80854aa <strlen>
 8083a4a:	4629      	mov	r1, r5
 8083a4c:	4602      	mov	r2, r0
 8083a4e:	4620      	mov	r0, r4
 8083a50:	f7ff ffd7 	bl	8083a02 <_ZN6String4copyEPKcj>
}
 8083a54:	4620      	mov	r0, r4
 8083a56:	bd38      	pop	{r3, r4, r5, pc}

08083a58 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8083a58:	b538      	push	{r3, r4, r5, lr}
 8083a5a:	4605      	mov	r5, r0
	if (buffer) {
 8083a5c:	6800      	ldr	r0, [r0, #0]
{
 8083a5e:	460c      	mov	r4, r1
	if (buffer) {
 8083a60:	b168      	cbz	r0, 8083a7e <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 8083a62:	686a      	ldr	r2, [r5, #4]
 8083a64:	688b      	ldr	r3, [r1, #8]
 8083a66:	429a      	cmp	r2, r3
 8083a68:	d307      	bcc.n	8083a7a <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 8083a6a:	6809      	ldr	r1, [r1, #0]
 8083a6c:	f001 fcfa 	bl	8085464 <strcpy>
			len = rhs.len;
 8083a70:	68a3      	ldr	r3, [r4, #8]
 8083a72:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 8083a74:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 8083a76:	60a3      	str	r3, [r4, #8]
}
 8083a78:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 8083a7a:	f7fd ff5f 	bl	808193c <free>
	buffer = rhs.buffer;
 8083a7e:	6823      	ldr	r3, [r4, #0]
 8083a80:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 8083a82:	6863      	ldr	r3, [r4, #4]
 8083a84:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 8083a86:	68a3      	ldr	r3, [r4, #8]
 8083a88:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 8083a8a:	2300      	movs	r3, #0
	rhs.capacity = 0;
 8083a8c:	e9c4 3300 	strd	r3, r3, [r4]
 8083a90:	e7f1      	b.n	8083a76 <_ZN6String4moveERS_+0x1e>

08083a92 <_ZN6StringC1EOS_>:
	buffer = NULL;
 8083a92:	2300      	movs	r3, #0
String::String(String &&rval)
 8083a94:	b510      	push	{r4, lr}
 8083a96:	4604      	mov	r4, r0
	capacity = 0;
 8083a98:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8083a9c:	6083      	str	r3, [r0, #8]
	flags = 0;
 8083a9e:	7303      	strb	r3, [r0, #12]
	move(rval);
 8083aa0:	f7ff ffda 	bl	8083a58 <_ZN6String4moveERS_>
}
 8083aa4:	4620      	mov	r0, r4
 8083aa6:	bd10      	pop	{r4, pc}

08083aa8 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8083aa8:	4288      	cmp	r0, r1
{
 8083aaa:	b510      	push	{r4, lr}
 8083aac:	460b      	mov	r3, r1
 8083aae:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8083ab0:	d004      	beq.n	8083abc <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8083ab2:	6809      	ldr	r1, [r1, #0]
 8083ab4:	b121      	cbz	r1, 8083ac0 <_ZN6StringaSERKS_+0x18>
 8083ab6:	689a      	ldr	r2, [r3, #8]
 8083ab8:	f7ff ffa3 	bl	8083a02 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 8083abc:	4620      	mov	r0, r4
 8083abe:	bd10      	pop	{r4, pc}
	else invalidate();
 8083ac0:	f7ff ff74 	bl	80839ac <_ZN6String10invalidateEv>
 8083ac4:	e7fa      	b.n	8083abc <_ZN6StringaSERKS_+0x14>

08083ac6 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 8083ac6:	2300      	movs	r3, #0
String::String(const String &value)
 8083ac8:	b510      	push	{r4, lr}
 8083aca:	4604      	mov	r4, r0
	capacity = 0;
 8083acc:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8083ad0:	6083      	str	r3, [r0, #8]
	flags = 0;
 8083ad2:	7303      	strb	r3, [r0, #12]
	*this = value;
 8083ad4:	f7ff ffe8 	bl	8083aa8 <_ZN6StringaSERKS_>
}
 8083ad8:	4620      	mov	r0, r4
 8083ada:	bd10      	pop	{r4, pc}

08083adc <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8083adc:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8083ade:	6882      	ldr	r2, [r0, #8]
 8083ae0:	b93a      	cbnz	r2, 8083af2 <_ZNK6String6equalsEPKc+0x16>
 8083ae2:	b121      	cbz	r1, 8083aee <_ZNK6String6equalsEPKc+0x12>
 8083ae4:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 8083ae6:	fab0 f080 	clz	r0, r0
 8083aea:	0940      	lsrs	r0, r0, #5
 8083aec:	e000      	b.n	8083af0 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8083aee:	2001      	movs	r0, #1
}
 8083af0:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8083af2:	6800      	ldr	r0, [r0, #0]
 8083af4:	b909      	cbnz	r1, 8083afa <_ZNK6String6equalsEPKc+0x1e>
 8083af6:	7800      	ldrb	r0, [r0, #0]
 8083af8:	e7f5      	b.n	8083ae6 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 8083afa:	f001 fca9 	bl	8085450 <strcmp>
 8083afe:	e7f2      	b.n	8083ae6 <_ZNK6String6equalsEPKc+0xa>

08083b00 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 8083b00:	b558      	push	{r3, r4, r6, lr}
 8083b02:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 8083b04:	b12a      	cbz	r2, 8083b12 <_ZNK6String8getBytesEPhjj+0x12>
 8083b06:	b121      	cbz	r1, 8083b12 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
 8083b08:	6884      	ldr	r4, [r0, #8]
 8083b0a:	42a3      	cmp	r3, r4
 8083b0c:	d302      	bcc.n	8083b14 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 8083b0e:	2300      	movs	r3, #0
 8083b10:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
 8083b12:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
 8083b14:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
 8083b16:	3a01      	subs	r2, #1
	if (n > len - index) n = len - index;
 8083b18:	4294      	cmp	r4, r2
 8083b1a:	bf28      	it	cs
 8083b1c:	4614      	movcs	r4, r2
	strncpy((char *)buf, buffer + index, n);
 8083b1e:	6801      	ldr	r1, [r0, #0]
 8083b20:	4622      	mov	r2, r4
 8083b22:	4419      	add	r1, r3
 8083b24:	4630      	mov	r0, r6
 8083b26:	f001 fcda 	bl	80854de <strncpy>
	buf[n] = 0;
 8083b2a:	2300      	movs	r3, #0
 8083b2c:	5533      	strb	r3, [r6, r4]
 8083b2e:	e7f0      	b.n	8083b12 <_ZNK6String8getBytesEPhjj+0x12>

08083b30 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 8083b30:	b510      	push	{r4, lr}
 8083b32:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8083b34:	6800      	ldr	r0, [r0, #0]
 8083b36:	b118      	cbz	r0, 8083b40 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 8083b38:	f7fd ff00 	bl	808193c <free>
            wakeupSource_ = nullptr;
 8083b3c:	2300      	movs	r3, #0
 8083b3e:	6023      	str	r3, [r4, #0]
        }
    }
 8083b40:	bd10      	pop	{r4, pc}

08083b42 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8083b42:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 8083b44:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8083b48:	460d      	mov	r5, r1
        error_ = result.error_;
 8083b4a:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 8083b4c:	460b      	mov	r3, r1
 8083b4e:	f853 2f06 	ldr.w	r2, [r3, #6]!
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8083b52:	4604      	mov	r4, r0
        compatResult_ = result.compatResult_;
 8083b54:	f8c0 2006 	str.w	r2, [r0, #6]
 8083b58:	889b      	ldrh	r3, [r3, #4]
 8083b5a:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 8083b5c:	f7ff ffe8 	bl	8083b30 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
 8083b60:	682b      	ldr	r3, [r5, #0]
 8083b62:	b113      	cbz	r3, 8083b6a <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 8083b64:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 8083b66:	2300      	movs	r3, #0
 8083b68:	602b      	str	r3, [r5, #0]
    }
 8083b6a:	4620      	mov	r0, r4
 8083b6c:	bd38      	pop	{r3, r4, r5, pc}

08083b6e <_ZN17SystemSleepResult13toSleepResultEv>:
        if (error_ || wakeupSource_) {
 8083b6e:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SleepResult toSleepResult() {
 8083b72:	b510      	push	{r4, lr}
 8083b74:	680a      	ldr	r2, [r1, #0]
        if (error_ || wakeupSource_) {
 8083b76:	b933      	cbnz	r3, 8083b86 <_ZN17SystemSleepResult13toSleepResultEv+0x18>
 8083b78:	b932      	cbnz	r2, 8083b88 <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
        return compatResult_;
 8083b7a:	f851 3f06 	ldr.w	r3, [r1, #6]!
 8083b7e:	6003      	str	r3, [r0, #0]
 8083b80:	888b      	ldrh	r3, [r1, #4]
 8083b82:	8083      	strh	r3, [r0, #4]
    }
 8083b84:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
 8083b86:	b122      	cbz	r2, 8083b92 <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
 8083b88:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
 8083b8a:	2c01      	cmp	r4, #1
 8083b8c:	d003      	beq.n	8083b96 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
 8083b8e:	2c04      	cmp	r4, #4
 8083b90:	d006      	beq.n	8083ba0 <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 8083b92:	2204      	movs	r2, #4
 8083b94:	e005      	b.n	8083ba2 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 8083b96:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 8083b98:	718c      	strb	r4, [r1, #6]
 8083b9a:	810b      	strh	r3, [r1, #8]
 8083b9c:	814a      	strh	r2, [r1, #10]
                    break;
 8083b9e:	e7ec      	b.n	8083b7a <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 8083ba0:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 8083ba2:	810b      	strh	r3, [r1, #8]
 8083ba4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8083ba8:	718a      	strb	r2, [r1, #6]
 8083baa:	814b      	strh	r3, [r1, #10]
                    break;
 8083bac:	e7e5      	b.n	8083b7a <_ZN17SystemSleepResult13toSleepResultEv+0xc>

08083bae <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 8083bae:	b507      	push	{r0, r1, r2, lr}
 8083bb0:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 8083bb2:	2100      	movs	r1, #0
{
 8083bb4:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 8083bb6:	9100      	str	r1, [sp, #0]
 8083bb8:	2001      	movs	r0, #1
 8083bba:	218c      	movs	r1, #140	; 0x8c
 8083bbc:	f7fd fde4 	bl	8081788 <system_reset>
}
 8083bc0:	b003      	add	sp, #12
 8083bc2:	f85d fb04 	ldr.w	pc, [sp], #4

08083bc6 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 8083bc6:	4601      	mov	r1, r0
    reset(0, flags);
 8083bc8:	2000      	movs	r0, #0
 8083bca:	f7ff bff0 	b.w	8083bae <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

08083bce <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 8083bce:	2000      	movs	r0, #0
 8083bd0:	f7ff bff9 	b.w	8083bc6 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

08083bd4 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
    }
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 8083bd4:	b530      	push	{r4, r5, lr}
 8083bd6:	4604      	mov	r4, r0
 8083bd8:	b085      	sub	sp, #20
 8083bda:	4608      	mov	r0, r1
 8083bdc:	4611      	mov	r1, r2
 8083bde:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 8083be0:	2300      	movs	r3, #0
 8083be2:	f7fd fd95 	bl	8081710 <system_sleep>
              compatResult_(r) {
 8083be6:	2300      	movs	r3, #0
 8083be8:	9301      	str	r3, [sp, #4]
 8083bea:	f8ad 3008 	strh.w	r3, [sp, #8]
 8083bee:	f88d 300a 	strb.w	r3, [sp, #10]
 8083bf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
 8083bf6:	4d09      	ldr	r5, [pc, #36]	; (8083c1c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
 8083bf8:	a901      	add	r1, sp, #4
 8083bfa:	f8ad 000c 	strh.w	r0, [sp, #12]
 8083bfe:	4628      	mov	r0, r5
 8083c00:	f8ad 300e 	strh.w	r3, [sp, #14]
 8083c04:	f7ff ff9d 	bl	8083b42 <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
 8083c08:	a801      	add	r0, sp, #4
 8083c0a:	f7ff ff91 	bl	8083b30 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
 8083c0e:	4620      	mov	r0, r4
 8083c10:	4629      	mov	r1, r5
 8083c12:	f7ff ffac 	bl	8083b6e <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
 8083c16:	4620      	mov	r0, r4
 8083c18:	b005      	add	sp, #20
 8083c1a:	bd30      	pop	{r4, r5, pc}
 8083c1c:	20000214 	.word	0x20000214

08083c20 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8083c20:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 8083c22:	2000      	movs	r0, #0
 8083c24:	4b04      	ldr	r3, [pc, #16]	; (8083c38 <_GLOBAL__sub_I_System+0x18>)
 8083c26:	601a      	str	r2, [r3, #0]
 8083c28:	4b04      	ldr	r3, [pc, #16]	; (8083c3c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 8083c2a:	4a05      	ldr	r2, [pc, #20]	; (8083c40 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 8083c2c:	6018      	str	r0, [r3, #0]
 8083c2e:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 8083c30:	7198      	strb	r0, [r3, #6]
 8083c32:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8083c34:	f7fd bd5c 	b.w	80816f0 <set_system_mode>
 8083c38:	20000220 	.word	0x20000220
 8083c3c:	20000214 	.word	0x20000214
 8083c40:	ffff0000 	.word	0xffff0000

08083c44 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8083c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 8083c48:	4a15      	ldr	r2, [pc, #84]	; (8083ca0 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8083c4a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8083cac <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 8083c4e:	e9d2 3200 	ldrd	r3, r2, [r2]
 8083c52:	18c0      	adds	r0, r0, r3
 8083c54:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
 8083c58:	4a12      	ldr	r2, [pc, #72]	; (8083ca4 <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 8083c5a:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 8083c5c:	e9d2 3200 	ldrd	r3, r2, [r2]
 8083c60:	18c6      	adds	r6, r0, r3
 8083c62:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
 8083c66:	e9d8 2300 	ldrd	r2, r3, [r8]
 8083c6a:	42bb      	cmp	r3, r7
 8083c6c:	bf08      	it	eq
 8083c6e:	42b2      	cmpeq	r2, r6
 8083c70:	d013      	beq.n	8083c9a <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 8083c72:	a903      	add	r1, sp, #12
 8083c74:	4668      	mov	r0, sp
 8083c76:	e9cd 6700 	strd	r6, r7, [sp]
 8083c7a:	f7fc f9cf 	bl	808001c <localtime_r>
	calendar_time.tm_year += 1900;
 8083c7e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8083c80:	4d09      	ldr	r5, [pc, #36]	; (8083ca8 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 8083c82:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8083c86:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 8083c88:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8083c8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8083c8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8083c8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8083c90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 8083c92:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8083c96:	6823      	ldr	r3, [r4, #0]
 8083c98:	602b      	str	r3, [r5, #0]
    }
}
 8083c9a:	b00c      	add	sp, #48	; 0x30
 8083c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8083ca0:	20000258 	.word	0x20000258
 8083ca4:	20000250 	.word	0x20000250
 8083ca8:	20000228 	.word	0x20000228
 8083cac:	20000260 	.word	0x20000260

08083cb0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
 8083cb0:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
 8083cb2:	2000      	movs	r0, #0
 8083cb4:	f7fd fdba 	bl	808182c <spark_sync_time_pending>
 8083cb8:	b128      	cbz	r0, 8083cc6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8083cba:	f7fd fd8f 	bl	80817dc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 8083cbe:	f080 0001 	eor.w	r0, r0, #1
 8083cc2:	b2c0      	uxtb	r0, r0
    }
 8083cc4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 8083cc6:	2001      	movs	r0, #1
 8083cc8:	e7fc      	b.n	8083cc4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

08083ccc <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8083ccc:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8083cce:	490a      	ldr	r1, [pc, #40]	; (8083cf8 <_ZN9TimeClass4zoneEf+0x2c>)
{
 8083cd0:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8083cd2:	f001 fa91 	bl	80851f8 <__aeabi_fcmplt>
 8083cd6:	b968      	cbnz	r0, 8083cf4 <_ZN9TimeClass4zoneEf+0x28>
 8083cd8:	4620      	mov	r0, r4
 8083cda:	4908      	ldr	r1, [pc, #32]	; (8083cfc <_ZN9TimeClass4zoneEf+0x30>)
 8083cdc:	f001 faaa 	bl	8085234 <__aeabi_fcmpgt>
 8083ce0:	b940      	cbnz	r0, 8083cf4 <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 8083ce2:	4907      	ldr	r1, [pc, #28]	; (8083d00 <_ZN9TimeClass4zoneEf+0x34>)
 8083ce4:	4620      	mov	r0, r4
 8083ce6:	f001 f8e9 	bl	8084ebc <__aeabi_fmul>
 8083cea:	f001 fad3 	bl	8085294 <__aeabi_f2lz>
 8083cee:	4b05      	ldr	r3, [pc, #20]	; (8083d04 <_ZN9TimeClass4zoneEf+0x38>)
 8083cf0:	e9c3 0100 	strd	r0, r1, [r3]
}
 8083cf4:	bd10      	pop	{r4, pc}
 8083cf6:	bf00      	nop
 8083cf8:	c1400000 	.word	0xc1400000
 8083cfc:	41600000 	.word	0x41600000
 8083d00:	45610000 	.word	0x45610000
 8083d04:	20000258 	.word	0x20000258

08083d08 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8083d08:	b530      	push	{r4, r5, lr}
 8083d0a:	4604      	mov	r4, r0
    t += time_zone_cache;
 8083d0c:	4818      	ldr	r0, [pc, #96]	; (8083d70 <_ZN9TimeClass7timeStrEx+0x68>)
{
 8083d0e:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 8083d10:	e9d0 1000 	ldrd	r1, r0, [r0]
 8083d14:	1852      	adds	r2, r2, r1
 8083d16:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 8083d1a:	4816      	ldr	r0, [pc, #88]	; (8083d74 <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 8083d1c:	2500      	movs	r5, #0
    t += dst_current_cache;
 8083d1e:	e9d0 1000 	ldrd	r1, r0, [r0]
 8083d22:	1852      	adds	r2, r2, r1
 8083d24:	eb40 0303 	adc.w	r3, r0, r3
 8083d28:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 8083d2c:	2224      	movs	r2, #36	; 0x24
 8083d2e:	2100      	movs	r1, #0
 8083d30:	eb0d 0002 	add.w	r0, sp, r2
 8083d34:	f001 fb3a 	bl	80853ac <memset>
    localtime_r(&t, &calendar_time);
 8083d38:	a909      	add	r1, sp, #36	; 0x24
 8083d3a:	4668      	mov	r0, sp
 8083d3c:	f7fc f96e 	bl	808001c <localtime_r>
    char ascstr[26] = {};
 8083d40:	2216      	movs	r2, #22
 8083d42:	4629      	mov	r1, r5
 8083d44:	a803      	add	r0, sp, #12
 8083d46:	9502      	str	r5, [sp, #8]
 8083d48:	f001 fb30 	bl	80853ac <memset>
    asctime_r(&calendar_time, ascstr);
 8083d4c:	a902      	add	r1, sp, #8
 8083d4e:	a809      	add	r0, sp, #36	; 0x24
 8083d50:	f001 fad4 	bl	80852fc <asctime_r>
    int len = strlen(ascstr);
 8083d54:	a802      	add	r0, sp, #8
 8083d56:	f001 fba8 	bl	80854aa <strlen>
    ascstr[len-1] = 0; // remove final newline
 8083d5a:	ab12      	add	r3, sp, #72	; 0x48
 8083d5c:	4418      	add	r0, r3
 8083d5e:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 8083d62:	a902      	add	r1, sp, #8
 8083d64:	4620      	mov	r0, r4
 8083d66:	f7ff fe64 	bl	8083a32 <_ZN6StringC1EPKc>
}
 8083d6a:	4620      	mov	r0, r4
 8083d6c:	b013      	add	sp, #76	; 0x4c
 8083d6e:	bd30      	pop	{r4, r5, pc}
 8083d70:	20000258 	.word	0x20000258
 8083d74:	20000250 	.word	0x20000250

08083d78 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 8083d78:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 8083d7a:	2000      	movs	r0, #0
 8083d7c:	f7fd fb48 	bl	8081410 <hal_rtc_time_is_valid>
    if (rtcstate)
 8083d80:	4604      	mov	r4, r0
 8083d82:	b9a0      	cbnz	r0, 8083dae <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8083d84:	f7fd fcac 	bl	80816e0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8083d88:	2801      	cmp	r0, #1
 8083d8a:	d110      	bne.n	8083dae <_ZN9TimeClass7isValidEv+0x36>
 8083d8c:	4620      	mov	r0, r4
 8083d8e:	f7fd fcdf 	bl	8081750 <system_thread_get_state>
 8083d92:	b960      	cbnz	r0, 8083dae <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 8083d94:	f7ff ff8c 	bl	8083cb0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8083d98:	b910      	cbnz	r0, 8083da0 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 8083d9a:	f7fd fd0f 	bl	80817bc <spark_process>
        while (_while() && !_condition()) {
 8083d9e:	e7f9      	b.n	8083d94 <_ZN9TimeClass7isValidEv+0x1c>
 8083da0:	f7ff ff86 	bl	8083cb0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 8083da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 8083da8:	2000      	movs	r0, #0
 8083daa:	f7fd bb31 	b.w	8081410 <hal_rtc_time_is_valid>
}
 8083dae:	4620      	mov	r0, r4
 8083db0:	bd10      	pop	{r4, pc}

08083db2 <_ZN9TimeClass3nowEv>:
{
 8083db2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 8083db4:	f7ff ffe0 	bl	8083d78 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 8083db8:	2210      	movs	r2, #16
 8083dba:	2100      	movs	r1, #0
 8083dbc:	4668      	mov	r0, sp
 8083dbe:	f001 faf5 	bl	80853ac <memset>
    hal_rtc_get_time(&tv, nullptr);
 8083dc2:	2100      	movs	r1, #0
 8083dc4:	4668      	mov	r0, sp
 8083dc6:	f7fd fb33 	bl	8081430 <hal_rtc_get_time>
}
 8083dca:	9800      	ldr	r0, [sp, #0]
 8083dcc:	b005      	add	sp, #20
 8083dce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08083dd4 <_ZN9TimeClass4hourEv>:
{
 8083dd4:	b508      	push	{r3, lr}
	return hour(now());
 8083dd6:	f7ff ffec 	bl	8083db2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 8083dda:	17c1      	asrs	r1, r0, #31
 8083ddc:	f7ff ff32 	bl	8083c44 <_ZL22Refresh_UnixTime_Cachex>
}
 8083de0:	4b01      	ldr	r3, [pc, #4]	; (8083de8 <_ZN9TimeClass4hourEv+0x14>)
 8083de2:	6898      	ldr	r0, [r3, #8]
 8083de4:	bd08      	pop	{r3, pc}
 8083de6:	bf00      	nop
 8083de8:	20000228 	.word	0x20000228

08083dec <_ZN9TimeClass6minuteEv>:
{
 8083dec:	b508      	push	{r3, lr}
	return minute(now());
 8083dee:	f7ff ffe0 	bl	8083db2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 8083df2:	17c1      	asrs	r1, r0, #31
 8083df4:	f7ff ff26 	bl	8083c44 <_ZL22Refresh_UnixTime_Cachex>
}
 8083df8:	4b01      	ldr	r3, [pc, #4]	; (8083e00 <_ZN9TimeClass6minuteEv+0x14>)
 8083dfa:	6858      	ldr	r0, [r3, #4]
 8083dfc:	bd08      	pop	{r3, pc}
 8083dfe:	bf00      	nop
 8083e00:	20000228 	.word	0x20000228

08083e04 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8083e04:	4b02      	ldr	r3, [pc, #8]	; (8083e10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8083e06:	681a      	ldr	r2, [r3, #0]
 8083e08:	4b02      	ldr	r3, [pc, #8]	; (8083e14 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8083e0a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 8083e0c:	4770      	bx	lr
 8083e0e:	bf00      	nop
 8083e10:	20000094 	.word	0x20000094
 8083e14:	20000224 	.word	0x20000224

08083e18 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 8083e18:	4770      	bx	lr

08083e1a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8083e1a:	7441      	strb	r1, [r0, #17]
}
 8083e1c:	4770      	bx	lr

08083e1e <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8083e1e:	4770      	bx	lr

08083e20 <_ZN11USARTSerial17availableForWriteEv>:
{
 8083e20:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 8083e22:	7c00      	ldrb	r0, [r0, #16]
 8083e24:	f7fd fbec 	bl	8081600 <hal_usart_available_data_for_write>
}
 8083e28:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8083e2c:	bd08      	pop	{r3, pc}

08083e2e <_ZN11USARTSerial9availableEv>:
{
 8083e2e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 8083e30:	7c00      	ldrb	r0, [r0, #16]
 8083e32:	f7fd fbbd 	bl	80815b0 <hal_usart_available>
}
 8083e36:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8083e3a:	bd08      	pop	{r3, pc}

08083e3c <_ZN11USARTSerial4peekEv>:
{
 8083e3c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 8083e3e:	7c00      	ldrb	r0, [r0, #16]
 8083e40:	f7fd fbc6 	bl	80815d0 <hal_usart_peek>
}
 8083e44:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8083e48:	bd08      	pop	{r3, pc}

08083e4a <_ZN11USARTSerial4readEv>:
{
 8083e4a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 8083e4c:	7c00      	ldrb	r0, [r0, #16]
 8083e4e:	f7fd fbb7 	bl	80815c0 <hal_usart_read>
}
 8083e52:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8083e56:	bd08      	pop	{r3, pc}

08083e58 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 8083e58:	7c00      	ldrb	r0, [r0, #16]
 8083e5a:	f7fd bbc1 	b.w	80815e0 <hal_usart_flush>

08083e5e <_ZN11USARTSerial5writeEh>:
{
 8083e5e:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8083e60:	7c46      	ldrb	r6, [r0, #17]
{
 8083e62:	4604      	mov	r4, r0
 8083e64:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8083e66:	b12e      	cbz	r6, 8083e74 <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 8083e68:	4629      	mov	r1, r5
 8083e6a:	7c20      	ldrb	r0, [r4, #16]
}
 8083e6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 8083e70:	f7fd bb96 	b.w	80815a0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8083e74:	7c00      	ldrb	r0, [r0, #16]
 8083e76:	f7fd fbc3 	bl	8081600 <hal_usart_available_data_for_write>
 8083e7a:	2800      	cmp	r0, #0
 8083e7c:	dcf4      	bgt.n	8083e68 <_ZN11USARTSerial5writeEh+0xa>
}
 8083e7e:	4630      	mov	r0, r6
 8083e80:	bd70      	pop	{r4, r5, r6, pc}

08083e82 <_ZN11USARTSerialD0Ev>:
 8083e82:	b510      	push	{r4, lr}
 8083e84:	4604      	mov	r4, r0
 8083e86:	2114      	movs	r1, #20
 8083e88:	f000 fac2 	bl	8084410 <_ZdlPvj>
 8083e8c:	4620      	mov	r0, r4
 8083e8e:	bd10      	pop	{r4, pc}

08083e90 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 8083e90:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8083e94:	b510      	push	{r4, lr}
 8083e96:	4604      	mov	r4, r0
 8083e98:	4608      	mov	r0, r1
 8083e9a:	4611      	mov	r1, r2
 8083e9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8083ea0:	e9c4 c201 	strd	ip, r2, [r4, #4]
 8083ea4:	4a04      	ldr	r2, [pc, #16]	; (8083eb8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 8083ea6:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8083ea8:	6022      	str	r2, [r4, #0]
  _blocking = true;
 8083eaa:	2201      	movs	r2, #1
 8083eac:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 8083eae:	461a      	mov	r2, r3
 8083eb0:	f7fd fb66 	bl	8081580 <hal_usart_init>
}
 8083eb4:	4620      	mov	r0, r4
 8083eb6:	bd10      	pop	{r4, pc}
 8083eb8:	08085c94 	.word	0x08085c94

08083ebc <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 8083ebc:	2300      	movs	r3, #0
 8083ebe:	7c00      	ldrb	r0, [r0, #16]
 8083ec0:	f7fd bba6 	b.w	8081610 <hal_usart_begin_config>

08083ec4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 8083ec4:	2200      	movs	r2, #0
 8083ec6:	f7ff bff9 	b.w	8083ebc <_ZN11USARTSerial5beginEmm>

08083eca <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 8083eca:	7c00      	ldrb	r0, [r0, #16]
 8083ecc:	f7fd bb60 	b.w	8081590 <hal_usart_end>

08083ed0 <_Z22__fetch_global_Serial1v>:
{
 8083ed0:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8083ed2:	4d0c      	ldr	r5, [pc, #48]	; (8083f04 <_Z22__fetch_global_Serial1v+0x34>)
 8083ed4:	7829      	ldrb	r1, [r5, #0]
 8083ed6:	f3bf 8f5b 	dmb	ish
 8083eda:	f011 0401 	ands.w	r4, r1, #1
 8083ede:	d10f      	bne.n	8083f00 <_Z22__fetch_global_Serial1v+0x30>
 8083ee0:	4628      	mov	r0, r5
 8083ee2:	f7fc f8f1 	bl	80800c8 <__cxa_guard_acquire>
 8083ee6:	b158      	cbz	r0, 8083f00 <_Z22__fetch_global_Serial1v+0x30>
 8083ee8:	4621      	mov	r1, r4
 8083eea:	4b07      	ldr	r3, [pc, #28]	; (8083f08 <_Z22__fetch_global_Serial1v+0x38>)
 8083eec:	4a07      	ldr	r2, [pc, #28]	; (8083f0c <_Z22__fetch_global_Serial1v+0x3c>)
 8083eee:	4808      	ldr	r0, [pc, #32]	; (8083f10 <_Z22__fetch_global_Serial1v+0x40>)
 8083ef0:	f7ff ffce 	bl	8083e90 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 8083ef4:	4628      	mov	r0, r5
 8083ef6:	f7fc f8ec 	bl	80800d2 <__cxa_guard_release>
 8083efa:	4806      	ldr	r0, [pc, #24]	; (8083f14 <_Z22__fetch_global_Serial1v+0x44>)
 8083efc:	f001 fa24 	bl	8085348 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8083f00:	4803      	ldr	r0, [pc, #12]	; (8083f10 <_Z22__fetch_global_Serial1v+0x40>)
 8083f02:	bd38      	pop	{r3, r4, r5, pc}
 8083f04:	20000268 	.word	0x20000268
 8083f08:	200002f0 	.word	0x200002f0
 8083f0c:	2000026c 	.word	0x2000026c
 8083f10:	20000374 	.word	0x20000374
 8083f14:	08083e1f 	.word	0x08083e1f

08083f18 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8083f18:	7441      	strb	r1, [r0, #17]
}
 8083f1a:	4770      	bx	lr

08083f1c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8083f1c:	4770      	bx	lr

08083f1e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8083f1e:	4770      	bx	lr

08083f20 <_ZN9USBSerial4readEv>:
{
 8083f20:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8083f22:	2100      	movs	r1, #0
 8083f24:	7c00      	ldrb	r0, [r0, #16]
 8083f26:	f7fd fba3 	bl	8081670 <HAL_USB_USART_Receive_Data>
}
 8083f2a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8083f2e:	bd08      	pop	{r3, pc}

08083f30 <_ZN9USBSerial4peekEv>:
{
 8083f30:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8083f32:	2101      	movs	r1, #1
 8083f34:	7c00      	ldrb	r0, [r0, #16]
 8083f36:	f7fd fb9b 	bl	8081670 <HAL_USB_USART_Receive_Data>
}
 8083f3a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8083f3e:	bd08      	pop	{r3, pc}

08083f40 <_ZN9USBSerial17availableForWriteEv>:
{
 8083f40:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8083f42:	7c00      	ldrb	r0, [r0, #16]
 8083f44:	f7fd fb8c 	bl	8081660 <HAL_USB_USART_Available_Data_For_Write>
}
 8083f48:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8083f4c:	bd08      	pop	{r3, pc}

08083f4e <_ZN9USBSerial9availableEv>:
{
 8083f4e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8083f50:	7c00      	ldrb	r0, [r0, #16]
 8083f52:	f7fd fb7d 	bl	8081650 <HAL_USB_USART_Available_Data>
}
 8083f56:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8083f5a:	bd08      	pop	{r3, pc}

08083f5c <_ZN9USBSerial5writeEh>:
{
 8083f5c:	b538      	push	{r3, r4, r5, lr}
 8083f5e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8083f60:	7c00      	ldrb	r0, [r0, #16]
{
 8083f62:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8083f64:	f7fd fb7c 	bl	8081660 <HAL_USB_USART_Available_Data_For_Write>
 8083f68:	2800      	cmp	r0, #0
 8083f6a:	dc01      	bgt.n	8083f70 <_ZN9USBSerial5writeEh+0x14>
 8083f6c:	7c60      	ldrb	r0, [r4, #17]
 8083f6e:	b128      	cbz	r0, 8083f7c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8083f70:	4629      	mov	r1, r5
 8083f72:	7c20      	ldrb	r0, [r4, #16]
 8083f74:	f7fd fb84 	bl	8081680 <HAL_USB_USART_Send_Data>
 8083f78:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8083f7c:	bd38      	pop	{r3, r4, r5, pc}

08083f7e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 8083f7e:	7c00      	ldrb	r0, [r0, #16]
 8083f80:	f7fd bb86 	b.w	8081690 <HAL_USB_USART_Flush_Data>

08083f84 <_ZN9USBSerialD0Ev>:
 8083f84:	b510      	push	{r4, lr}
 8083f86:	4604      	mov	r4, r0
 8083f88:	2114      	movs	r1, #20
 8083f8a:	f000 fa41 	bl	8084410 <_ZdlPvj>
 8083f8e:	4620      	mov	r0, r4
 8083f90:	bd10      	pop	{r4, pc}

08083f92 <__tcf_1>:
 8083f92:	4770      	bx	lr

08083f94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8083f94:	b510      	push	{r4, lr}
 8083f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8083f9a:	4604      	mov	r4, r0
 8083f9c:	4608      	mov	r0, r1
 8083f9e:	2100      	movs	r1, #0
 8083fa0:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8083fa4:	4b04      	ldr	r3, [pc, #16]	; (8083fb8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 8083fa6:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8083fa8:	6023      	str	r3, [r4, #0]
  _blocking = true;
 8083faa:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 8083fac:	4611      	mov	r1, r2
  _blocking = true;
 8083fae:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 8083fb0:	f7fd fb36 	bl	8081620 <HAL_USB_USART_Init>
}
 8083fb4:	4620      	mov	r0, r4
 8083fb6:	bd10      	pop	{r4, pc}
 8083fb8:	08085cc4 	.word	0x08085cc4

08083fbc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8083fbc:	2200      	movs	r2, #0
 8083fbe:	7c00      	ldrb	r0, [r0, #16]
 8083fc0:	f7fd bb36 	b.w	8081630 <HAL_USB_USART_Begin>

08083fc4 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 8083fc4:	7c00      	ldrb	r0, [r0, #16]
 8083fc6:	f7fd bb3b 	b.w	8081640 <HAL_USB_USART_End>
	...

08083fcc <_Z19acquireSerialBufferv>:
{
 8083fcc:	b510      	push	{r4, lr}
 8083fce:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8083fd0:	2214      	movs	r2, #20
 8083fd2:	2100      	movs	r1, #0
 8083fd4:	f001 f9ea 	bl	80853ac <memset>
  conf.rx_buffer = serial_rx_buffer;
 8083fd8:	4b05      	ldr	r3, [pc, #20]	; (8083ff0 <_Z19acquireSerialBufferv+0x24>)
}
 8083fda:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 8083fdc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8083fde:	4b05      	ldr	r3, [pc, #20]	; (8083ff4 <_Z19acquireSerialBufferv+0x28>)
 8083fe0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8083fe2:	f240 1301 	movw	r3, #257	; 0x101
 8083fe6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8083fe8:	2381      	movs	r3, #129	; 0x81
 8083fea:	8223      	strh	r3, [r4, #16]
}
 8083fec:	bd10      	pop	{r4, pc}
 8083fee:	bf00      	nop
 8083ff0:	200003b8 	.word	0x200003b8
 8083ff4:	200004b9 	.word	0x200004b9

08083ff8 <_Z16_fetch_usbserialv>:
{
 8083ff8:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8083ffa:	4d0e      	ldr	r5, [pc, #56]	; (8084034 <_Z16_fetch_usbserialv+0x3c>)
{
 8083ffc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8083ffe:	a801      	add	r0, sp, #4
 8084000:	f7ff ffe4 	bl	8083fcc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8084004:	7829      	ldrb	r1, [r5, #0]
 8084006:	f3bf 8f5b 	dmb	ish
 808400a:	f011 0401 	ands.w	r4, r1, #1
 808400e:	d10e      	bne.n	808402e <_Z16_fetch_usbserialv+0x36>
 8084010:	4628      	mov	r0, r5
 8084012:	f7fc f859 	bl	80800c8 <__cxa_guard_acquire>
 8084016:	b150      	cbz	r0, 808402e <_Z16_fetch_usbserialv+0x36>
 8084018:	4621      	mov	r1, r4
 808401a:	aa01      	add	r2, sp, #4
 808401c:	4806      	ldr	r0, [pc, #24]	; (8084038 <_Z16_fetch_usbserialv+0x40>)
 808401e:	f7ff ffb9 	bl	8083f94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8084022:	4628      	mov	r0, r5
 8084024:	f7fc f855 	bl	80800d2 <__cxa_guard_release>
 8084028:	4804      	ldr	r0, [pc, #16]	; (808403c <_Z16_fetch_usbserialv+0x44>)
 808402a:	f001 f98d 	bl	8085348 <atexit>
	return _usbserial;
}
 808402e:	4802      	ldr	r0, [pc, #8]	; (8084038 <_Z16_fetch_usbserialv+0x40>)
 8084030:	b007      	add	sp, #28
 8084032:	bd30      	pop	{r4, r5, pc}
 8084034:	20000388 	.word	0x20000388
 8084038:	20000390 	.word	0x20000390
 808403c:	08083f1d 	.word	0x08083f1d

08084040 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8084040:	b510      	push	{r4, lr}
 8084042:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8084044:	2214      	movs	r2, #20
 8084046:	2100      	movs	r1, #0
 8084048:	f001 f9b0 	bl	80853ac <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 808404c:	4b05      	ldr	r3, [pc, #20]	; (8084064 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808404e:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 8084050:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8084052:	4b05      	ldr	r3, [pc, #20]	; (8084068 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8084054:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8084056:	f240 1301 	movw	r3, #257	; 0x101
 808405a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 808405c:	2381      	movs	r3, #129	; 0x81
 808405e:	8223      	strh	r3, [r4, #16]
}
 8084060:	bd10      	pop	{r4, pc}
 8084062:	bf00      	nop
 8084064:	2000053a 	.word	0x2000053a
 8084068:	2000063b 	.word	0x2000063b

0808406c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 808406c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808406e:	4c0e      	ldr	r4, [pc, #56]	; (80840a8 <_Z17_fetch_usbserial1v+0x3c>)
{
 8084070:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8084072:	a801      	add	r0, sp, #4
 8084074:	f7ff ffe4 	bl	8084040 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8084078:	7823      	ldrb	r3, [r4, #0]
 808407a:	f3bf 8f5b 	dmb	ish
 808407e:	07db      	lsls	r3, r3, #31
 8084080:	d40e      	bmi.n	80840a0 <_Z17_fetch_usbserial1v+0x34>
 8084082:	4620      	mov	r0, r4
 8084084:	f7fc f820 	bl	80800c8 <__cxa_guard_acquire>
 8084088:	b150      	cbz	r0, 80840a0 <_Z17_fetch_usbserial1v+0x34>
 808408a:	2101      	movs	r1, #1
 808408c:	aa01      	add	r2, sp, #4
 808408e:	4807      	ldr	r0, [pc, #28]	; (80840ac <_Z17_fetch_usbserial1v+0x40>)
 8084090:	f7ff ff80 	bl	8083f94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8084094:	4620      	mov	r0, r4
 8084096:	f7fc f81c 	bl	80800d2 <__cxa_guard_release>
 808409a:	4805      	ldr	r0, [pc, #20]	; (80840b0 <_Z17_fetch_usbserial1v+0x44>)
 808409c:	f001 f954 	bl	8085348 <atexit>
  return _usbserial1;
}
 80840a0:	4802      	ldr	r0, [pc, #8]	; (80840ac <_Z17_fetch_usbserial1v+0x40>)
 80840a2:	b006      	add	sp, #24
 80840a4:	bd10      	pop	{r4, pc}
 80840a6:	bf00      	nop
 80840a8:	2000038c 	.word	0x2000038c
 80840ac:	200003a4 	.word	0x200003a4
 80840b0:	08083f93 	.word	0x08083f93

080840b4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80840b4:	4b01      	ldr	r3, [pc, #4]	; (80840bc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80840b6:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80840b8:	4770      	bx	lr
 80840ba:	bf00      	nop
 80840bc:	20000098 	.word	0x20000098

080840c0 <serialEventRun>:
{
 80840c0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80840c2:	4b17      	ldr	r3, [pc, #92]	; (8084120 <serialEventRun+0x60>)
 80840c4:	b143      	cbz	r3, 80840d8 <serialEventRun+0x18>
 80840c6:	f7ff ff97 	bl	8083ff8 <_Z16_fetch_usbserialv>
 80840ca:	6803      	ldr	r3, [r0, #0]
 80840cc:	691b      	ldr	r3, [r3, #16]
 80840ce:	4798      	blx	r3
 80840d0:	2800      	cmp	r0, #0
 80840d2:	dd01      	ble.n	80840d8 <serialEventRun+0x18>
        serialEvent();
 80840d4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80840d8:	4b12      	ldr	r3, [pc, #72]	; (8084124 <serialEventRun+0x64>)
 80840da:	b143      	cbz	r3, 80840ee <serialEventRun+0x2e>
 80840dc:	f7ff fef8 	bl	8083ed0 <_Z22__fetch_global_Serial1v>
 80840e0:	6803      	ldr	r3, [r0, #0]
 80840e2:	691b      	ldr	r3, [r3, #16]
 80840e4:	4798      	blx	r3
 80840e6:	2800      	cmp	r0, #0
 80840e8:	dd01      	ble.n	80840ee <serialEventRun+0x2e>
        serialEvent1();
 80840ea:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80840ee:	4b0e      	ldr	r3, [pc, #56]	; (8084128 <serialEventRun+0x68>)
 80840f0:	b10b      	cbz	r3, 80840f6 <serialEventRun+0x36>
 80840f2:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 80840f6:	4b0d      	ldr	r3, [pc, #52]	; (808412c <serialEventRun+0x6c>)
 80840f8:	b10b      	cbz	r3, 80840fe <serialEventRun+0x3e>
 80840fa:	f3af 8000 	nop.w
    if (serialEventRun5) serialEventRun5();
 80840fe:	4b0c      	ldr	r3, [pc, #48]	; (8084130 <serialEventRun+0x70>)
 8084100:	b10b      	cbz	r3, 8084106 <serialEventRun+0x46>
 8084102:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8084106:	4b0b      	ldr	r3, [pc, #44]	; (8084134 <serialEventRun+0x74>)
 8084108:	b143      	cbz	r3, 808411c <serialEventRun+0x5c>
 808410a:	f7ff ffaf 	bl	808406c <_Z17_fetch_usbserial1v>
 808410e:	6803      	ldr	r3, [r0, #0]
 8084110:	691b      	ldr	r3, [r3, #16]
 8084112:	4798      	blx	r3
 8084114:	2800      	cmp	r0, #0
 8084116:	dd01      	ble.n	808411c <serialEventRun+0x5c>
        usbSerialEvent1();
 8084118:	f3af 8000 	nop.w
}
 808411c:	bd08      	pop	{r3, pc}
 808411e:	bf00      	nop
	...

08084138 <_post_loop>:
{
 8084138:	b508      	push	{r3, lr}
	serialEventRun();
 808413a:	f7ff ffc1 	bl	80840c0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808413e:	f7fd f95f 	bl	8081400 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8084142:	4b01      	ldr	r3, [pc, #4]	; (8084148 <_post_loop+0x10>)
 8084144:	6018      	str	r0, [r3, #0]
}
 8084146:	bd08      	pop	{r3, pc}
 8084148:	200006d4 	.word	0x200006d4

0808414c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 808414c:	4805      	ldr	r0, [pc, #20]	; (8084164 <_Z33system_initialize_user_backup_ramv+0x18>)
 808414e:	4a06      	ldr	r2, [pc, #24]	; (8084168 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 8084150:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8084152:	1a12      	subs	r2, r2, r0
 8084154:	4905      	ldr	r1, [pc, #20]	; (808416c <_Z33system_initialize_user_backup_ramv+0x20>)
 8084156:	f001 f901 	bl	808535c <memcpy>
    __backup_sram_signature = signature;
 808415a:	4b05      	ldr	r3, [pc, #20]	; (8084170 <_Z33system_initialize_user_backup_ramv+0x24>)
 808415c:	4a05      	ldr	r2, [pc, #20]	; (8084174 <_Z33system_initialize_user_backup_ramv+0x28>)
 808415e:	601a      	str	r2, [r3, #0]
}
 8084160:	bd08      	pop	{r3, pc}
 8084162:	bf00      	nop
 8084164:	40024000 	.word	0x40024000
 8084168:	40024018 	.word	0x40024018
 808416c:	08085e70 	.word	0x08085e70
 8084170:	40024014 	.word	0x40024014
 8084174:	9a271c1e 	.word	0x9a271c1e

08084178 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8084178:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 808417a:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808417c:	461a      	mov	r2, r3
 808417e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8084182:	9300      	str	r3, [sp, #0]
 8084184:	f7fd faf6 	bl	8081774 <system_ctrl_set_result>
}
 8084188:	b003      	add	sp, #12
 808418a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08084190 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 8084190:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8084192:	8843      	ldrh	r3, [r0, #2]
 8084194:	2b0a      	cmp	r3, #10
 8084196:	d008      	beq.n	80841aa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8084198:	2b50      	cmp	r3, #80	; 0x50
 808419a:	d10b      	bne.n	80841b4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 808419c:	4b09      	ldr	r3, [pc, #36]	; (80841c4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 808419e:	681b      	ldr	r3, [r3, #0]
 80841a0:	b14b      	cbz	r3, 80841b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80841a2:	b003      	add	sp, #12
 80841a4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80841a8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80841aa:	f7ff ffe5 	bl	8084178 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80841ae:	b003      	add	sp, #12
 80841b0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80841b4:	2300      	movs	r3, #0
 80841b6:	461a      	mov	r2, r3
 80841b8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80841bc:	9300      	str	r3, [sp, #0]
 80841be:	f7fd fad9 	bl	8081774 <system_ctrl_set_result>
}
 80841c2:	e7f4      	b.n	80841ae <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80841c4:	200006c0 	.word	0x200006c0

080841c8 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80841c8:	2100      	movs	r1, #0
{
 80841ca:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80841cc:	4811      	ldr	r0, [pc, #68]	; (8084214 <module_user_init_hook+0x4c>)
 80841ce:	f7fd fbed 	bl	80819ac <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80841d2:	4b11      	ldr	r3, [pc, #68]	; (8084218 <module_user_init_hook+0x50>)
 80841d4:	681a      	ldr	r2, [r3, #0]
 80841d6:	4b11      	ldr	r3, [pc, #68]	; (808421c <module_user_init_hook+0x54>)
 80841d8:	429a      	cmp	r2, r3
 80841da:	bf0c      	ite	eq
 80841dc:	2201      	moveq	r2, #1
 80841de:	2200      	movne	r2, #0
 80841e0:	4b0f      	ldr	r3, [pc, #60]	; (8084220 <module_user_init_hook+0x58>)
 80841e2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80841e4:	d001      	beq.n	80841ea <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80841e6:	f7ff ffb1 	bl	808414c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80841ea:	f7fd f8f9 	bl	80813e0 <HAL_RNG_GetRandomNumber>
 80841ee:	4604      	mov	r4, r0
    srand(seed);
 80841f0:	f001 f8e4 	bl	80853bc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80841f4:	4b0b      	ldr	r3, [pc, #44]	; (8084224 <module_user_init_hook+0x5c>)
 80841f6:	b113      	cbz	r3, 80841fe <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80841f8:	4620      	mov	r0, r4
 80841fa:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80841fe:	2100      	movs	r1, #0
 8084200:	4808      	ldr	r0, [pc, #32]	; (8084224 <module_user_init_hook+0x5c>)
 8084202:	f7fd fb23 	bl	808184c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8084206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 808420a:	2100      	movs	r1, #0
 808420c:	4806      	ldr	r0, [pc, #24]	; (8084228 <module_user_init_hook+0x60>)
 808420e:	f7fd baa7 	b.w	8081760 <system_ctrl_set_app_request_handler>
 8084212:	bf00      	nop
 8084214:	080840b5 	.word	0x080840b5
 8084218:	40024014 	.word	0x40024014
 808421c:	9a271c1e 	.word	0x9a271c1e
 8084220:	200006bc 	.word	0x200006bc
 8084224:	00000000 	.word	0x00000000
 8084228:	08084191 	.word	0x08084191

0808422c <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 808422c:	4b02      	ldr	r3, [pc, #8]	; (8084238 <__tcf_0+0xc>)
 808422e:	6898      	ldr	r0, [r3, #8]
 8084230:	b108      	cbz	r0, 8084236 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 8084232:	f7fd b8ad 	b.w	8081390 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 8084236:	4770      	bx	lr
 8084238:	200006c8 	.word	0x200006c8

0808423c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 808423c:	282e      	cmp	r0, #46	; 0x2e
bool pinAvailable(uint16_t pin) {
 808423e:	b570      	push	{r4, r5, r6, lr}
 8084240:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 8084242:	d901      	bls.n	8084248 <pinAvailable+0xc>
    return false;
 8084244:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 8084246:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 8084248:	f1a0 030d 	sub.w	r3, r0, #13
 808424c:	2b02      	cmp	r3, #2
 808424e:	d90b      	bls.n	8084268 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 8084250:	2801      	cmp	r0, #1
 8084252:	d824      	bhi.n	808429e <pinAvailable+0x62>
 8084254:	f000 f886 	bl	8084364 <_Z19__fetch_global_Wirev>
 8084258:	2100      	movs	r1, #0
 808425a:	7c00      	ldrb	r0, [r0, #16]
 808425c:	f7fd f958 	bl	8081510 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 8084260:	f080 0001 	eor.w	r0, r0, #1
 8084264:	b2c0      	uxtb	r0, r0
 8084266:	e7ee      	b.n	8084246 <pinAvailable+0xa>
 8084268:	4e12      	ldr	r6, [pc, #72]	; (80842b4 <pinAvailable+0x78>)
 808426a:	7831      	ldrb	r1, [r6, #0]
 808426c:	f3bf 8f5b 	dmb	ish
 8084270:	f011 0501 	ands.w	r5, r1, #1
 8084274:	d10d      	bne.n	8084292 <pinAvailable+0x56>
 8084276:	4630      	mov	r0, r6
 8084278:	f7fb ff26 	bl	80800c8 <__cxa_guard_acquire>
 808427c:	b148      	cbz	r0, 8084292 <pinAvailable+0x56>
 808427e:	4629      	mov	r1, r5
 8084280:	480d      	ldr	r0, [pc, #52]	; (80842b8 <pinAvailable+0x7c>)
 8084282:	f7ff fb7d 	bl	8083980 <_ZN8SPIClassC1E19hal_spi_interface_t>
 8084286:	4630      	mov	r0, r6
 8084288:	f7fb ff23 	bl	80800d2 <__cxa_guard_release>
 808428c:	480b      	ldr	r0, [pc, #44]	; (80842bc <pinAvailable+0x80>)
 808428e:	f001 f85b 	bl	8085348 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 8084292:	4b09      	ldr	r3, [pc, #36]	; (80842b8 <pinAvailable+0x7c>)
 8084294:	7818      	ldrb	r0, [r3, #0]
 8084296:	f7fd f96b 	bl	8081570 <hal_spi_is_enabled>
 808429a:	2800      	cmp	r0, #0
 808429c:	d1d2      	bne.n	8084244 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 808429e:	3c12      	subs	r4, #18
 80842a0:	2c01      	cmp	r4, #1
 80842a2:	d805      	bhi.n	80842b0 <pinAvailable+0x74>
 80842a4:	f7ff fe14 	bl	8083ed0 <_Z22__fetch_global_Serial1v>
 80842a8:	7c00      	ldrb	r0, [r0, #16]
 80842aa:	f7fd f9a1 	bl	80815f0 <hal_usart_is_enabled>
 80842ae:	e7d7      	b.n	8084260 <pinAvailable+0x24>
  return true; // 'pin' is available
 80842b0:	2001      	movs	r0, #1
 80842b2:	e7c8      	b.n	8084246 <pinAvailable+0xa>
 80842b4:	200006c4 	.word	0x200006c4
 80842b8:	200006c8 	.word	0x200006c8
 80842bc:	0808422d 	.word	0x0808422d

080842c0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80842c0:	282e      	cmp	r0, #46	; 0x2e
{
 80842c2:	b538      	push	{r3, r4, r5, lr}
 80842c4:	4604      	mov	r4, r0
 80842c6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80842c8:	d80a      	bhi.n	80842e0 <pinMode+0x20>
 80842ca:	29ff      	cmp	r1, #255	; 0xff
 80842cc:	d008      	beq.n	80842e0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80842ce:	f7ff ffb5 	bl	808423c <pinAvailable>
 80842d2:	b128      	cbz	r0, 80842e0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80842d4:	4629      	mov	r1, r5
 80842d6:	4620      	mov	r0, r4
}
 80842d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80842dc:	f7fd b8b0 	b.w	8081440 <HAL_Pin_Mode>
}
 80842e0:	bd38      	pop	{r3, r4, r5, pc}

080842e2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80842e2:	b538      	push	{r3, r4, r5, lr}
 80842e4:	4604      	mov	r4, r0
 80842e6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80842e8:	f7fd f8b2 	bl	8081450 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80842ec:	28ff      	cmp	r0, #255	; 0xff
 80842ee:	d010      	beq.n	8084312 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80842f0:	2806      	cmp	r0, #6
 80842f2:	d804      	bhi.n	80842fe <digitalWrite+0x1c>
 80842f4:	234d      	movs	r3, #77	; 0x4d
 80842f6:	fa23 f000 	lsr.w	r0, r3, r0
 80842fa:	07c3      	lsls	r3, r0, #31
 80842fc:	d409      	bmi.n	8084312 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80842fe:	4620      	mov	r0, r4
 8084300:	f7ff ff9c 	bl	808423c <pinAvailable>
 8084304:	b128      	cbz	r0, 8084312 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8084306:	4629      	mov	r1, r5
 8084308:	4620      	mov	r0, r4
}
 808430a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 808430e:	f7fd b8a7 	b.w	8081460 <HAL_GPIO_Write>
}
 8084312:	bd38      	pop	{r3, r4, r5, pc}

08084314 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8084314:	4770      	bx	lr
	...

08084318 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:
	hal_i2c_config_t config = {
 8084318:	2300      	movs	r3, #0
hal_i2c_config_t defaultWireConfig() {
 808431a:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 808431c:	2520      	movs	r5, #32
 808431e:	8043      	strh	r3, [r0, #2]
 8084320:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8084322:	4e08      	ldr	r6, [pc, #32]	; (8084344 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x2c>)
hal_i2c_config_t defaultWireConfig() {
 8084324:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 8084326:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8084328:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 808432a:	6085      	str	r5, [r0, #8]
 808432c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808432e:	4628      	mov	r0, r5
 8084330:	f000 f872 	bl	8084418 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8084334:	4631      	mov	r1, r6
	};
 8084336:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8084338:	4628      	mov	r0, r5
 808433a:	f000 f86d 	bl	8084418 <_ZnajRKSt9nothrow_t>
	};
 808433e:	60e0      	str	r0, [r4, #12]
}
 8084340:	4620      	mov	r0, r4
 8084342:	bd70      	pop	{r4, r5, r6, pc}
 8084344:	08085cec 	.word	0x08085cec

08084348 <__tcf_2>:
 8084348:	4770      	bx	lr

0808434a <_Z17acquireWireBufferv>:
{
 808434a:	b510      	push	{r4, lr}
 808434c:	4604      	mov	r4, r0
	return defaultWireConfig();
 808434e:	f7ff ffe3 	bl	8084318 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 8084352:	4620      	mov	r0, r4
 8084354:	bd10      	pop	{r4, pc}

08084356 <_Z18acquireWire3Bufferv>:
 8084356:	b510      	push	{r4, lr}
 8084358:	4604      	mov	r4, r0
 808435a:	f7ff ffdd 	bl	8084318 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
 808435e:	4620      	mov	r0, r4
 8084360:	bd10      	pop	{r4, pc}
	...

08084364 <_Z19__fetch_global_Wirev>:
{
 8084364:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8084366:	4d0e      	ldr	r5, [pc, #56]	; (80843a0 <_Z19__fetch_global_Wirev+0x3c>)
{
 8084368:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808436a:	7829      	ldrb	r1, [r5, #0]
 808436c:	f3bf 8f5b 	dmb	ish
 8084370:	f011 0401 	ands.w	r4, r1, #1
 8084374:	d111      	bne.n	808439a <_Z19__fetch_global_Wirev+0x36>
 8084376:	4628      	mov	r0, r5
 8084378:	f7fb fea6 	bl	80800c8 <__cxa_guard_acquire>
 808437c:	b168      	cbz	r0, 808439a <_Z19__fetch_global_Wirev+0x36>
 808437e:	a801      	add	r0, sp, #4
 8084380:	f7ff ffe3 	bl	808434a <_Z17acquireWireBufferv>
 8084384:	4621      	mov	r1, r4
 8084386:	aa01      	add	r2, sp, #4
 8084388:	4806      	ldr	r0, [pc, #24]	; (80843a4 <_Z19__fetch_global_Wirev+0x40>)
 808438a:	f7fd ff3b 	bl	8082204 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 808438e:	4628      	mov	r0, r5
 8084390:	f7fb fe9f 	bl	80800d2 <__cxa_guard_release>
 8084394:	4804      	ldr	r0, [pc, #16]	; (80843a8 <_Z19__fetch_global_Wirev+0x44>)
 8084396:	f000 ffd7 	bl	8085348 <atexit>
	return wire;
}
 808439a:	4802      	ldr	r0, [pc, #8]	; (80843a4 <_Z19__fetch_global_Wirev+0x40>)
 808439c:	b007      	add	sp, #28
 808439e:	bd30      	pop	{r4, r5, pc}
 80843a0:	200006d8 	.word	0x200006d8
 80843a4:	200006e0 	.word	0x200006e0
 80843a8:	08084315 	.word	0x08084315

080843ac <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 80843ac:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 80843ae:	4c0e      	ldr	r4, [pc, #56]	; (80843e8 <_Z20__fetch_global_Wire3v+0x3c>)
{
 80843b0:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 80843b2:	7823      	ldrb	r3, [r4, #0]
 80843b4:	f3bf 8f5b 	dmb	ish
 80843b8:	07db      	lsls	r3, r3, #31
 80843ba:	d411      	bmi.n	80843e0 <_Z20__fetch_global_Wire3v+0x34>
 80843bc:	4620      	mov	r0, r4
 80843be:	f7fb fe83 	bl	80800c8 <__cxa_guard_acquire>
 80843c2:	b168      	cbz	r0, 80843e0 <_Z20__fetch_global_Wire3v+0x34>
 80843c4:	a801      	add	r0, sp, #4
 80843c6:	f7ff ffc6 	bl	8084356 <_Z18acquireWire3Bufferv>
 80843ca:	2102      	movs	r1, #2
 80843cc:	aa01      	add	r2, sp, #4
 80843ce:	4807      	ldr	r0, [pc, #28]	; (80843ec <_Z20__fetch_global_Wire3v+0x40>)
 80843d0:	f7fd ff18 	bl	8082204 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80843d4:	4620      	mov	r0, r4
 80843d6:	f7fb fe7c 	bl	80800d2 <__cxa_guard_release>
 80843da:	4805      	ldr	r0, [pc, #20]	; (80843f0 <_Z20__fetch_global_Wire3v+0x44>)
 80843dc:	f000 ffb4 	bl	8085348 <atexit>
	return wire;
}
 80843e0:	4802      	ldr	r0, [pc, #8]	; (80843ec <_Z20__fetch_global_Wire3v+0x40>)
 80843e2:	b006      	add	sp, #24
 80843e4:	bd10      	pop	{r4, pc}
 80843e6:	bf00      	nop
 80843e8:	200006dc 	.word	0x200006dc
 80843ec:	200006f4 	.word	0x200006f4
 80843f0:	08084349 	.word	0x08084349

080843f4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80843f4:	2300      	movs	r3, #0
 80843f6:	b507      	push	{r0, r1, r2, lr}
 80843f8:	461a      	mov	r2, r3
 80843fa:	4619      	mov	r1, r3
 80843fc:	9300      	str	r3, [sp, #0]
 80843fe:	4803      	ldr	r0, [pc, #12]	; (808440c <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 8084400:	f7fd ffec 	bl	80823dc <_ZN9IPAddressC1Ehhhh>
 8084404:	b003      	add	sp, #12
 8084406:	f85d fb04 	ldr.w	pc, [sp], #4
 808440a:	bf00      	nop
 808440c:	20000708 	.word	0x20000708

08084410 <_ZdlPvj>:
 8084410:	f7fb be4d 	b.w	80800ae <_ZdlPv>

08084414 <_ZnwjRKSt9nothrow_t>:
 8084414:	f7fb be47 	b.w	80800a6 <_Znwj>

08084418 <_ZnajRKSt9nothrow_t>:
 8084418:	f7fb be47 	b.w	80800aa <_Znaj>

0808441c <_ZSt25__throw_bad_function_callv>:
 808441c:	b508      	push	{r3, lr}
 808441e:	f7fd fab5 	bl	808198c <abort>
	...

08084424 <__aeabi_drsub>:
 8084424:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8084428:	e002      	b.n	8084430 <__adddf3>
 808442a:	bf00      	nop

0808442c <__aeabi_dsub>:
 808442c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08084430 <__adddf3>:
 8084430:	b530      	push	{r4, r5, lr}
 8084432:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8084436:	ea4f 0543 	mov.w	r5, r3, lsl #1
 808443a:	ea94 0f05 	teq	r4, r5
 808443e:	bf08      	it	eq
 8084440:	ea90 0f02 	teqeq	r0, r2
 8084444:	bf1f      	itttt	ne
 8084446:	ea54 0c00 	orrsne.w	ip, r4, r0
 808444a:	ea55 0c02 	orrsne.w	ip, r5, r2
 808444e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8084452:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8084456:	f000 80e2 	beq.w	808461e <__adddf3+0x1ee>
 808445a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 808445e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8084462:	bfb8      	it	lt
 8084464:	426d      	neglt	r5, r5
 8084466:	dd0c      	ble.n	8084482 <__adddf3+0x52>
 8084468:	442c      	add	r4, r5
 808446a:	ea80 0202 	eor.w	r2, r0, r2
 808446e:	ea81 0303 	eor.w	r3, r1, r3
 8084472:	ea82 0000 	eor.w	r0, r2, r0
 8084476:	ea83 0101 	eor.w	r1, r3, r1
 808447a:	ea80 0202 	eor.w	r2, r0, r2
 808447e:	ea81 0303 	eor.w	r3, r1, r3
 8084482:	2d36      	cmp	r5, #54	; 0x36
 8084484:	bf88      	it	hi
 8084486:	bd30      	pophi	{r4, r5, pc}
 8084488:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808448c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8084490:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8084494:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8084498:	d002      	beq.n	80844a0 <__adddf3+0x70>
 808449a:	4240      	negs	r0, r0
 808449c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80844a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80844a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80844a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80844ac:	d002      	beq.n	80844b4 <__adddf3+0x84>
 80844ae:	4252      	negs	r2, r2
 80844b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80844b4:	ea94 0f05 	teq	r4, r5
 80844b8:	f000 80a7 	beq.w	808460a <__adddf3+0x1da>
 80844bc:	f1a4 0401 	sub.w	r4, r4, #1
 80844c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80844c4:	db0d      	blt.n	80844e2 <__adddf3+0xb2>
 80844c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80844ca:	fa22 f205 	lsr.w	r2, r2, r5
 80844ce:	1880      	adds	r0, r0, r2
 80844d0:	f141 0100 	adc.w	r1, r1, #0
 80844d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80844d8:	1880      	adds	r0, r0, r2
 80844da:	fa43 f305 	asr.w	r3, r3, r5
 80844de:	4159      	adcs	r1, r3
 80844e0:	e00e      	b.n	8084500 <__adddf3+0xd0>
 80844e2:	f1a5 0520 	sub.w	r5, r5, #32
 80844e6:	f10e 0e20 	add.w	lr, lr, #32
 80844ea:	2a01      	cmp	r2, #1
 80844ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80844f0:	bf28      	it	cs
 80844f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80844f6:	fa43 f305 	asr.w	r3, r3, r5
 80844fa:	18c0      	adds	r0, r0, r3
 80844fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8084500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8084504:	d507      	bpl.n	8084516 <__adddf3+0xe6>
 8084506:	f04f 0e00 	mov.w	lr, #0
 808450a:	f1dc 0c00 	rsbs	ip, ip, #0
 808450e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8084512:	eb6e 0101 	sbc.w	r1, lr, r1
 8084516:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 808451a:	d31b      	bcc.n	8084554 <__adddf3+0x124>
 808451c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8084520:	d30c      	bcc.n	808453c <__adddf3+0x10c>
 8084522:	0849      	lsrs	r1, r1, #1
 8084524:	ea5f 0030 	movs.w	r0, r0, rrx
 8084528:	ea4f 0c3c 	mov.w	ip, ip, rrx
 808452c:	f104 0401 	add.w	r4, r4, #1
 8084530:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8084534:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8084538:	f080 809a 	bcs.w	8084670 <__adddf3+0x240>
 808453c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8084540:	bf08      	it	eq
 8084542:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8084546:	f150 0000 	adcs.w	r0, r0, #0
 808454a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808454e:	ea41 0105 	orr.w	r1, r1, r5
 8084552:	bd30      	pop	{r4, r5, pc}
 8084554:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8084558:	4140      	adcs	r0, r0
 808455a:	eb41 0101 	adc.w	r1, r1, r1
 808455e:	3c01      	subs	r4, #1
 8084560:	bf28      	it	cs
 8084562:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8084566:	d2e9      	bcs.n	808453c <__adddf3+0x10c>
 8084568:	f091 0f00 	teq	r1, #0
 808456c:	bf04      	itt	eq
 808456e:	4601      	moveq	r1, r0
 8084570:	2000      	moveq	r0, #0
 8084572:	fab1 f381 	clz	r3, r1
 8084576:	bf08      	it	eq
 8084578:	3320      	addeq	r3, #32
 808457a:	f1a3 030b 	sub.w	r3, r3, #11
 808457e:	f1b3 0220 	subs.w	r2, r3, #32
 8084582:	da0c      	bge.n	808459e <__adddf3+0x16e>
 8084584:	320c      	adds	r2, #12
 8084586:	dd08      	ble.n	808459a <__adddf3+0x16a>
 8084588:	f102 0c14 	add.w	ip, r2, #20
 808458c:	f1c2 020c 	rsb	r2, r2, #12
 8084590:	fa01 f00c 	lsl.w	r0, r1, ip
 8084594:	fa21 f102 	lsr.w	r1, r1, r2
 8084598:	e00c      	b.n	80845b4 <__adddf3+0x184>
 808459a:	f102 0214 	add.w	r2, r2, #20
 808459e:	bfd8      	it	le
 80845a0:	f1c2 0c20 	rsble	ip, r2, #32
 80845a4:	fa01 f102 	lsl.w	r1, r1, r2
 80845a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80845ac:	bfdc      	itt	le
 80845ae:	ea41 010c 	orrle.w	r1, r1, ip
 80845b2:	4090      	lslle	r0, r2
 80845b4:	1ae4      	subs	r4, r4, r3
 80845b6:	bfa2      	ittt	ge
 80845b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80845bc:	4329      	orrge	r1, r5
 80845be:	bd30      	popge	{r4, r5, pc}
 80845c0:	ea6f 0404 	mvn.w	r4, r4
 80845c4:	3c1f      	subs	r4, #31
 80845c6:	da1c      	bge.n	8084602 <__adddf3+0x1d2>
 80845c8:	340c      	adds	r4, #12
 80845ca:	dc0e      	bgt.n	80845ea <__adddf3+0x1ba>
 80845cc:	f104 0414 	add.w	r4, r4, #20
 80845d0:	f1c4 0220 	rsb	r2, r4, #32
 80845d4:	fa20 f004 	lsr.w	r0, r0, r4
 80845d8:	fa01 f302 	lsl.w	r3, r1, r2
 80845dc:	ea40 0003 	orr.w	r0, r0, r3
 80845e0:	fa21 f304 	lsr.w	r3, r1, r4
 80845e4:	ea45 0103 	orr.w	r1, r5, r3
 80845e8:	bd30      	pop	{r4, r5, pc}
 80845ea:	f1c4 040c 	rsb	r4, r4, #12
 80845ee:	f1c4 0220 	rsb	r2, r4, #32
 80845f2:	fa20 f002 	lsr.w	r0, r0, r2
 80845f6:	fa01 f304 	lsl.w	r3, r1, r4
 80845fa:	ea40 0003 	orr.w	r0, r0, r3
 80845fe:	4629      	mov	r1, r5
 8084600:	bd30      	pop	{r4, r5, pc}
 8084602:	fa21 f004 	lsr.w	r0, r1, r4
 8084606:	4629      	mov	r1, r5
 8084608:	bd30      	pop	{r4, r5, pc}
 808460a:	f094 0f00 	teq	r4, #0
 808460e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8084612:	bf06      	itte	eq
 8084614:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8084618:	3401      	addeq	r4, #1
 808461a:	3d01      	subne	r5, #1
 808461c:	e74e      	b.n	80844bc <__adddf3+0x8c>
 808461e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8084622:	bf18      	it	ne
 8084624:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8084628:	d029      	beq.n	808467e <__adddf3+0x24e>
 808462a:	ea94 0f05 	teq	r4, r5
 808462e:	bf08      	it	eq
 8084630:	ea90 0f02 	teqeq	r0, r2
 8084634:	d005      	beq.n	8084642 <__adddf3+0x212>
 8084636:	ea54 0c00 	orrs.w	ip, r4, r0
 808463a:	bf04      	itt	eq
 808463c:	4619      	moveq	r1, r3
 808463e:	4610      	moveq	r0, r2
 8084640:	bd30      	pop	{r4, r5, pc}
 8084642:	ea91 0f03 	teq	r1, r3
 8084646:	bf1e      	ittt	ne
 8084648:	2100      	movne	r1, #0
 808464a:	2000      	movne	r0, #0
 808464c:	bd30      	popne	{r4, r5, pc}
 808464e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8084652:	d105      	bne.n	8084660 <__adddf3+0x230>
 8084654:	0040      	lsls	r0, r0, #1
 8084656:	4149      	adcs	r1, r1
 8084658:	bf28      	it	cs
 808465a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 808465e:	bd30      	pop	{r4, r5, pc}
 8084660:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8084664:	bf3c      	itt	cc
 8084666:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 808466a:	bd30      	popcc	{r4, r5, pc}
 808466c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8084670:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8084674:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8084678:	f04f 0000 	mov.w	r0, #0
 808467c:	bd30      	pop	{r4, r5, pc}
 808467e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8084682:	bf1a      	itte	ne
 8084684:	4619      	movne	r1, r3
 8084686:	4610      	movne	r0, r2
 8084688:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 808468c:	bf1c      	itt	ne
 808468e:	460b      	movne	r3, r1
 8084690:	4602      	movne	r2, r0
 8084692:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8084696:	bf06      	itte	eq
 8084698:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 808469c:	ea91 0f03 	teqeq	r1, r3
 80846a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80846a4:	bd30      	pop	{r4, r5, pc}
 80846a6:	bf00      	nop

080846a8 <__aeabi_ui2d>:
 80846a8:	f090 0f00 	teq	r0, #0
 80846ac:	bf04      	itt	eq
 80846ae:	2100      	moveq	r1, #0
 80846b0:	4770      	bxeq	lr
 80846b2:	b530      	push	{r4, r5, lr}
 80846b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80846b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80846bc:	f04f 0500 	mov.w	r5, #0
 80846c0:	f04f 0100 	mov.w	r1, #0
 80846c4:	e750      	b.n	8084568 <__adddf3+0x138>
 80846c6:	bf00      	nop

080846c8 <__aeabi_i2d>:
 80846c8:	f090 0f00 	teq	r0, #0
 80846cc:	bf04      	itt	eq
 80846ce:	2100      	moveq	r1, #0
 80846d0:	4770      	bxeq	lr
 80846d2:	b530      	push	{r4, r5, lr}
 80846d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80846d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80846dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80846e0:	bf48      	it	mi
 80846e2:	4240      	negmi	r0, r0
 80846e4:	f04f 0100 	mov.w	r1, #0
 80846e8:	e73e      	b.n	8084568 <__adddf3+0x138>
 80846ea:	bf00      	nop

080846ec <__aeabi_f2d>:
 80846ec:	0042      	lsls	r2, r0, #1
 80846ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80846f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80846f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80846fa:	bf1f      	itttt	ne
 80846fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8084700:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8084704:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8084708:	4770      	bxne	lr
 808470a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 808470e:	bf08      	it	eq
 8084710:	4770      	bxeq	lr
 8084712:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8084716:	bf04      	itt	eq
 8084718:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 808471c:	4770      	bxeq	lr
 808471e:	b530      	push	{r4, r5, lr}
 8084720:	f44f 7460 	mov.w	r4, #896	; 0x380
 8084724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8084728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808472c:	e71c      	b.n	8084568 <__adddf3+0x138>
 808472e:	bf00      	nop

08084730 <__aeabi_ul2d>:
 8084730:	ea50 0201 	orrs.w	r2, r0, r1
 8084734:	bf08      	it	eq
 8084736:	4770      	bxeq	lr
 8084738:	b530      	push	{r4, r5, lr}
 808473a:	f04f 0500 	mov.w	r5, #0
 808473e:	e00a      	b.n	8084756 <__aeabi_l2d+0x16>

08084740 <__aeabi_l2d>:
 8084740:	ea50 0201 	orrs.w	r2, r0, r1
 8084744:	bf08      	it	eq
 8084746:	4770      	bxeq	lr
 8084748:	b530      	push	{r4, r5, lr}
 808474a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 808474e:	d502      	bpl.n	8084756 <__aeabi_l2d+0x16>
 8084750:	4240      	negs	r0, r0
 8084752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8084756:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808475a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808475e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8084762:	f43f aed8 	beq.w	8084516 <__adddf3+0xe6>
 8084766:	f04f 0203 	mov.w	r2, #3
 808476a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808476e:	bf18      	it	ne
 8084770:	3203      	addne	r2, #3
 8084772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8084776:	bf18      	it	ne
 8084778:	3203      	addne	r2, #3
 808477a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 808477e:	f1c2 0320 	rsb	r3, r2, #32
 8084782:	fa00 fc03 	lsl.w	ip, r0, r3
 8084786:	fa20 f002 	lsr.w	r0, r0, r2
 808478a:	fa01 fe03 	lsl.w	lr, r1, r3
 808478e:	ea40 000e 	orr.w	r0, r0, lr
 8084792:	fa21 f102 	lsr.w	r1, r1, r2
 8084796:	4414      	add	r4, r2
 8084798:	e6bd      	b.n	8084516 <__adddf3+0xe6>
 808479a:	bf00      	nop

0808479c <__aeabi_dmul>:
 808479c:	b570      	push	{r4, r5, r6, lr}
 808479e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80847a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80847a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80847aa:	bf1d      	ittte	ne
 80847ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80847b0:	ea94 0f0c 	teqne	r4, ip
 80847b4:	ea95 0f0c 	teqne	r5, ip
 80847b8:	f000 f8de 	bleq	8084978 <__aeabi_dmul+0x1dc>
 80847bc:	442c      	add	r4, r5
 80847be:	ea81 0603 	eor.w	r6, r1, r3
 80847c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80847c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80847ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80847ce:	bf18      	it	ne
 80847d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80847d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80847d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80847dc:	d038      	beq.n	8084850 <__aeabi_dmul+0xb4>
 80847de:	fba0 ce02 	umull	ip, lr, r0, r2
 80847e2:	f04f 0500 	mov.w	r5, #0
 80847e6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80847ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80847ee:	fbe0 e503 	umlal	lr, r5, r0, r3
 80847f2:	f04f 0600 	mov.w	r6, #0
 80847f6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80847fa:	f09c 0f00 	teq	ip, #0
 80847fe:	bf18      	it	ne
 8084800:	f04e 0e01 	orrne.w	lr, lr, #1
 8084804:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8084808:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808480c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8084810:	d204      	bcs.n	808481c <__aeabi_dmul+0x80>
 8084812:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8084816:	416d      	adcs	r5, r5
 8084818:	eb46 0606 	adc.w	r6, r6, r6
 808481c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8084820:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8084824:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8084828:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 808482c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8084830:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8084834:	bf88      	it	hi
 8084836:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808483a:	d81e      	bhi.n	808487a <__aeabi_dmul+0xde>
 808483c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8084840:	bf08      	it	eq
 8084842:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8084846:	f150 0000 	adcs.w	r0, r0, #0
 808484a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808484e:	bd70      	pop	{r4, r5, r6, pc}
 8084850:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8084854:	ea46 0101 	orr.w	r1, r6, r1
 8084858:	ea40 0002 	orr.w	r0, r0, r2
 808485c:	ea81 0103 	eor.w	r1, r1, r3
 8084860:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8084864:	bfc2      	ittt	gt
 8084866:	ebd4 050c 	rsbsgt	r5, r4, ip
 808486a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808486e:	bd70      	popgt	{r4, r5, r6, pc}
 8084870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8084874:	f04f 0e00 	mov.w	lr, #0
 8084878:	3c01      	subs	r4, #1
 808487a:	f300 80ab 	bgt.w	80849d4 <__aeabi_dmul+0x238>
 808487e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8084882:	bfde      	ittt	le
 8084884:	2000      	movle	r0, #0
 8084886:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 808488a:	bd70      	pople	{r4, r5, r6, pc}
 808488c:	f1c4 0400 	rsb	r4, r4, #0
 8084890:	3c20      	subs	r4, #32
 8084892:	da35      	bge.n	8084900 <__aeabi_dmul+0x164>
 8084894:	340c      	adds	r4, #12
 8084896:	dc1b      	bgt.n	80848d0 <__aeabi_dmul+0x134>
 8084898:	f104 0414 	add.w	r4, r4, #20
 808489c:	f1c4 0520 	rsb	r5, r4, #32
 80848a0:	fa00 f305 	lsl.w	r3, r0, r5
 80848a4:	fa20 f004 	lsr.w	r0, r0, r4
 80848a8:	fa01 f205 	lsl.w	r2, r1, r5
 80848ac:	ea40 0002 	orr.w	r0, r0, r2
 80848b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80848b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80848b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80848bc:	fa21 f604 	lsr.w	r6, r1, r4
 80848c0:	eb42 0106 	adc.w	r1, r2, r6
 80848c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80848c8:	bf08      	it	eq
 80848ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80848ce:	bd70      	pop	{r4, r5, r6, pc}
 80848d0:	f1c4 040c 	rsb	r4, r4, #12
 80848d4:	f1c4 0520 	rsb	r5, r4, #32
 80848d8:	fa00 f304 	lsl.w	r3, r0, r4
 80848dc:	fa20 f005 	lsr.w	r0, r0, r5
 80848e0:	fa01 f204 	lsl.w	r2, r1, r4
 80848e4:	ea40 0002 	orr.w	r0, r0, r2
 80848e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80848ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80848f0:	f141 0100 	adc.w	r1, r1, #0
 80848f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80848f8:	bf08      	it	eq
 80848fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80848fe:	bd70      	pop	{r4, r5, r6, pc}
 8084900:	f1c4 0520 	rsb	r5, r4, #32
 8084904:	fa00 f205 	lsl.w	r2, r0, r5
 8084908:	ea4e 0e02 	orr.w	lr, lr, r2
 808490c:	fa20 f304 	lsr.w	r3, r0, r4
 8084910:	fa01 f205 	lsl.w	r2, r1, r5
 8084914:	ea43 0302 	orr.w	r3, r3, r2
 8084918:	fa21 f004 	lsr.w	r0, r1, r4
 808491c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8084920:	fa21 f204 	lsr.w	r2, r1, r4
 8084924:	ea20 0002 	bic.w	r0, r0, r2
 8084928:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 808492c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8084930:	bf08      	it	eq
 8084932:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8084936:	bd70      	pop	{r4, r5, r6, pc}
 8084938:	f094 0f00 	teq	r4, #0
 808493c:	d10f      	bne.n	808495e <__aeabi_dmul+0x1c2>
 808493e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8084942:	0040      	lsls	r0, r0, #1
 8084944:	eb41 0101 	adc.w	r1, r1, r1
 8084948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808494c:	bf08      	it	eq
 808494e:	3c01      	subeq	r4, #1
 8084950:	d0f7      	beq.n	8084942 <__aeabi_dmul+0x1a6>
 8084952:	ea41 0106 	orr.w	r1, r1, r6
 8084956:	f095 0f00 	teq	r5, #0
 808495a:	bf18      	it	ne
 808495c:	4770      	bxne	lr
 808495e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8084962:	0052      	lsls	r2, r2, #1
 8084964:	eb43 0303 	adc.w	r3, r3, r3
 8084968:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 808496c:	bf08      	it	eq
 808496e:	3d01      	subeq	r5, #1
 8084970:	d0f7      	beq.n	8084962 <__aeabi_dmul+0x1c6>
 8084972:	ea43 0306 	orr.w	r3, r3, r6
 8084976:	4770      	bx	lr
 8084978:	ea94 0f0c 	teq	r4, ip
 808497c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8084980:	bf18      	it	ne
 8084982:	ea95 0f0c 	teqne	r5, ip
 8084986:	d00c      	beq.n	80849a2 <__aeabi_dmul+0x206>
 8084988:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808498c:	bf18      	it	ne
 808498e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8084992:	d1d1      	bne.n	8084938 <__aeabi_dmul+0x19c>
 8084994:	ea81 0103 	eor.w	r1, r1, r3
 8084998:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808499c:	f04f 0000 	mov.w	r0, #0
 80849a0:	bd70      	pop	{r4, r5, r6, pc}
 80849a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80849a6:	bf06      	itte	eq
 80849a8:	4610      	moveq	r0, r2
 80849aa:	4619      	moveq	r1, r3
 80849ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80849b0:	d019      	beq.n	80849e6 <__aeabi_dmul+0x24a>
 80849b2:	ea94 0f0c 	teq	r4, ip
 80849b6:	d102      	bne.n	80849be <__aeabi_dmul+0x222>
 80849b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80849bc:	d113      	bne.n	80849e6 <__aeabi_dmul+0x24a>
 80849be:	ea95 0f0c 	teq	r5, ip
 80849c2:	d105      	bne.n	80849d0 <__aeabi_dmul+0x234>
 80849c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80849c8:	bf1c      	itt	ne
 80849ca:	4610      	movne	r0, r2
 80849cc:	4619      	movne	r1, r3
 80849ce:	d10a      	bne.n	80849e6 <__aeabi_dmul+0x24a>
 80849d0:	ea81 0103 	eor.w	r1, r1, r3
 80849d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80849d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80849dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80849e0:	f04f 0000 	mov.w	r0, #0
 80849e4:	bd70      	pop	{r4, r5, r6, pc}
 80849e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80849ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80849ee:	bd70      	pop	{r4, r5, r6, pc}

080849f0 <__aeabi_ddiv>:
 80849f0:	b570      	push	{r4, r5, r6, lr}
 80849f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80849f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80849fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80849fe:	bf1d      	ittte	ne
 8084a00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8084a04:	ea94 0f0c 	teqne	r4, ip
 8084a08:	ea95 0f0c 	teqne	r5, ip
 8084a0c:	f000 f8a7 	bleq	8084b5e <__aeabi_ddiv+0x16e>
 8084a10:	eba4 0405 	sub.w	r4, r4, r5
 8084a14:	ea81 0e03 	eor.w	lr, r1, r3
 8084a18:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8084a1c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8084a20:	f000 8088 	beq.w	8084b34 <__aeabi_ddiv+0x144>
 8084a24:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8084a28:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8084a2c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8084a30:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8084a34:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8084a38:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8084a3c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8084a40:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8084a44:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8084a48:	429d      	cmp	r5, r3
 8084a4a:	bf08      	it	eq
 8084a4c:	4296      	cmpeq	r6, r2
 8084a4e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8084a52:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8084a56:	d202      	bcs.n	8084a5e <__aeabi_ddiv+0x6e>
 8084a58:	085b      	lsrs	r3, r3, #1
 8084a5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8084a5e:	1ab6      	subs	r6, r6, r2
 8084a60:	eb65 0503 	sbc.w	r5, r5, r3
 8084a64:	085b      	lsrs	r3, r3, #1
 8084a66:	ea4f 0232 	mov.w	r2, r2, rrx
 8084a6a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8084a6e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8084a72:	ebb6 0e02 	subs.w	lr, r6, r2
 8084a76:	eb75 0e03 	sbcs.w	lr, r5, r3
 8084a7a:	bf22      	ittt	cs
 8084a7c:	1ab6      	subcs	r6, r6, r2
 8084a7e:	4675      	movcs	r5, lr
 8084a80:	ea40 000c 	orrcs.w	r0, r0, ip
 8084a84:	085b      	lsrs	r3, r3, #1
 8084a86:	ea4f 0232 	mov.w	r2, r2, rrx
 8084a8a:	ebb6 0e02 	subs.w	lr, r6, r2
 8084a8e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8084a92:	bf22      	ittt	cs
 8084a94:	1ab6      	subcs	r6, r6, r2
 8084a96:	4675      	movcs	r5, lr
 8084a98:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8084a9c:	085b      	lsrs	r3, r3, #1
 8084a9e:	ea4f 0232 	mov.w	r2, r2, rrx
 8084aa2:	ebb6 0e02 	subs.w	lr, r6, r2
 8084aa6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8084aaa:	bf22      	ittt	cs
 8084aac:	1ab6      	subcs	r6, r6, r2
 8084aae:	4675      	movcs	r5, lr
 8084ab0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8084ab4:	085b      	lsrs	r3, r3, #1
 8084ab6:	ea4f 0232 	mov.w	r2, r2, rrx
 8084aba:	ebb6 0e02 	subs.w	lr, r6, r2
 8084abe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8084ac2:	bf22      	ittt	cs
 8084ac4:	1ab6      	subcs	r6, r6, r2
 8084ac6:	4675      	movcs	r5, lr
 8084ac8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8084acc:	ea55 0e06 	orrs.w	lr, r5, r6
 8084ad0:	d018      	beq.n	8084b04 <__aeabi_ddiv+0x114>
 8084ad2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8084ad6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8084ada:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8084ade:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8084ae2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8084ae6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8084aea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8084aee:	d1c0      	bne.n	8084a72 <__aeabi_ddiv+0x82>
 8084af0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8084af4:	d10b      	bne.n	8084b0e <__aeabi_ddiv+0x11e>
 8084af6:	ea41 0100 	orr.w	r1, r1, r0
 8084afa:	f04f 0000 	mov.w	r0, #0
 8084afe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8084b02:	e7b6      	b.n	8084a72 <__aeabi_ddiv+0x82>
 8084b04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8084b08:	bf04      	itt	eq
 8084b0a:	4301      	orreq	r1, r0
 8084b0c:	2000      	moveq	r0, #0
 8084b0e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8084b12:	bf88      	it	hi
 8084b14:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8084b18:	f63f aeaf 	bhi.w	808487a <__aeabi_dmul+0xde>
 8084b1c:	ebb5 0c03 	subs.w	ip, r5, r3
 8084b20:	bf04      	itt	eq
 8084b22:	ebb6 0c02 	subseq.w	ip, r6, r2
 8084b26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8084b2a:	f150 0000 	adcs.w	r0, r0, #0
 8084b2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8084b32:	bd70      	pop	{r4, r5, r6, pc}
 8084b34:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8084b38:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8084b3c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8084b40:	bfc2      	ittt	gt
 8084b42:	ebd4 050c 	rsbsgt	r5, r4, ip
 8084b46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8084b4a:	bd70      	popgt	{r4, r5, r6, pc}
 8084b4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8084b50:	f04f 0e00 	mov.w	lr, #0
 8084b54:	3c01      	subs	r4, #1
 8084b56:	e690      	b.n	808487a <__aeabi_dmul+0xde>
 8084b58:	ea45 0e06 	orr.w	lr, r5, r6
 8084b5c:	e68d      	b.n	808487a <__aeabi_dmul+0xde>
 8084b5e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8084b62:	ea94 0f0c 	teq	r4, ip
 8084b66:	bf08      	it	eq
 8084b68:	ea95 0f0c 	teqeq	r5, ip
 8084b6c:	f43f af3b 	beq.w	80849e6 <__aeabi_dmul+0x24a>
 8084b70:	ea94 0f0c 	teq	r4, ip
 8084b74:	d10a      	bne.n	8084b8c <__aeabi_ddiv+0x19c>
 8084b76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8084b7a:	f47f af34 	bne.w	80849e6 <__aeabi_dmul+0x24a>
 8084b7e:	ea95 0f0c 	teq	r5, ip
 8084b82:	f47f af25 	bne.w	80849d0 <__aeabi_dmul+0x234>
 8084b86:	4610      	mov	r0, r2
 8084b88:	4619      	mov	r1, r3
 8084b8a:	e72c      	b.n	80849e6 <__aeabi_dmul+0x24a>
 8084b8c:	ea95 0f0c 	teq	r5, ip
 8084b90:	d106      	bne.n	8084ba0 <__aeabi_ddiv+0x1b0>
 8084b92:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8084b96:	f43f aefd 	beq.w	8084994 <__aeabi_dmul+0x1f8>
 8084b9a:	4610      	mov	r0, r2
 8084b9c:	4619      	mov	r1, r3
 8084b9e:	e722      	b.n	80849e6 <__aeabi_dmul+0x24a>
 8084ba0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8084ba4:	bf18      	it	ne
 8084ba6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8084baa:	f47f aec5 	bne.w	8084938 <__aeabi_dmul+0x19c>
 8084bae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8084bb2:	f47f af0d 	bne.w	80849d0 <__aeabi_dmul+0x234>
 8084bb6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8084bba:	f47f aeeb 	bne.w	8084994 <__aeabi_dmul+0x1f8>
 8084bbe:	e712      	b.n	80849e6 <__aeabi_dmul+0x24a>

08084bc0 <__aeabi_d2uiz>:
 8084bc0:	004a      	lsls	r2, r1, #1
 8084bc2:	d211      	bcs.n	8084be8 <__aeabi_d2uiz+0x28>
 8084bc4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8084bc8:	d211      	bcs.n	8084bee <__aeabi_d2uiz+0x2e>
 8084bca:	d50d      	bpl.n	8084be8 <__aeabi_d2uiz+0x28>
 8084bcc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8084bd0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8084bd4:	d40e      	bmi.n	8084bf4 <__aeabi_d2uiz+0x34>
 8084bd6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8084bda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8084bde:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8084be2:	fa23 f002 	lsr.w	r0, r3, r2
 8084be6:	4770      	bx	lr
 8084be8:	f04f 0000 	mov.w	r0, #0
 8084bec:	4770      	bx	lr
 8084bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8084bf2:	d102      	bne.n	8084bfa <__aeabi_d2uiz+0x3a>
 8084bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8084bf8:	4770      	bx	lr
 8084bfa:	f04f 0000 	mov.w	r0, #0
 8084bfe:	4770      	bx	lr

08084c00 <__aeabi_d2f>:
 8084c00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8084c04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8084c08:	bf24      	itt	cs
 8084c0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8084c0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8084c12:	d90d      	bls.n	8084c30 <__aeabi_d2f+0x30>
 8084c14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8084c18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8084c1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8084c20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8084c24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8084c28:	bf08      	it	eq
 8084c2a:	f020 0001 	biceq.w	r0, r0, #1
 8084c2e:	4770      	bx	lr
 8084c30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8084c34:	d121      	bne.n	8084c7a <__aeabi_d2f+0x7a>
 8084c36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8084c3a:	bfbc      	itt	lt
 8084c3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8084c40:	4770      	bxlt	lr
 8084c42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8084c46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8084c4a:	f1c2 0218 	rsb	r2, r2, #24
 8084c4e:	f1c2 0c20 	rsb	ip, r2, #32
 8084c52:	fa10 f30c 	lsls.w	r3, r0, ip
 8084c56:	fa20 f002 	lsr.w	r0, r0, r2
 8084c5a:	bf18      	it	ne
 8084c5c:	f040 0001 	orrne.w	r0, r0, #1
 8084c60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8084c64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8084c68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8084c6c:	ea40 000c 	orr.w	r0, r0, ip
 8084c70:	fa23 f302 	lsr.w	r3, r3, r2
 8084c74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8084c78:	e7cc      	b.n	8084c14 <__aeabi_d2f+0x14>
 8084c7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8084c7e:	d107      	bne.n	8084c90 <__aeabi_d2f+0x90>
 8084c80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8084c84:	bf1e      	ittt	ne
 8084c86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8084c8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8084c8e:	4770      	bxne	lr
 8084c90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8084c94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8084c98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084c9c:	4770      	bx	lr
 8084c9e:	bf00      	nop

08084ca0 <__aeabi_frsub>:
 8084ca0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8084ca4:	e002      	b.n	8084cac <__addsf3>
 8084ca6:	bf00      	nop

08084ca8 <__aeabi_fsub>:
 8084ca8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08084cac <__addsf3>:
 8084cac:	0042      	lsls	r2, r0, #1
 8084cae:	bf1f      	itttt	ne
 8084cb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8084cb4:	ea92 0f03 	teqne	r2, r3
 8084cb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8084cbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8084cc0:	d06a      	beq.n	8084d98 <__addsf3+0xec>
 8084cc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8084cc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8084cca:	bfc1      	itttt	gt
 8084ccc:	18d2      	addgt	r2, r2, r3
 8084cce:	4041      	eorgt	r1, r0
 8084cd0:	4048      	eorgt	r0, r1
 8084cd2:	4041      	eorgt	r1, r0
 8084cd4:	bfb8      	it	lt
 8084cd6:	425b      	neglt	r3, r3
 8084cd8:	2b19      	cmp	r3, #25
 8084cda:	bf88      	it	hi
 8084cdc:	4770      	bxhi	lr
 8084cde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8084ce2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084ce6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8084cea:	bf18      	it	ne
 8084cec:	4240      	negne	r0, r0
 8084cee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8084cf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8084cf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8084cfa:	bf18      	it	ne
 8084cfc:	4249      	negne	r1, r1
 8084cfe:	ea92 0f03 	teq	r2, r3
 8084d02:	d03f      	beq.n	8084d84 <__addsf3+0xd8>
 8084d04:	f1a2 0201 	sub.w	r2, r2, #1
 8084d08:	fa41 fc03 	asr.w	ip, r1, r3
 8084d0c:	eb10 000c 	adds.w	r0, r0, ip
 8084d10:	f1c3 0320 	rsb	r3, r3, #32
 8084d14:	fa01 f103 	lsl.w	r1, r1, r3
 8084d18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8084d1c:	d502      	bpl.n	8084d24 <__addsf3+0x78>
 8084d1e:	4249      	negs	r1, r1
 8084d20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8084d24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8084d28:	d313      	bcc.n	8084d52 <__addsf3+0xa6>
 8084d2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8084d2e:	d306      	bcc.n	8084d3e <__addsf3+0x92>
 8084d30:	0840      	lsrs	r0, r0, #1
 8084d32:	ea4f 0131 	mov.w	r1, r1, rrx
 8084d36:	f102 0201 	add.w	r2, r2, #1
 8084d3a:	2afe      	cmp	r2, #254	; 0xfe
 8084d3c:	d251      	bcs.n	8084de2 <__addsf3+0x136>
 8084d3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8084d42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8084d46:	bf08      	it	eq
 8084d48:	f020 0001 	biceq.w	r0, r0, #1
 8084d4c:	ea40 0003 	orr.w	r0, r0, r3
 8084d50:	4770      	bx	lr
 8084d52:	0049      	lsls	r1, r1, #1
 8084d54:	eb40 0000 	adc.w	r0, r0, r0
 8084d58:	3a01      	subs	r2, #1
 8084d5a:	bf28      	it	cs
 8084d5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8084d60:	d2ed      	bcs.n	8084d3e <__addsf3+0x92>
 8084d62:	fab0 fc80 	clz	ip, r0
 8084d66:	f1ac 0c08 	sub.w	ip, ip, #8
 8084d6a:	ebb2 020c 	subs.w	r2, r2, ip
 8084d6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8084d72:	bfaa      	itet	ge
 8084d74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8084d78:	4252      	neglt	r2, r2
 8084d7a:	4318      	orrge	r0, r3
 8084d7c:	bfbc      	itt	lt
 8084d7e:	40d0      	lsrlt	r0, r2
 8084d80:	4318      	orrlt	r0, r3
 8084d82:	4770      	bx	lr
 8084d84:	f092 0f00 	teq	r2, #0
 8084d88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8084d8c:	bf06      	itte	eq
 8084d8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8084d92:	3201      	addeq	r2, #1
 8084d94:	3b01      	subne	r3, #1
 8084d96:	e7b5      	b.n	8084d04 <__addsf3+0x58>
 8084d98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8084d9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8084da0:	bf18      	it	ne
 8084da2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8084da6:	d021      	beq.n	8084dec <__addsf3+0x140>
 8084da8:	ea92 0f03 	teq	r2, r3
 8084dac:	d004      	beq.n	8084db8 <__addsf3+0x10c>
 8084dae:	f092 0f00 	teq	r2, #0
 8084db2:	bf08      	it	eq
 8084db4:	4608      	moveq	r0, r1
 8084db6:	4770      	bx	lr
 8084db8:	ea90 0f01 	teq	r0, r1
 8084dbc:	bf1c      	itt	ne
 8084dbe:	2000      	movne	r0, #0
 8084dc0:	4770      	bxne	lr
 8084dc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8084dc6:	d104      	bne.n	8084dd2 <__addsf3+0x126>
 8084dc8:	0040      	lsls	r0, r0, #1
 8084dca:	bf28      	it	cs
 8084dcc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8084dd0:	4770      	bx	lr
 8084dd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8084dd6:	bf3c      	itt	cc
 8084dd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8084ddc:	4770      	bxcc	lr
 8084dde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8084de2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8084de6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084dea:	4770      	bx	lr
 8084dec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8084df0:	bf16      	itet	ne
 8084df2:	4608      	movne	r0, r1
 8084df4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8084df8:	4601      	movne	r1, r0
 8084dfa:	0242      	lsls	r2, r0, #9
 8084dfc:	bf06      	itte	eq
 8084dfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8084e02:	ea90 0f01 	teqeq	r0, r1
 8084e06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8084e0a:	4770      	bx	lr

08084e0c <__aeabi_ui2f>:
 8084e0c:	f04f 0300 	mov.w	r3, #0
 8084e10:	e004      	b.n	8084e1c <__aeabi_i2f+0x8>
 8084e12:	bf00      	nop

08084e14 <__aeabi_i2f>:
 8084e14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8084e18:	bf48      	it	mi
 8084e1a:	4240      	negmi	r0, r0
 8084e1c:	ea5f 0c00 	movs.w	ip, r0
 8084e20:	bf08      	it	eq
 8084e22:	4770      	bxeq	lr
 8084e24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8084e28:	4601      	mov	r1, r0
 8084e2a:	f04f 0000 	mov.w	r0, #0
 8084e2e:	e01c      	b.n	8084e6a <__aeabi_l2f+0x2a>

08084e30 <__aeabi_ul2f>:
 8084e30:	ea50 0201 	orrs.w	r2, r0, r1
 8084e34:	bf08      	it	eq
 8084e36:	4770      	bxeq	lr
 8084e38:	f04f 0300 	mov.w	r3, #0
 8084e3c:	e00a      	b.n	8084e54 <__aeabi_l2f+0x14>
 8084e3e:	bf00      	nop

08084e40 <__aeabi_l2f>:
 8084e40:	ea50 0201 	orrs.w	r2, r0, r1
 8084e44:	bf08      	it	eq
 8084e46:	4770      	bxeq	lr
 8084e48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8084e4c:	d502      	bpl.n	8084e54 <__aeabi_l2f+0x14>
 8084e4e:	4240      	negs	r0, r0
 8084e50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8084e54:	ea5f 0c01 	movs.w	ip, r1
 8084e58:	bf02      	ittt	eq
 8084e5a:	4684      	moveq	ip, r0
 8084e5c:	4601      	moveq	r1, r0
 8084e5e:	2000      	moveq	r0, #0
 8084e60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8084e64:	bf08      	it	eq
 8084e66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8084e6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8084e6e:	fabc f28c 	clz	r2, ip
 8084e72:	3a08      	subs	r2, #8
 8084e74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8084e78:	db10      	blt.n	8084e9c <__aeabi_l2f+0x5c>
 8084e7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8084e7e:	4463      	add	r3, ip
 8084e80:	fa00 fc02 	lsl.w	ip, r0, r2
 8084e84:	f1c2 0220 	rsb	r2, r2, #32
 8084e88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8084e8c:	fa20 f202 	lsr.w	r2, r0, r2
 8084e90:	eb43 0002 	adc.w	r0, r3, r2
 8084e94:	bf08      	it	eq
 8084e96:	f020 0001 	biceq.w	r0, r0, #1
 8084e9a:	4770      	bx	lr
 8084e9c:	f102 0220 	add.w	r2, r2, #32
 8084ea0:	fa01 fc02 	lsl.w	ip, r1, r2
 8084ea4:	f1c2 0220 	rsb	r2, r2, #32
 8084ea8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8084eac:	fa21 f202 	lsr.w	r2, r1, r2
 8084eb0:	eb43 0002 	adc.w	r0, r3, r2
 8084eb4:	bf08      	it	eq
 8084eb6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8084eba:	4770      	bx	lr

08084ebc <__aeabi_fmul>:
 8084ebc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8084ec0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8084ec4:	bf1e      	ittt	ne
 8084ec6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8084eca:	ea92 0f0c 	teqne	r2, ip
 8084ece:	ea93 0f0c 	teqne	r3, ip
 8084ed2:	d06f      	beq.n	8084fb4 <__aeabi_fmul+0xf8>
 8084ed4:	441a      	add	r2, r3
 8084ed6:	ea80 0c01 	eor.w	ip, r0, r1
 8084eda:	0240      	lsls	r0, r0, #9
 8084edc:	bf18      	it	ne
 8084ede:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8084ee2:	d01e      	beq.n	8084f22 <__aeabi_fmul+0x66>
 8084ee4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8084ee8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8084eec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8084ef0:	fba0 3101 	umull	r3, r1, r0, r1
 8084ef4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8084ef8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8084efc:	bf3e      	ittt	cc
 8084efe:	0049      	lslcc	r1, r1, #1
 8084f00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8084f04:	005b      	lslcc	r3, r3, #1
 8084f06:	ea40 0001 	orr.w	r0, r0, r1
 8084f0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8084f0e:	2afd      	cmp	r2, #253	; 0xfd
 8084f10:	d81d      	bhi.n	8084f4e <__aeabi_fmul+0x92>
 8084f12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8084f16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8084f1a:	bf08      	it	eq
 8084f1c:	f020 0001 	biceq.w	r0, r0, #1
 8084f20:	4770      	bx	lr
 8084f22:	f090 0f00 	teq	r0, #0
 8084f26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8084f2a:	bf08      	it	eq
 8084f2c:	0249      	lsleq	r1, r1, #9
 8084f2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8084f32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8084f36:	3a7f      	subs	r2, #127	; 0x7f
 8084f38:	bfc2      	ittt	gt
 8084f3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8084f3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8084f42:	4770      	bxgt	lr
 8084f44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084f48:	f04f 0300 	mov.w	r3, #0
 8084f4c:	3a01      	subs	r2, #1
 8084f4e:	dc5d      	bgt.n	808500c <__aeabi_fmul+0x150>
 8084f50:	f112 0f19 	cmn.w	r2, #25
 8084f54:	bfdc      	itt	le
 8084f56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8084f5a:	4770      	bxle	lr
 8084f5c:	f1c2 0200 	rsb	r2, r2, #0
 8084f60:	0041      	lsls	r1, r0, #1
 8084f62:	fa21 f102 	lsr.w	r1, r1, r2
 8084f66:	f1c2 0220 	rsb	r2, r2, #32
 8084f6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8084f6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8084f72:	f140 0000 	adc.w	r0, r0, #0
 8084f76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8084f7a:	bf08      	it	eq
 8084f7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8084f80:	4770      	bx	lr
 8084f82:	f092 0f00 	teq	r2, #0
 8084f86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8084f8a:	bf02      	ittt	eq
 8084f8c:	0040      	lsleq	r0, r0, #1
 8084f8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8084f92:	3a01      	subeq	r2, #1
 8084f94:	d0f9      	beq.n	8084f8a <__aeabi_fmul+0xce>
 8084f96:	ea40 000c 	orr.w	r0, r0, ip
 8084f9a:	f093 0f00 	teq	r3, #0
 8084f9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8084fa2:	bf02      	ittt	eq
 8084fa4:	0049      	lsleq	r1, r1, #1
 8084fa6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8084faa:	3b01      	subeq	r3, #1
 8084fac:	d0f9      	beq.n	8084fa2 <__aeabi_fmul+0xe6>
 8084fae:	ea41 010c 	orr.w	r1, r1, ip
 8084fb2:	e78f      	b.n	8084ed4 <__aeabi_fmul+0x18>
 8084fb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8084fb8:	ea92 0f0c 	teq	r2, ip
 8084fbc:	bf18      	it	ne
 8084fbe:	ea93 0f0c 	teqne	r3, ip
 8084fc2:	d00a      	beq.n	8084fda <__aeabi_fmul+0x11e>
 8084fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8084fc8:	bf18      	it	ne
 8084fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8084fce:	d1d8      	bne.n	8084f82 <__aeabi_fmul+0xc6>
 8084fd0:	ea80 0001 	eor.w	r0, r0, r1
 8084fd4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8084fd8:	4770      	bx	lr
 8084fda:	f090 0f00 	teq	r0, #0
 8084fde:	bf17      	itett	ne
 8084fe0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8084fe4:	4608      	moveq	r0, r1
 8084fe6:	f091 0f00 	teqne	r1, #0
 8084fea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8084fee:	d014      	beq.n	808501a <__aeabi_fmul+0x15e>
 8084ff0:	ea92 0f0c 	teq	r2, ip
 8084ff4:	d101      	bne.n	8084ffa <__aeabi_fmul+0x13e>
 8084ff6:	0242      	lsls	r2, r0, #9
 8084ff8:	d10f      	bne.n	808501a <__aeabi_fmul+0x15e>
 8084ffa:	ea93 0f0c 	teq	r3, ip
 8084ffe:	d103      	bne.n	8085008 <__aeabi_fmul+0x14c>
 8085000:	024b      	lsls	r3, r1, #9
 8085002:	bf18      	it	ne
 8085004:	4608      	movne	r0, r1
 8085006:	d108      	bne.n	808501a <__aeabi_fmul+0x15e>
 8085008:	ea80 0001 	eor.w	r0, r0, r1
 808500c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8085010:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8085014:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8085018:	4770      	bx	lr
 808501a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808501e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8085022:	4770      	bx	lr

08085024 <__aeabi_fdiv>:
 8085024:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8085028:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808502c:	bf1e      	ittt	ne
 808502e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8085032:	ea92 0f0c 	teqne	r2, ip
 8085036:	ea93 0f0c 	teqne	r3, ip
 808503a:	d069      	beq.n	8085110 <__aeabi_fdiv+0xec>
 808503c:	eba2 0203 	sub.w	r2, r2, r3
 8085040:	ea80 0c01 	eor.w	ip, r0, r1
 8085044:	0249      	lsls	r1, r1, #9
 8085046:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808504a:	d037      	beq.n	80850bc <__aeabi_fdiv+0x98>
 808504c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8085050:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8085054:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8085058:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808505c:	428b      	cmp	r3, r1
 808505e:	bf38      	it	cc
 8085060:	005b      	lslcc	r3, r3, #1
 8085062:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8085066:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 808506a:	428b      	cmp	r3, r1
 808506c:	bf24      	itt	cs
 808506e:	1a5b      	subcs	r3, r3, r1
 8085070:	ea40 000c 	orrcs.w	r0, r0, ip
 8085074:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8085078:	bf24      	itt	cs
 808507a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808507e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8085082:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8085086:	bf24      	itt	cs
 8085088:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 808508c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8085090:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8085094:	bf24      	itt	cs
 8085096:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808509a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808509e:	011b      	lsls	r3, r3, #4
 80850a0:	bf18      	it	ne
 80850a2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80850a6:	d1e0      	bne.n	808506a <__aeabi_fdiv+0x46>
 80850a8:	2afd      	cmp	r2, #253	; 0xfd
 80850aa:	f63f af50 	bhi.w	8084f4e <__aeabi_fmul+0x92>
 80850ae:	428b      	cmp	r3, r1
 80850b0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80850b4:	bf08      	it	eq
 80850b6:	f020 0001 	biceq.w	r0, r0, #1
 80850ba:	4770      	bx	lr
 80850bc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80850c0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80850c4:	327f      	adds	r2, #127	; 0x7f
 80850c6:	bfc2      	ittt	gt
 80850c8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80850cc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80850d0:	4770      	bxgt	lr
 80850d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80850d6:	f04f 0300 	mov.w	r3, #0
 80850da:	3a01      	subs	r2, #1
 80850dc:	e737      	b.n	8084f4e <__aeabi_fmul+0x92>
 80850de:	f092 0f00 	teq	r2, #0
 80850e2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80850e6:	bf02      	ittt	eq
 80850e8:	0040      	lsleq	r0, r0, #1
 80850ea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80850ee:	3a01      	subeq	r2, #1
 80850f0:	d0f9      	beq.n	80850e6 <__aeabi_fdiv+0xc2>
 80850f2:	ea40 000c 	orr.w	r0, r0, ip
 80850f6:	f093 0f00 	teq	r3, #0
 80850fa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80850fe:	bf02      	ittt	eq
 8085100:	0049      	lsleq	r1, r1, #1
 8085102:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8085106:	3b01      	subeq	r3, #1
 8085108:	d0f9      	beq.n	80850fe <__aeabi_fdiv+0xda>
 808510a:	ea41 010c 	orr.w	r1, r1, ip
 808510e:	e795      	b.n	808503c <__aeabi_fdiv+0x18>
 8085110:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8085114:	ea92 0f0c 	teq	r2, ip
 8085118:	d108      	bne.n	808512c <__aeabi_fdiv+0x108>
 808511a:	0242      	lsls	r2, r0, #9
 808511c:	f47f af7d 	bne.w	808501a <__aeabi_fmul+0x15e>
 8085120:	ea93 0f0c 	teq	r3, ip
 8085124:	f47f af70 	bne.w	8085008 <__aeabi_fmul+0x14c>
 8085128:	4608      	mov	r0, r1
 808512a:	e776      	b.n	808501a <__aeabi_fmul+0x15e>
 808512c:	ea93 0f0c 	teq	r3, ip
 8085130:	d104      	bne.n	808513c <__aeabi_fdiv+0x118>
 8085132:	024b      	lsls	r3, r1, #9
 8085134:	f43f af4c 	beq.w	8084fd0 <__aeabi_fmul+0x114>
 8085138:	4608      	mov	r0, r1
 808513a:	e76e      	b.n	808501a <__aeabi_fmul+0x15e>
 808513c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8085140:	bf18      	it	ne
 8085142:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8085146:	d1ca      	bne.n	80850de <__aeabi_fdiv+0xba>
 8085148:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 808514c:	f47f af5c 	bne.w	8085008 <__aeabi_fmul+0x14c>
 8085150:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8085154:	f47f af3c 	bne.w	8084fd0 <__aeabi_fmul+0x114>
 8085158:	e75f      	b.n	808501a <__aeabi_fmul+0x15e>
 808515a:	bf00      	nop

0808515c <__gesf2>:
 808515c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8085160:	e006      	b.n	8085170 <__cmpsf2+0x4>
 8085162:	bf00      	nop

08085164 <__lesf2>:
 8085164:	f04f 0c01 	mov.w	ip, #1
 8085168:	e002      	b.n	8085170 <__cmpsf2+0x4>
 808516a:	bf00      	nop

0808516c <__cmpsf2>:
 808516c:	f04f 0c01 	mov.w	ip, #1
 8085170:	f84d cd04 	str.w	ip, [sp, #-4]!
 8085174:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8085178:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808517c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8085180:	bf18      	it	ne
 8085182:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8085186:	d011      	beq.n	80851ac <__cmpsf2+0x40>
 8085188:	b001      	add	sp, #4
 808518a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808518e:	bf18      	it	ne
 8085190:	ea90 0f01 	teqne	r0, r1
 8085194:	bf58      	it	pl
 8085196:	ebb2 0003 	subspl.w	r0, r2, r3
 808519a:	bf88      	it	hi
 808519c:	17c8      	asrhi	r0, r1, #31
 808519e:	bf38      	it	cc
 80851a0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80851a4:	bf18      	it	ne
 80851a6:	f040 0001 	orrne.w	r0, r0, #1
 80851aa:	4770      	bx	lr
 80851ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80851b0:	d102      	bne.n	80851b8 <__cmpsf2+0x4c>
 80851b2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80851b6:	d105      	bne.n	80851c4 <__cmpsf2+0x58>
 80851b8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80851bc:	d1e4      	bne.n	8085188 <__cmpsf2+0x1c>
 80851be:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80851c2:	d0e1      	beq.n	8085188 <__cmpsf2+0x1c>
 80851c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80851c8:	4770      	bx	lr
 80851ca:	bf00      	nop

080851cc <__aeabi_cfrcmple>:
 80851cc:	4684      	mov	ip, r0
 80851ce:	4608      	mov	r0, r1
 80851d0:	4661      	mov	r1, ip
 80851d2:	e7ff      	b.n	80851d4 <__aeabi_cfcmpeq>

080851d4 <__aeabi_cfcmpeq>:
 80851d4:	b50f      	push	{r0, r1, r2, r3, lr}
 80851d6:	f7ff ffc9 	bl	808516c <__cmpsf2>
 80851da:	2800      	cmp	r0, #0
 80851dc:	bf48      	it	mi
 80851de:	f110 0f00 	cmnmi.w	r0, #0
 80851e2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080851e4 <__aeabi_fcmpeq>:
 80851e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80851e8:	f7ff fff4 	bl	80851d4 <__aeabi_cfcmpeq>
 80851ec:	bf0c      	ite	eq
 80851ee:	2001      	moveq	r0, #1
 80851f0:	2000      	movne	r0, #0
 80851f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80851f6:	bf00      	nop

080851f8 <__aeabi_fcmplt>:
 80851f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80851fc:	f7ff ffea 	bl	80851d4 <__aeabi_cfcmpeq>
 8085200:	bf34      	ite	cc
 8085202:	2001      	movcc	r0, #1
 8085204:	2000      	movcs	r0, #0
 8085206:	f85d fb08 	ldr.w	pc, [sp], #8
 808520a:	bf00      	nop

0808520c <__aeabi_fcmple>:
 808520c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8085210:	f7ff ffe0 	bl	80851d4 <__aeabi_cfcmpeq>
 8085214:	bf94      	ite	ls
 8085216:	2001      	movls	r0, #1
 8085218:	2000      	movhi	r0, #0
 808521a:	f85d fb08 	ldr.w	pc, [sp], #8
 808521e:	bf00      	nop

08085220 <__aeabi_fcmpge>:
 8085220:	f84d ed08 	str.w	lr, [sp, #-8]!
 8085224:	f7ff ffd2 	bl	80851cc <__aeabi_cfrcmple>
 8085228:	bf94      	ite	ls
 808522a:	2001      	movls	r0, #1
 808522c:	2000      	movhi	r0, #0
 808522e:	f85d fb08 	ldr.w	pc, [sp], #8
 8085232:	bf00      	nop

08085234 <__aeabi_fcmpgt>:
 8085234:	f84d ed08 	str.w	lr, [sp, #-8]!
 8085238:	f7ff ffc8 	bl	80851cc <__aeabi_cfrcmple>
 808523c:	bf34      	ite	cc
 808523e:	2001      	movcc	r0, #1
 8085240:	2000      	movcs	r0, #0
 8085242:	f85d fb08 	ldr.w	pc, [sp], #8
 8085246:	bf00      	nop

08085248 <__aeabi_f2iz>:
 8085248:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808524c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8085250:	d30f      	bcc.n	8085272 <__aeabi_f2iz+0x2a>
 8085252:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8085256:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 808525a:	d90d      	bls.n	8085278 <__aeabi_f2iz+0x30>
 808525c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8085260:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8085264:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8085268:	fa23 f002 	lsr.w	r0, r3, r2
 808526c:	bf18      	it	ne
 808526e:	4240      	negne	r0, r0
 8085270:	4770      	bx	lr
 8085272:	f04f 0000 	mov.w	r0, #0
 8085276:	4770      	bx	lr
 8085278:	f112 0f61 	cmn.w	r2, #97	; 0x61
 808527c:	d101      	bne.n	8085282 <__aeabi_f2iz+0x3a>
 808527e:	0242      	lsls	r2, r0, #9
 8085280:	d105      	bne.n	808528e <__aeabi_f2iz+0x46>
 8085282:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8085286:	bf08      	it	eq
 8085288:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808528c:	4770      	bx	lr
 808528e:	f04f 0000 	mov.w	r0, #0
 8085292:	4770      	bx	lr

08085294 <__aeabi_f2lz>:
 8085294:	b510      	push	{r4, lr}
 8085296:	2100      	movs	r1, #0
 8085298:	4604      	mov	r4, r0
 808529a:	f7ff ffad 	bl	80851f8 <__aeabi_fcmplt>
 808529e:	b920      	cbnz	r0, 80852aa <__aeabi_f2lz+0x16>
 80852a0:	4620      	mov	r0, r4
 80852a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80852a6:	f000 b809 	b.w	80852bc <__aeabi_f2ulz>
 80852aa:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 80852ae:	f000 f805 	bl	80852bc <__aeabi_f2ulz>
 80852b2:	4240      	negs	r0, r0
 80852b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80852b8:	bd10      	pop	{r4, pc}
 80852ba:	bf00      	nop

080852bc <__aeabi_f2ulz>:
 80852bc:	b5d0      	push	{r4, r6, r7, lr}
 80852be:	f7ff fa15 	bl	80846ec <__aeabi_f2d>
 80852c2:	2200      	movs	r2, #0
 80852c4:	4b0b      	ldr	r3, [pc, #44]	; (80852f4 <__aeabi_f2ulz+0x38>)
 80852c6:	4606      	mov	r6, r0
 80852c8:	460f      	mov	r7, r1
 80852ca:	f7ff fa67 	bl	808479c <__aeabi_dmul>
 80852ce:	f7ff fc77 	bl	8084bc0 <__aeabi_d2uiz>
 80852d2:	4604      	mov	r4, r0
 80852d4:	f7ff f9e8 	bl	80846a8 <__aeabi_ui2d>
 80852d8:	2200      	movs	r2, #0
 80852da:	4b07      	ldr	r3, [pc, #28]	; (80852f8 <__aeabi_f2ulz+0x3c>)
 80852dc:	f7ff fa5e 	bl	808479c <__aeabi_dmul>
 80852e0:	4602      	mov	r2, r0
 80852e2:	460b      	mov	r3, r1
 80852e4:	4630      	mov	r0, r6
 80852e6:	4639      	mov	r1, r7
 80852e8:	f7ff f8a0 	bl	808442c <__aeabi_dsub>
 80852ec:	f7ff fc68 	bl	8084bc0 <__aeabi_d2uiz>
 80852f0:	4621      	mov	r1, r4
 80852f2:	bdd0      	pop	{r4, r6, r7, pc}
 80852f4:	3df00000 	.word	0x3df00000
 80852f8:	41f00000 	.word	0x41f00000

080852fc <asctime_r>:
 80852fc:	b510      	push	{r4, lr}
 80852fe:	460c      	mov	r4, r1
 8085300:	6941      	ldr	r1, [r0, #20]
 8085302:	b086      	sub	sp, #24
 8085304:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8085308:	6903      	ldr	r3, [r0, #16]
 808530a:	6982      	ldr	r2, [r0, #24]
 808530c:	9104      	str	r1, [sp, #16]
 808530e:	6801      	ldr	r1, [r0, #0]
 8085310:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8085314:	9103      	str	r1, [sp, #12]
 8085316:	6841      	ldr	r1, [r0, #4]
 8085318:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 808531c:	9102      	str	r1, [sp, #8]
 808531e:	6881      	ldr	r1, [r0, #8]
 8085320:	9101      	str	r1, [sp, #4]
 8085322:	68c1      	ldr	r1, [r0, #12]
 8085324:	4620      	mov	r0, r4
 8085326:	9100      	str	r1, [sp, #0]
 8085328:	4904      	ldr	r1, [pc, #16]	; (808533c <asctime_r+0x40>)
 808532a:	440b      	add	r3, r1
 808532c:	4904      	ldr	r1, [pc, #16]	; (8085340 <asctime_r+0x44>)
 808532e:	440a      	add	r2, r1
 8085330:	4904      	ldr	r1, [pc, #16]	; (8085344 <asctime_r+0x48>)
 8085332:	f7fc fb13 	bl	808195c <siprintf>
 8085336:	4620      	mov	r0, r4
 8085338:	b006      	add	sp, #24
 808533a:	bd10      	pop	{r4, pc}
 808533c:	08085d22 	.word	0x08085d22
 8085340:	08085d0d 	.word	0x08085d0d
 8085344:	08085ced 	.word	0x08085ced

08085348 <atexit>:
 8085348:	2300      	movs	r3, #0
 808534a:	4601      	mov	r1, r0
 808534c:	461a      	mov	r2, r3
 808534e:	4618      	mov	r0, r3
 8085350:	f000 b970 	b.w	8085634 <__register_exitproc>

08085354 <atoi>:
 8085354:	220a      	movs	r2, #10
 8085356:	2100      	movs	r1, #0
 8085358:	f000 b962 	b.w	8085620 <strtol>

0808535c <memcpy>:
 808535c:	440a      	add	r2, r1
 808535e:	4291      	cmp	r1, r2
 8085360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8085364:	d100      	bne.n	8085368 <memcpy+0xc>
 8085366:	4770      	bx	lr
 8085368:	b510      	push	{r4, lr}
 808536a:	f811 4b01 	ldrb.w	r4, [r1], #1
 808536e:	4291      	cmp	r1, r2
 8085370:	f803 4f01 	strb.w	r4, [r3, #1]!
 8085374:	d1f9      	bne.n	808536a <memcpy+0xe>
 8085376:	bd10      	pop	{r4, pc}

08085378 <memmove>:
 8085378:	4288      	cmp	r0, r1
 808537a:	b510      	push	{r4, lr}
 808537c:	eb01 0402 	add.w	r4, r1, r2
 8085380:	d902      	bls.n	8085388 <memmove+0x10>
 8085382:	4284      	cmp	r4, r0
 8085384:	4623      	mov	r3, r4
 8085386:	d807      	bhi.n	8085398 <memmove+0x20>
 8085388:	1e43      	subs	r3, r0, #1
 808538a:	42a1      	cmp	r1, r4
 808538c:	d008      	beq.n	80853a0 <memmove+0x28>
 808538e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8085392:	f803 2f01 	strb.w	r2, [r3, #1]!
 8085396:	e7f8      	b.n	808538a <memmove+0x12>
 8085398:	4601      	mov	r1, r0
 808539a:	4402      	add	r2, r0
 808539c:	428a      	cmp	r2, r1
 808539e:	d100      	bne.n	80853a2 <memmove+0x2a>
 80853a0:	bd10      	pop	{r4, pc}
 80853a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80853a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80853aa:	e7f7      	b.n	808539c <memmove+0x24>

080853ac <memset>:
 80853ac:	4603      	mov	r3, r0
 80853ae:	4402      	add	r2, r0
 80853b0:	4293      	cmp	r3, r2
 80853b2:	d100      	bne.n	80853b6 <memset+0xa>
 80853b4:	4770      	bx	lr
 80853b6:	f803 1b01 	strb.w	r1, [r3], #1
 80853ba:	e7f9      	b.n	80853b0 <memset+0x4>

080853bc <srand>:
 80853bc:	b538      	push	{r3, r4, r5, lr}
 80853be:	4b0d      	ldr	r3, [pc, #52]	; (80853f4 <srand+0x38>)
 80853c0:	4604      	mov	r4, r0
 80853c2:	681d      	ldr	r5, [r3, #0]
 80853c4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80853c6:	b97b      	cbnz	r3, 80853e8 <srand+0x2c>
 80853c8:	2018      	movs	r0, #24
 80853ca:	f7fc faaf 	bl	808192c <malloc>
 80853ce:	4a0a      	ldr	r2, [pc, #40]	; (80853f8 <srand+0x3c>)
 80853d0:	4b0a      	ldr	r3, [pc, #40]	; (80853fc <srand+0x40>)
 80853d2:	63a8      	str	r0, [r5, #56]	; 0x38
 80853d4:	e9c0 2300 	strd	r2, r3, [r0]
 80853d8:	4b09      	ldr	r3, [pc, #36]	; (8085400 <srand+0x44>)
 80853da:	2201      	movs	r2, #1
 80853dc:	6083      	str	r3, [r0, #8]
 80853de:	230b      	movs	r3, #11
 80853e0:	8183      	strh	r3, [r0, #12]
 80853e2:	2300      	movs	r3, #0
 80853e4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80853e8:	2200      	movs	r2, #0
 80853ea:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80853ec:	611c      	str	r4, [r3, #16]
 80853ee:	615a      	str	r2, [r3, #20]
 80853f0:	bd38      	pop	{r3, r4, r5, pc}
 80853f2:	bf00      	nop
 80853f4:	20000098 	.word	0x20000098
 80853f8:	abcd330e 	.word	0xabcd330e
 80853fc:	e66d1234 	.word	0xe66d1234
 8085400:	0005deec 	.word	0x0005deec

08085404 <strcat>:
 8085404:	4602      	mov	r2, r0
 8085406:	b510      	push	{r4, lr}
 8085408:	7814      	ldrb	r4, [r2, #0]
 808540a:	4613      	mov	r3, r2
 808540c:	3201      	adds	r2, #1
 808540e:	2c00      	cmp	r4, #0
 8085410:	d1fa      	bne.n	8085408 <strcat+0x4>
 8085412:	3b01      	subs	r3, #1
 8085414:	f811 2b01 	ldrb.w	r2, [r1], #1
 8085418:	f803 2f01 	strb.w	r2, [r3, #1]!
 808541c:	2a00      	cmp	r2, #0
 808541e:	d1f9      	bne.n	8085414 <strcat+0x10>
 8085420:	bd10      	pop	{r4, pc}

08085422 <strchr>:
 8085422:	4603      	mov	r3, r0
 8085424:	b2c9      	uxtb	r1, r1
 8085426:	4618      	mov	r0, r3
 8085428:	f813 2b01 	ldrb.w	r2, [r3], #1
 808542c:	b112      	cbz	r2, 8085434 <strchr+0x12>
 808542e:	428a      	cmp	r2, r1
 8085430:	d1f9      	bne.n	8085426 <strchr+0x4>
 8085432:	4770      	bx	lr
 8085434:	2900      	cmp	r1, #0
 8085436:	bf18      	it	ne
 8085438:	2000      	movne	r0, #0
 808543a:	4770      	bx	lr

0808543c <strchrnul>:
 808543c:	b510      	push	{r4, lr}
 808543e:	4604      	mov	r4, r0
 8085440:	f7ff ffef 	bl	8085422 <strchr>
 8085444:	b918      	cbnz	r0, 808544e <strchrnul+0x12>
 8085446:	4620      	mov	r0, r4
 8085448:	f000 f82f 	bl	80854aa <strlen>
 808544c:	4420      	add	r0, r4
 808544e:	bd10      	pop	{r4, pc}

08085450 <strcmp>:
 8085450:	f810 2b01 	ldrb.w	r2, [r0], #1
 8085454:	f811 3b01 	ldrb.w	r3, [r1], #1
 8085458:	2a01      	cmp	r2, #1
 808545a:	bf28      	it	cs
 808545c:	429a      	cmpcs	r2, r3
 808545e:	d0f7      	beq.n	8085450 <strcmp>
 8085460:	1ad0      	subs	r0, r2, r3
 8085462:	4770      	bx	lr

08085464 <strcpy>:
 8085464:	4603      	mov	r3, r0
 8085466:	f811 2b01 	ldrb.w	r2, [r1], #1
 808546a:	f803 2b01 	strb.w	r2, [r3], #1
 808546e:	2a00      	cmp	r2, #0
 8085470:	d1f9      	bne.n	8085466 <strcpy+0x2>
 8085472:	4770      	bx	lr

08085474 <strdup>:
 8085474:	4b02      	ldr	r3, [pc, #8]	; (8085480 <strdup+0xc>)
 8085476:	4601      	mov	r1, r0
 8085478:	6818      	ldr	r0, [r3, #0]
 808547a:	f000 b803 	b.w	8085484 <_strdup_r>
 808547e:	bf00      	nop
 8085480:	20000098 	.word	0x20000098

08085484 <_strdup_r>:
 8085484:	b570      	push	{r4, r5, r6, lr}
 8085486:	4604      	mov	r4, r0
 8085488:	4608      	mov	r0, r1
 808548a:	460d      	mov	r5, r1
 808548c:	f000 f80d 	bl	80854aa <strlen>
 8085490:	1c46      	adds	r6, r0, #1
 8085492:	4631      	mov	r1, r6
 8085494:	4620      	mov	r0, r4
 8085496:	f7fc fa81 	bl	808199c <_malloc_r>
 808549a:	4604      	mov	r4, r0
 808549c:	b118      	cbz	r0, 80854a6 <_strdup_r+0x22>
 808549e:	4632      	mov	r2, r6
 80854a0:	4629      	mov	r1, r5
 80854a2:	f7ff ff5b 	bl	808535c <memcpy>
 80854a6:	4620      	mov	r0, r4
 80854a8:	bd70      	pop	{r4, r5, r6, pc}

080854aa <strlen>:
 80854aa:	4603      	mov	r3, r0
 80854ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80854b0:	2a00      	cmp	r2, #0
 80854b2:	d1fb      	bne.n	80854ac <strlen+0x2>
 80854b4:	1a18      	subs	r0, r3, r0
 80854b6:	3801      	subs	r0, #1
 80854b8:	4770      	bx	lr

080854ba <strncmp>:
 80854ba:	b510      	push	{r4, lr}
 80854bc:	b16a      	cbz	r2, 80854da <strncmp+0x20>
 80854be:	3901      	subs	r1, #1
 80854c0:	1884      	adds	r4, r0, r2
 80854c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80854c6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80854ca:	4293      	cmp	r3, r2
 80854cc:	d103      	bne.n	80854d6 <strncmp+0x1c>
 80854ce:	42a0      	cmp	r0, r4
 80854d0:	d001      	beq.n	80854d6 <strncmp+0x1c>
 80854d2:	2b00      	cmp	r3, #0
 80854d4:	d1f5      	bne.n	80854c2 <strncmp+0x8>
 80854d6:	1a98      	subs	r0, r3, r2
 80854d8:	bd10      	pop	{r4, pc}
 80854da:	4610      	mov	r0, r2
 80854dc:	e7fc      	b.n	80854d8 <strncmp+0x1e>

080854de <strncpy>:
 80854de:	4603      	mov	r3, r0
 80854e0:	b510      	push	{r4, lr}
 80854e2:	3901      	subs	r1, #1
 80854e4:	b132      	cbz	r2, 80854f4 <strncpy+0x16>
 80854e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80854ea:	3a01      	subs	r2, #1
 80854ec:	f803 4b01 	strb.w	r4, [r3], #1
 80854f0:	2c00      	cmp	r4, #0
 80854f2:	d1f7      	bne.n	80854e4 <strncpy+0x6>
 80854f4:	2100      	movs	r1, #0
 80854f6:	441a      	add	r2, r3
 80854f8:	4293      	cmp	r3, r2
 80854fa:	d100      	bne.n	80854fe <strncpy+0x20>
 80854fc:	bd10      	pop	{r4, pc}
 80854fe:	f803 1b01 	strb.w	r1, [r3], #1
 8085502:	e7f9      	b.n	80854f8 <strncpy+0x1a>

08085504 <strrchr>:
 8085504:	b538      	push	{r3, r4, r5, lr}
 8085506:	4603      	mov	r3, r0
 8085508:	460c      	mov	r4, r1
 808550a:	b969      	cbnz	r1, 8085528 <strrchr+0x24>
 808550c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8085510:	f7ff bf87 	b.w	8085422 <strchr>
 8085514:	4605      	mov	r5, r0
 8085516:	1c43      	adds	r3, r0, #1
 8085518:	4621      	mov	r1, r4
 808551a:	4618      	mov	r0, r3
 808551c:	f7ff ff81 	bl	8085422 <strchr>
 8085520:	2800      	cmp	r0, #0
 8085522:	d1f7      	bne.n	8085514 <strrchr+0x10>
 8085524:	4628      	mov	r0, r5
 8085526:	bd38      	pop	{r3, r4, r5, pc}
 8085528:	2500      	movs	r5, #0
 808552a:	e7f5      	b.n	8085518 <strrchr+0x14>

0808552c <_strtol_l.isra.0>:
 808552c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8085530:	468c      	mov	ip, r1
 8085532:	4686      	mov	lr, r0
 8085534:	4e39      	ldr	r6, [pc, #228]	; (808561c <_strtol_l.isra.0+0xf0>)
 8085536:	4660      	mov	r0, ip
 8085538:	f81c 4b01 	ldrb.w	r4, [ip], #1
 808553c:	5da5      	ldrb	r5, [r4, r6]
 808553e:	f015 0508 	ands.w	r5, r5, #8
 8085542:	d1f8      	bne.n	8085536 <_strtol_l.isra.0+0xa>
 8085544:	2c2d      	cmp	r4, #45	; 0x2d
 8085546:	d133      	bne.n	80855b0 <_strtol_l.isra.0+0x84>
 8085548:	f04f 0801 	mov.w	r8, #1
 808554c:	f89c 4000 	ldrb.w	r4, [ip]
 8085550:	f100 0c02 	add.w	ip, r0, #2
 8085554:	2b00      	cmp	r3, #0
 8085556:	d05c      	beq.n	8085612 <_strtol_l.isra.0+0xe6>
 8085558:	2b10      	cmp	r3, #16
 808555a:	d10c      	bne.n	8085576 <_strtol_l.isra.0+0x4a>
 808555c:	2c30      	cmp	r4, #48	; 0x30
 808555e:	d10a      	bne.n	8085576 <_strtol_l.isra.0+0x4a>
 8085560:	f89c 0000 	ldrb.w	r0, [ip]
 8085564:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8085568:	2858      	cmp	r0, #88	; 0x58
 808556a:	d14d      	bne.n	8085608 <_strtol_l.isra.0+0xdc>
 808556c:	2310      	movs	r3, #16
 808556e:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8085572:	f10c 0c02 	add.w	ip, ip, #2
 8085576:	2600      	movs	r6, #0
 8085578:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 808557c:	3f01      	subs	r7, #1
 808557e:	fbb7 f9f3 	udiv	r9, r7, r3
 8085582:	4630      	mov	r0, r6
 8085584:	fb03 7a19 	mls	sl, r3, r9, r7
 8085588:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 808558c:	2d09      	cmp	r5, #9
 808558e:	d818      	bhi.n	80855c2 <_strtol_l.isra.0+0x96>
 8085590:	462c      	mov	r4, r5
 8085592:	42a3      	cmp	r3, r4
 8085594:	dd24      	ble.n	80855e0 <_strtol_l.isra.0+0xb4>
 8085596:	1c75      	adds	r5, r6, #1
 8085598:	d007      	beq.n	80855aa <_strtol_l.isra.0+0x7e>
 808559a:	4581      	cmp	r9, r0
 808559c:	d31d      	bcc.n	80855da <_strtol_l.isra.0+0xae>
 808559e:	d101      	bne.n	80855a4 <_strtol_l.isra.0+0x78>
 80855a0:	45a2      	cmp	sl, r4
 80855a2:	db1a      	blt.n	80855da <_strtol_l.isra.0+0xae>
 80855a4:	2601      	movs	r6, #1
 80855a6:	fb00 4003 	mla	r0, r0, r3, r4
 80855aa:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80855ae:	e7eb      	b.n	8085588 <_strtol_l.isra.0+0x5c>
 80855b0:	2c2b      	cmp	r4, #43	; 0x2b
 80855b2:	bf08      	it	eq
 80855b4:	f89c 4000 	ldrbeq.w	r4, [ip]
 80855b8:	46a8      	mov	r8, r5
 80855ba:	bf08      	it	eq
 80855bc:	f100 0c02 	addeq.w	ip, r0, #2
 80855c0:	e7c8      	b.n	8085554 <_strtol_l.isra.0+0x28>
 80855c2:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80855c6:	2d19      	cmp	r5, #25
 80855c8:	d801      	bhi.n	80855ce <_strtol_l.isra.0+0xa2>
 80855ca:	3c37      	subs	r4, #55	; 0x37
 80855cc:	e7e1      	b.n	8085592 <_strtol_l.isra.0+0x66>
 80855ce:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80855d2:	2d19      	cmp	r5, #25
 80855d4:	d804      	bhi.n	80855e0 <_strtol_l.isra.0+0xb4>
 80855d6:	3c57      	subs	r4, #87	; 0x57
 80855d8:	e7db      	b.n	8085592 <_strtol_l.isra.0+0x66>
 80855da:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80855de:	e7e4      	b.n	80855aa <_strtol_l.isra.0+0x7e>
 80855e0:	1c73      	adds	r3, r6, #1
 80855e2:	d106      	bne.n	80855f2 <_strtol_l.isra.0+0xc6>
 80855e4:	2322      	movs	r3, #34	; 0x22
 80855e6:	4638      	mov	r0, r7
 80855e8:	f8ce 3000 	str.w	r3, [lr]
 80855ec:	b942      	cbnz	r2, 8085600 <_strtol_l.isra.0+0xd4>
 80855ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80855f2:	f1b8 0f00 	cmp.w	r8, #0
 80855f6:	d000      	beq.n	80855fa <_strtol_l.isra.0+0xce>
 80855f8:	4240      	negs	r0, r0
 80855fa:	2a00      	cmp	r2, #0
 80855fc:	d0f7      	beq.n	80855ee <_strtol_l.isra.0+0xc2>
 80855fe:	b10e      	cbz	r6, 8085604 <_strtol_l.isra.0+0xd8>
 8085600:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8085604:	6011      	str	r1, [r2, #0]
 8085606:	e7f2      	b.n	80855ee <_strtol_l.isra.0+0xc2>
 8085608:	2430      	movs	r4, #48	; 0x30
 808560a:	2b00      	cmp	r3, #0
 808560c:	d1b3      	bne.n	8085576 <_strtol_l.isra.0+0x4a>
 808560e:	2308      	movs	r3, #8
 8085610:	e7b1      	b.n	8085576 <_strtol_l.isra.0+0x4a>
 8085612:	2c30      	cmp	r4, #48	; 0x30
 8085614:	d0a4      	beq.n	8085560 <_strtol_l.isra.0+0x34>
 8085616:	230a      	movs	r3, #10
 8085618:	e7ad      	b.n	8085576 <_strtol_l.isra.0+0x4a>
 808561a:	bf00      	nop
 808561c:	08085d47 	.word	0x08085d47

08085620 <strtol>:
 8085620:	4613      	mov	r3, r2
 8085622:	460a      	mov	r2, r1
 8085624:	4601      	mov	r1, r0
 8085626:	4802      	ldr	r0, [pc, #8]	; (8085630 <strtol+0x10>)
 8085628:	6800      	ldr	r0, [r0, #0]
 808562a:	f7ff bf7f 	b.w	808552c <_strtol_l.isra.0>
 808562e:	bf00      	nop
 8085630:	20000098 	.word	0x20000098

08085634 <__register_exitproc>:
 8085634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8085638:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80856f8 <__register_exitproc+0xc4>
 808563c:	4606      	mov	r6, r0
 808563e:	f8d8 0000 	ldr.w	r0, [r8]
 8085642:	461f      	mov	r7, r3
 8085644:	460d      	mov	r5, r1
 8085646:	4691      	mov	r9, r2
 8085648:	f000 f858 	bl	80856fc <__retarget_lock_acquire_recursive>
 808564c:	4b26      	ldr	r3, [pc, #152]	; (80856e8 <__register_exitproc+0xb4>)
 808564e:	681c      	ldr	r4, [r3, #0]
 8085650:	b934      	cbnz	r4, 8085660 <__register_exitproc+0x2c>
 8085652:	4c26      	ldr	r4, [pc, #152]	; (80856ec <__register_exitproc+0xb8>)
 8085654:	601c      	str	r4, [r3, #0]
 8085656:	4b26      	ldr	r3, [pc, #152]	; (80856f0 <__register_exitproc+0xbc>)
 8085658:	b113      	cbz	r3, 8085660 <__register_exitproc+0x2c>
 808565a:	681b      	ldr	r3, [r3, #0]
 808565c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8085660:	6863      	ldr	r3, [r4, #4]
 8085662:	2b1f      	cmp	r3, #31
 8085664:	dd07      	ble.n	8085676 <__register_exitproc+0x42>
 8085666:	f8d8 0000 	ldr.w	r0, [r8]
 808566a:	f000 f849 	bl	8085700 <__retarget_lock_release_recursive>
 808566e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8085672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8085676:	b35e      	cbz	r6, 80856d0 <__register_exitproc+0x9c>
 8085678:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 808567c:	b988      	cbnz	r0, 80856a2 <__register_exitproc+0x6e>
 808567e:	4b1d      	ldr	r3, [pc, #116]	; (80856f4 <__register_exitproc+0xc0>)
 8085680:	b923      	cbnz	r3, 808568c <__register_exitproc+0x58>
 8085682:	f8d8 0000 	ldr.w	r0, [r8]
 8085686:	f000 f83a 	bl	80856fe <__retarget_lock_release>
 808568a:	e7f0      	b.n	808566e <__register_exitproc+0x3a>
 808568c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8085690:	f7fc f94c 	bl	808192c <malloc>
 8085694:	2800      	cmp	r0, #0
 8085696:	d0f4      	beq.n	8085682 <__register_exitproc+0x4e>
 8085698:	2300      	movs	r3, #0
 808569a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 808569e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80856a2:	2201      	movs	r2, #1
 80856a4:	6863      	ldr	r3, [r4, #4]
 80856a6:	2e02      	cmp	r6, #2
 80856a8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80856ac:	fa02 f203 	lsl.w	r2, r2, r3
 80856b0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80856b4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80856b8:	ea43 0302 	orr.w	r3, r3, r2
 80856bc:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80856c0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80856c4:	bf02      	ittt	eq
 80856c6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80856ca:	431a      	orreq	r2, r3
 80856cc:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80856d0:	6863      	ldr	r3, [r4, #4]
 80856d2:	f8d8 0000 	ldr.w	r0, [r8]
 80856d6:	1c5a      	adds	r2, r3, #1
 80856d8:	3302      	adds	r3, #2
 80856da:	6062      	str	r2, [r4, #4]
 80856dc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80856e0:	f000 f80e 	bl	8085700 <__retarget_lock_release_recursive>
 80856e4:	2000      	movs	r0, #0
 80856e6:	e7c4      	b.n	8085672 <__register_exitproc+0x3e>
 80856e8:	2000079c 	.word	0x2000079c
 80856ec:	20000710 	.word	0x20000710
 80856f0:	00000000 	.word	0x00000000
 80856f4:	0808192d 	.word	0x0808192d
 80856f8:	200000fc 	.word	0x200000fc

080856fc <__retarget_lock_acquire_recursive>:
 80856fc:	4770      	bx	lr

080856fe <__retarget_lock_release>:
 80856fe:	4770      	bx	lr

08085700 <__retarget_lock_release_recursive>:
 8085700:	4770      	bx	lr

08085702 <link_code_end>:
	...

08085704 <dynalib_user>:
 8085704:	002d 0808 006d 0808 0095 0808 0099 0808     -...m...........
 8085714:	0000 0000 6e55 6e6b 776f 006e 6f4e 656e     ....Unknown.None
 8085724:	5700 4669 0069 5347 004d 4d55 5354 4300     .WiFi.GSM.UMTS.C
 8085734:	4d44 0041 544c 0045 4549 4545 3038 3132     DMA.LTE.IEEE8021
 8085744:	3435 4c00 4554 435f 5441 4d5f 0031 544c     54.LTE_CAT_M1.LT
 8085754:	5f45 4143 5f54 424e 0031 6f50 726f 4c00     E_CAT_NB1.Poor.L
 8085764:	776f 4d00 6465 7569 006d 6556 7972 4720     ow.Medium.Very G
 8085774:	6f6f 0064 7247 6165 0074 2e30 3337 5200     ood.Great.0.73.R
 8085784:	7365 7465 6974 676e 6920 206e 7270 676f     esetting in prog
 8085794:	6572 7373 3200 2535 6420 6e6f 0065 3035     ress.25% done.50
 80857a4:	2025 6f64 656e 3700 2535 6420 6e6f 0065     % done.75% done.
 80857b4:	6f44 656e 4200 6f6f 7473 7265 4e20 206f     Done.Booster No 
 80857c4:	6c46 776f 3120 2d20 0020 6f42 736f 6574     Flow 1 - .Booste
 80857d4:	2072 6f4e 4620 6f6c 2077 2032 202d 5300     r No Flow 2 - .S
 80857e4:	6f74 6172 6567 5420 6e61 206b 6f4c 2077     torage Tank Low 
 80857f4:	202d 5000 6d75 2070 2031 6143 6c6c 6465     - .Pump 1 Called
 8085804:	2d20 0020 7550 706d 3220 4320 6c61 656c      - .Pump 2 Calle
 8085814:	2064 202d 4c00 736f 2074 6f50 6577 0072     d - .Lost Power.
 8085824:	6c41 7265 7374 7b00 6122 656c 7472 6156     Alerts.{"alertVa
 8085834:	756c 2265 253a 2c69 2220 7570 706d 694d     lue":%i, "pumpMi
 8085844:	736e 3a22 6925 202c 6222 7461 6574 7972     ns":%i, "battery
 8085854:	3a22 6925 202c 7422 6d65 2270 253a 2c69     ":%i, "temp":%i,
 8085864:	2220 6572 6573 7374 3a22 6925 007d 6f4d      "resets":%i}.Mo
 8085874:	696e 6f74 6972 676e 485f 756f 6c72 0079     nitoring_Hourly.
 8085884:	6f4e 4420 7461 0061 6255 6469 746f 2073     No Data.Ubidots 
 8085894:	6f48 6b6f 5200 7365 6f70 736e 2065 6552     Hook.Response Re
 80858a4:	6563 7669 6465 5300 7465 5620 7265 6f62     ceived.Set Verbo
 80858b4:	6573 4d20 646f 0065 0030 6c43 6165 6572     se Mode.0.Cleare
 80858c4:	2064 6556 6272 736f 2065 6f4d 6564 5400     d Verbose Mode.T
 80858d4:	7275 656e 2064 6e6f 5020 6d75 2070 6143     urned on Pump Ca
 80858e4:	6c6c 6465 5000 6d75 2070 6163 6c6c 6465     lled.Pump called
 80858f4:	6120 656c 7472 2073 203d 6925 4300 656c      alerts = %i.Cle
 8085904:	7261 6465 5020 6d75 2070 6143 6c6c 6465     ared Pump Called
 8085914:	5000 6d75 2070 6163 636e 6c65 656c 2064     .Pump cancelled 
 8085924:	6c61 7265 7374 3d20 2520 0069 6954 656d     alerts = %i.Time
 8085934:	7a20 6e6f 2065 666f 7366 7465 2520 0069      zone offset %i.
 8085944:	6954 656d 4600 6f72 206d 7325 7420 206f     Time.From %s to 
 8085954:	7325 5300 6174 6574 5420 6172 736e 7469     %s.State Transit
 8085964:	6f69 006e 6c41 7265 5674 6c61 6575 3d20     ion.AlertValue =
 8085974:	2520 0069 6157 7469 6e69 2067 6f66 2072      %i.Waiting for 
 8085984:	6552 7073 6e6f 6573 4900 6c64 0065 6552     Response.Idle.Re
 8085994:	7073 6e6f 6573 5420 6d69 6f65 7475 4520     sponse Timeout E
 80859a4:	7272 726f 4500 5252 524f 535f 4154 4554     rror.ERROR_STATE
 80859b4:	2d20 5220 7365 7465 6974 676e 4100 7474      - Resetting.Att
 80859c4:	6d65 7470 6e69 2067 6f74 7220 6365 6e6f     empting to recon
 80859d4:	656e 7463 7420 206f 6150 7472 6369 656c     nect to Particle
 80859e4:	5300 6769 616e 006c 6552 6573 4374 756f     .Signal.ResetCou
 80859f4:	746e 5400 6d65 6570 6172 7574 6572 5200     nt.Temperature.R
 8085a04:	6c65 6165 6573 7300 6174 6574 664f 6843     elease.stateOfCh
 8085a14:	0067 7570 706d 694d 756e 6574 0073 6552     g.pumpMinutes.Re
 8085a24:	6573 2d74 5246 4d41 5200 7365 7465 432d     set-FRAM.Reset-C
 8085a34:	756f 746e 0073 6148 6472 522d 7365 7465     ounts.Hard-Reset
 8085a44:	5300 6e65 2d64 6f4e 0077 6556 6272 736f     .Send-Now.Verbos
 8085a54:	2d65 6f4d 6564 5300 7465 542d 6d69 7a65     e-Mode.Set-Timez
 8085a64:	6e6f 0065 6553 5074 6d75 5370 6174 6574     one.SetPumpState
 8085a74:	0000 0000                                   ....

08085a78 <_ZTVN5spark10LogHandlerE>:
	...
 8085a88:	00b5 0808 0213 0808                         ........

08085a90 <_ZTVN5spark16SerialLogHandlerE>:
	...
 8085a98:	0295 0808 02c9 0808 344d 0808 0215 0808     ........M4......

08085aa8 <_ZTVN5spark13CellularClassE>:
	...
 8085ab0:	1a6f 0808 1a65 0808 1a5b 0808 02e9 0808     o...e...[.......
 8085ac0:	1a4f 0808 02dd 0808 37a9 0808 37b1 0808     O........7...7..
 8085ad0:	1a43 0808 1a3b 0808 1a31 0808 1a27 0808     C...;...1...'...
 8085ae0:	19eb 0808                                   ....

08085ae4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8085aec:	1aa9 0808 1aaf 0808 1aff 0808 1abd 0808     ................
 8085afc:	1aab 0808                                   ....

08085b00 <_ZTV7TwoWire>:
	...
 8085b08:	21ad 0808 21f7 0808 21cf 0808 21af 0808     .!...!...!...!..
 8085b18:	21d7 0808 21df 0808 21e7 0808 21ef 0808     .!...!...!...!..

08085b28 <_ZTV9IPAddress>:
	...
 8085b30:	2365 0808 2355 0808 2357 0808 6425 2500     e#..U#..W#..%d.%
 8085b40:	0075 2575 3430 0078 6162 6475 5300 7265     u.u%04x.baud.Ser
 8085b50:	6169 006c 5355 5342 7265 6169 316c 4a00     ial.USBSerial1.J
 8085b60:	4f53 534e 7274 6165 4c6d 676f 6148 646e     SONStreamLogHand
 8085b70:	656c 0072 7061 0070 3025 3031 2075 5d00     ler.app.%010u .]
 8085b80:	0020 202c 2800 3a29 0020 5b20 6300 646f      ., .(): . [.cod
 8085b90:	2065 203d 6400 7465 6961 736c 3d20 0020     e = .details = .
 8085ba0:	0a0d 6300 6600 6c00 006e 6e66 6300 646f     ...c.f.ln.fn.cod
 8085bb0:	0065 6564 6174 6c69 0000 0000               e.detail....

08085bbc <_ZTVN5spark16JSONStreamWriterE>:
	...
 8085bc4:	27e1 0808 2807 0808 27c5 0808 2423 0808     .'...(...'..#$..

08085bd4 <_ZTVN5spark16StreamLogHandlerE>:
	...
 8085bdc:	2c6d 0808 2c85 0808 344d 0808 0215 0808     m,...,..M4......

08085bec <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 8085bf4:	2c99 0808 2cad 0808 35f5 0808 27cd 0808     .,...,...5...'..

08085c04 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 8085c0c:	27df 0808 2815 0808 3389 0808 27cf 0808     .'...(...3...'..

08085c1c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 8085c24:	27dd 0808 2823 0808 2b95 0808 2841 0808     .'..#(...+..A(..

08085c34 <_ZTVN5spark12NetworkClassE>:
	...
 8085c3c:	3769 0808 3773 0808 377d 0808 3787 0808     i7..s7..}7...7..
 8085c4c:	3791 0808 379d 0808 37a9 0808 37b1 0808     .7...7...7...7..
 8085c5c:	37b9 0808 37c5 0808 37cd 0808 37d7 0808     .7...7...7...7..
 8085c6c:	37e1 0808 5925 252d 2d6d 6425 2554 3a48     .7..%Y-%m-%dT%H:
 8085c7c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

08085c8c <_ZTV11USARTSerial>:
	...
 8085c94:	3e19 0808 3e83 0808 3e5f 0808 385b 0808     .>...>.._>..[8..
 8085ca4:	3e2f 0808 3e4b 0808 3e3d 0808 3e59 0808     />..K>..=>..Y>..
 8085cb4:	3e1b 0808 3e21 0808                         .>..!>..

08085cbc <_ZTV9USBSerial>:
	...
 8085cc4:	3f1f 0808 3f85 0808 3f5d 0808 385b 0808     .?...?..]?..[8..
 8085cd4:	3f4f 0808 3f21 0808 3f31 0808 3f7f 0808     O?..!?..1?...?..
 8085ce4:	3f41 0808 3f19 0808                         A?...?..

08085cec <_ZSt7nothrow>:
 8085cec:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
 8085cfc:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

08085d0d <day_name.4782>:
 8085d0d:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 8085d1d:	6972 6153                                    riSat

08085d22 <mon_name.4783>:
 8085d22:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 8085d32:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 8085d42:	4476 6365                                   vDec

08085d46 <_ctype_>:
 8085d46:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8085d56:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8085d66:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8085d76:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8085d86:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8085d96:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8085da6:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8085db6:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8085dc6:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08085e47 <link_const_variable_data_end>:
	...

08085e48 <link_constructors_location>:
 8085e48:	08081285 	.word	0x08081285
 8085e4c:	08081a79 	.word	0x08081a79
 8085e50:	0808343d 	.word	0x0808343d
 8085e54:	08083829 	.word	0x08083829
 8085e58:	08083975 	.word	0x08083975
 8085e5c:	08083c21 	.word	0x08083c21
 8085e60:	08083e05 	.word	0x08083e05
 8085e64:	080843f5 	.word	0x080843f5

08085e68 <link_constructors_end>:
	...
