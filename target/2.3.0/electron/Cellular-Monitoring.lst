
/Users/chipmc/Documents/Maker/Particle/Projects/Cellular-Monitoring/target/2.3.0/electron/Cellular-Monitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004a90  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000018  40024000  08084ab0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000088  20000000  08084ac8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000064c  20000088  20000088  00040088  2**3
                  ALLOC
  6 .module_info_suffix 00000028  08084b50  08084b50  00034b50  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  08084b78  08084b78  00034b78  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00140af7  00000000  00000000  00034b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001703a  00000000  00000000  00175673  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002728  00000000  00000000  0018c6ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00006308  00000000  00000000  0018edd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00029e94  00000000  00000000  001950dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00034544  00000000  00000000  001bef71  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000b7166  00000000  00000000  001f34b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00006938  00000000  00000000  002aa61c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0001f6b9  00000000  00000000  002b0f54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <localtime_r>:
#endif // !(defined(DYNALIB_IMPORT) && (defined(PARTICLE_COMPILE_LTO) || defined(PARTICLE_COMPILE_LTO_FAT)))
DYNALIB_FN(18, services2, mktime32, time32_t(struct tm*))
DYNALIB_FN(19, services2, __ssvfscanf_r, int(struct _reent*, FILE*, const char*, va_list))
DYNALIB_FN(20, services2, _printf_i, int(struct _reent*, struct _prt_data_t*, FILE*, int (*pfunc)(struct _reent *, FILE *, const char *, size_t), va_list*))
DYNALIB_FN(21, services2, localtime32_r, struct tm*(const time32_t*, struct tm*))
DYNALIB_FN(22, services2, localtime_r, struct tm*(const time_t*, struct tm*))
 8080020:	b508      	push	{r3, lr}
 8080022:	4b02      	ldr	r3, [pc, #8]	; (808002c <localtime_r+0xc>)
 8080024:	681b      	ldr	r3, [r3, #0]
 8080026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080028:	9301      	str	r3, [sp, #4]
 808002a:	bd08      	pop	{r3, pc}
 808002c:	0806002c 	.word	0x0806002c

08080030 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080030:	4809      	ldr	r0, [pc, #36]	; (8080058 <module_user_pre_init+0x28>)
 8080032:	490a      	ldr	r1, [pc, #40]	; (808005c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 8080034:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080036:	4288      	cmp	r0, r1
 8080038:	d005      	beq.n	8080046 <module_user_pre_init+0x16>
 808003a:	4a09      	ldr	r2, [pc, #36]	; (8080060 <module_user_pre_init+0x30>)
 808003c:	4282      	cmp	r2, r0
 808003e:	d002      	beq.n	8080046 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080040:	1a12      	subs	r2, r2, r0
 8080042:	f004 f8b6 	bl	80841b2 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080046:	4807      	ldr	r0, [pc, #28]	; (8080064 <module_user_pre_init+0x34>)
 8080048:	4a07      	ldr	r2, [pc, #28]	; (8080068 <module_user_pre_init+0x38>)
 808004a:	2100      	movs	r1, #0
 808004c:	1a12      	subs	r2, r2, r0
 808004e:	f004 f8be 	bl	80841ce <memset>
    return &link_heap_start;
}
 8080052:	4806      	ldr	r0, [pc, #24]	; (808006c <module_user_pre_init+0x3c>)
 8080054:	bd08      	pop	{r3, pc}
 8080056:	bf00      	nop
 8080058:	20000000 	.word	0x20000000
 808005c:	08084ac8 	.word	0x08084ac8
 8080060:	20000088 	.word	0x20000088
 8080064:	20000088 	.word	0x20000088
 8080068:	200006d1 	.word	0x200006d1
 808006c:	200006d1 	.word	0x200006d1

08080070 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080070:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080072:	f002 ff91 	bl	8082f98 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080076:	2500      	movs	r5, #0
 8080078:	4e05      	ldr	r6, [pc, #20]	; (8080090 <module_user_init+0x20>)
 808007a:	4c06      	ldr	r4, [pc, #24]	; (8080094 <module_user_init+0x24>)
 808007c:	1ba4      	subs	r4, r4, r6
 808007e:	08a4      	lsrs	r4, r4, #2
 8080080:	42a5      	cmp	r5, r4
 8080082:	d100      	bne.n	8080086 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080084:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 8080086:	f856 3b04 	ldr.w	r3, [r6], #4
 808008a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808008c:	3501      	adds	r5, #1
 808008e:	e7f7      	b.n	8080080 <module_user_init+0x10>
 8080090:	08084a90 	.word	0x08084a90
 8080094:	08084ab0 	.word	0x08084ab0

08080098 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080098:	f000 bd42 	b.w	8080b20 <setup>

0808009c <module_user_loop>:
}

void module_user_loop() {
 808009c:	b508      	push	{r3, lr}
    loop();
 808009e:	f000 ff41 	bl	8080f24 <loop>
    _post_loop();
}
 80800a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80800a6:	f002 bf2f 	b.w	8082f08 <_post_loop>

080800aa <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80800aa:	f001 bc61 	b.w	8081970 <malloc>

080800ae <_Znaj>:
 80800ae:	f001 bc5f 	b.w	8081970 <malloc>

080800b2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80800b2:	f001 bc65 	b.w	8081980 <free>

080800b6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800b6:	7800      	ldrb	r0, [r0, #0]
 80800b8:	fab0 f080 	clz	r0, r0
 80800bc:	0940      	lsrs	r0, r0, #5
 80800be:	4770      	bx	lr

080800c0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800c0:	2301      	movs	r3, #1
 80800c2:	7003      	strb	r3, [r0, #0]
 80800c4:	4770      	bx	lr

080800c6 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80800c6:	6803      	ldr	r3, [r0, #0]
 80800c8:	b2c9      	uxtb	r1, r1
 80800ca:	689b      	ldr	r3, [r3, #8]
 80800cc:	4718      	bx	r3

080800ce <_ZN17Adafruit_FRAM_I2CC1Ev>:
    Constructor
*/
/**************************************************************************/
Adafruit_FRAM_I2C::Adafruit_FRAM_I2C(void)
{
  _framInitialised = false;
 80800ce:	2200      	movs	r2, #0
 80800d0:	7042      	strb	r2, [r0, #1]
}
 80800d2:	4770      	bx	lr

080800d4 <_ZN17Adafruit_FRAM_I2C6write8Eth>:
    @params[in] i2cAddr
                The 8-bit value to write at framAddr
*/
/**************************************************************************/
void Adafruit_FRAM_I2C::write8 (uint16_t framAddr, uint8_t value)
{
 80800d4:	b570      	push	{r4, r5, r6, lr}
 80800d6:	4606      	mov	r6, r0
 80800d8:	460c      	mov	r4, r1
 80800da:	4615      	mov	r5, r2
  Wire.beginTransmission(i2c_addr);
 80800dc:	f003 f840 	bl	8083160 <_Z19__fetch_global_Wirev>
 80800e0:	7831      	ldrb	r1, [r6, #0]
 80800e2:	f002 f9d7 	bl	8082494 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(framAddr >> 8);
 80800e6:	f003 f83b 	bl	8083160 <_Z19__fetch_global_Wirev>
 80800ea:	0a21      	lsrs	r1, r4, #8
 80800ec:	f7ff ffeb 	bl	80800c6 <_ZN7TwoWire5writeEi>
  Wire.write(framAddr & 0xFF);
 80800f0:	f003 f836 	bl	8083160 <_Z19__fetch_global_Wirev>
 80800f4:	b2e1      	uxtb	r1, r4
 80800f6:	f7ff ffe6 	bl	80800c6 <_ZN7TwoWire5writeEi>
  Wire.write(value);
 80800fa:	f003 f831 	bl	8083160 <_Z19__fetch_global_Wirev>
 80800fe:	6803      	ldr	r3, [r0, #0]
 8080100:	4629      	mov	r1, r5
 8080102:	689b      	ldr	r3, [r3, #8]
 8080104:	4798      	blx	r3
  Wire.endTransmission();
 8080106:	f003 f82b 	bl	8083160 <_Z19__fetch_global_Wirev>
}
 808010a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Wire.endTransmission();
 808010e:	f002 b9e4 	b.w	80824da <_ZN7TwoWire15endTransmissionEv>

08080112 <_ZN17Adafruit_FRAM_I2C5read8Et>:

    @returns    The 8-bit value retrieved at framAddr
*/
/**************************************************************************/
uint8_t Adafruit_FRAM_I2C::read8 (uint16_t framAddr)
{
 8080112:	b538      	push	{r3, r4, r5, lr}
 8080114:	4604      	mov	r4, r0
 8080116:	460d      	mov	r5, r1
  Wire.beginTransmission(i2c_addr);
 8080118:	f003 f822 	bl	8083160 <_Z19__fetch_global_Wirev>
 808011c:	7821      	ldrb	r1, [r4, #0]
 808011e:	f002 f9b9 	bl	8082494 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(framAddr >> 8);
 8080122:	f003 f81d 	bl	8083160 <_Z19__fetch_global_Wirev>
 8080126:	0a29      	lsrs	r1, r5, #8
 8080128:	f7ff ffcd 	bl	80800c6 <_ZN7TwoWire5writeEi>
  Wire.write(framAddr & 0xFF);
 808012c:	f003 f818 	bl	8083160 <_Z19__fetch_global_Wirev>
 8080130:	b2e9      	uxtb	r1, r5
 8080132:	f7ff ffc8 	bl	80800c6 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
 8080136:	f003 f813 	bl	8083160 <_Z19__fetch_global_Wirev>
 808013a:	f002 f9ce 	bl	80824da <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(i2c_addr, (uint8_t)1);
 808013e:	f003 f80f 	bl	8083160 <_Z19__fetch_global_Wirev>
 8080142:	2201      	movs	r2, #1
 8080144:	7821      	ldrb	r1, [r4, #0]
 8080146:	f002 f9a2 	bl	808248e <_ZN7TwoWire11requestFromEhj>

  return Wire.read();
 808014a:	f003 f809 	bl	8083160 <_Z19__fetch_global_Wirev>
 808014e:	6803      	ldr	r3, [r0, #0]
 8080150:	695b      	ldr	r3, [r3, #20]
 8080152:	4798      	blx	r3
}
 8080154:	b2c0      	uxtb	r0, r0
 8080156:	bd38      	pop	{r3, r4, r5, pc}

08080158 <_ZN17Adafruit_FRAM_I2C11getDeviceIDEPtS0_>:
                  Product ID fields (bytes 7..0). Should be 0x510 for
                  the MB85RC256V.
*/
/**************************************************************************/
void Adafruit_FRAM_I2C::getDeviceID(uint16_t *manufacturerID, uint16_t *productID)
{
 8080158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808015a:	4604      	mov	r4, r0
 808015c:	4616      	mov	r6, r2
 808015e:	460f      	mov	r7, r1
  uint8_t a[3] = { 0, 0, 0 };
  uint8_t results;

  Wire.beginTransmission(MB85RC_SLAVE_ID >> 1);
 8080160:	f002 fffe 	bl	8083160 <_Z19__fetch_global_Wirev>
 8080164:	217c      	movs	r1, #124	; 0x7c
 8080166:	f002 f999 	bl	808249c <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(i2c_addr << 1);
 808016a:	f002 fff9 	bl	8083160 <_Z19__fetch_global_Wirev>
 808016e:	7821      	ldrb	r1, [r4, #0]
 8080170:	0049      	lsls	r1, r1, #1
 8080172:	f7ff ffa8 	bl	80800c6 <_ZN7TwoWire5writeEi>
  results = Wire.endTransmission(false);
 8080176:	f002 fff3 	bl	8083160 <_Z19__fetch_global_Wirev>
 808017a:	2100      	movs	r1, #0
 808017c:	f002 f9a9 	bl	80824d2 <_ZN7TwoWire15endTransmissionEh>

  Wire.requestFrom(MB85RC_SLAVE_ID >> 1, 3);
 8080180:	f002 ffee 	bl	8083160 <_Z19__fetch_global_Wirev>
 8080184:	2203      	movs	r2, #3
 8080186:	217c      	movs	r1, #124	; 0x7c
 8080188:	f002 f981 	bl	808248e <_ZN7TwoWire11requestFromEhj>
  a[0] = Wire.read();
 808018c:	f002 ffe8 	bl	8083160 <_Z19__fetch_global_Wirev>
 8080190:	6803      	ldr	r3, [r0, #0]
 8080192:	695b      	ldr	r3, [r3, #20]
 8080194:	4798      	blx	r3
 8080196:	4605      	mov	r5, r0
  a[1] = Wire.read();
 8080198:	f002 ffe2 	bl	8083160 <_Z19__fetch_global_Wirev>
 808019c:	6803      	ldr	r3, [r0, #0]
  a[2] = Wire.read();

  /* Shift values to separate manuf and prod IDs */
  /* See p.10 of http://www.fujitsu.com/downloads/MICRO/fsa/pdf/products/memory/fram/MB85RC256V-DS501-00017-3v0-E.pdf */
  *manufacturerID = (a[0] << 4) + (a[1]  >> 4);
 808019e:	b2ed      	uxtb	r5, r5
  a[1] = Wire.read();
 80801a0:	695b      	ldr	r3, [r3, #20]
 80801a2:	4798      	blx	r3
 80801a4:	4604      	mov	r4, r0
  a[2] = Wire.read();
 80801a6:	f002 ffdb 	bl	8083160 <_Z19__fetch_global_Wirev>
 80801aa:	6803      	ldr	r3, [r0, #0]
 80801ac:	695b      	ldr	r3, [r3, #20]
 80801ae:	4798      	blx	r3
  *manufacturerID = (a[0] << 4) + (a[1]  >> 4);
 80801b0:	f3c4 1303 	ubfx	r3, r4, #4, #4
  *productID = ((a[1] & 0x0F) << 8) + a[2];
 80801b4:	0224      	lsls	r4, r4, #8
 80801b6:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 80801ba:	b2c0      	uxtb	r0, r0
  *manufacturerID = (a[0] << 4) + (a[1]  >> 4);
 80801bc:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  *productID = ((a[1] & 0x0F) << 8) + a[2];
 80801c0:	4404      	add	r4, r0
  *manufacturerID = (a[0] << 4) + (a[1]  >> 4);
 80801c2:	803d      	strh	r5, [r7, #0]
  *productID = ((a[1] & 0x0F) << 8) + a[2];
 80801c4:	8034      	strh	r4, [r6, #0]
}
 80801c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080801c8 <_ZN17Adafruit_FRAM_I2C5beginEh>:
{
 80801c8:	b513      	push	{r0, r1, r4, lr}
 80801ca:	4604      	mov	r4, r0
  i2c_addr = addr;
 80801cc:	7001      	strb	r1, [r0, #0]
  Wire.begin();
 80801ce:	f002 ffc7 	bl	8083160 <_Z19__fetch_global_Wirev>
 80801d2:	f002 f92d 	bl	8082430 <_ZN7TwoWire5beginEv>
  getDeviceID(&manufID, &prodID);
 80801d6:	4620      	mov	r0, r4
 80801d8:	f10d 0206 	add.w	r2, sp, #6
 80801dc:	a901      	add	r1, sp, #4
 80801de:	f7ff ffbb 	bl	8080158 <_ZN17Adafruit_FRAM_I2C11getDeviceIDEPtS0_>
  if (manufID != 0x00A)
 80801e2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80801e6:	2b0a      	cmp	r3, #10
 80801e8:	d108      	bne.n	80801fc <_ZN17Adafruit_FRAM_I2C5beginEh+0x34>
  if (prodID != 0x510)
 80801ea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80801ee:	f5b3 6fa2 	cmp.w	r3, #1296	; 0x510
 80801f2:	d103      	bne.n	80801fc <_ZN17Adafruit_FRAM_I2C5beginEh+0x34>
  _framInitialised = true;
 80801f4:	2001      	movs	r0, #1
 80801f6:	7060      	strb	r0, [r4, #1]
}
 80801f8:	b002      	add	sp, #8
 80801fa:	bd10      	pop	{r4, pc}
    return false;
 80801fc:	2000      	movs	r0, #0
 80801fe:	e7fb      	b.n	80801f8 <_ZN17Adafruit_FRAM_I2C5beginEh+0x30>

08080200 <_Z7sendNow6String>:
  }
  else return 0;
}

int sendNow(String command) // Function to force sending data in current hour
{
 8080200:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8080202:	4904      	ldr	r1, [pc, #16]	; (8080214 <_Z7sendNow6String+0x14>)
 8080204:	f002 fb64 	bl	80828d0 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080208:	b118      	cbz	r0, 8080212 <_Z7sendNow6String+0x12>
  {
    state = REPORTING_STATE;
 808020a:	2204      	movs	r2, #4
    return 1;
 808020c:	2001      	movs	r0, #1
    state = REPORTING_STATE;
 808020e:	4b02      	ldr	r3, [pc, #8]	; (8080218 <_Z7sendNow6String+0x18>)
 8080210:	701a      	strb	r2, [r3, #0]
  }
  else return 0;
}
 8080212:	bd08      	pop	{r3, pc}
 8080214:	0808451d 	.word	0x0808451d
 8080218:	200000d8 	.word	0x200000d8

0808021c <_Z11watchdogISRv>:
{
 808021c:	b508      	push	{r3, lr}
  if (pettingEnabled) {
 808021e:	4b07      	ldr	r3, [pc, #28]	; (808023c <_Z11watchdogISRv+0x20>)
 8080220:	781b      	ldrb	r3, [r3, #0]
 8080222:	b14b      	cbz	r3, 8080238 <_Z11watchdogISRv+0x1c>
    digitalWrite(donePin, HIGH);                              // Pet the watchdog
 8080224:	2101      	movs	r1, #1
 8080226:	2006      	movs	r0, #6
 8080228:	f002 ff43 	bl	80830b2 <digitalWrite>
}
 808022c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    digitalWrite(donePin, LOW);
 8080230:	2100      	movs	r1, #0
 8080232:	2006      	movs	r0, #6
 8080234:	f002 bf3d 	b.w	80830b2 <digitalWrite>
}
 8080238:	bd08      	pop	{r3, pc}
 808023a:	bf00      	nop
 808023c:	20000004 	.word	0x20000004

08080240 <_Z12hardResetNow6String>:
{
 8080240:	b508      	push	{r3, lr}
 8080242:	4905      	ldr	r1, [pc, #20]	; (8080258 <_Z12hardResetNow6String+0x18>)
 8080244:	f002 fb44 	bl	80828d0 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080248:	b120      	cbz	r0, 8080254 <_Z12hardResetNow6String+0x14>
    digitalWrite(hardResetPin,HIGH);          // This will cut all power to the Electron AND the carrir board
 808024a:	2004      	movs	r0, #4
 808024c:	2101      	movs	r1, #1
 808024e:	f002 ff30 	bl	80830b2 <digitalWrite>
 8080252:	2001      	movs	r0, #1
}
 8080254:	bd08      	pop	{r3, pc}
 8080256:	bf00      	nop
 8080258:	0808451d 	.word	0x0808451d

0808025c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 808025c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808025e:	4604      	mov	r4, r0
 8080260:	f89d 5018 	ldrb.w	r5, [sp, #24]
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
 8080264:	431d      	orrs	r5, r3
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8080266:	f88d 5000 	strb.w	r5, [sp]
 808026a:	233c      	movs	r3, #60	; 0x3c
 808026c:	f001 fea8 	bl	8081fc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }
 8080270:	4620      	mov	r0, r4
 8080272:	b003      	add	sp, #12
 8080274:	bd30      	pop	{r4, r5, pc}

08080276 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8080276:	2200      	movs	r2, #0
 8080278:	6840      	ldr	r0, [r0, #4]
 808027a:	4611      	mov	r1, r2
 808027c:	f001 bb30 	b.w	80818e0 <network_ready>

08080280 <_Z9FRAMread8j>:
// Begin section
uint8_t FRAMread8(unsigned int address)  // Read 8 bits from FRAM
{
    uint8_t result;
    //Serial.println("In FRAMread8");
    result = fram.read8(address);
 8080280:	b281      	uxth	r1, r0
 8080282:	4801      	ldr	r0, [pc, #4]	; (8080288 <_Z9FRAMread8j+0x8>)
 8080284:	f7ff bf45 	b.w	8080112 <_ZN17Adafruit_FRAM_I2C5read8Et>
 8080288:	200000b9 	.word	0x200000b9

0808028c <_Z10FRAMwrite8jh>:
    return result;
}

void FRAMwrite8(unsigned int address, uint8_t value)    // Write 8 bits to FRAM
{
 808028c:	460a      	mov	r2, r1
    fram.write8(address,value);
 808028e:	b281      	uxth	r1, r0
 8080290:	4801      	ldr	r0, [pc, #4]	; (8080298 <_Z10FRAMwrite8jh+0xc>)
 8080292:	f7ff bf1f 	b.w	80800d4 <_ZN17Adafruit_FRAM_I2C6write8Eth>
 8080296:	bf00      	nop
 8080298:	200000b9 	.word	0x200000b9

0808029c <_Z10FRAMread16j>:
}

int FRAMread16(unsigned int address)
{
 808029c:	b570      	push	{r4, r5, r6, lr}
    long two;
    long one;
    //Read the 2 bytes from  memory.
    two = fram.read8(address);
 808029e:	4e07      	ldr	r6, [pc, #28]	; (80802bc <_Z10FRAMread16j+0x20>)
 80802a0:	b284      	uxth	r4, r0
 80802a2:	4621      	mov	r1, r4
 80802a4:	4630      	mov	r0, r6
 80802a6:	f7ff ff34 	bl	8080112 <_ZN17Adafruit_FRAM_I2C5read8Et>
    one = fram.read8(address + 1);
 80802aa:	1c61      	adds	r1, r4, #1
    two = fram.read8(address);
 80802ac:	4605      	mov	r5, r0
    one = fram.read8(address + 1);
 80802ae:	b289      	uxth	r1, r1
 80802b0:	4630      	mov	r0, r6
 80802b2:	f7ff ff2e 	bl	8080112 <_ZN17Adafruit_FRAM_I2C5read8Et>
    //Return the recomposed long by using bitshift.
    return ((two << 0) & 0xFF) + ((one << 8) & 0xFFFF);
}
 80802b6:	eb05 2000 	add.w	r0, r5, r0, lsl #8
 80802ba:	bd70      	pop	{r4, r5, r6, pc}
 80802bc:	200000b9 	.word	0x200000b9

080802c0 <_Z11FRAMwrite16ji>:

void FRAMwrite16(unsigned int address, int value)   // Write 16 bits to FRAM
{
 80802c0:	b570      	push	{r4, r5, r6, lr}
 80802c2:	460d      	mov	r5, r1
    //Decomposition from a long to 2 bytes by using bitshift.
    //One = Most significant -> Four = Least significant byte
    uint8_t two = (value & 0xFF);
    uint8_t one = ((value >> 8) & 0xFF);
    //Write the 2 bytes into the eeprom memory.
    fram.write8(address, two);
 80802c4:	4e07      	ldr	r6, [pc, #28]	; (80802e4 <_Z11FRAMwrite16ji+0x24>)
 80802c6:	b284      	uxth	r4, r0
 80802c8:	b2ca      	uxtb	r2, r1
 80802ca:	4630      	mov	r0, r6
 80802cc:	4621      	mov	r1, r4
    fram.write8(address + 1, one);
 80802ce:	3401      	adds	r4, #1
    fram.write8(address, two);
 80802d0:	f7ff ff00 	bl	80800d4 <_ZN17Adafruit_FRAM_I2C6write8Eth>
    fram.write8(address + 1, one);
 80802d4:	4630      	mov	r0, r6
 80802d6:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80802da:	b2a1      	uxth	r1, r4
}
 80802dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fram.write8(address + 1, one);
 80802e0:	f7ff bef8 	b.w	80800d4 <_ZN17Adafruit_FRAM_I2C6write8Eth>
 80802e4:	200000b9 	.word	0x200000b9

080802e8 <_Z11resetCounts6String>:
{
 80802e8:	b508      	push	{r3, lr}
 80802ea:	490a      	ldr	r1, [pc, #40]	; (8080314 <_Z11resetCounts6String+0x2c>)
 80802ec:	f002 faf0 	bl	80828d0 <_ZNK6String6equalsEPKc>
  if (command == "1")
 80802f0:	b170      	cbz	r0, 8080310 <_Z11resetCounts6String+0x28>
    FRAMwrite8(RESETCOUNT,0);          // If so, store incremented number - watchdog must have done This
 80802f2:	2100      	movs	r1, #0
 80802f4:	2002      	movs	r0, #2
 80802f6:	f7ff ffc9 	bl	808028c <_Z10FRAMwrite8jh>
    resetCount = 0;
 80802fa:	2100      	movs	r1, #0
 80802fc:	4b06      	ldr	r3, [pc, #24]	; (8080318 <_Z11resetCounts6String+0x30>)
    FRAMwrite16(DAILYPUMPMINUTES,0);
 80802fe:	2014      	movs	r0, #20
    resetCount = 0;
 8080300:	6019      	str	r1, [r3, #0]
    dataInFlight = false;
 8080302:	4b06      	ldr	r3, [pc, #24]	; (808031c <_Z11resetCounts6String+0x34>)
 8080304:	7019      	strb	r1, [r3, #0]
    dailyPumpingMins = 0;
 8080306:	4b06      	ldr	r3, [pc, #24]	; (8080320 <_Z11resetCounts6String+0x38>)
 8080308:	6019      	str	r1, [r3, #0]
    FRAMwrite16(DAILYPUMPMINUTES,0);
 808030a:	f7ff ffd9 	bl	80802c0 <_Z11FRAMwrite16ji>
 808030e:	2001      	movs	r0, #1
}
 8080310:	bd08      	pop	{r3, pc}
 8080312:	bf00      	nop
 8080314:	0808451d 	.word	0x0808451d
 8080318:	200000d0 	.word	0x200000d0
 808031c:	200000b8 	.word	0x200000b8
 8080320:	200000b4 	.word	0x200000b4

08080324 <_Z10FRAMread32m>:

unsigned long FRAMread32(unsigned long address)
{
 8080324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    long four;
    long three;
    long two;
    long one;
    //Read the 4 bytes from memory.
    four = fram.read8(address);
 8080328:	4e0f      	ldr	r6, [pc, #60]	; (8080368 <_Z10FRAMread32m+0x44>)
 808032a:	b284      	uxth	r4, r0
 808032c:	4621      	mov	r1, r4
 808032e:	4630      	mov	r0, r6
 8080330:	f7ff feef 	bl	8080112 <_ZN17Adafruit_FRAM_I2C5read8Et>
    three = fram.read8(address + 1);
 8080334:	1c61      	adds	r1, r4, #1
    four = fram.read8(address);
 8080336:	4605      	mov	r5, r0
    three = fram.read8(address + 1);
 8080338:	b289      	uxth	r1, r1
 808033a:	4630      	mov	r0, r6
 808033c:	f7ff fee9 	bl	8080112 <_ZN17Adafruit_FRAM_I2C5read8Et>
    two = fram.read8(address + 2);
 8080340:	1ca1      	adds	r1, r4, #2
    three = fram.read8(address + 1);
 8080342:	4680      	mov	r8, r0
    two = fram.read8(address + 2);
 8080344:	b289      	uxth	r1, r1
 8080346:	4630      	mov	r0, r6
 8080348:	f7ff fee3 	bl	8080112 <_ZN17Adafruit_FRAM_I2C5read8Et>
    one = fram.read8(address + 3);
 808034c:	1ce1      	adds	r1, r4, #3
    two = fram.read8(address + 2);
 808034e:	4607      	mov	r7, r0
    one = fram.read8(address + 3);
 8080350:	b289      	uxth	r1, r1
 8080352:	4630      	mov	r0, r6
 8080354:	f7ff fedd 	bl	8080112 <_ZN17Adafruit_FRAM_I2C5read8Et>
    //Return the recomposed long by using bitshift.
    return ((four << 0) & 0xFF) + ((three << 8) & 0xFFFF) + ((two << 16) & 0xFFFFFF) + ((one << 24) & 0xFFFFFFFF);
 8080358:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 808035c:	eb05 4507 	add.w	r5, r5, r7, lsl #16
}
 8080360:	eb05 6000 	add.w	r0, r5, r0, lsl #24
 8080364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8080368:	200000b9 	.word	0x200000b9

0808036c <_Z11FRAMwrite32im>:

void FRAMwrite32(int address, unsigned long value)  // Write 32 bits to FRAM
{
 808036c:	b570      	push	{r4, r5, r6, lr}
 808036e:	460d      	mov	r5, r1
    uint8_t four = (value & 0xFF);
    uint8_t three = ((value >> 8) & 0xFF);
    uint8_t two = ((value >> 16) & 0xFF);
    uint8_t one = ((value >> 24) & 0xFF);
    //Write the 4 bytes into the eeprom memory.
    fram.write8(address, four);
 8080370:	4e0e      	ldr	r6, [pc, #56]	; (80803ac <_Z11FRAMwrite32im+0x40>)
 8080372:	b284      	uxth	r4, r0
 8080374:	b2ca      	uxtb	r2, r1
 8080376:	4630      	mov	r0, r6
 8080378:	4621      	mov	r1, r4
 808037a:	f7ff feab 	bl	80800d4 <_ZN17Adafruit_FRAM_I2C6write8Eth>
    fram.write8(address + 1, three);
 808037e:	1c61      	adds	r1, r4, #1
 8080380:	4630      	mov	r0, r6
 8080382:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8080386:	b289      	uxth	r1, r1
 8080388:	f7ff fea4 	bl	80800d4 <_ZN17Adafruit_FRAM_I2C6write8Eth>
    fram.write8(address + 2, two);
 808038c:	1ca1      	adds	r1, r4, #2
 808038e:	4630      	mov	r0, r6
 8080390:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8080394:	b289      	uxth	r1, r1
    fram.write8(address + 3, one);
 8080396:	3403      	adds	r4, #3
    fram.write8(address + 2, two);
 8080398:	f7ff fe9c 	bl	80800d4 <_ZN17Adafruit_FRAM_I2C6write8Eth>
    fram.write8(address + 3, one);
 808039c:	4630      	mov	r0, r6
 808039e:	0e2a      	lsrs	r2, r5, #24
 80803a0:	b2a1      	uxth	r1, r4
}
 80803a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fram.write8(address + 3, one);
 80803a6:	f7ff be95 	b.w	80800d4 <_ZN17Adafruit_FRAM_I2C6write8Eth>
 80803aa:	bf00      	nop
 80803ac:	200000b9 	.word	0x200000b9

080803b0 <_Z17getSignalStrengthv>:
void getSignalStrength() {
 80803b0:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
 80803b2:	4d17      	ldr	r5, [pc, #92]	; (8080410 <_Z17getSignalStrengthv+0x60>)
void getSignalStrength() {
 80803b4:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
 80803b6:	ac04      	add	r4, sp, #16
 80803b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80803ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80803bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80803be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80803c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80803c4:	e884 0003 	stmia.w	r4, {r0, r1}
  CellularSignal sig = Cellular.RSSI();
 80803c8:	4912      	ldr	r1, [pc, #72]	; (8080414 <_Z17getSignalStrengthv+0x64>)
 80803ca:	a80e      	add	r0, sp, #56	; 0x38
 80803cc:	f001 fb74 	bl	8081ab8 <_ZN5spark13CellularClass4RSSIEv>
  auto rat = sig.getAccessTechnology();
 80803d0:	a80e      	add	r0, sp, #56	; 0x38
 80803d2:	f001 fbc4 	bl	8081b5e <_ZNK14CellularSignal19getAccessTechnologyEv>
 80803d6:	4604      	mov	r4, r0
  float strengthPercentage = sig.getStrength();
 80803d8:	a80e      	add	r0, sp, #56	; 0x38
 80803da:	f001 fbdf 	bl	8081b9c <_ZNK14CellularSignal11getStrengthEv>
 80803de:	4605      	mov	r5, r0
  float qualityPercentage = sig.getQuality();
 80803e0:	a80e      	add	r0, sp, #56	; 0x38
 80803e2:	f001 fc05 	bl	8081bf0 <_ZNK14CellularSignal10getQualityEv>
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
 80803e6:	ab18      	add	r3, sp, #96	; 0x60
 80803e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80803ec:	f003 f87a 	bl	80834e4 <__aeabi_f2d>
 80803f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80803f4:	4628      	mov	r0, r5
 80803f6:	f003 f875 	bl	80834e4 <__aeabi_f2d>
 80803fa:	e9cd 0100 	strd	r0, r1, [sp]
 80803fe:	4a06      	ldr	r2, [pc, #24]	; (8080418 <_Z17getSignalStrengthv+0x68>)
 8080400:	2111      	movs	r1, #17
 8080402:	f854 3c50 	ldr.w	r3, [r4, #-80]
 8080406:	4805      	ldr	r0, [pc, #20]	; (808041c <_Z17getSignalStrengthv+0x6c>)
 8080408:	f001 fad2 	bl	80819b0 <snprintf>
}
 808040c:	b019      	add	sp, #100	; 0x64
 808040e:	bd30      	pop	{r4, r5, pc}
 8080410:	08084780 	.word	0x08084780
 8080414:	200000f4 	.word	0x200000f4
 8080418:	0808451f 	.word	0x0808451f
 808041c:	40024000 	.word	0x40024000

08080420 <_Z14getTemperaturev>:
{
 8080420:	b508      	push	{r3, lr}
  int reading = analogRead(tmp36Pin);   //getting the voltage reading from the temperature sensor
 8080422:	200a      	movs	r0, #10
 8080424:	f002 fe5e 	bl	80830e4 <analogRead>
  float voltage = reading * 3.3;        // converting that reading to voltage, for 3.3v arduino use 3.3
 8080428:	f003 f84a 	bl	80834c0 <__aeabi_i2d>
 808042c:	a314      	add	r3, pc, #80	; (adr r3, 8080480 <_Z14getTemperaturev+0x60>)
 808042e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080432:	f003 f8af 	bl	8083594 <__aeabi_dmul>
 8080436:	f003 fb07 	bl	8083a48 <__aeabi_d2f>
  voltage /= 4096.0;                    // Electron is different than the Arduino where there are only 1024 steps
 808043a:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
 808043e:	f003 fc61 	bl	8083d04 <__aeabi_fmul>
  int temperatureC = int(((voltage - 0.5) * 100));  //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
 8080442:	f003 f84f 	bl	80834e4 <__aeabi_f2d>
 8080446:	2200      	movs	r2, #0
 8080448:	4b0f      	ldr	r3, [pc, #60]	; (8080488 <_Z14getTemperaturev+0x68>)
 808044a:	f002 feeb 	bl	8083224 <__aeabi_dsub>
 808044e:	2200      	movs	r2, #0
 8080450:	4b0e      	ldr	r3, [pc, #56]	; (808048c <_Z14getTemperaturev+0x6c>)
 8080452:	f003 f89f 	bl	8083594 <__aeabi_dmul>
 8080456:	f003 faaf 	bl	80839b8 <__aeabi_d2iz>
  temperatureF = int((temperatureC * 9.0 / 5.0) + 32.0);  // now convert to Fahrenheit
 808045a:	f003 f831 	bl	80834c0 <__aeabi_i2d>
 808045e:	2200      	movs	r2, #0
 8080460:	4b0b      	ldr	r3, [pc, #44]	; (8080490 <_Z14getTemperaturev+0x70>)
 8080462:	f003 f897 	bl	8083594 <__aeabi_dmul>
 8080466:	2200      	movs	r2, #0
 8080468:	4b0a      	ldr	r3, [pc, #40]	; (8080494 <_Z14getTemperaturev+0x74>)
 808046a:	f003 f9bd 	bl	80837e8 <__aeabi_ddiv>
 808046e:	2200      	movs	r2, #0
 8080470:	4b09      	ldr	r3, [pc, #36]	; (8080498 <_Z14getTemperaturev+0x78>)
 8080472:	f002 fed9 	bl	8083228 <__adddf3>
 8080476:	f003 fa9f 	bl	80839b8 <__aeabi_d2iz>
 808047a:	4b08      	ldr	r3, [pc, #32]	; (808049c <_Z14getTemperaturev+0x7c>)
 808047c:	6018      	str	r0, [r3, #0]
}
 808047e:	bd08      	pop	{r3, pc}
 8080480:	66666666 	.word	0x66666666
 8080484:	400a6666 	.word	0x400a6666
 8080488:	3fe00000 	.word	0x3fe00000
 808048c:	40590000 	.word	0x40590000
 8080490:	40220000 	.word	0x40220000
 8080494:	40140000 	.word	0x40140000
 8080498:	40400000 	.word	0x40400000
 808049c:	200000e8 	.word	0x200000e8

080804a0 <_Z17connectToParticlev>:
{
 80804a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (!Cellular.ready())
 80804a4:	4d2f      	ldr	r5, [pc, #188]	; (8080564 <_Z17connectToParticlev+0xc4>)
 80804a6:	4628      	mov	r0, r5
 80804a8:	f7ff fee5 	bl	8080276 <_ZN5spark13CellularClass5readyEv>
 80804ac:	4604      	mov	r4, r0
 80804ae:	b308      	cbz	r0, 80804f4 <_Z17connectToParticlev+0x54>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80804b0:	f000 ffe6 	bl	8081480 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80804b4:	4d2c      	ldr	r5, [pc, #176]	; (8080568 <_Z17connectToParticlev+0xc8>)
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80804b6:	f04f 0a00 	mov.w	sl, #0
 80804ba:	6028      	str	r0, [r5, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
 80804bc:	f001 f9a8 	bl	8081810 <spark_process>
        spark_cloud_flag_connect();
 80804c0:	f001 f9ae 	bl	8081820 <spark_cloud_flag_connect>
 80804c4:	2000      	movs	r0, #0
 80804c6:	f000 ffeb 	bl	80814a0 <hal_timer_millis>
        while (_while() && !_condition()) {
 80804ca:	f247 582f 	movw	r8, #29999	; 0x752f
        return hal_timer_millis(nullptr);
 80804ce:	4604      	mov	r4, r0
        while (_while() && !_condition()) {
 80804d0:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
 80804d4:	2000      	movs	r0, #0
 80804d6:	f000 ffe3 	bl	80814a0 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80804da:	1b06      	subs	r6, r0, r4
 80804dc:	eb61 070a 	sbc.w	r7, r1, sl
        while (_while() && !_condition()) {
 80804e0:	45b9      	cmp	r9, r7
 80804e2:	bf08      	it	eq
 80804e4:	45b0      	cmpeq	r8, r6
 80804e6:	d332      	bcc.n	808054e <_Z17connectToParticlev+0xae>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80804e8:	f001 f9a2 	bl	8081830 <spark_cloud_flag_connected>
 80804ec:	bb78      	cbnz	r0, 808054e <_Z17connectToParticlev+0xae>
            spark_process();
 80804ee:	f001 f98f 	bl	8081810 <spark_process>
        while (_while() && !_condition()) {
 80804f2:	e7ef      	b.n	80804d4 <_Z17connectToParticlev+0x34>
        network_on(*this, 0, 0, NULL);
 80804f4:	4603      	mov	r3, r0
 80804f6:	4602      	mov	r2, r0
 80804f8:	4601      	mov	r1, r0
 80804fa:	6868      	ldr	r0, [r5, #4]
 80804fc:	f001 f9f8 	bl	80818f0 <network_on>
        network_connect(*this, flags, 0, NULL);
 8080500:	4623      	mov	r3, r4
 8080502:	4622      	mov	r2, r4
 8080504:	4621      	mov	r1, r4
 8080506:	6868      	ldr	r0, [r5, #4]
 8080508:	f001 f9d2 	bl	80818b0 <network_connect>
        return hal_timer_millis(nullptr);
 808050c:	4620      	mov	r0, r4
 808050e:	f000 ffc7 	bl	80814a0 <hal_timer_millis>
 8080512:	4682      	mov	sl, r0
 8080514:	2000      	movs	r0, #0
 8080516:	f000 ffc3 	bl	80814a0 <hal_timer_millis>
        while (_while() && !_condition()) {
 808051a:	2300      	movs	r3, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 808051c:	ebb0 080a 	subs.w	r8, r0, sl
        while (_while() && !_condition()) {
 8080520:	4a12      	ldr	r2, [pc, #72]	; (808056c <_Z17connectToParticlev+0xcc>)
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 8080522:	eb61 0904 	sbc.w	r9, r1, r4
        while (_while() && !_condition()) {
 8080526:	454b      	cmp	r3, r9
 8080528:	bf08      	it	eq
 808052a:	4542      	cmpeq	r2, r8
 808052c:	d306      	bcc.n	808053c <_Z17connectToParticlev+0x9c>
    if(!waitFor(Cellular.ready,90000)) return false;         // Connect to cellular - give it 90 seconds
 808052e:	4628      	mov	r0, r5
 8080530:	f7ff fea1 	bl	8080276 <_ZN5spark13CellularClass5readyEv>
 8080534:	b910      	cbnz	r0, 808053c <_Z17connectToParticlev+0x9c>
            spark_process();
 8080536:	f001 f96b 	bl	8081810 <spark_process>
        while (_while() && !_condition()) {
 808053a:	e7eb      	b.n	8080514 <_Z17connectToParticlev+0x74>
 808053c:	4809      	ldr	r0, [pc, #36]	; (8080564 <_Z17connectToParticlev+0xc4>)
 808053e:	f7ff fe9a 	bl	8080276 <_ZN5spark13CellularClass5readyEv>
 8080542:	2800      	cmp	r0, #0
 8080544:	d1b4      	bne.n	80804b0 <_Z17connectToParticlev+0x10>
 8080546:	2400      	movs	r4, #0
}
 8080548:	4620      	mov	r0, r4
 808054a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808054e:	f001 f96f 	bl	8081830 <spark_cloud_flag_connected>
  if(!waitFor(Particle.connected,30000)) return false;     // Connect to Particle - give it 30 seconds
 8080552:	4604      	mov	r4, r0
 8080554:	2800      	cmp	r0, #0
 8080556:	d0f6      	beq.n	8080546 <_Z17connectToParticlev+0xa6>
		return HAL_Timer_Get_Milli_Seconds();
 8080558:	f000 ff92 	bl	8081480 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
 808055c:	6028      	str	r0, [r5, #0]
    		spark_process();
 808055e:	f001 f957 	bl	8081810 <spark_process>
    }
 8080562:	e7f1      	b.n	8080548 <_Z17connectToParticlev+0xa8>
 8080564:	200000f4 	.word	0x200000f4
 8080568:	200005fc 	.word	0x200005fc
 808056c:	00015f8f 	.word	0x00015f8f

08080570 <_Z12notConnectedv>:
bool notConnected() {
 8080570:	b508      	push	{r3, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080572:	f001 f95d 	bl	8081830 <spark_cloud_flag_connected>
  return !Particle.connected();                             // This is a requirement to use waitFor
 8080576:	f080 0001 	eor.w	r0, r0, #1
}
 808057a:	b2c0      	uxtb	r0, r0
 808057c:	bd08      	pop	{r3, pc}
	...

08080580 <_Z22disconnectFromParticlev>:
{
 8080580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
 8080584:	2400      	movs	r4, #0
 8080586:	b085      	sub	sp, #20
  Particle.disconnect();                                   // Disconnect from Particle in prep for sleep
 8080588:	a801      	add	r0, sp, #4
 808058a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 808058e:	f8ad 400c 	strh.w	r4, [sp, #12]
 8080592:	f001 fc01 	bl	8081d98 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
 8080596:	4620      	mov	r0, r4
 8080598:	f000 ff82 	bl	80814a0 <hal_timer_millis>
        while (_while() && !_condition()) {
 808059c:	f242 780f 	movw	r8, #9999	; 0x270f
        return hal_timer_millis(nullptr);
 80805a0:	4605      	mov	r5, r0
        while (_while() && !_condition()) {
 80805a2:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
 80805a6:	2000      	movs	r0, #0
 80805a8:	f000 ff7a 	bl	80814a0 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80805ac:	1b46      	subs	r6, r0, r5
 80805ae:	eb61 0704 	sbc.w	r7, r1, r4
        while (_while() && !_condition()) {
 80805b2:	45b9      	cmp	r9, r7
 80805b4:	bf08      	it	eq
 80805b6:	45b0      	cmpeq	r8, r6
 80805b8:	d305      	bcc.n	80805c6 <_Z22disconnectFromParticlev+0x46>
  waitFor(notConnected,10000);
 80805ba:	f7ff ffd9 	bl	8080570 <_Z12notConnectedv>
 80805be:	b910      	cbnz	r0, 80805c6 <_Z22disconnectFromParticlev+0x46>
            spark_process();
 80805c0:	f001 f926 	bl	8081810 <spark_process>
        while (_while() && !_condition()) {
 80805c4:	e7ef      	b.n	80805a6 <_Z22disconnectFromParticlev+0x26>
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80805c6:	4c0b      	ldr	r4, [pc, #44]	; (80805f4 <_Z22disconnectFromParticlev+0x74>)
 80805c8:	f7ff ffd2 	bl	8080570 <_Z12notConnectedv>
 80805cc:	2200      	movs	r2, #0
 80805ce:	2102      	movs	r1, #2
 80805d0:	6860      	ldr	r0, [r4, #4]
 80805d2:	f001 f97d 	bl	80818d0 <network_disconnect>
  delay(3000);
 80805d6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80805da:	f001 fa09 	bl	80819f0 <delay>
        network_off(*this, 0, 0, NULL);
 80805de:	2300      	movs	r3, #0
 80805e0:	6860      	ldr	r0, [r4, #4]
 80805e2:	461a      	mov	r2, r3
 80805e4:	4619      	mov	r1, r3
 80805e6:	f001 f98b 	bl	8081900 <network_off>
}
 80805ea:	2001      	movs	r0, #1
 80805ec:	b005      	add	sp, #20
 80805ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80805f2:	bf00      	nop
 80805f4:	200000f4 	.word	0x200000f4

080805f8 <_Z12getLostPowerv>:
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
 80805f8:	2200      	movs	r2, #0
  Particle.publish("Time",Time.timeStr(t), PRIVATE);
  lastPublish = millis();
  return 1;
}

bool getLostPower() {
 80805fa:	b510      	push	{r4, lr}
 80805fc:	b086      	sub	sp, #24
    const int ret = diag_get_source(id, &src, nullptr);
 80805fe:	2018      	movs	r0, #24
 8080600:	a902      	add	r1, sp, #8
    const diag_source* src = nullptr;
 8080602:	9202      	str	r2, [sp, #8]
    const int ret = diag_get_source(id, &src, nullptr);
 8080604:	f001 f88c 	bl	8081720 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
 8080608:	b9b8      	cbnz	r0, 808063a <_Z12getLostPowerv+0x42>
        return ret;
    }
    return get(src, val);
 808060a:	9c02      	ldr	r4, [sp, #8]
    SPARK_ASSERT(src && src->callback);
 808060c:	b10c      	cbz	r4, 8080612 <_Z12getLostPowerv+0x1a>
 808060e:	6923      	ldr	r3, [r4, #16]
 8080610:	b923      	cbnz	r3, 808061c <_Z12getLostPowerv+0x24>
 8080612:	2100      	movs	r1, #0
 8080614:	200a      	movs	r0, #10
 8080616:	4a0e      	ldr	r2, [pc, #56]	; (8080650 <_Z12getLostPowerv+0x58>)
 8080618:	f001 f87a 	bl	8081710 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
 808061c:	2300      	movs	r3, #0
 808061e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8080622:	230c      	movs	r3, #12
 8080624:	f8ad 300c 	strh.w	r3, [sp, #12]
 8080628:	ab01      	add	r3, sp, #4
 808062a:	9304      	str	r3, [sp, #16]
 808062c:	2304      	movs	r3, #4
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
 808062e:	2101      	movs	r1, #1
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
 8080630:	9305      	str	r3, [sp, #20]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
 8080632:	4620      	mov	r0, r4
 8080634:	6923      	ldr	r3, [r4, #16]
 8080636:	aa03      	add	r2, sp, #12
 8080638:	4798      	blx	r3
    }

    int powerSource() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_POWER_SOURCE, val);
        if (r < 0) {
 808063a:	2800      	cmp	r0, #0
 808063c:	db05      	blt.n	808064a <_Z12getLostPowerv+0x52>
      POWER_SOURCE_BATTERY = 5
  } power_source_t;

  int powerSource = System.powerSource();

  if (powerSource == POWER_SOURCE_VIN) return 0;        // Return false if power is good
 808063e:	9801      	ldr	r0, [sp, #4]
 8080640:	3801      	subs	r0, #1
 8080642:	bf18      	it	ne
 8080644:	2001      	movne	r0, #1
  else return 1;                                        // Return true otherwise 
}
 8080646:	b006      	add	sp, #24
 8080648:	bd10      	pop	{r4, pc}
  else return 1;                                        // Return true otherwise 
 808064a:	2001      	movs	r0, #1
 808064c:	e7fb      	b.n	8080646 <_Z12getLostPowerv+0x4e>
 808064e:	bf00      	nop
 8080650:	08081471 	.word	0x08081471

08080654 <_Z16takeMeasurementsv>:
bool takeMeasurements() {
 8080654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  byte lastAlertValue = alertValue;                                             // Last value - so we can detect a
 8080658:	4da6      	ldr	r5, [pc, #664]	; (80808f4 <_Z16takeMeasurementsv+0x2a0>)
  controlRegister = FRAMread8(CONTROLREGISTER);                               // Check the control register
 808065a:	2007      	movs	r0, #7
 808065c:	f7ff fe10 	bl	8080280 <_Z9FRAMread8j>
  byte lastAlertValue = alertValue;                                             // Last value - so we can detect a
 8080660:	f895 a000 	ldrb.w	sl, [r5]
  alertValueInt = int(alertValue);
 8080664:	4ba4      	ldr	r3, [pc, #656]	; (80808f8 <_Z16takeMeasurementsv+0x2a4>)
  controlRegister = FRAMread8(CONTROLREGISTER);                               // Check the control register
 8080666:	4fa5      	ldr	r7, [pc, #660]	; (80808fc <_Z16takeMeasurementsv+0x2a8>)
  alertValueInt = int(alertValue);
 8080668:	f8c3 a000 	str.w	sl, [r3]
  alertValue = 0;                                                               // Reset for each run through
 808066c:	2300      	movs	r3, #0
  controlRegister = FRAMread8(CONTROLREGISTER);                               // Check the control register
 808066e:	7038      	strb	r0, [r7, #0]
  if (Cellular.ready()) getSignalStrength();                                    // Test signal strength if the cellular modem is on and ready
 8080670:	48a3      	ldr	r0, [pc, #652]	; (8080900 <_Z16takeMeasurementsv+0x2ac>)
  alertValue = 0;                                                               // Reset for each run through
 8080672:	702b      	strb	r3, [r5, #0]
  if (Cellular.ready()) getSignalStrength();                                    // Test signal strength if the cellular modem is on and ready
 8080674:	f7ff fdff 	bl	8080276 <_ZN5spark13CellularClass5readyEv>
 8080678:	b108      	cbz	r0, 808067e <_Z16takeMeasurementsv+0x2a>
 808067a:	f7ff fe99 	bl	80803b0 <_Z17getSignalStrengthv>
  getTemperature();                                                             // Get Temperature at startup as well
 808067e:	f7ff fecf 	bl	8080420 <_Z14getTemperaturev>
  stateOfCharge = int(batteryMonitor.getSoC());                                 // Percentage of full charge
 8080682:	48a0      	ldr	r0, [pc, #640]	; (8080904 <_Z16takeMeasurementsv+0x2b0>)
 8080684:	f001 fe6c 	bl	8082360 <_ZN9FuelGauge6getSoCEv>
 8080688:	f003 fd02 	bl	8084090 <__aeabi_f2iz>
 808068c:	4b9e      	ldr	r3, [pc, #632]	; (8080908 <_Z16takeMeasurementsv+0x2b4>)
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 808068e:	4e9f      	ldr	r6, [pc, #636]	; (808090c <_Z16takeMeasurementsv+0x2b8>)
 8080690:	6018      	str	r0, [r3, #0]
 8080692:	7833      	ldrb	r3, [r6, #0]
 8080694:	4c9e      	ldr	r4, [pc, #632]	; (8080910 <_Z16takeMeasurementsv+0x2bc>)
 8080696:	f013 0f01 	tst.w	r3, #1
 808069a:	f3bf 8f5b 	dmb	ish
 808069e:	d109      	bne.n	80806b4 <_Z16takeMeasurementsv+0x60>
 80806a0:	4630      	mov	r0, r6
 80806a2:	f7ff fd08 	bl	80800b6 <__cxa_guard_acquire>
 80806a6:	b128      	cbz	r0, 80806b4 <_Z16takeMeasurementsv+0x60>
 80806a8:	f000 ff0a 	bl	80814c0 <HAL_Pin_Map>
 80806ac:	6020      	str	r0, [r4, #0]
 80806ae:	4630      	mov	r0, r6
 80806b0:	f7ff fd06 	bl	80800c0 <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
}

inline int32_t pinReadFast(pin_t _pin)
{
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80806b4:	6823      	ldr	r3, [r4, #0]
 80806b6:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80806ba:	f8d3 8010 	ldr.w	r8, [r3, #16]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80806be:	7833      	ldrb	r3, [r6, #0]
 80806c0:	f3bf 8f5b 	dmb	ish
 80806c4:	07d8      	lsls	r0, r3, #31
 80806c6:	d409      	bmi.n	80806dc <_Z16takeMeasurementsv+0x88>
 80806c8:	4890      	ldr	r0, [pc, #576]	; (808090c <_Z16takeMeasurementsv+0x2b8>)
 80806ca:	f7ff fcf4 	bl	80800b6 <__cxa_guard_acquire>
 80806ce:	b128      	cbz	r0, 80806dc <_Z16takeMeasurementsv+0x88>
 80806d0:	f000 fef6 	bl	80814c0 <HAL_Pin_Map>
 80806d4:	6020      	str	r0, [r4, #0]
 80806d6:	488d      	ldr	r0, [pc, #564]	; (808090c <_Z16takeMeasurementsv+0x2b8>)
 80806d8:	f7ff fcf2 	bl	80800c0 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80806dc:	6823      	ldr	r3, [r4, #0]
 80806de:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
  if (!pinReadFast(anyOnDetectPin)) {
 80806e2:	ea13 0f08 	tst.w	r3, r8
 80806e6:	f040 80b4 	bne.w	8080852 <_Z16takeMeasurementsv+0x1fe>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80806ea:	7833      	ldrb	r3, [r6, #0]
 80806ec:	f3bf 8f5b 	dmb	ish
 80806f0:	07d9      	lsls	r1, r3, #31
 80806f2:	d409      	bmi.n	8080708 <_Z16takeMeasurementsv+0xb4>
 80806f4:	4885      	ldr	r0, [pc, #532]	; (808090c <_Z16takeMeasurementsv+0x2b8>)
 80806f6:	f7ff fcde 	bl	80800b6 <__cxa_guard_acquire>
 80806fa:	b128      	cbz	r0, 8080708 <_Z16takeMeasurementsv+0xb4>
 80806fc:	f000 fee0 	bl	80814c0 <HAL_Pin_Map>
 8080700:	6020      	str	r0, [r4, #0]
 8080702:	4882      	ldr	r0, [pc, #520]	; (808090c <_Z16takeMeasurementsv+0x2b8>)
 8080704:	f7ff fcdc 	bl	80800c0 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8080708:	6823      	ldr	r3, [r4, #0]
 808070a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 808070e:	f8d3 8010 	ldr.w	r8, [r3, #16]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8080712:	7833      	ldrb	r3, [r6, #0]
 8080714:	f3bf 8f5b 	dmb	ish
 8080718:	07da      	lsls	r2, r3, #31
 808071a:	d409      	bmi.n	8080730 <_Z16takeMeasurementsv+0xdc>
 808071c:	487b      	ldr	r0, [pc, #492]	; (808090c <_Z16takeMeasurementsv+0x2b8>)
 808071e:	f7ff fcca 	bl	80800b6 <__cxa_guard_acquire>
 8080722:	b128      	cbz	r0, 8080730 <_Z16takeMeasurementsv+0xdc>
 8080724:	f000 fecc 	bl	80814c0 <HAL_Pin_Map>
 8080728:	6020      	str	r0, [r4, #0]
 808072a:	4878      	ldr	r0, [pc, #480]	; (808090c <_Z16takeMeasurementsv+0x2b8>)
 808072c:	f7ff fcc8 	bl	80800c0 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8080730:	6823      	ldr	r3, [r4, #0]
 8080732:	f8b3 32c0 	ldrh.w	r3, [r3, #704]	; 0x2c0
    if (!pinReadFast(boosterNoFlow1Pin)) alertValue = alertValue | 0b00000001;  // Set the value for alertValue
 8080736:	ea13 0f08 	tst.w	r3, r8
 808073a:	bf02      	ittt	eq
 808073c:	782b      	ldrbeq	r3, [r5, #0]
 808073e:	f043 0301 	orreq.w	r3, r3, #1
 8080742:	702b      	strbeq	r3, [r5, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8080744:	7833      	ldrb	r3, [r6, #0]
 8080746:	f3bf 8f5b 	dmb	ish
 808074a:	07db      	lsls	r3, r3, #31
 808074c:	d409      	bmi.n	8080762 <_Z16takeMeasurementsv+0x10e>
 808074e:	486f      	ldr	r0, [pc, #444]	; (808090c <_Z16takeMeasurementsv+0x2b8>)
 8080750:	f7ff fcb1 	bl	80800b6 <__cxa_guard_acquire>
 8080754:	b128      	cbz	r0, 8080762 <_Z16takeMeasurementsv+0x10e>
 8080756:	f000 feb3 	bl	80814c0 <HAL_Pin_Map>
 808075a:	6020      	str	r0, [r4, #0]
 808075c:	486b      	ldr	r0, [pc, #428]	; (808090c <_Z16takeMeasurementsv+0x2b8>)
 808075e:	f7ff fcaf 	bl	80800c0 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8080762:	6823      	ldr	r3, [r4, #0]
 8080764:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8080768:	f8d3 8010 	ldr.w	r8, [r3, #16]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 808076c:	7833      	ldrb	r3, [r6, #0]
 808076e:	f3bf 8f5b 	dmb	ish
 8080772:	07d8      	lsls	r0, r3, #31
 8080774:	d409      	bmi.n	808078a <_Z16takeMeasurementsv+0x136>
 8080776:	4865      	ldr	r0, [pc, #404]	; (808090c <_Z16takeMeasurementsv+0x2b8>)
 8080778:	f7ff fc9d 	bl	80800b6 <__cxa_guard_acquire>
 808077c:	b128      	cbz	r0, 808078a <_Z16takeMeasurementsv+0x136>
 808077e:	f000 fe9f 	bl	80814c0 <HAL_Pin_Map>
 8080782:	6020      	str	r0, [r4, #0]
 8080784:	4861      	ldr	r0, [pc, #388]	; (808090c <_Z16takeMeasurementsv+0x2b8>)
 8080786:	f7ff fc9b 	bl	80800c0 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 808078a:	6823      	ldr	r3, [r4, #0]
 808078c:	f8b3 32dc 	ldrh.w	r3, [r3, #732]	; 0x2dc
    if (!pinReadFast(boosterNoFlow2Pin)) alertValue = alertValue | 0b00000010;  // Set the value for alertValue
 8080790:	ea13 0f08 	tst.w	r3, r8
 8080794:	bf02      	ittt	eq
 8080796:	782b      	ldrbeq	r3, [r5, #0]
 8080798:	f043 0302 	orreq.w	r3, r3, #2
 808079c:	702b      	strbeq	r3, [r5, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 808079e:	7833      	ldrb	r3, [r6, #0]
 80807a0:	f3bf 8f5b 	dmb	ish
 80807a4:	07d9      	lsls	r1, r3, #31
 80807a6:	d409      	bmi.n	80807bc <_Z16takeMeasurementsv+0x168>
 80807a8:	4858      	ldr	r0, [pc, #352]	; (808090c <_Z16takeMeasurementsv+0x2b8>)
 80807aa:	f7ff fc84 	bl	80800b6 <__cxa_guard_acquire>
 80807ae:	b128      	cbz	r0, 80807bc <_Z16takeMeasurementsv+0x168>
 80807b0:	f000 fe86 	bl	80814c0 <HAL_Pin_Map>
 80807b4:	6020      	str	r0, [r4, #0]
 80807b6:	4855      	ldr	r0, [pc, #340]	; (808090c <_Z16takeMeasurementsv+0x2b8>)
 80807b8:	f7ff fc82 	bl	80800c0 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80807bc:	6823      	ldr	r3, [r4, #0]
 80807be:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80807c2:	f8d3 8010 	ldr.w	r8, [r3, #16]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80807c6:	7833      	ldrb	r3, [r6, #0]
 80807c8:	f3bf 8f5b 	dmb	ish
 80807cc:	07da      	lsls	r2, r3, #31
 80807ce:	d409      	bmi.n	80807e4 <_Z16takeMeasurementsv+0x190>
 80807d0:	484e      	ldr	r0, [pc, #312]	; (808090c <_Z16takeMeasurementsv+0x2b8>)
 80807d2:	f7ff fc70 	bl	80800b6 <__cxa_guard_acquire>
 80807d6:	b128      	cbz	r0, 80807e4 <_Z16takeMeasurementsv+0x190>
 80807d8:	f000 fe72 	bl	80814c0 <HAL_Pin_Map>
 80807dc:	6020      	str	r0, [r4, #0]
 80807de:	484b      	ldr	r0, [pc, #300]	; (808090c <_Z16takeMeasurementsv+0x2b8>)
 80807e0:	f7ff fc6e 	bl	80800c0 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80807e4:	6823      	ldr	r3, [r4, #0]
 80807e6:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
    if (!pinReadFast(storageTankLowPin)) alertValue = alertValue | 0b00000100;  // Set the value for alertValue
 80807ea:	ea13 0f08 	tst.w	r3, r8
 80807ee:	bf02      	ittt	eq
 80807f0:	782b      	ldrbeq	r3, [r5, #0]
 80807f2:	f043 0304 	orreq.w	r3, r3, #4
 80807f6:	702b      	strbeq	r3, [r5, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80807f8:	7833      	ldrb	r3, [r6, #0]
 80807fa:	f3bf 8f5b 	dmb	ish
 80807fe:	07db      	lsls	r3, r3, #31
 8080800:	d409      	bmi.n	8080816 <_Z16takeMeasurementsv+0x1c2>
 8080802:	4842      	ldr	r0, [pc, #264]	; (808090c <_Z16takeMeasurementsv+0x2b8>)
 8080804:	f7ff fc57 	bl	80800b6 <__cxa_guard_acquire>
 8080808:	b128      	cbz	r0, 8080816 <_Z16takeMeasurementsv+0x1c2>
 808080a:	f000 fe59 	bl	80814c0 <HAL_Pin_Map>
 808080e:	6020      	str	r0, [r4, #0]
 8080810:	483e      	ldr	r0, [pc, #248]	; (808090c <_Z16takeMeasurementsv+0x2b8>)
 8080812:	f7ff fc55 	bl	80800c0 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8080816:	6823      	ldr	r3, [r4, #0]
 8080818:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 808081c:	f8d3 8010 	ldr.w	r8, [r3, #16]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8080820:	7833      	ldrb	r3, [r6, #0]
 8080822:	f3bf 8f5b 	dmb	ish
 8080826:	07d8      	lsls	r0, r3, #31
 8080828:	d409      	bmi.n	808083e <_Z16takeMeasurementsv+0x1ea>
 808082a:	4838      	ldr	r0, [pc, #224]	; (808090c <_Z16takeMeasurementsv+0x2b8>)
 808082c:	f7ff fc43 	bl	80800b6 <__cxa_guard_acquire>
 8080830:	b128      	cbz	r0, 808083e <_Z16takeMeasurementsv+0x1ea>
 8080832:	f000 fe45 	bl	80814c0 <HAL_Pin_Map>
 8080836:	6020      	str	r0, [r4, #0]
 8080838:	4834      	ldr	r0, [pc, #208]	; (808090c <_Z16takeMeasurementsv+0x2b8>)
 808083a:	f7ff fc41 	bl	80800c0 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 808083e:	6823      	ldr	r3, [r4, #0]
 8080840:	f8b3 3314 	ldrh.w	r3, [r3, #788]	; 0x314
    if (!pinReadFast(pump1CalledPin)) alertValue = alertValue | 0b00001000;     // Set the value for alertValue
 8080844:	ea13 0f08 	tst.w	r3, r8
 8080848:	bf02      	ittt	eq
 808084a:	782b      	ldrbeq	r3, [r5, #0]
 808084c:	f043 0308 	orreq.w	r3, r3, #8
 8080850:	702b      	strbeq	r3, [r5, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8080852:	7833      	ldrb	r3, [r6, #0]
 8080854:	f3bf 8f5b 	dmb	ish
 8080858:	07d9      	lsls	r1, r3, #31
 808085a:	d409      	bmi.n	8080870 <_Z16takeMeasurementsv+0x21c>
 808085c:	482b      	ldr	r0, [pc, #172]	; (808090c <_Z16takeMeasurementsv+0x2b8>)
 808085e:	f7ff fc2a 	bl	80800b6 <__cxa_guard_acquire>
 8080862:	b128      	cbz	r0, 8080870 <_Z16takeMeasurementsv+0x21c>
 8080864:	f000 fe2c 	bl	80814c0 <HAL_Pin_Map>
 8080868:	6020      	str	r0, [r4, #0]
 808086a:	4828      	ldr	r0, [pc, #160]	; (808090c <_Z16takeMeasurementsv+0x2b8>)
 808086c:	f7ff fc28 	bl	80800c0 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8080870:	6823      	ldr	r3, [r4, #0]
 8080872:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8080876:	f8d3 8010 	ldr.w	r8, [r3, #16]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 808087a:	7833      	ldrb	r3, [r6, #0]
 808087c:	f3bf 8f5b 	dmb	ish
 8080880:	07da      	lsls	r2, r3, #31
 8080882:	d409      	bmi.n	8080898 <_Z16takeMeasurementsv+0x244>
 8080884:	4821      	ldr	r0, [pc, #132]	; (808090c <_Z16takeMeasurementsv+0x2b8>)
 8080886:	f7ff fc16 	bl	80800b6 <__cxa_guard_acquire>
 808088a:	b128      	cbz	r0, 8080898 <_Z16takeMeasurementsv+0x244>
 808088c:	f000 fe18 	bl	80814c0 <HAL_Pin_Map>
 8080890:	6020      	str	r0, [r4, #0]
 8080892:	481e      	ldr	r0, [pc, #120]	; (808090c <_Z16takeMeasurementsv+0x2b8>)
 8080894:	f7ff fc14 	bl	80800c0 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8080898:	6823      	ldr	r3, [r4, #0]
 808089a:	7839      	ldrb	r1, [r7, #0]
 808089c:	f8b3 318c 	ldrh.w	r3, [r3, #396]	; 0x18c
  if (!pinReadFast(pump2CalledPin)) {
 80808a0:	ea13 0f08 	tst.w	r3, r8
 80808a4:	d138      	bne.n	8080918 <_Z16takeMeasurementsv+0x2c4>
    alertValue = alertValue | 0b00010000;     // Set the value for alertValue
 80808a6:	782b      	ldrb	r3, [r5, #0]
    if (controlRegister ^ 0b00000010) {                                        // This is a new pumping session
 80808a8:	2902      	cmp	r1, #2
    alertValue = alertValue | 0b00010000;     // Set the value for alertValue
 80808aa:	f043 0310 	orr.w	r3, r3, #16
 80808ae:	702b      	strb	r3, [r5, #0]
    if (controlRegister ^ 0b00000010) {                                        // This is a new pumping session
 80808b0:	d011      	beq.n	80808d6 <_Z16takeMeasurementsv+0x282>
      pumpingStart = Time.now();
 80808b2:	f002 f978 	bl	8082ba6 <_ZN9TimeClass3nowEv>
 80808b6:	4680      	mov	r8, r0
 80808b8:	4b16      	ldr	r3, [pc, #88]	; (8080914 <_Z16takeMeasurementsv+0x2c0>)
 80808ba:	4601      	mov	r1, r0
 80808bc:	ea4f 79e0 	mov.w	r9, r0, asr #31
      FRAMwrite32(CURRENTCOUNTSTIME,pumpingStart);                              // Write to FRAM in case of a reset
 80808c0:	200e      	movs	r0, #14
      pumpingStart = Time.now();
 80808c2:	e9c3 8900 	strd	r8, r9, [r3]
      FRAMwrite32(CURRENTCOUNTSTIME,pumpingStart);                              // Write to FRAM in case of a reset
 80808c6:	f7ff fd51 	bl	808036c <_Z11FRAMwrite32im>
      FRAMwrite8(CONTROLREGISTER,controlRegister | 0b00000010);                 // Turn on the pumping bit
 80808ca:	7839      	ldrb	r1, [r7, #0]
 80808cc:	2007      	movs	r0, #7
 80808ce:	f041 0102 	orr.w	r1, r1, #2
 80808d2:	f7ff fcdb 	bl	808028c <_Z10FRAMwrite8jh>
  if(getLostPower()) alertValue = alertValue | 0b10000000;                      // Set the value for alertValue
 80808d6:	f7ff fe8f 	bl	80805f8 <_Z12getLostPowerv>
 80808da:	b118      	cbz	r0, 80808e4 <_Z16takeMeasurementsv+0x290>
 80808dc:	782b      	ldrb	r3, [r5, #0]
 80808de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80808e2:	702b      	strb	r3, [r5, #0]
  if (alertValue != lastAlertValue) return 1;
 80808e4:	7828      	ldrb	r0, [r5, #0]
}
 80808e6:	ebb0 000a 	subs.w	r0, r0, sl
 80808ea:	bf18      	it	ne
 80808ec:	2001      	movne	r0, #1
 80808ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80808f2:	bf00      	nop
 80808f4:	200000a1 	.word	0x200000a1
 80808f8:	200000a4 	.word	0x200000a4
 80808fc:	200000b0 	.word	0x200000b0
 8080900:	200000f4 	.word	0x200000f4
 8080904:	200000a8 	.word	0x200000a8
 8080908:	200000dc 	.word	0x200000dc
 808090c:	20000088 	.word	0x20000088
 8080910:	2000008c 	.word	0x2000008c
 8080914:	200000c8 	.word	0x200000c8
  else if (controlRegister & 0b00000010) {                                      // If the pump is off but the pumping flag is set
 8080918:	078b      	lsls	r3, r1, #30
 808091a:	d5dc      	bpl.n	80808d6 <_Z16takeMeasurementsv+0x282>
    FRAMwrite8(CONTROLREGISTER,controlRegister ^ 0b00000010);                   // It is on and I want to turn the pumping bit off with an xor
 808091c:	f081 0102 	eor.w	r1, r1, #2
 8080920:	2007      	movs	r0, #7
 8080922:	f7ff fcb3 	bl	808028c <_Z10FRAMwrite8jh>
    time_t pumpingStop = Time.now();
 8080926:	f002 f93e 	bl	8082ba6 <_ZN9TimeClass3nowEv>
    dailyPumpingMins += difftime(pumpingStop,pumpingStart)/60;                 // Add to the total for the day
 808092a:	4b11      	ldr	r3, [pc, #68]	; (8080970 <_Z16takeMeasurementsv+0x31c>)
 808092c:	17c1      	asrs	r1, r0, #31
 808092e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080932:	f003 fc37 	bl	80841a4 <difftime>
 8080936:	4c0f      	ldr	r4, [pc, #60]	; (8080974 <_Z16takeMeasurementsv+0x320>)
 8080938:	4680      	mov	r8, r0
 808093a:	6820      	ldr	r0, [r4, #0]
 808093c:	4689      	mov	r9, r1
 808093e:	f002 fdbf 	bl	80834c0 <__aeabi_i2d>
 8080942:	2200      	movs	r2, #0
 8080944:	4606      	mov	r6, r0
 8080946:	460f      	mov	r7, r1
 8080948:	4640      	mov	r0, r8
 808094a:	4649      	mov	r1, r9
 808094c:	4b0a      	ldr	r3, [pc, #40]	; (8080978 <_Z16takeMeasurementsv+0x324>)
 808094e:	f002 ff4b 	bl	80837e8 <__aeabi_ddiv>
 8080952:	4602      	mov	r2, r0
 8080954:	460b      	mov	r3, r1
 8080956:	4630      	mov	r0, r6
 8080958:	4639      	mov	r1, r7
 808095a:	f002 fc65 	bl	8083228 <__adddf3>
 808095e:	f003 f82b 	bl	80839b8 <__aeabi_d2iz>
 8080962:	4601      	mov	r1, r0
 8080964:	6020      	str	r0, [r4, #0]
    FRAMwrite16(DAILYPUMPMINUTES,dailyPumpingMins);                             // Store it in FRAM in case of a reset
 8080966:	2014      	movs	r0, #20
 8080968:	f7ff fcaa 	bl	80802c0 <_Z11FRAMwrite16ji>
 808096c:	e7b3      	b.n	80808d6 <_Z16takeMeasurementsv+0x282>
 808096e:	bf00      	nop
 8080970:	200000c8 	.word	0x200000c8
 8080974:	200000b4 	.word	0x200000b4
 8080978:	404e0000 	.word	0x404e0000

0808097c <_Z20meterParticlePublishv>:

bool meterParticlePublish(void)
{
 808097c:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808097e:	f000 fd7f 	bl	8081480 <HAL_Timer_Get_Milli_Seconds>
  if(millis() - lastPublish >= publishFrequency) return 1;
 8080982:	4b05      	ldr	r3, [pc, #20]	; (8080998 <_Z20meterParticlePublishv+0x1c>)
 8080984:	681b      	ldr	r3, [r3, #0]
 8080986:	1ac0      	subs	r0, r0, r3
 8080988:	4b04      	ldr	r3, [pc, #16]	; (808099c <_Z20meterParticlePublishv+0x20>)
 808098a:	681b      	ldr	r3, [r3, #0]
  else return 0;
}
 808098c:	4298      	cmp	r0, r3
 808098e:	bf34      	ite	cc
 8080990:	2000      	movcc	r0, #0
 8080992:	2001      	movcs	r0, #1
 8080994:	bd08      	pop	{r3, pc}
 8080996:	bf00      	nop
 8080998:	200000bc 	.word	0x200000bc
 808099c:	20000008 	.word	0x20000008

080809a0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>:
    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
 80809a0:	b508      	push	{r3, lr}
    waitUntil(meterParticlePublish);
 80809a2:	f7ff ffeb 	bl	808097c <_Z20meterParticlePublishv>
        while (_while() && !_condition()) {
 80809a6:	b910      	cbnz	r0, 80809ae <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0+0xe>
            spark_process();
 80809a8:	f000 ff32 	bl	8081810 <spark_process>
        while (_while() && !_condition()) {
 80809ac:	e7f9      	b.n	80809a2 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0+0x2>
    }
 80809ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80809b2:	f7ff bfe3 	b.w	808097c <_Z20meterParticlePublishv>
	...

080809b8 <_Z15meterSampleRatev>:

bool meterSampleRate(void)
{
 80809b8:	b508      	push	{r3, lr}
 80809ba:	f000 fd61 	bl	8081480 <HAL_Timer_Get_Milli_Seconds>
  if(millis() - lastSample >= sampleFrequency) return 1;
 80809be:	4b05      	ldr	r3, [pc, #20]	; (80809d4 <_Z15meterSampleRatev+0x1c>)
 80809c0:	681b      	ldr	r3, [r3, #0]
 80809c2:	1ac0      	subs	r0, r0, r3
 80809c4:	4b04      	ldr	r3, [pc, #16]	; (80809d8 <_Z15meterSampleRatev+0x20>)
 80809c6:	681b      	ldr	r3, [r3, #0]
  else return 0;
}
 80809c8:	4298      	cmp	r0, r3
 80809ca:	bf34      	ite	cc
 80809cc:	2000      	movcc	r0, #0
 80809ce:	2001      	movcs	r0, #1
 80809d0:	bd08      	pop	{r3, pc}
 80809d2:	bf00      	nop
 80809d4:	200000c0 	.word	0x200000c0
 80809d8:	20000014 	.word	0x20000014

080809dc <_Z14fullModemResetv>:
 80809dc:	2300      	movs	r3, #0

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
 80809de:	b530      	push	{r4, r5, lr}
 80809e0:	b085      	sub	sp, #20

	Particle.disconnect(); 	                                         // Disconnect from the cloud
 80809e2:	a801      	add	r0, sp, #4
 80809e4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80809e8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80809ec:	f001 f9d4 	bl	8081d98 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
 80809f0:	f000 fd46 	bl	8081480 <HAL_Timer_Get_Milli_Seconds>
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 80809f4:	f643 2597 	movw	r5, #14999	; 0x3a97
 80809f8:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80809fa:	f000 ff19 	bl	8081830 <spark_cloud_flag_connected>
 80809fe:	b140      	cbz	r0, 8080a12 <_Z14fullModemResetv+0x36>
 8080a00:	f000 fd3e 	bl	8081480 <HAL_Timer_Get_Milli_Seconds>
 8080a04:	1b00      	subs	r0, r0, r4
 8080a06:	42a8      	cmp	r0, r5
 8080a08:	d803      	bhi.n	8080a12 <_Z14fullModemResetv+0x36>
		delay(100);
 8080a0a:	2064      	movs	r0, #100	; 0x64
 8080a0c:	f000 fff0 	bl	80819f0 <delay>
	while(Particle.connected() && millis() - startTime < 15000) {
 8080a10:	e7f3      	b.n	80809fa <_Z14fullModemResetv+0x1e>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 8080a12:	2100      	movs	r1, #0
 8080a14:	f247 5230 	movw	r2, #30000	; 0x7530
 8080a18:	4608      	mov	r0, r1
 8080a1a:	4b08      	ldr	r3, [pc, #32]	; (8080a3c <_Z14fullModemResetv+0x60>)
 8080a1c:	f000 fcf8 	bl	8081410 <cellular_command>
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
 8080a20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080a24:	f000 ffe4 	bl	80819f0 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
 8080a28:	4b05      	ldr	r3, [pc, #20]	; (8080a40 <_Z14fullModemResetv+0x64>)
 8080a2a:	220a      	movs	r2, #10
 8080a2c:	2101      	movs	r1, #1
 8080a2e:	681b      	ldr	r3, [r3, #0]
 8080a30:	a801      	add	r0, sp, #4
 8080a32:	f001 ffc9 	bl	80829c8 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
 8080a36:	b005      	add	sp, #20
 8080a38:	bd30      	pop	{r4, r5, pc}
 8080a3a:	bf00      	nop
 8080a3c:	08084538 	.word	0x08084538
 8080a40:	2000009c 	.word	0x2000009c

08080a44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080a44:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8080a46:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 8080a48:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 8080a4a:	b17c      	cbz	r4, 8080a6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 8080a4c:	6863      	ldr	r3, [r4, #4]
 8080a4e:	3b01      	subs	r3, #1
 8080a50:	6063      	str	r3, [r4, #4]
 8080a52:	b95b      	cbnz	r3, 8080a6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 8080a54:	6823      	ldr	r3, [r4, #0]
 8080a56:	4620      	mov	r0, r4
 8080a58:	689b      	ldr	r3, [r3, #8]
 8080a5a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080a5c:	68a3      	ldr	r3, [r4, #8]
 8080a5e:	3b01      	subs	r3, #1
 8080a60:	60a3      	str	r3, [r4, #8]
 8080a62:	b91b      	cbnz	r3, 8080a6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8080a64:	6823      	ldr	r3, [r4, #0]
 8080a66:	4620      	mov	r0, r4
 8080a68:	68db      	ldr	r3, [r3, #12]
 8080a6a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 8080a6c:	4628      	mov	r0, r5
 8080a6e:	bd38      	pop	{r3, r4, r5, pc}

08080a70 <_Z9ResetFRAMv>:


void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
 8080a70:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    byte tempControlReg = FRAMread8(CONTROLREGISTER);
 8080a74:	2007      	movs	r0, #7
 8080a76:	f7ff fc03 	bl	8080280 <_Z9FRAMread8j>
    Particle.publish("FRAM","Resetting in progress", PRIVATE);
 8080a7a:	2300      	movs	r3, #0
 8080a7c:	f88d 3000 	strb.w	r3, [sp]
 8080a80:	4b20      	ldr	r3, [pc, #128]	; (8080b04 <_Z9ResetFRAMv+0x94>)
 8080a82:	4a21      	ldr	r2, [pc, #132]	; (8080b08 <_Z9ResetFRAMv+0x98>)
 8080a84:	781b      	ldrb	r3, [r3, #0]
 8080a86:	4921      	ldr	r1, [pc, #132]	; (8080b0c <_Z9ResetFRAMv+0x9c>)
    byte tempControlReg = FRAMread8(CONTROLREGISTER);
 8080a88:	4605      	mov	r5, r0
    Particle.publish("FRAM","Resetting in progress", PRIVATE);
 8080a8a:	a802      	add	r0, sp, #8
 8080a8c:	f7ff fbe6 	bl	808025c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080a90:	a803      	add	r0, sp, #12
 8080a92:	f7ff ffd7 	bl	8080a44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (unsigned long i=8; i < 32768; i++) {  // Start at 8 to not overwrite permanent settings
 8080a96:	2408      	movs	r4, #8
        FRAMwrite8(i,0x0);
        if (i==8192) Serial.println(F("25% done"));
        if (i==16384) Serial.println(F("50% done"));
        if (i==(24576)) Serial.println(F("75% done"));
        if (i==32767) Serial.println(F("Done"));
 8080a98:	4e1d      	ldr	r6, [pc, #116]	; (8080b10 <_Z9ResetFRAMv+0xa0>)
        if (i==(24576)) Serial.println(F("75% done"));
 8080a9a:	4f1e      	ldr	r7, [pc, #120]	; (8080b14 <_Z9ResetFRAMv+0xa4>)
        if (i==16384) Serial.println(F("50% done"));
 8080a9c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8080b1c <_Z9ResetFRAMv+0xac>
        FRAMwrite8(i,0x0);
 8080aa0:	2100      	movs	r1, #0
 8080aa2:	4620      	mov	r0, r4
 8080aa4:	f7ff fbf2 	bl	808028c <_Z10FRAMwrite8jh>
        if (i==8192) Serial.println(F("25% done"));
 8080aa8:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8080aac:	d113      	bne.n	8080ad6 <_Z9ResetFRAMv+0x66>
 8080aae:	f002 f98b 	bl	8082dc8 <_Z16_fetch_usbserialv>
 8080ab2:	4919      	ldr	r1, [pc, #100]	; (8080b18 <_Z9ResetFRAMv+0xa8>)
        if (i==32767) Serial.println(F("Done"));
 8080ab4:	f001 fe58 	bl	8082768 <_ZN5Print7printlnEPKc>
    for (unsigned long i=8; i < 32768; i++) {  // Start at 8 to not overwrite permanent settings
 8080ab8:	3401      	adds	r4, #1
 8080aba:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8080abe:	d1ef      	bne.n	8080aa0 <_Z9ResetFRAMv+0x30>
    }
    FRAMwrite8(CONTROLREGISTER,tempControlReg);   // Preserce the control register values
 8080ac0:	4629      	mov	r1, r5
 8080ac2:	2007      	movs	r0, #7
 8080ac4:	f7ff fbe2 	bl	808028c <_Z10FRAMwrite8jh>
    FRAMwrite8(VERSIONADDR,VERSIONNUMBER);  // Reset version to match #define value for sketch
 8080ac8:	2109      	movs	r1, #9
 8080aca:	2000      	movs	r0, #0
 8080acc:	f7ff fbde 	bl	808028c <_Z10FRAMwrite8jh>
}
 8080ad0:	b004      	add	sp, #16
 8080ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (i==16384) Serial.println(F("50% done"));
 8080ad6:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8080ada:	d103      	bne.n	8080ae4 <_Z9ResetFRAMv+0x74>
 8080adc:	f002 f974 	bl	8082dc8 <_Z16_fetch_usbserialv>
 8080ae0:	4641      	mov	r1, r8
 8080ae2:	e7e7      	b.n	8080ab4 <_Z9ResetFRAMv+0x44>
        if (i==(24576)) Serial.println(F("75% done"));
 8080ae4:	f5b4 4fc0 	cmp.w	r4, #24576	; 0x6000
 8080ae8:	d103      	bne.n	8080af2 <_Z9ResetFRAMv+0x82>
 8080aea:	f002 f96d 	bl	8082dc8 <_Z16_fetch_usbserialv>
 8080aee:	4639      	mov	r1, r7
 8080af0:	e7e0      	b.n	8080ab4 <_Z9ResetFRAMv+0x44>
        if (i==32767) Serial.println(F("Done"));
 8080af2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8080af6:	429c      	cmp	r4, r3
 8080af8:	d1de      	bne.n	8080ab8 <_Z9ResetFRAMv+0x48>
 8080afa:	f002 f965 	bl	8082dc8 <_Z16_fetch_usbserialv>
 8080afe:	4631      	mov	r1, r6
 8080b00:	e7d8      	b.n	8080ab4 <_Z9ResetFRAMv+0x44>
 8080b02:	bf00      	nop
 8080b04:	200000a0 	.word	0x200000a0
 8080b08:	08084545 	.word	0x08084545
 8080b0c:	080845c5 	.word	0x080845c5
 8080b10:	08084576 	.word	0x08084576
 8080b14:	0808456d 	.word	0x0808456d
 8080b18:	0808455b 	.word	0x0808455b
 8080b1c:	08084564 	.word	0x08084564

08080b20 <setup>:
{
 8080b20:	b530      	push	{r4, r5, lr}
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 8080b22:	2400      	movs	r4, #0
 8080b24:	b0a9      	sub	sp, #164	; 0xa4
  pinMode(boosterNoFlow1Pin,INPUT);                               // Voltage Sensor Interrupt pin
 8080b26:	2100      	movs	r1, #0
 8080b28:	2019      	movs	r0, #25
 8080b2a:	f002 fab1 	bl	8083090 <pinMode>
  pinMode(boosterNoFlow2Pin,INPUT);                               // Voltage Sensor Interrupt pin
 8080b2e:	2100      	movs	r1, #0
 8080b30:	201a      	movs	r0, #26
 8080b32:	f002 faad 	bl	8083090 <pinMode>
  pinMode(storageTankLowPin,INPUT);                               // Voltage Sensor Interrupt pin
 8080b36:	2100      	movs	r1, #0
 8080b38:	201b      	movs	r0, #27
 8080b3a:	f002 faa9 	bl	8083090 <pinMode>
  pinMode(pump1CalledPin,INPUT);                                  // Voltage Sensor Interrupt pin
 8080b3e:	2100      	movs	r1, #0
 8080b40:	201c      	movs	r0, #28
 8080b42:	f002 faa5 	bl	8083090 <pinMode>
  pinMode(pump2CalledPin,INPUT);                                  // Voltage Sensor Interrupt pin
 8080b46:	2100      	movs	r1, #0
 8080b48:	200e      	movs	r0, #14
 8080b4a:	f002 faa1 	bl	8083090 <pinMode>
  pinMode(wakeUpPin,INPUT);                                       // This pin is active HIGH
 8080b4e:	2100      	movs	r1, #0
 8080b50:	2011      	movs	r0, #17
 8080b52:	f002 fa9d 	bl	8083090 <pinMode>
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input
 8080b56:	2100      	movs	r1, #0
 8080b58:	2005      	movs	r0, #5
 8080b5a:	f002 fa99 	bl	8083090 <pinMode>
  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
 8080b5e:	2101      	movs	r1, #1
 8080b60:	2007      	movs	r0, #7
 8080b62:	f002 fa95 	bl	8083090 <pinMode>
  pinMode(tmp36Shutdwn,OUTPUT);                                   // Supports shutting down the TMP-36 to save juice
 8080b66:	2101      	movs	r1, #1
 8080b68:	201d      	movs	r0, #29
 8080b6a:	f002 fa91 	bl	8083090 <pinMode>
  digitalWrite(tmp36Shutdwn, HIGH);                               // Turns on the temp sensor
 8080b6e:	2101      	movs	r1, #1
 8080b70:	201d      	movs	r0, #29
 8080b72:	f002 fa9e 	bl	80830b2 <digitalWrite>
  pinMode(donePin,OUTPUT);                                        // Allows us to pet the watchdog
 8080b76:	2101      	movs	r1, #1
 8080b78:	2006      	movs	r0, #6
 8080b7a:	f002 fa89 	bl	8083090 <pinMode>
  watchdogISR();                                                  // Pet the watchdog
 8080b7e:	f7ff fb4d 	bl	808021c <_Z11watchdogISRv>
  pinMode(hardResetPin,OUTPUT);                                   // For a hard reset active HIGH
 8080b82:	2101      	movs	r1, #1
 8080b84:	2004      	movs	r0, #4
 8080b86:	f002 fa83 	bl	8083090 <pinMode>
    static String deviceID(void) { return spark_deviceID(); }
 8080b8a:	a804      	add	r0, sp, #16
 8080b8c:	f000 fe58 	bl	8081840 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
 8080b90:	2300      	movs	r3, #0
 8080b92:	227d      	movs	r2, #125	; 0x7d
 8080b94:	a908      	add	r1, sp, #32
 8080b96:	a804      	add	r0, sp, #16
 8080b98:	f001 feac 	bl	80828f4 <_ZNK6String8getBytesEPhjj>
 8080b9c:	4623      	mov	r3, r4
 8080b9e:	4622      	mov	r2, r4
 8080ba0:	4968      	ldr	r1, [pc, #416]	; (8080d44 <setup+0x224>)
 8080ba2:	e9cd 4400 	strd	r4, r4, [sp]
 8080ba6:	a808      	add	r0, sp, #32
 8080ba8:	f000 fe5a 	bl	8081860 <spark_subscribe>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 8080bac:	4623      	mov	r3, r4
 8080bae:	2202      	movs	r2, #2
 8080bb0:	4965      	ldr	r1, [pc, #404]	; (8080d48 <setup+0x228>)
 8080bb2:	4866      	ldr	r0, [pc, #408]	; (8080d4c <setup+0x22c>)
 8080bb4:	f000 fe1c 	bl	80817f0 <spark_variable>
 8080bb8:	4623      	mov	r3, r4
 8080bba:	2204      	movs	r2, #4
 8080bbc:	4964      	ldr	r1, [pc, #400]	; (8080d50 <setup+0x230>)
 8080bbe:	4865      	ldr	r0, [pc, #404]	; (8080d54 <setup+0x234>)
 8080bc0:	f000 fe16 	bl	80817f0 <spark_variable>
 8080bc4:	4623      	mov	r3, r4
 8080bc6:	2202      	movs	r2, #2
 8080bc8:	4963      	ldr	r1, [pc, #396]	; (8080d58 <setup+0x238>)
 8080bca:	4864      	ldr	r0, [pc, #400]	; (8080d5c <setup+0x23c>)
 8080bcc:	f000 fe10 	bl	80817f0 <spark_variable>
 8080bd0:	4623      	mov	r3, r4
 8080bd2:	2202      	movs	r2, #2
 8080bd4:	4962      	ldr	r1, [pc, #392]	; (8080d60 <setup+0x240>)
 8080bd6:	4863      	ldr	r0, [pc, #396]	; (8080d64 <setup+0x244>)
 8080bd8:	f000 fe0a 	bl	80817f0 <spark_variable>
 8080bdc:	4962      	ldr	r1, [pc, #392]	; (8080d68 <setup+0x248>)
 8080bde:	4623      	mov	r3, r4
 8080be0:	2204      	movs	r2, #4
 8080be2:	6809      	ldr	r1, [r1, #0]
 8080be4:	4861      	ldr	r0, [pc, #388]	; (8080d6c <setup+0x24c>)
 8080be6:	f000 fe03 	bl	80817f0 <spark_variable>
 8080bea:	4623      	mov	r3, r4
 8080bec:	2202      	movs	r2, #2
 8080bee:	4960      	ldr	r1, [pc, #384]	; (8080d70 <setup+0x250>)
 8080bf0:	4860      	ldr	r0, [pc, #384]	; (8080d74 <setup+0x254>)
 8080bf2:	f000 fdfd 	bl	80817f0 <spark_variable>
 8080bf6:	4623      	mov	r3, r4
 8080bf8:	2202      	movs	r2, #2
 8080bfa:	495f      	ldr	r1, [pc, #380]	; (8080d78 <setup+0x258>)
 8080bfc:	485f      	ldr	r0, [pc, #380]	; (8080d7c <setup+0x25c>)
 8080bfe:	f000 fdf7 	bl	80817f0 <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 8080c02:	4a5f      	ldr	r2, [pc, #380]	; (8080d80 <setup+0x260>)
 8080c04:	495f      	ldr	r1, [pc, #380]	; (8080d84 <setup+0x264>)
 8080c06:	4860      	ldr	r0, [pc, #384]	; (8080d88 <setup+0x268>)
 8080c08:	f001 f8b5 	bl	8081d76 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080c0c:	4a5f      	ldr	r2, [pc, #380]	; (8080d8c <setup+0x26c>)
 8080c0e:	4960      	ldr	r1, [pc, #384]	; (8080d90 <setup+0x270>)
 8080c10:	485d      	ldr	r0, [pc, #372]	; (8080d88 <setup+0x268>)
 8080c12:	f001 f8b0 	bl	8081d76 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080c16:	4a5f      	ldr	r2, [pc, #380]	; (8080d94 <setup+0x274>)
 8080c18:	495f      	ldr	r1, [pc, #380]	; (8080d98 <setup+0x278>)
 8080c1a:	485b      	ldr	r0, [pc, #364]	; (8080d88 <setup+0x268>)
 8080c1c:	f001 f8ab 	bl	8081d76 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080c20:	4a5e      	ldr	r2, [pc, #376]	; (8080d9c <setup+0x27c>)
 8080c22:	495f      	ldr	r1, [pc, #380]	; (8080da0 <setup+0x280>)
 8080c24:	4858      	ldr	r0, [pc, #352]	; (8080d88 <setup+0x268>)
 8080c26:	f001 f8a6 	bl	8081d76 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080c2a:	4a5e      	ldr	r2, [pc, #376]	; (8080da4 <setup+0x284>)
 8080c2c:	495e      	ldr	r1, [pc, #376]	; (8080da8 <setup+0x288>)
 8080c2e:	4856      	ldr	r0, [pc, #344]	; (8080d88 <setup+0x268>)
 8080c30:	f001 f8a1 	bl	8081d76 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080c34:	4a5d      	ldr	r2, [pc, #372]	; (8080dac <setup+0x28c>)
 8080c36:	495e      	ldr	r1, [pc, #376]	; (8080db0 <setup+0x290>)
 8080c38:	4853      	ldr	r0, [pc, #332]	; (8080d88 <setup+0x268>)
 8080c3a:	f001 f89c 	bl	8081d76 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  if (!fram.begin()) {                                                  // You can stick the new i2c addr in here, e.g. begin(0x51);
 8080c3e:	2150      	movs	r1, #80	; 0x50
 8080c40:	485c      	ldr	r0, [pc, #368]	; (8080db4 <setup+0x294>)
 8080c42:	f7ff fac1 	bl	80801c8 <_ZN17Adafruit_FRAM_I2C5beginEh>
 8080c46:	4d5c      	ldr	r5, [pc, #368]	; (8080db8 <setup+0x298>)
 8080c48:	2800      	cmp	r0, #0
 8080c4a:	d168      	bne.n	8080d1e <setup+0x1fe>
 8080c4c:	f000 fc18 	bl	8081480 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 8080c50:	4b5a      	ldr	r3, [pc, #360]	; (8080dbc <setup+0x29c>)
 8080c52:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;   // Resetting did not fix the issue
 8080c54:	2301      	movs	r3, #1
 8080c56:	702b      	strb	r3, [r5, #0]
  resetCount = FRAMread8(RESETCOUNT);                                   // Retrive system recount data from FRAM
 8080c58:	2002      	movs	r0, #2
 8080c5a:	f7ff fb11 	bl	8080280 <_Z9FRAMread8j>
        int reason = RESET_REASON_NONE;
 8080c5e:	2200      	movs	r2, #0
 8080c60:	4c3d      	ldr	r4, [pc, #244]	; (8080d58 <setup+0x238>)
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080c62:	4611      	mov	r1, r2
 8080c64:	6020      	str	r0, [r4, #0]
 8080c66:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
 8080c68:	9203      	str	r2, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080c6a:	f000 fbf1 	bl	8081450 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8080c6e:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET)                   // Check to see if we are starting from a pin reset
 8080c70:	2b14      	cmp	r3, #20
 8080c72:	d106      	bne.n	8080c82 <setup+0x162>
    resetCount++;
 8080c74:	6821      	ldr	r1, [r4, #0]
    FRAMwrite8(RESETCOUNT,static_cast<uint8_t>(resetCount));            // If so, store incremented number - watchdog must have done This
 8080c76:	2002      	movs	r0, #2
    resetCount++;
 8080c78:	3101      	adds	r1, #1
 8080c7a:	6021      	str	r1, [r4, #0]
    FRAMwrite8(RESETCOUNT,static_cast<uint8_t>(resetCount));            // If so, store incremented number - watchdog must have done This
 8080c7c:	b2c9      	uxtb	r1, r1
 8080c7e:	f7ff fb05 	bl	808028c <_Z10FRAMwrite8jh>
  if (resetCount >=6) {                                                 // If we get to resetCount 4, we are resetting without entering the main loop
 8080c82:	6823      	ldr	r3, [r4, #0]
 8080c84:	2b05      	cmp	r3, #5
 8080c86:	dd05      	ble.n	8080c94 <setup+0x174>
    FRAMwrite8(RESETCOUNT,4);                                            // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
 8080c88:	2104      	movs	r1, #4
 8080c8a:	2002      	movs	r0, #2
 8080c8c:	f7ff fafe 	bl	808028c <_Z10FRAMwrite8jh>
    fullModemReset();                                                   // This will reset the modem and the device will reboot
 8080c90:	f7ff fea4 	bl	80809dc <_Z14fullModemResetv>
  int8_t tempTimeZoneOffset = FRAMread8(TIMEZONE);                  // Load Time zone data from FRAM
 8080c94:	2004      	movs	r0, #4
 8080c96:	f7ff faf3 	bl	8080280 <_Z9FRAMread8j>
  if (tempTimeZoneOffset > -12 && tempTimeZoneOffset < 12) Time.zone((float)tempTimeZoneOffset);
 8080c9a:	f100 030b 	add.w	r3, r0, #11
 8080c9e:	b2db      	uxtb	r3, r3
 8080ca0:	2b16      	cmp	r3, #22
 8080ca2:	d84d      	bhi.n	8080d40 <setup+0x220>
 8080ca4:	b240      	sxtb	r0, r0
 8080ca6:	f002 ffd9 	bl	8083c5c <__aeabi_i2f>
  else Time.zone(-5);                                               // Defaults to EST if invalid value in FRAM
 8080caa:	f001 ff09 	bl	8082ac0 <_ZN9TimeClass4zoneEf>
  controlRegister = FRAMread8(CONTROLREGISTER);                         // Read the Control Register for system modes so they stick even after reset
 8080cae:	2007      	movs	r0, #7
 8080cb0:	f7ff fae6 	bl	8080280 <_Z9FRAMread8j>
 8080cb4:	4c42      	ldr	r4, [pc, #264]	; (8080dc0 <setup+0x2a0>)
  verboseMode = (0b00001000 & controlRegister);                         // verboseMode
 8080cb6:	4b43      	ldr	r3, [pc, #268]	; (8080dc4 <setup+0x2a4>)
  controlRegister = FRAMread8(CONTROLREGISTER);                         // Read the Control Register for system modes so they stick even after reset
 8080cb8:	7020      	strb	r0, [r4, #0]
  verboseMode = (0b00001000 & controlRegister);                         // verboseMode
 8080cba:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8080cbe:	7018      	strb	r0, [r3, #0]
  dailyPumpingMins = FRAMread16(DAILYPUMPMINUTES);                      // Reload so we don't loose track
 8080cc0:	2014      	movs	r0, #20
 8080cc2:	f7ff faeb 	bl	808029c <_Z10FRAMread16j>
 8080cc6:	4b2c      	ldr	r3, [pc, #176]	; (8080d78 <setup+0x258>)
 8080cc8:	6018      	str	r0, [r3, #0]
  if (controlRegister & 0b00000010) {                                   // This means we reset while pumpting
 8080cca:	7823      	ldrb	r3, [r4, #0]
 8080ccc:	079b      	lsls	r3, r3, #30
 8080cce:	d506      	bpl.n	8080cde <setup+0x1be>
    pumpingStart = FRAMread32(CURRENTCOUNTSTIME);                       // Reload the pumping start time
 8080cd0:	200e      	movs	r0, #14
 8080cd2:	f7ff fb27 	bl	8080324 <_Z10FRAMread32m>
 8080cd6:	2200      	movs	r2, #0
 8080cd8:	4b3b      	ldr	r3, [pc, #236]	; (8080dc8 <setup+0x2a8>)
 8080cda:	6018      	str	r0, [r3, #0]
 8080cdc:	605a      	str	r2, [r3, #4]
  stateOfCharge = int(batteryMonitor.getSoC());                         // Percentage of full charge
 8080cde:	483b      	ldr	r0, [pc, #236]	; (8080dcc <setup+0x2ac>)
 8080ce0:	f001 fb3e 	bl	8082360 <_ZN9FuelGauge6getSoCEv>
 8080ce4:	f003 f9d4 	bl	8084090 <__aeabi_f2iz>
 8080ce8:	4b21      	ldr	r3, [pc, #132]	; (8080d70 <setup+0x250>)
 8080cea:	6018      	str	r0, [r3, #0]
  if (stateOfCharge > lowBattLimit) connectToParticle();                // If not low battery, we can connect
 8080cec:	4b38      	ldr	r3, [pc, #224]	; (8080dd0 <setup+0x2b0>)
 8080cee:	681b      	ldr	r3, [r3, #0]
 8080cf0:	4298      	cmp	r0, r3
 8080cf2:	dd01      	ble.n	8080cf8 <setup+0x1d8>
 8080cf4:	f7ff fbd4 	bl	80804a0 <_Z17connectToParticlev>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);   // The watchdog timer will signal us and we have to respond
 8080cf8:	2300      	movs	r3, #0
 8080cfa:	2201      	movs	r2, #1
 8080cfc:	4935      	ldr	r1, [pc, #212]	; (8080dd4 <setup+0x2b4>)
 8080cfe:	9300      	str	r3, [sp, #0]
 8080d00:	2011      	movs	r0, #17
 8080d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8080d06:	f001 fbff 	bl	8082508 <_Z15attachInterrupttPFvvE13InterruptModeah>
  if (state != ERROR_STATE) state = IDLE_STATE;                         // IDLE unless error from above code
 8080d0a:	782b      	ldrb	r3, [r5, #0]
  String deviceID = System.deviceID();                                // Multiple Electrons share the same hook - keeps things straight
 8080d0c:	a804      	add	r0, sp, #16
  if (state != ERROR_STATE) state = IDLE_STATE;                         // IDLE unless error from above code
 8080d0e:	2b01      	cmp	r3, #1
 8080d10:	bf1c      	itt	ne
 8080d12:	2302      	movne	r3, #2
 8080d14:	702b      	strbne	r3, [r5, #0]
  String deviceID = System.deviceID();                                // Multiple Electrons share the same hook - keeps things straight
 8080d16:	f001 fd64 	bl	80827e2 <_ZN6StringD1Ev>
}
 8080d1a:	b029      	add	sp, #164	; 0xa4
 8080d1c:	bd30      	pop	{r4, r5, pc}
  else if (FRAMread8(VERSIONADDR) != VERSIONNUMBER) {                   // Check to see if the memory map in the sketch matches the data on the chip
 8080d1e:	4620      	mov	r0, r4
 8080d20:	f7ff faae 	bl	8080280 <_Z9FRAMread8j>
 8080d24:	2809      	cmp	r0, #9
 8080d26:	d097      	beq.n	8080c58 <setup+0x138>
    ResetFRAM();                                                        // Reset the FRAM to correct the issue
 8080d28:	f7ff fea2 	bl	8080a70 <_Z9ResetFRAMv>
    if (FRAMread8(VERSIONADDR) != VERSIONNUMBER) {
 8080d2c:	4620      	mov	r0, r4
 8080d2e:	f7ff faa7 	bl	8080280 <_Z9FRAMread8j>
 8080d32:	2809      	cmp	r0, #9
 8080d34:	d18a      	bne.n	8080c4c <setup+0x12c>
      FRAMwrite8(CONTROLREGISTER,0);                                    // Need to reset so not in low power or low battery mode
 8080d36:	4621      	mov	r1, r4
 8080d38:	2007      	movs	r0, #7
 8080d3a:	f7ff faa7 	bl	808028c <_Z10FRAMwrite8jh>
 8080d3e:	e78b      	b.n	8080c58 <setup+0x138>
  else Time.zone(-5);                                               // Defaults to EST if invalid value in FRAM
 8080d40:	4825      	ldr	r0, [pc, #148]	; (8080dd8 <setup+0x2b8>)
 8080d42:	e7b2      	b.n	8080caa <setup+0x18a>
 8080d44:	0808116d 	.word	0x0808116d
 8080d48:	200000a4 	.word	0x200000a4
 8080d4c:	0808457b 	.word	0x0808457b
 8080d50:	40024000 	.word	0x40024000
 8080d54:	08084582 	.word	0x08084582
 8080d58:	200000d0 	.word	0x200000d0
 8080d5c:	08084589 	.word	0x08084589
 8080d60:	200000e8 	.word	0x200000e8
 8080d64:	08084594 	.word	0x08084594
 8080d68:	2000000c 	.word	0x2000000c
 8080d6c:	080845a0 	.word	0x080845a0
 8080d70:	200000dc 	.word	0x200000dc
 8080d74:	080845a8 	.word	0x080845a8
 8080d78:	200000b4 	.word	0x200000b4
 8080d7c:	080845b3 	.word	0x080845b3
 8080d80:	080845bf 	.word	0x080845bf
 8080d84:	08080ddd 	.word	0x08080ddd
 8080d88:	08081d4b 	.word	0x08081d4b
 8080d8c:	080845ca 	.word	0x080845ca
 8080d90:	080802e9 	.word	0x080802e9
 8080d94:	080845d7 	.word	0x080845d7
 8080d98:	08080241 	.word	0x08080241
 8080d9c:	080845e2 	.word	0x080845e2
 8080da0:	08080201 	.word	0x08080201
 8080da4:	080845eb 	.word	0x080845eb
 8080da8:	08081219 	.word	0x08081219
 8080dac:	080845f8 	.word	0x080845f8
 8080db0:	080812cd 	.word	0x080812cd
 8080db4:	200000b9 	.word	0x200000b9
 8080db8:	200000d8 	.word	0x200000d8
 8080dbc:	200000d4 	.word	0x200000d4
 8080dc0:	200000b0 	.word	0x200000b0
 8080dc4:	200000ec 	.word	0x200000ec
 8080dc8:	200000c8 	.word	0x200000c8
 8080dcc:	200000a8 	.word	0x200000a8
 8080dd0:	20000000 	.word	0x20000000
 8080dd4:	0808021d 	.word	0x0808021d
 8080dd8:	c0a00000 	.word	0xc0a00000

08080ddc <_Z9resetFRAM6String>:
{
 8080ddc:	b508      	push	{r3, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8080dde:	4904      	ldr	r1, [pc, #16]	; (8080df0 <_Z9resetFRAM6String+0x14>)
 8080de0:	f001 fd76 	bl	80828d0 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080de4:	b110      	cbz	r0, 8080dec <_Z9resetFRAM6String+0x10>
    ResetFRAM();
 8080de6:	f7ff fe43 	bl	8080a70 <_Z9ResetFRAMv>
    return 1;
 8080dea:	2001      	movs	r0, #1
}
 8080dec:	bd08      	pop	{r3, pc}
 8080dee:	bf00      	nop
 8080df0:	0808451d 	.word	0x0808451d

08080df4 <_Z12resolveAlertv>:
  char data[128] = "";
 8080df4:	2100      	movs	r1, #0
{
 8080df6:	b510      	push	{r4, lr}
 8080df8:	b0a4      	sub	sp, #144	; 0x90
  char data[128] = "";
 8080dfa:	227c      	movs	r2, #124	; 0x7c
 8080dfc:	a805      	add	r0, sp, #20
 8080dfe:	9104      	str	r1, [sp, #16]
 8080e00:	f003 f9e5 	bl	80841ce <memset>
  if (alertValue & 0b00000001) strcat(data,"Booster No Flow 1 - ");
 8080e04:	4b1e      	ldr	r3, [pc, #120]	; (8080e80 <_Z12resolveAlertv+0x8c>)
 8080e06:	781c      	ldrb	r4, [r3, #0]
 8080e08:	07e2      	lsls	r2, r4, #31
 8080e0a:	d503      	bpl.n	8080e14 <_Z12resolveAlertv+0x20>
 8080e0c:	491d      	ldr	r1, [pc, #116]	; (8080e84 <_Z12resolveAlertv+0x90>)
 8080e0e:	a804      	add	r0, sp, #16
 8080e10:	f003 fa0a 	bl	8084228 <strcat>
  if (alertValue & 0b00000010) strcat(data,"Booster No Flow 2 - ");
 8080e14:	07a3      	lsls	r3, r4, #30
 8080e16:	d503      	bpl.n	8080e20 <_Z12resolveAlertv+0x2c>
 8080e18:	491b      	ldr	r1, [pc, #108]	; (8080e88 <_Z12resolveAlertv+0x94>)
 8080e1a:	a804      	add	r0, sp, #16
 8080e1c:	f003 fa04 	bl	8084228 <strcat>
  if (alertValue & 0b00000100) strcat(data,"Storage Tank Low - ");
 8080e20:	0760      	lsls	r0, r4, #29
 8080e22:	d503      	bpl.n	8080e2c <_Z12resolveAlertv+0x38>
 8080e24:	4919      	ldr	r1, [pc, #100]	; (8080e8c <_Z12resolveAlertv+0x98>)
 8080e26:	a804      	add	r0, sp, #16
 8080e28:	f003 f9fe 	bl	8084228 <strcat>
  if (alertValue & 0b00001000) strcat(data,"Pump 1 Called - ");
 8080e2c:	0721      	lsls	r1, r4, #28
 8080e2e:	d503      	bpl.n	8080e38 <_Z12resolveAlertv+0x44>
 8080e30:	4917      	ldr	r1, [pc, #92]	; (8080e90 <_Z12resolveAlertv+0x9c>)
 8080e32:	a804      	add	r0, sp, #16
 8080e34:	f003 f9f8 	bl	8084228 <strcat>
  if (alertValue & 0b00010000) strcat(data,"Pump 2 Called - ");
 8080e38:	06e2      	lsls	r2, r4, #27
 8080e3a:	d503      	bpl.n	8080e44 <_Z12resolveAlertv+0x50>
 8080e3c:	4915      	ldr	r1, [pc, #84]	; (8080e94 <_Z12resolveAlertv+0xa0>)
 8080e3e:	a804      	add	r0, sp, #16
 8080e40:	f003 f9f2 	bl	8084228 <strcat>
  if (alertValue & 0b10000000) strcat(data,"Lost Power");
 8080e44:	0623      	lsls	r3, r4, #24
 8080e46:	d503      	bpl.n	8080e50 <_Z12resolveAlertv+0x5c>
 8080e48:	4913      	ldr	r1, [pc, #76]	; (8080e98 <_Z12resolveAlertv+0xa4>)
 8080e4a:	a804      	add	r0, sp, #16
 8080e4c:	f003 f9ec 	bl	8084228 <strcat>
        return waitConditionWhile(_condition, []{ return true; });
 8080e50:	f7ff fda6 	bl	80809a0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
  if(verboseMode) Particle.publish("Alerts",data,PRIVATE);
 8080e54:	4b11      	ldr	r3, [pc, #68]	; (8080e9c <_Z12resolveAlertv+0xa8>)
 8080e56:	781b      	ldrb	r3, [r3, #0]
 8080e58:	b163      	cbz	r3, 8080e74 <_Z12resolveAlertv+0x80>
 8080e5a:	2300      	movs	r3, #0
 8080e5c:	f88d 3000 	strb.w	r3, [sp]
 8080e60:	4b0f      	ldr	r3, [pc, #60]	; (8080ea0 <_Z12resolveAlertv+0xac>)
 8080e62:	a802      	add	r0, sp, #8
 8080e64:	781b      	ldrb	r3, [r3, #0]
 8080e66:	490f      	ldr	r1, [pc, #60]	; (8080ea4 <_Z12resolveAlertv+0xb0>)
 8080e68:	aa04      	add	r2, sp, #16
 8080e6a:	f7ff f9f7 	bl	808025c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 8080e6e:	a803      	add	r0, sp, #12
 8080e70:	f7ff fde8 	bl	8080a44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080e74:	f000 fb04 	bl	8081480 <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
 8080e78:	4b0b      	ldr	r3, [pc, #44]	; (8080ea8 <_Z12resolveAlertv+0xb4>)
 8080e7a:	6018      	str	r0, [r3, #0]
}
 8080e7c:	b024      	add	sp, #144	; 0x90
 8080e7e:	bd10      	pop	{r4, pc}
 8080e80:	200000a1 	.word	0x200000a1
 8080e84:	08084605 	.word	0x08084605
 8080e88:	0808461a 	.word	0x0808461a
 8080e8c:	0808462f 	.word	0x0808462f
 8080e90:	08084643 	.word	0x08084643
 8080e94:	08084654 	.word	0x08084654
 8080e98:	08084665 	.word	0x08084665
 8080e9c:	200000ec 	.word	0x200000ec
 8080ea0:	200000a0 	.word	0x200000a0
 8080ea4:	0808457b 	.word	0x0808457b
 8080ea8:	200000bc 	.word	0x200000bc

08080eac <_Z9sendEventv>:
{
 8080eac:	b500      	push	{lr}
  snprintf(data, sizeof(data), "{\"alertValue\":%i, \"pumpMins\":%i, \"battery\":%i, \"temp\":%i, \"resets\":%i}",alertValue, dailyPumpingMins, stateOfCharge, temperatureF,resetCount);
 8080eae:	4b14      	ldr	r3, [pc, #80]	; (8080f00 <_Z9sendEventv+0x54>)
{
 8080eb0:	b0c7      	sub	sp, #284	; 0x11c
  snprintf(data, sizeof(data), "{\"alertValue\":%i, \"pumpMins\":%i, \"battery\":%i, \"temp\":%i, \"resets\":%i}",alertValue, dailyPumpingMins, stateOfCharge, temperatureF,resetCount);
 8080eb2:	681b      	ldr	r3, [r3, #0]
 8080eb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8080eb8:	9303      	str	r3, [sp, #12]
 8080eba:	4b12      	ldr	r3, [pc, #72]	; (8080f04 <_Z9sendEventv+0x58>)
 8080ebc:	4a12      	ldr	r2, [pc, #72]	; (8080f08 <_Z9sendEventv+0x5c>)
 8080ebe:	681b      	ldr	r3, [r3, #0]
 8080ec0:	a806      	add	r0, sp, #24
 8080ec2:	9302      	str	r3, [sp, #8]
 8080ec4:	4b11      	ldr	r3, [pc, #68]	; (8080f0c <_Z9sendEventv+0x60>)
 8080ec6:	681b      	ldr	r3, [r3, #0]
 8080ec8:	9301      	str	r3, [sp, #4]
 8080eca:	4b11      	ldr	r3, [pc, #68]	; (8080f10 <_Z9sendEventv+0x64>)
 8080ecc:	681b      	ldr	r3, [r3, #0]
 8080ece:	9300      	str	r3, [sp, #0]
 8080ed0:	4b10      	ldr	r3, [pc, #64]	; (8080f14 <_Z9sendEventv+0x68>)
 8080ed2:	781b      	ldrb	r3, [r3, #0]
 8080ed4:	f000 fd6c 	bl	80819b0 <snprintf>
  Particle.publish("Monitoring_Hourly", data, PRIVATE);
 8080ed8:	2300      	movs	r3, #0
 8080eda:	f88d 3000 	strb.w	r3, [sp]
 8080ede:	4b0e      	ldr	r3, [pc, #56]	; (8080f18 <_Z9sendEventv+0x6c>)
 8080ee0:	aa06      	add	r2, sp, #24
 8080ee2:	781b      	ldrb	r3, [r3, #0]
 8080ee4:	490d      	ldr	r1, [pc, #52]	; (8080f1c <_Z9sendEventv+0x70>)
 8080ee6:	a804      	add	r0, sp, #16
 8080ee8:	f7ff f9b8 	bl	808025c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 8080eec:	a805      	add	r0, sp, #20
 8080eee:	f7ff fda9 	bl	8080a44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  dataInFlight = true; // set the data inflight flag
 8080ef2:	2201      	movs	r2, #1
 8080ef4:	4b0a      	ldr	r3, [pc, #40]	; (8080f20 <_Z9sendEventv+0x74>)
 8080ef6:	701a      	strb	r2, [r3, #0]
}
 8080ef8:	b047      	add	sp, #284	; 0x11c
 8080efa:	f85d fb04 	ldr.w	pc, [sp], #4
 8080efe:	bf00      	nop
 8080f00:	200000d0 	.word	0x200000d0
 8080f04:	200000e8 	.word	0x200000e8
 8080f08:	08084670 	.word	0x08084670
 8080f0c:	200000dc 	.word	0x200000dc
 8080f10:	200000b4 	.word	0x200000b4
 8080f14:	200000a1 	.word	0x200000a1
 8080f18:	200000a0 	.word	0x200000a0
 8080f1c:	080846b7 	.word	0x080846b7
 8080f20:	200000b8 	.word	0x200000b8

08080f24 <loop>:
{
 8080f24:	b530      	push	{r4, r5, lr}
  switch(state) {
 8080f26:	4c79      	ldr	r4, [pc, #484]	; (808110c <loop+0x1e8>)
{
 8080f28:	b085      	sub	sp, #20
 8080f2a:	7823      	ldrb	r3, [r4, #0]
 8080f2c:	3b01      	subs	r3, #1
 8080f2e:	2b04      	cmp	r3, #4
 8080f30:	d854      	bhi.n	8080fdc <loop+0xb8>
 8080f32:	e8df f003 	tbb	[pc, r3]
 8080f36:	03c2      	.short	0x03c2
 8080f38:	5535      	.short	0x5535
 8080f3a:	8f          	.byte	0x8f
 8080f3b:	00          	.byte	0x00
    waitUntil(meterSampleRate);
 8080f3c:	f7ff fd3c 	bl	80809b8 <_Z15meterSampleRatev>
        while (_while() && !_condition()) {
 8080f40:	b910      	cbnz	r0, 8080f48 <loop+0x24>
            spark_process();
 8080f42:	f000 fc65 	bl	8081810 <spark_process>
        while (_while() && !_condition()) {
 8080f46:	e7f9      	b.n	8080f3c <loop+0x18>
 8080f48:	f7ff fd36 	bl	80809b8 <_Z15meterSampleRatev>
    if(takeMeasurements()) state = REPORTING_STATE;
 8080f4c:	f7ff fb82 	bl	8080654 <_Z16takeMeasurementsv>
 8080f50:	b108      	cbz	r0, 8080f56 <loop+0x32>
 8080f52:	2304      	movs	r3, #4
 8080f54:	7023      	strb	r3, [r4, #0]
 8080f56:	f000 fa93 	bl	8081480 <HAL_Timer_Get_Milli_Seconds>
    lastSample = millis();
 8080f5a:	4b6d      	ldr	r3, [pc, #436]	; (8081110 <loop+0x1ec>)
 8080f5c:	6018      	str	r0, [r3, #0]
    if (Time.hour() != currentHourlyPeriod) {
 8080f5e:	f001 fe33 	bl	8082bc8 <_ZN9TimeClass4hourEv>
 8080f62:	4b6c      	ldr	r3, [pc, #432]	; (8081114 <loop+0x1f0>)
 8080f64:	781b      	ldrb	r3, [r3, #0]
 8080f66:	4298      	cmp	r0, r3
 8080f68:	d011      	beq.n	8080f8e <loop+0x6a>
      state = REPORTING_STATE;                                    // We want to report on the hour
 8080f6a:	2304      	movs	r3, #4
 8080f6c:	7023      	strb	r3, [r4, #0]
      if (Time.hour() == 0) {                                     // Check to see if it is midnight
 8080f6e:	f001 fe2b 	bl	8082bc8 <_ZN9TimeClass4hourEv>
 8080f72:	4605      	mov	r5, r0
 8080f74:	b958      	cbnz	r0, 8080f8e <loop+0x6a>
        dailyPumpingMins = 0;                                     // Reset each day.
 8080f76:	4b68      	ldr	r3, [pc, #416]	; (8081118 <loop+0x1f4>)
        FRAMwrite16(DAILYPUMPMINUTES,0);                          // And zero the value in FRAM
 8080f78:	4601      	mov	r1, r0
        dailyPumpingMins = 0;                                     // Reset each day.
 8080f7a:	6018      	str	r0, [r3, #0]
        FRAMwrite16(DAILYPUMPMINUTES,0);                          // And zero the value in FRAM
 8080f7c:	2014      	movs	r0, #20
 8080f7e:	f7ff f99f 	bl	80802c0 <_Z11FRAMwrite16ji>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080f82:	f000 fc55 	bl	8081830 <spark_cloud_flag_connected>
        if (!connected()) {
 8080f86:	b110      	cbz	r0, 8080f8e <loop+0x6a>
        return spark_sync_time(NULL);
 8080f88:	4628      	mov	r0, r5
 8080f8a:	f000 fc71 	bl	8081870 <spark_sync_time>
    if (stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE; // The battery is low - sleep
 8080f8e:	4b63      	ldr	r3, [pc, #396]	; (808111c <loop+0x1f8>)
 8080f90:	681a      	ldr	r2, [r3, #0]
 8080f92:	4b63      	ldr	r3, [pc, #396]	; (8081120 <loop+0x1fc>)
 8080f94:	681b      	ldr	r3, [r3, #0]
 8080f96:	429a      	cmp	r2, r3
 8080f98:	dc20      	bgt.n	8080fdc <loop+0xb8>
 8080f9a:	2303      	movs	r3, #3
        state = ERROR_STATE;
 8080f9c:	7023      	strb	r3, [r4, #0]
        break;
 8080f9e:	e01d      	b.n	8080fdc <loop+0xb8>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080fa0:	f000 fc46 	bl	8081830 <spark_cloud_flag_connected>
      if (Particle.connected()) {
 8080fa4:	b108      	cbz	r0, 8080faa <loop+0x86>
        disconnectFromParticle();                               // If connected, we need to disconned and power down the modem
 8080fa6:	f7ff faeb 	bl	8080580 <_Z22disconnectFromParticlev>
      ledState = false;
 8080faa:	2400      	movs	r4, #0
 8080fac:	4b5d      	ldr	r3, [pc, #372]	; (8081124 <loop+0x200>)
      digitalWrite(blueLED,LOW);                                // Turn off the LED
 8080fae:	4621      	mov	r1, r4
 8080fb0:	2007      	movs	r0, #7
      ledState = false;
 8080fb2:	701c      	strb	r4, [r3, #0]
      digitalWrite(blueLED,LOW);                                // Turn off the LED
 8080fb4:	f002 f87d 	bl	80830b2 <digitalWrite>
      digitalWrite(tmp36Shutdwn, LOW);                          // Turns off the temp sensor
 8080fb8:	4621      	mov	r1, r4
 8080fba:	201d      	movs	r0, #29
 8080fbc:	f002 f879 	bl	80830b2 <digitalWrite>
      watchdogISR();                                            // Pet the watchdog
 8080fc0:	f7ff f92c 	bl	808021c <_Z11watchdogISRv>
      int secondsToHour = (60*(60 - Time.minute()));            // Time till the top of the hour
 8080fc4:	f001 fe0c 	bl	8082be0 <_ZN9TimeClass6minuteEv>
      System.sleep(SLEEP_MODE_DEEP,secondsToHour);              // Very deep sleep till the next hour - then resets
 8080fc8:	223c      	movs	r2, #60	; 0x3c
 8080fca:	4b57      	ldr	r3, [pc, #348]	; (8081128 <loop+0x204>)
      int secondsToHour = (60*(60 - Time.minute()));            // Time till the top of the hour
 8080fcc:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
      System.sleep(SLEEP_MODE_DEEP,secondsToHour);              // Very deep sleep till the next hour - then resets
 8080fd0:	4342      	muls	r2, r0
 8080fd2:	2101      	movs	r1, #1
 8080fd4:	681b      	ldr	r3, [r3, #0]
 8080fd6:	a802      	add	r0, sp, #8
 8080fd8:	f001 fcf6 	bl	80829c8 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
 8080fdc:	b005      	add	sp, #20
 8080fde:	bd30      	pop	{r4, r5, pc}
    watchdogISR();                                    // Pet the watchdog once an hour
 8080fe0:	f7ff f91c 	bl	808021c <_Z11watchdogISRv>
    pettingEnabled = false;                           // see this reporint cycle through
 8080fe4:	2300      	movs	r3, #0
 8080fe6:	4d51      	ldr	r5, [pc, #324]	; (808112c <loop+0x208>)
 8080fe8:	702b      	strb	r3, [r5, #0]
 8080fea:	f000 fc21 	bl	8081830 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
 8080fee:	b940      	cbnz	r0, 8081002 <loop+0xde>
      if (!connectToParticle()) {
 8080ff0:	f7ff fa56 	bl	80804a0 <_Z17connectToParticlev>
 8080ff4:	b928      	cbnz	r0, 8081002 <loop+0xde>
 8080ff6:	f000 fa43 	bl	8081480 <HAL_Timer_Get_Milli_Seconds>
        resetTimeStamp = millis();
 8080ffa:	4b4d      	ldr	r3, [pc, #308]	; (8081130 <loop+0x20c>)
 8080ffc:	6018      	str	r0, [r3, #0]
        state = ERROR_STATE;
 8080ffe:	2301      	movs	r3, #1
 8081000:	e7cc      	b.n	8080f9c <loop+0x78>
    if (alertValue != 0) resolveAlert();
 8081002:	4b4c      	ldr	r3, [pc, #304]	; (8081134 <loop+0x210>)
 8081004:	781b      	ldrb	r3, [r3, #0]
 8081006:	b10b      	cbz	r3, 808100c <loop+0xe8>
 8081008:	f7ff fef4 	bl	8080df4 <_Z12resolveAlertv>
    sendEvent();
 808100c:	f7ff ff4e 	bl	8080eac <_Z9sendEventv>
 8081010:	f000 fa36 	bl	8081480 <HAL_Timer_Get_Milli_Seconds>
    webhookTimeStamp = millis();
 8081014:	4b48      	ldr	r3, [pc, #288]	; (8081138 <loop+0x214>)
 8081016:	6018      	str	r0, [r3, #0]
    currentHourlyPeriod = Time.hour();                // Change the time period since we have reported for this one
 8081018:	f001 fdd6 	bl	8082bc8 <_ZN9TimeClass4hourEv>
 808101c:	4b3d      	ldr	r3, [pc, #244]	; (8081114 <loop+0x1f0>)
 808101e:	7018      	strb	r0, [r3, #0]
        return waitConditionWhile(_condition, []{ return true; });
 8081020:	f7ff fcbe 	bl	80809a0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
    if (verboseMode) Particle.publish("State","Waiting for Response",PRIVATE);
 8081024:	4b45      	ldr	r3, [pc, #276]	; (808113c <loop+0x218>)
 8081026:	781b      	ldrb	r3, [r3, #0]
 8081028:	b163      	cbz	r3, 8081044 <loop+0x120>
 808102a:	2300      	movs	r3, #0
 808102c:	f88d 3000 	strb.w	r3, [sp]
 8081030:	4b43      	ldr	r3, [pc, #268]	; (8081140 <loop+0x21c>)
 8081032:	a802      	add	r0, sp, #8
 8081034:	781b      	ldrb	r3, [r3, #0]
 8081036:	4a43      	ldr	r2, [pc, #268]	; (8081144 <loop+0x220>)
 8081038:	4943      	ldr	r1, [pc, #268]	; (8081148 <loop+0x224>)
 808103a:	f7ff f90f 	bl	808025c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 808103e:	a803      	add	r0, sp, #12
 8081040:	f7ff fd00 	bl	8080a44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081044:	f000 fa1c 	bl	8081480 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 8081048:	4b40      	ldr	r3, [pc, #256]	; (808114c <loop+0x228>)
 808104a:	6018      	str	r0, [r3, #0]
    pettingEnabled = true;
 808104c:	2301      	movs	r3, #1
 808104e:	702b      	strb	r3, [r5, #0]
    state = RESP_WAIT_STATE;                            // Wait for Response
 8081050:	2305      	movs	r3, #5
 8081052:	e7a3      	b.n	8080f9c <loop+0x78>
    if (!dataInFlight)                                  // Response received
 8081054:	4b3e      	ldr	r3, [pc, #248]	; (8081150 <loop+0x22c>)
 8081056:	781d      	ldrb	r5, [r3, #0]
 8081058:	b9bd      	cbnz	r5, 808108a <loop+0x166>
      state = IDLE_STATE;
 808105a:	2302      	movs	r3, #2
 808105c:	7023      	strb	r3, [r4, #0]
 808105e:	f7ff fc9f 	bl	80809a0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
      if (verboseMode) Particle.publish("State","Idle",PRIVATE);
 8081062:	4b36      	ldr	r3, [pc, #216]	; (808113c <loop+0x218>)
 8081064:	781b      	ldrb	r3, [r3, #0]
 8081066:	b15b      	cbz	r3, 8081080 <loop+0x15c>
 8081068:	4b35      	ldr	r3, [pc, #212]	; (8081140 <loop+0x21c>)
 808106a:	f88d 5000 	strb.w	r5, [sp]
 808106e:	781b      	ldrb	r3, [r3, #0]
 8081070:	4a38      	ldr	r2, [pc, #224]	; (8081154 <loop+0x230>)
 8081072:	a802      	add	r0, sp, #8
 8081074:	4934      	ldr	r1, [pc, #208]	; (8081148 <loop+0x224>)
 8081076:	f7ff f8f1 	bl	808025c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 808107a:	a803      	add	r0, sp, #12
 808107c:	f7ff fce2 	bl	8080a44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081080:	f000 f9fe 	bl	8081480 <HAL_Timer_Get_Milli_Seconds>
      lastPublish = millis();
 8081084:	4b31      	ldr	r3, [pc, #196]	; (808114c <loop+0x228>)
 8081086:	6018      	str	r0, [r3, #0]
 8081088:	e7a8      	b.n	8080fdc <loop+0xb8>
 808108a:	f000 f9f9 	bl	8081480 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp >= webhookWait) {                                         // If it takes too long - will need to reset
 808108e:	4b2a      	ldr	r3, [pc, #168]	; (8081138 <loop+0x214>)
 8081090:	681b      	ldr	r3, [r3, #0]
 8081092:	1ac0      	subs	r0, r0, r3
 8081094:	4b30      	ldr	r3, [pc, #192]	; (8081158 <loop+0x234>)
 8081096:	681b      	ldr	r3, [r3, #0]
 8081098:	4298      	cmp	r0, r3
 808109a:	d39f      	bcc.n	8080fdc <loop+0xb8>
 808109c:	f000 f9f0 	bl	8081480 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 80810a0:	4b23      	ldr	r3, [pc, #140]	; (8081130 <loop+0x20c>)
 80810a2:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;  // Response timed out
 80810a4:	2301      	movs	r3, #1
 80810a6:	7023      	strb	r3, [r4, #0]
 80810a8:	f7ff fc7a 	bl	80809a0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
      Particle.publish("State","Response Timeout Error",PRIVATE);
 80810ac:	2300      	movs	r3, #0
 80810ae:	f88d 3000 	strb.w	r3, [sp]
 80810b2:	4b23      	ldr	r3, [pc, #140]	; (8081140 <loop+0x21c>)
 80810b4:	4a29      	ldr	r2, [pc, #164]	; (808115c <loop+0x238>)
 80810b6:	781b      	ldrb	r3, [r3, #0]
 80810b8:	e7db      	b.n	8081072 <loop+0x14e>
 80810ba:	f000 f9e1 	bl	8081480 <HAL_Timer_Get_Milli_Seconds>
      if (millis() - resetTimeStamp >= resetWait)
 80810be:	4b1c      	ldr	r3, [pc, #112]	; (8081130 <loop+0x20c>)
 80810c0:	681b      	ldr	r3, [r3, #0]
 80810c2:	1ac0      	subs	r0, r0, r3
 80810c4:	4b26      	ldr	r3, [pc, #152]	; (8081160 <loop+0x23c>)
 80810c6:	681b      	ldr	r3, [r3, #0]
 80810c8:	4298      	cmp	r0, r3
 80810ca:	d387      	bcc.n	8080fdc <loop+0xb8>
        val_(0) {
 80810cc:	2400      	movs	r4, #0
        Particle.publish("State","ERROR_STATE - Resetting",PRIVATE);
 80810ce:	4b1c      	ldr	r3, [pc, #112]	; (8081140 <loop+0x21c>)
 80810d0:	f88d 4000 	strb.w	r4, [sp]
 80810d4:	781b      	ldrb	r3, [r3, #0]
 80810d6:	4a23      	ldr	r2, [pc, #140]	; (8081164 <loop+0x240>)
 80810d8:	491b      	ldr	r1, [pc, #108]	; (8081148 <loop+0x224>)
 80810da:	a802      	add	r0, sp, #8
 80810dc:	f7ff f8be 	bl	808025c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 80810e0:	a803      	add	r0, sp, #12
 80810e2:	f7ff fcaf 	bl	8080a44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);                                          // Delay so publish can finish
 80810e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80810ea:	f000 fc81 	bl	80819f0 <delay>
        if (resetCount <= 3)  System.reset();                 // Today, only way out is reset
 80810ee:	4b1e      	ldr	r3, [pc, #120]	; (8081168 <loop+0x244>)
 80810f0:	681b      	ldr	r3, [r3, #0]
 80810f2:	2b03      	cmp	r3, #3
 80810f4:	dc02      	bgt.n	80810fc <loop+0x1d8>
 80810f6:	f001 fc64 	bl	80829c2 <_ZN11SystemClass5resetEv>
 80810fa:	e76f      	b.n	8080fdc <loop+0xb8>
          FRAMwrite8(RESETCOUNT,0);                           // Zero the ResetCount
 80810fc:	4621      	mov	r1, r4
 80810fe:	2002      	movs	r0, #2
 8081100:	f7ff f8c4 	bl	808028c <_Z10FRAMwrite8jh>
          fullModemReset();                                   // Full Modem reset and reboot
 8081104:	f7ff fc6a 	bl	80809dc <_Z14fullModemResetv>
}
 8081108:	e768      	b.n	8080fdc <loop+0xb8>
 808110a:	bf00      	nop
 808110c:	200000d8 	.word	0x200000d8
 8081110:	200000c0 	.word	0x200000c0
 8081114:	200000b1 	.word	0x200000b1
 8081118:	200000b4 	.word	0x200000b4
 808111c:	200000dc 	.word	0x200000dc
 8081120:	20000000 	.word	0x20000000
 8081124:	200000c4 	.word	0x200000c4
 8081128:	2000009c 	.word	0x2000009c
 808112c:	20000004 	.word	0x20000004
 8081130:	200000d4 	.word	0x200000d4
 8081134:	200000a1 	.word	0x200000a1
 8081138:	200000f0 	.word	0x200000f0
 808113c:	200000ec 	.word	0x200000ec
 8081140:	200000a0 	.word	0x200000a0
 8081144:	080846c9 	.word	0x080846c9
 8081148:	080846de 	.word	0x080846de
 808114c:	200000bc 	.word	0x200000bc
 8081150:	200000b8 	.word	0x200000b8
 8081154:	080846e4 	.word	0x080846e4
 8081158:	20000018 	.word	0x20000018
 808115c:	080846e9 	.word	0x080846e9
 8081160:	20000010 	.word	0x20000010
 8081164:	08084700 	.word	0x08084700
 8081168:	200000d0 	.word	0x200000d0

0808116c <_Z14UbidotsHandlerPKcS0_>:
{
 808116c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (!data) {                                            // First check to see if there is any data
 808116e:	460c      	mov	r4, r1
 8081170:	b999      	cbnz	r1, 808119a <_Z14UbidotsHandlerPKcS0_+0x2e>
 8081172:	f7ff fc15 	bl	80809a0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
    Particle.publish("Ubidots Hook", "No Data",PRIVATE);
 8081176:	4b20      	ldr	r3, [pc, #128]	; (80811f8 <_Z14UbidotsHandlerPKcS0_+0x8c>)
 8081178:	f88d 4000 	strb.w	r4, [sp]
 808117c:	781b      	ldrb	r3, [r3, #0]
 808117e:	4a1f      	ldr	r2, [pc, #124]	; (80811fc <_Z14UbidotsHandlerPKcS0_+0x90>)
 8081180:	491f      	ldr	r1, [pc, #124]	; (8081200 <_Z14UbidotsHandlerPKcS0_+0x94>)
 8081182:	a802      	add	r0, sp, #8
 8081184:	f7ff f86a 	bl	808025c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 8081188:	a803      	add	r0, sp, #12
 808118a:	f7ff fc5b 	bl	8080a44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808118e:	f000 f977 	bl	8081480 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 8081192:	4b1c      	ldr	r3, [pc, #112]	; (8081204 <_Z14UbidotsHandlerPKcS0_+0x98>)
 8081194:	6018      	str	r0, [r3, #0]
}
 8081196:	b004      	add	sp, #16
 8081198:	bd10      	pop	{r4, pc}
  int responseCode = atoi(data);                          // Response is only a single number thanks to Template
 808119a:	4608      	mov	r0, r1
 808119c:	f002 fffe 	bl	808419c <atoi>
  if ((responseCode == 200) || (responseCode == 201))
 80811a0:	38c8      	subs	r0, #200	; 0xc8
 80811a2:	2801      	cmp	r0, #1
 80811a4:	d819      	bhi.n	80811da <_Z14UbidotsHandlerPKcS0_+0x6e>
 80811a6:	f7ff fbfb 	bl	80809a0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
    if(verboseMode) Particle.publish("State","Response Received",PRIVATE);
 80811aa:	4b17      	ldr	r3, [pc, #92]	; (8081208 <_Z14UbidotsHandlerPKcS0_+0x9c>)
 80811ac:	781b      	ldrb	r3, [r3, #0]
 80811ae:	b163      	cbz	r3, 80811ca <_Z14UbidotsHandlerPKcS0_+0x5e>
 80811b0:	2300      	movs	r3, #0
 80811b2:	f88d 3000 	strb.w	r3, [sp]
 80811b6:	4b10      	ldr	r3, [pc, #64]	; (80811f8 <_Z14UbidotsHandlerPKcS0_+0x8c>)
 80811b8:	a802      	add	r0, sp, #8
 80811ba:	781b      	ldrb	r3, [r3, #0]
 80811bc:	4a13      	ldr	r2, [pc, #76]	; (808120c <_Z14UbidotsHandlerPKcS0_+0xa0>)
 80811be:	4914      	ldr	r1, [pc, #80]	; (8081210 <_Z14UbidotsHandlerPKcS0_+0xa4>)
 80811c0:	f7ff f84c 	bl	808025c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 80811c4:	a803      	add	r0, sp, #12
 80811c6:	f7ff fc3d 	bl	8080a44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80811ca:	f000 f959 	bl	8081480 <HAL_Timer_Get_Milli_Seconds>
    dataInFlight = false;                                 // Data has been received
 80811ce:	2200      	movs	r2, #0
    lastPublish = millis();
 80811d0:	4b0c      	ldr	r3, [pc, #48]	; (8081204 <_Z14UbidotsHandlerPKcS0_+0x98>)
 80811d2:	6018      	str	r0, [r3, #0]
    dataInFlight = false;                                 // Data has been received
 80811d4:	4b0f      	ldr	r3, [pc, #60]	; (8081214 <_Z14UbidotsHandlerPKcS0_+0xa8>)
 80811d6:	701a      	strb	r2, [r3, #0]
 80811d8:	e7dd      	b.n	8081196 <_Z14UbidotsHandlerPKcS0_+0x2a>
  else Particle.publish("Ubidots Hook", data, PRIVATE);             // Publish the response code
 80811da:	2300      	movs	r3, #0
 80811dc:	f88d 3000 	strb.w	r3, [sp]
 80811e0:	4b05      	ldr	r3, [pc, #20]	; (80811f8 <_Z14UbidotsHandlerPKcS0_+0x8c>)
 80811e2:	a802      	add	r0, sp, #8
 80811e4:	4622      	mov	r2, r4
 80811e6:	781b      	ldrb	r3, [r3, #0]
 80811e8:	4905      	ldr	r1, [pc, #20]	; (8081200 <_Z14UbidotsHandlerPKcS0_+0x94>)
 80811ea:	f7ff f837 	bl	808025c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 80811ee:	a803      	add	r0, sp, #12
 80811f0:	f7ff fc28 	bl	8080a44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80811f4:	e7cf      	b.n	8081196 <_Z14UbidotsHandlerPKcS0_+0x2a>
 80811f6:	bf00      	nop
 80811f8:	200000a0 	.word	0x200000a0
 80811fc:	08084718 	.word	0x08084718
 8081200:	08084720 	.word	0x08084720
 8081204:	200000bc 	.word	0x200000bc
 8081208:	200000ec 	.word	0x200000ec
 808120c:	0808472d 	.word	0x0808472d
 8081210:	080846de 	.word	0x080846de
 8081214:	200000b8 	.word	0x200000b8

08081218 <_Z14setVerboseMode6String>:
{
 8081218:	b530      	push	{r4, r5, lr}
 808121a:	4923      	ldr	r1, [pc, #140]	; (80812a8 <_Z14setVerboseMode6String+0x90>)
 808121c:	b085      	sub	sp, #20
 808121e:	4605      	mov	r5, r0
 8081220:	f001 fb56 	bl	80828d0 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8081224:	4604      	mov	r4, r0
 8081226:	b318      	cbz	r0, 8081270 <_Z14setVerboseMode6String+0x58>
    verboseMode = true;
 8081228:	2401      	movs	r4, #1
 808122a:	4b20      	ldr	r3, [pc, #128]	; (80812ac <_Z14setVerboseMode6String+0x94>)
    FRAMread8(CONTROLREGISTER);
 808122c:	2007      	movs	r0, #7
    verboseMode = true;
 808122e:	701c      	strb	r4, [r3, #0]
    FRAMread8(CONTROLREGISTER);
 8081230:	f7ff f826 	bl	8080280 <_Z9FRAMread8j>
    controlRegister = (0b00001000 | controlRegister);                    // Turn on verboseMode
 8081234:	4b1e      	ldr	r3, [pc, #120]	; (80812b0 <_Z14setVerboseMode6String+0x98>)
    FRAMwrite8(CONTROLREGISTER,controlRegister);                        // Write it to the register
 8081236:	2007      	movs	r0, #7
    controlRegister = (0b00001000 | controlRegister);                    // Turn on verboseMode
 8081238:	7819      	ldrb	r1, [r3, #0]
 808123a:	f041 0108 	orr.w	r1, r1, #8
 808123e:	7019      	strb	r1, [r3, #0]
    FRAMwrite8(CONTROLREGISTER,controlRegister);                        // Write it to the register
 8081240:	f7ff f824 	bl	808028c <_Z10FRAMwrite8jh>
 8081244:	f7ff fbac 	bl	80809a0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
 8081248:	2300      	movs	r3, #0
 808124a:	f88d 3000 	strb.w	r3, [sp]
 808124e:	4b19      	ldr	r3, [pc, #100]	; (80812b4 <_Z14setVerboseMode6String+0x9c>)
 8081250:	4a19      	ldr	r2, [pc, #100]	; (80812b8 <_Z14setVerboseMode6String+0xa0>)
 8081252:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
 8081254:	4919      	ldr	r1, [pc, #100]	; (80812bc <_Z14setVerboseMode6String+0xa4>)
 8081256:	a802      	add	r0, sp, #8
 8081258:	f7ff f800 	bl	808025c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 808125c:	a803      	add	r0, sp, #12
 808125e:	f7ff fbf1 	bl	8080a44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081262:	f000 f90d 	bl	8081480 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 8081266:	4b16      	ldr	r3, [pc, #88]	; (80812c0 <_Z14setVerboseMode6String+0xa8>)
 8081268:	6018      	str	r0, [r3, #0]
    return 1;
 808126a:	2001      	movs	r0, #1
}
 808126c:	b005      	add	sp, #20
 808126e:	bd30      	pop	{r4, r5, pc}
 8081270:	4628      	mov	r0, r5
 8081272:	4914      	ldr	r1, [pc, #80]	; (80812c4 <_Z14setVerboseMode6String+0xac>)
 8081274:	f001 fb2c 	bl	80828d0 <_ZNK6String6equalsEPKc>
  else if (command == "0")
 8081278:	2800      	cmp	r0, #0
 808127a:	d0f7      	beq.n	808126c <_Z14setVerboseMode6String+0x54>
    verboseMode = false;
 808127c:	4b0b      	ldr	r3, [pc, #44]	; (80812ac <_Z14setVerboseMode6String+0x94>)
    FRAMread8(CONTROLREGISTER);
 808127e:	2007      	movs	r0, #7
    verboseMode = false;
 8081280:	701c      	strb	r4, [r3, #0]
    FRAMread8(CONTROLREGISTER);
 8081282:	f7fe fffd 	bl	8080280 <_Z9FRAMread8j>
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 8081286:	4b0a      	ldr	r3, [pc, #40]	; (80812b0 <_Z14setVerboseMode6String+0x98>)
    FRAMwrite8(CONTROLREGISTER,controlRegister);                        // Write it to the register
 8081288:	2007      	movs	r0, #7
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 808128a:	7819      	ldrb	r1, [r3, #0]
 808128c:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 8081290:	7019      	strb	r1, [r3, #0]
    FRAMwrite8(CONTROLREGISTER,controlRegister);                        // Write it to the register
 8081292:	f7fe fffb 	bl	808028c <_Z10FRAMwrite8jh>
 8081296:	f7ff fb83 	bl	80809a0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
 808129a:	4b06      	ldr	r3, [pc, #24]	; (80812b4 <_Z14setVerboseMode6String+0x9c>)
 808129c:	f88d 4000 	strb.w	r4, [sp]
 80812a0:	781b      	ldrb	r3, [r3, #0]
 80812a2:	4a09      	ldr	r2, [pc, #36]	; (80812c8 <_Z14setVerboseMode6String+0xb0>)
 80812a4:	e7d6      	b.n	8081254 <_Z14setVerboseMode6String+0x3c>
 80812a6:	bf00      	nop
 80812a8:	0808451d 	.word	0x0808451d
 80812ac:	200000ec 	.word	0x200000ec
 80812b0:	200000b0 	.word	0x200000b0
 80812b4:	200000a0 	.word	0x200000a0
 80812b8:	0808473f 	.word	0x0808473f
 80812bc:	08084762 	.word	0x08084762
 80812c0:	200000bc 	.word	0x200000bc
 80812c4:	08084750 	.word	0x08084750
 80812c8:	08084752 	.word	0x08084752

080812cc <_Z11setTimeZone6String>:
{
 80812cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80812ce:	b0cb      	sub	sp, #300	; 0x12c
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 80812d0:	220a      	movs	r2, #10
 80812d2:	6800      	ldr	r0, [r0, #0]
 80812d4:	a903      	add	r1, sp, #12
 80812d6:	f003 f871 	bl	80843bc <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 80812da:	b2c5      	uxtb	r5, r0
 80812dc:	f105 030c 	add.w	r3, r5, #12
 80812e0:	b2db      	uxtb	r3, r3
 80812e2:	2b18      	cmp	r3, #24
 80812e4:	d844      	bhi.n	8081370 <_Z11setTimeZone6String+0xa4>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 80812e6:	b244      	sxtb	r4, r0
  Time.zone((float)tempTimeZoneOffset);
 80812e8:	4620      	mov	r0, r4
 80812ea:	f002 fcb7 	bl	8083c5c <__aeabi_i2f>
 80812ee:	f001 fbe7 	bl	8082ac0 <_ZN9TimeClass4zoneEf>
  FRAMwrite8(TIMEZONE,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
 80812f2:	4629      	mov	r1, r5
 80812f4:	2004      	movs	r0, #4
 80812f6:	f7fe ffc9 	bl	808028c <_Z10FRAMwrite8jh>
  t = Time.now();
 80812fa:	f001 fc54 	bl	8082ba6 <_ZN9TimeClass3nowEv>
 80812fe:	2600      	movs	r6, #0
 8081300:	4f1c      	ldr	r7, [pc, #112]	; (8081374 <_Z11setTimeZone6String+0xa8>)
 8081302:	17c1      	asrs	r1, r0, #31
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 8081304:	4623      	mov	r3, r4
  t = Time.now();
 8081306:	e9c7 0100 	strd	r0, r1, [r7]
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 808130a:	4a1b      	ldr	r2, [pc, #108]	; (8081378 <_Z11setTimeZone6String+0xac>)
 808130c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8081310:	4d1a      	ldr	r5, [pc, #104]	; (808137c <_Z11setTimeZone6String+0xb0>)
 8081312:	a80a      	add	r0, sp, #40	; 0x28
 8081314:	f000 fb4c 	bl	80819b0 <snprintf>
 8081318:	f7ff fb42 	bl	80809a0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
  Particle.publish("Time",data, PRIVATE);
 808131c:	f88d 6000 	strb.w	r6, [sp]
 8081320:	4917      	ldr	r1, [pc, #92]	; (8081380 <_Z11setTimeZone6String+0xb4>)
 8081322:	782b      	ldrb	r3, [r5, #0]
 8081324:	aa0a      	add	r2, sp, #40	; 0x28
 8081326:	a806      	add	r0, sp, #24
 8081328:	f7fe ff98 	bl	808025c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 808132c:	a807      	add	r0, sp, #28
 808132e:	f7ff fb89 	bl	8080a44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081332:	f000 f8a5 	bl	8081480 <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
 8081336:	4c13      	ldr	r4, [pc, #76]	; (8081384 <_Z11setTimeZone6String+0xb8>)
 8081338:	6020      	str	r0, [r4, #0]
 808133a:	f7ff fb31 	bl	80809a0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
  Particle.publish("Time",Time.timeStr(t), PRIVATE);
 808133e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8081342:	a806      	add	r0, sp, #24
 8081344:	f001 fbda 	bl	8082afc <_ZN9TimeClass7timeStrEx>
 8081348:	f88d 6000 	strb.w	r6, [sp]
 808134c:	782b      	ldrb	r3, [r5, #0]
 808134e:	9a06      	ldr	r2, [sp, #24]
 8081350:	490b      	ldr	r1, [pc, #44]	; (8081380 <_Z11setTimeZone6String+0xb4>)
 8081352:	a804      	add	r0, sp, #16
 8081354:	f7fe ff82 	bl	808025c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 8081358:	a805      	add	r0, sp, #20
 808135a:	f7ff fb73 	bl	8080a44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808135e:	a806      	add	r0, sp, #24
 8081360:	f001 fa3f 	bl	80827e2 <_ZN6StringD1Ev>
 8081364:	f000 f88c 	bl	8081480 <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
 8081368:	6020      	str	r0, [r4, #0]
  return 1;
 808136a:	2001      	movs	r0, #1
}
 808136c:	b04b      	add	sp, #300	; 0x12c
 808136e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 8081370:	2000      	movs	r0, #0
 8081372:	e7fb      	b.n	808136c <_Z11setTimeZone6String+0xa0>
 8081374:	200000e0 	.word	0x200000e0
 8081378:	08084767 	.word	0x08084767
 808137c:	200000a0 	.word	0x200000a0
 8081380:	0808477b 	.word	0x0808477b
 8081384:	200000bc 	.word	0x200000bc

08081388 <_GLOBAL__sub_I_fram>:
}
 8081388:	b538      	push	{r3, r4, r5, lr}
        val_(val) {
 808138a:	2400      	movs	r4, #0
 808138c:	2501      	movs	r5, #1
 808138e:	4b11      	ldr	r3, [pc, #68]	; (80813d4 <_GLOBAL__sub_I_fram+0x4c>)
Adafruit_FRAM_I2C fram = Adafruit_FRAM_I2C(); // Init the FRAM
 8081390:	4811      	ldr	r0, [pc, #68]	; (80813d8 <_GLOBAL__sub_I_fram+0x50>)
 8081392:	601c      	str	r4, [r3, #0]
 8081394:	4b11      	ldr	r3, [pc, #68]	; (80813dc <_GLOBAL__sub_I_fram+0x54>)
 8081396:	701d      	strb	r5, [r3, #0]
 8081398:	f7fe fe99 	bl	80800ce <_ZN17Adafruit_FRAM_I2CC1Ev>
              error_(SYSTEM_ERROR_NONE) {
 808139c:	4b10      	ldr	r3, [pc, #64]	; (80813e0 <_GLOBAL__sub_I_fram+0x58>)
    SleepResult() {}
 808139e:	4a11      	ldr	r2, [pc, #68]	; (80813e4 <_GLOBAL__sub_I_fram+0x5c>)
              error_(SYSTEM_ERROR_NONE) {
 80813a0:	601c      	str	r4, [r3, #0]
 80813a2:	809c      	strh	r4, [r3, #4]
    SleepResult() {}
 80813a4:	719c      	strb	r4, [r3, #6]
 80813a6:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 80813a8:	2002      	movs	r0, #2
 80813aa:	f000 f9cb 	bl	8081744 <set_system_mode>
SYSTEM_THREAD(ENABLED);         // Means my code will not be held up by Particle processes.
 80813ae:	4621      	mov	r1, r4
 80813b0:	4628      	mov	r0, r5
 80813b2:	f000 f9df 	bl	8081774 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
 80813b6:	4629      	mov	r1, r5
 80813b8:	2004      	movs	r0, #4
 80813ba:	f000 f841 	bl	8081440 <HAL_Feature_Set>
FuelGauge batteryMonitor;       // Prototype for the fuel gauge (included in Particle core library)
 80813be:	4621      	mov	r1, r4
 80813c0:	4809      	ldr	r0, [pc, #36]	; (80813e8 <_GLOBAL__sub_I_fram+0x60>)
 80813c2:	f000 ff7f 	bl	80822c4 <_ZN9FuelGaugeC1Eb>
PMIC power;                      //Initalize the PMIC class so you can call the Power Management functions below.
 80813c6:	4621      	mov	r1, r4
}
 80813c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
PMIC power;                      //Initalize the PMIC class so you can call the Power Management functions below.
 80813cc:	4807      	ldr	r0, [pc, #28]	; (80813ec <_GLOBAL__sub_I_fram+0x64>)
 80813ce:	f001 b98e 	b.w	80826ee <_ZN4PMICC1Eb>
 80813d2:	bf00      	nop
 80813d4:	2000009c 	.word	0x2000009c
 80813d8:	200000b9 	.word	0x200000b9
 80813dc:	200000a0 	.word	0x200000a0
 80813e0:	20000090 	.word	0x20000090
 80813e4:	ffff0000 	.word	0xffff0000
 80813e8:	200000a8 	.word	0x200000a8
 80813ec:	200000c5 	.word	0x200000c5

080813f0 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80813f0:	b508      	push	{r3, lr}
 80813f2:	4b02      	ldr	r3, [pc, #8]	; (80813fc <inet_gethostbyname+0xc>)
 80813f4:	681b      	ldr	r3, [r3, #0]
 80813f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80813f8:	9301      	str	r3, [sp, #4]
 80813fa:	bd08      	pop	{r3, pc}
 80813fc:	08060020 	.word	0x08060020

08081400 <cellular_signal>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
 8081400:	b508      	push	{r3, lr}
 8081402:	4b02      	ldr	r3, [pc, #8]	; (808140c <cellular_signal+0xc>)
 8081404:	681b      	ldr	r3, [r3, #0]
 8081406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081408:	9301      	str	r3, [sp, #4]
 808140a:	bd08      	pop	{r3, pc}
 808140c:	08060020 	.word	0x08060020

08081410 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 8081410:	b508      	push	{r3, lr}
 8081412:	4b02      	ldr	r3, [pc, #8]	; (808141c <cellular_command+0xc>)
 8081414:	681b      	ldr	r3, [r3, #0]
 8081416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081418:	9301      	str	r3, [sp, #4]
 808141a:	bd08      	pop	{r3, pc}
 808141c:	08060020 	.word	0x08060020

08081420 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 8081420:	b508      	push	{r3, lr}
 8081422:	4b02      	ldr	r3, [pc, #8]	; (808142c <os_mutex_recursive_create+0xc>)
 8081424:	681b      	ldr	r3, [r3, #0]
 8081426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081428:	9301      	str	r3, [sp, #4]
 808142a:	bd08      	pop	{r3, pc}
 808142c:	080401d0 	.word	0x080401d0

08081430 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 8081430:	b508      	push	{r3, lr}
 8081432:	4b02      	ldr	r3, [pc, #8]	; (808143c <os_mutex_recursive_destroy+0xc>)
 8081434:	681b      	ldr	r3, [r3, #0]
 8081436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081438:	9301      	str	r3, [sp, #4]
 808143a:	bd08      	pop	{r3, pc}
 808143c:	080401d0 	.word	0x080401d0

08081440 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 8081440:	b508      	push	{r3, lr}
 8081442:	4b02      	ldr	r3, [pc, #8]	; (808144c <HAL_Feature_Set+0xc>)
 8081444:	681b      	ldr	r3, [r3, #0]
 8081446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8081448:	9301      	str	r3, [sp, #4]
 808144a:	bd08      	pop	{r3, pc}
 808144c:	080401b8 	.word	0x080401b8

08081450 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 8081450:	b508      	push	{r3, lr}
 8081452:	4b02      	ldr	r3, [pc, #8]	; (808145c <HAL_Core_Get_Last_Reset_Info+0xc>)
 8081454:	681b      	ldr	r3, [r3, #0]
 8081456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8081458:	9301      	str	r3, [sp, #4]
 808145a:	bd08      	pop	{r3, pc}
 808145c:	080401b8 	.word	0x080401b8

08081460 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8081460:	b508      	push	{r3, lr}
 8081462:	4b02      	ldr	r3, [pc, #8]	; (808146c <HAL_RNG_GetRandomNumber+0xc>)
 8081464:	681b      	ldr	r3, [r3, #0]
 8081466:	685b      	ldr	r3, [r3, #4]
 8081468:	9301      	str	r3, [sp, #4]
 808146a:	bd08      	pop	{r3, pc}
 808146c:	0804019c 	.word	0x0804019c

08081470 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8081470:	b508      	push	{r3, lr}
 8081472:	4b02      	ldr	r3, [pc, #8]	; (808147c <HAL_Delay_Microseconds+0xc>)
 8081474:	681b      	ldr	r3, [r3, #0]
 8081476:	68db      	ldr	r3, [r3, #12]
 8081478:	9301      	str	r3, [sp, #4]
 808147a:	bd08      	pop	{r3, pc}
 808147c:	0804019c 	.word	0x0804019c

08081480 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8081480:	b508      	push	{r3, lr}
 8081482:	4b02      	ldr	r3, [pc, #8]	; (808148c <HAL_Timer_Get_Milli_Seconds+0xc>)
 8081484:	681b      	ldr	r3, [r3, #0]
 8081486:	695b      	ldr	r3, [r3, #20]
 8081488:	9301      	str	r3, [sp, #4]
 808148a:	bd08      	pop	{r3, pc}
 808148c:	0804019c 	.word	0x0804019c

08081490 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 8081490:	b508      	push	{r3, lr}
 8081492:	4b02      	ldr	r3, [pc, #8]	; (808149c <hal_rtc_time_is_valid+0xc>)
 8081494:	681b      	ldr	r3, [r3, #0]
 8081496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081498:	9301      	str	r3, [sp, #4]
 808149a:	bd08      	pop	{r3, pc}
 808149c:	0804019c 	.word	0x0804019c

080814a0 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 80814a0:	b508      	push	{r3, lr}
 80814a2:	4b02      	ldr	r3, [pc, #8]	; (80814ac <hal_timer_millis+0xc>)
 80814a4:	681b      	ldr	r3, [r3, #0]
 80814a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80814a8:	9301      	str	r3, [sp, #4]
 80814aa:	bd08      	pop	{r3, pc}
 80814ac:	0804019c 	.word	0x0804019c

080814b0 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80814b0:	b508      	push	{r3, lr}
 80814b2:	4b02      	ldr	r3, [pc, #8]	; (80814bc <hal_rtc_get_time+0xc>)
 80814b4:	681b      	ldr	r3, [r3, #0]
 80814b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80814b8:	9301      	str	r3, [sp, #4]
 80814ba:	bd08      	pop	{r3, pc}
 80814bc:	0804019c 	.word	0x0804019c

080814c0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80814c0:	b508      	push	{r3, lr}
 80814c2:	4b02      	ldr	r3, [pc, #8]	; (80814cc <HAL_Pin_Map+0xc>)
 80814c4:	681b      	ldr	r3, [r3, #0]
 80814c6:	681b      	ldr	r3, [r3, #0]
 80814c8:	9301      	str	r3, [sp, #4]
 80814ca:	bd08      	pop	{r3, pc}
 80814cc:	080401b0 	.word	0x080401b0

080814d0 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80814d0:	b508      	push	{r3, lr}
 80814d2:	4b02      	ldr	r3, [pc, #8]	; (80814dc <HAL_Validate_Pin_Function+0xc>)
 80814d4:	681b      	ldr	r3, [r3, #0]
 80814d6:	685b      	ldr	r3, [r3, #4]
 80814d8:	9301      	str	r3, [sp, #4]
 80814da:	bd08      	pop	{r3, pc}
 80814dc:	080401b0 	.word	0x080401b0

080814e0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80814e0:	b508      	push	{r3, lr}
 80814e2:	4b02      	ldr	r3, [pc, #8]	; (80814ec <HAL_Pin_Mode+0xc>)
 80814e4:	681b      	ldr	r3, [r3, #0]
 80814e6:	689b      	ldr	r3, [r3, #8]
 80814e8:	9301      	str	r3, [sp, #4]
 80814ea:	bd08      	pop	{r3, pc}
 80814ec:	080401b0 	.word	0x080401b0

080814f0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80814f0:	b508      	push	{r3, lr}
 80814f2:	4b02      	ldr	r3, [pc, #8]	; (80814fc <HAL_Get_Pin_Mode+0xc>)
 80814f4:	681b      	ldr	r3, [r3, #0]
 80814f6:	68db      	ldr	r3, [r3, #12]
 80814f8:	9301      	str	r3, [sp, #4]
 80814fa:	bd08      	pop	{r3, pc}
 80814fc:	080401b0 	.word	0x080401b0

08081500 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8081500:	b508      	push	{r3, lr}
 8081502:	4b02      	ldr	r3, [pc, #8]	; (808150c <HAL_GPIO_Write+0xc>)
 8081504:	681b      	ldr	r3, [r3, #0]
 8081506:	691b      	ldr	r3, [r3, #16]
 8081508:	9301      	str	r3, [sp, #4]
 808150a:	bd08      	pop	{r3, pc}
 808150c:	080401b0 	.word	0x080401b0

08081510 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 8081510:	b508      	push	{r3, lr}
 8081512:	4b02      	ldr	r3, [pc, #8]	; (808151c <HAL_Interrupts_Attach+0xc>)
 8081514:	681b      	ldr	r3, [r3, #0]
 8081516:	699b      	ldr	r3, [r3, #24]
 8081518:	9301      	str	r3, [sp, #4]
 808151a:	bd08      	pop	{r3, pc}
 808151c:	080401b0 	.word	0x080401b0

08081520 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 8081520:	b508      	push	{r3, lr}
 8081522:	4b02      	ldr	r3, [pc, #8]	; (808152c <HAL_Interrupts_Detach+0xc>)
 8081524:	681b      	ldr	r3, [r3, #0]
 8081526:	69db      	ldr	r3, [r3, #28]
 8081528:	9301      	str	r3, [sp, #4]
 808152a:	bd08      	pop	{r3, pc}
 808152c:	080401b0 	.word	0x080401b0

08081530 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 8081530:	b508      	push	{r3, lr}
 8081532:	4b02      	ldr	r3, [pc, #8]	; (808153c <hal_adc_read+0xc>)
 8081534:	681b      	ldr	r3, [r3, #0]
 8081536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081538:	9301      	str	r3, [sp, #4]
 808153a:	bd08      	pop	{r3, pc}
 808153c:	080401b0 	.word	0x080401b0

08081540 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 8081540:	b508      	push	{r3, lr}
 8081542:	4b02      	ldr	r3, [pc, #8]	; (808154c <hal_i2c_begin+0xc>)
 8081544:	681b      	ldr	r3, [r3, #0]
 8081546:	68db      	ldr	r3, [r3, #12]
 8081548:	9301      	str	r3, [sp, #4]
 808154a:	bd08      	pop	{r3, pc}
 808154c:	080401ac 	.word	0x080401ac

08081550 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 8081550:	b508      	push	{r3, lr}
 8081552:	4b02      	ldr	r3, [pc, #8]	; (808155c <hal_i2c_begin_transmission+0xc>)
 8081554:	681b      	ldr	r3, [r3, #0]
 8081556:	699b      	ldr	r3, [r3, #24]
 8081558:	9301      	str	r3, [sp, #4]
 808155a:	bd08      	pop	{r3, pc}
 808155c:	080401ac 	.word	0x080401ac

08081560 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 8081560:	b508      	push	{r3, lr}
 8081562:	4b02      	ldr	r3, [pc, #8]	; (808156c <hal_i2c_end_transmission+0xc>)
 8081564:	681b      	ldr	r3, [r3, #0]
 8081566:	69db      	ldr	r3, [r3, #28]
 8081568:	9301      	str	r3, [sp, #4]
 808156a:	bd08      	pop	{r3, pc}
 808156c:	080401ac 	.word	0x080401ac

08081570 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 8081570:	b508      	push	{r3, lr}
 8081572:	4b02      	ldr	r3, [pc, #8]	; (808157c <hal_i2c_write+0xc>)
 8081574:	681b      	ldr	r3, [r3, #0]
 8081576:	6a1b      	ldr	r3, [r3, #32]
 8081578:	9301      	str	r3, [sp, #4]
 808157a:	bd08      	pop	{r3, pc}
 808157c:	080401ac 	.word	0x080401ac

08081580 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 8081580:	b508      	push	{r3, lr}
 8081582:	4b02      	ldr	r3, [pc, #8]	; (808158c <hal_i2c_available+0xc>)
 8081584:	681b      	ldr	r3, [r3, #0]
 8081586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081588:	9301      	str	r3, [sp, #4]
 808158a:	bd08      	pop	{r3, pc}
 808158c:	080401ac 	.word	0x080401ac

08081590 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 8081590:	b508      	push	{r3, lr}
 8081592:	4b02      	ldr	r3, [pc, #8]	; (808159c <hal_i2c_read+0xc>)
 8081594:	681b      	ldr	r3, [r3, #0]
 8081596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081598:	9301      	str	r3, [sp, #4]
 808159a:	bd08      	pop	{r3, pc}
 808159c:	080401ac 	.word	0x080401ac

080815a0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80815a0:	b508      	push	{r3, lr}
 80815a2:	4b02      	ldr	r3, [pc, #8]	; (80815ac <hal_i2c_peek+0xc>)
 80815a4:	681b      	ldr	r3, [r3, #0]
 80815a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80815a8:	9301      	str	r3, [sp, #4]
 80815aa:	bd08      	pop	{r3, pc}
 80815ac:	080401ac 	.word	0x080401ac

080815b0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80815b0:	b508      	push	{r3, lr}
 80815b2:	4b02      	ldr	r3, [pc, #8]	; (80815bc <hal_i2c_flush+0xc>)
 80815b4:	681b      	ldr	r3, [r3, #0]
 80815b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80815b8:	9301      	str	r3, [sp, #4]
 80815ba:	bd08      	pop	{r3, pc}
 80815bc:	080401ac 	.word	0x080401ac

080815c0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80815c0:	b508      	push	{r3, lr}
 80815c2:	4b02      	ldr	r3, [pc, #8]	; (80815cc <hal_i2c_is_enabled+0xc>)
 80815c4:	681b      	ldr	r3, [r3, #0]
 80815c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80815c8:	9301      	str	r3, [sp, #4]
 80815ca:	bd08      	pop	{r3, pc}
 80815cc:	080401ac 	.word	0x080401ac

080815d0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80815d0:	b508      	push	{r3, lr}
 80815d2:	4b02      	ldr	r3, [pc, #8]	; (80815dc <hal_i2c_init+0xc>)
 80815d4:	681b      	ldr	r3, [r3, #0]
 80815d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80815d8:	9301      	str	r3, [sp, #4]
 80815da:	bd08      	pop	{r3, pc}
 80815dc:	080401ac 	.word	0x080401ac

080815e0 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
 80815e0:	b508      	push	{r3, lr}
 80815e2:	4b02      	ldr	r3, [pc, #8]	; (80815ec <hal_i2c_lock+0xc>)
 80815e4:	681b      	ldr	r3, [r3, #0]
 80815e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80815e8:	9301      	str	r3, [sp, #4]
 80815ea:	bd08      	pop	{r3, pc}
 80815ec:	080401ac 	.word	0x080401ac

080815f0 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
 80815f0:	b508      	push	{r3, lr}
 80815f2:	4b02      	ldr	r3, [pc, #8]	; (80815fc <hal_i2c_unlock+0xc>)
 80815f4:	681b      	ldr	r3, [r3, #0]
 80815f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80815f8:	9301      	str	r3, [sp, #4]
 80815fa:	bd08      	pop	{r3, pc}
 80815fc:	080401ac 	.word	0x080401ac

08081600 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 8081600:	b508      	push	{r3, lr}
 8081602:	4b02      	ldr	r3, [pc, #8]	; (808160c <hal_i2c_request_ex+0xc>)
 8081604:	681b      	ldr	r3, [r3, #0]
 8081606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8081608:	9301      	str	r3, [sp, #4]
 808160a:	bd08      	pop	{r3, pc}
 808160c:	080401ac 	.word	0x080401ac

08081610 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 8081610:	b508      	push	{r3, lr}
 8081612:	4b02      	ldr	r3, [pc, #8]	; (808161c <hal_spi_init+0xc>)
 8081614:	681b      	ldr	r3, [r3, #0]
 8081616:	69db      	ldr	r3, [r3, #28]
 8081618:	9301      	str	r3, [sp, #4]
 808161a:	bd08      	pop	{r3, pc}
 808161c:	080401b4 	.word	0x080401b4

08081620 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 8081620:	b508      	push	{r3, lr}
 8081622:	4b02      	ldr	r3, [pc, #8]	; (808162c <hal_spi_is_enabled+0xc>)
 8081624:	681b      	ldr	r3, [r3, #0]
 8081626:	6a1b      	ldr	r3, [r3, #32]
 8081628:	9301      	str	r3, [sp, #4]
 808162a:	bd08      	pop	{r3, pc}
 808162c:	080401b4 	.word	0x080401b4

08081630 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 8081630:	b508      	push	{r3, lr}
 8081632:	4b02      	ldr	r3, [pc, #8]	; (808163c <hal_usart_init+0xc>)
 8081634:	681b      	ldr	r3, [r3, #0]
 8081636:	699b      	ldr	r3, [r3, #24]
 8081638:	9301      	str	r3, [sp, #4]
 808163a:	bd08      	pop	{r3, pc}
 808163c:	080401c4 	.word	0x080401c4

08081640 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 8081640:	b508      	push	{r3, lr}
 8081642:	4b02      	ldr	r3, [pc, #8]	; (808164c <hal_usart_write+0xc>)
 8081644:	681b      	ldr	r3, [r3, #0]
 8081646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081648:	9301      	str	r3, [sp, #4]
 808164a:	bd08      	pop	{r3, pc}
 808164c:	080401c4 	.word	0x080401c4

08081650 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 8081650:	b508      	push	{r3, lr}
 8081652:	4b02      	ldr	r3, [pc, #8]	; (808165c <hal_usart_available+0xc>)
 8081654:	681b      	ldr	r3, [r3, #0]
 8081656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081658:	9301      	str	r3, [sp, #4]
 808165a:	bd08      	pop	{r3, pc}
 808165c:	080401c4 	.word	0x080401c4

08081660 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 8081660:	b508      	push	{r3, lr}
 8081662:	4b02      	ldr	r3, [pc, #8]	; (808166c <hal_usart_read+0xc>)
 8081664:	681b      	ldr	r3, [r3, #0]
 8081666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081668:	9301      	str	r3, [sp, #4]
 808166a:	bd08      	pop	{r3, pc}
 808166c:	080401c4 	.word	0x080401c4

08081670 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 8081670:	b508      	push	{r3, lr}
 8081672:	4b02      	ldr	r3, [pc, #8]	; (808167c <hal_usart_peek+0xc>)
 8081674:	681b      	ldr	r3, [r3, #0]
 8081676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081678:	9301      	str	r3, [sp, #4]
 808167a:	bd08      	pop	{r3, pc}
 808167c:	080401c4 	.word	0x080401c4

08081680 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 8081680:	b508      	push	{r3, lr}
 8081682:	4b02      	ldr	r3, [pc, #8]	; (808168c <hal_usart_flush+0xc>)
 8081684:	681b      	ldr	r3, [r3, #0]
 8081686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081688:	9301      	str	r3, [sp, #4]
 808168a:	bd08      	pop	{r3, pc}
 808168c:	080401c4 	.word	0x080401c4

08081690 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 8081690:	b508      	push	{r3, lr}
 8081692:	4b02      	ldr	r3, [pc, #8]	; (808169c <hal_usart_is_enabled+0xc>)
 8081694:	681b      	ldr	r3, [r3, #0]
 8081696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8081698:	9301      	str	r3, [sp, #4]
 808169a:	bd08      	pop	{r3, pc}
 808169c:	080401c4 	.word	0x080401c4

080816a0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80816a0:	b508      	push	{r3, lr}
 80816a2:	4b02      	ldr	r3, [pc, #8]	; (80816ac <hal_usart_available_data_for_write+0xc>)
 80816a4:	681b      	ldr	r3, [r3, #0]
 80816a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80816a8:	9301      	str	r3, [sp, #4]
 80816aa:	bd08      	pop	{r3, pc}
 80816ac:	080401c4 	.word	0x080401c4

080816b0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80816b0:	b508      	push	{r3, lr}
 80816b2:	4b02      	ldr	r3, [pc, #8]	; (80816bc <HAL_USB_USART_Init+0xc>)
 80816b4:	681b      	ldr	r3, [r3, #0]
 80816b6:	681b      	ldr	r3, [r3, #0]
 80816b8:	9301      	str	r3, [sp, #4]
 80816ba:	bd08      	pop	{r3, pc}
 80816bc:	0806001c 	.word	0x0806001c

080816c0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80816c0:	b508      	push	{r3, lr}
 80816c2:	4b02      	ldr	r3, [pc, #8]	; (80816cc <HAL_USB_USART_Available_Data+0xc>)
 80816c4:	681b      	ldr	r3, [r3, #0]
 80816c6:	691b      	ldr	r3, [r3, #16]
 80816c8:	9301      	str	r3, [sp, #4]
 80816ca:	bd08      	pop	{r3, pc}
 80816cc:	0806001c 	.word	0x0806001c

080816d0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80816d0:	b508      	push	{r3, lr}
 80816d2:	4b02      	ldr	r3, [pc, #8]	; (80816dc <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80816d4:	681b      	ldr	r3, [r3, #0]
 80816d6:	695b      	ldr	r3, [r3, #20]
 80816d8:	9301      	str	r3, [sp, #4]
 80816da:	bd08      	pop	{r3, pc}
 80816dc:	0806001c 	.word	0x0806001c

080816e0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80816e0:	b508      	push	{r3, lr}
 80816e2:	4b02      	ldr	r3, [pc, #8]	; (80816ec <HAL_USB_USART_Receive_Data+0xc>)
 80816e4:	681b      	ldr	r3, [r3, #0]
 80816e6:	699b      	ldr	r3, [r3, #24]
 80816e8:	9301      	str	r3, [sp, #4]
 80816ea:	bd08      	pop	{r3, pc}
 80816ec:	0806001c 	.word	0x0806001c

080816f0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80816f0:	b508      	push	{r3, lr}
 80816f2:	4b02      	ldr	r3, [pc, #8]	; (80816fc <HAL_USB_USART_Send_Data+0xc>)
 80816f4:	681b      	ldr	r3, [r3, #0]
 80816f6:	69db      	ldr	r3, [r3, #28]
 80816f8:	9301      	str	r3, [sp, #4]
 80816fa:	bd08      	pop	{r3, pc}
 80816fc:	0806001c 	.word	0x0806001c

08081700 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8081700:	b508      	push	{r3, lr}
 8081702:	4b02      	ldr	r3, [pc, #8]	; (808170c <HAL_USB_USART_Flush_Data+0xc>)
 8081704:	681b      	ldr	r3, [r3, #0]
 8081706:	6a1b      	ldr	r3, [r3, #32]
 8081708:	9301      	str	r3, [sp, #4]
 808170a:	bd08      	pop	{r3, pc}
 808170c:	0806001c 	.word	0x0806001c

08081710 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 8081710:	b508      	push	{r3, lr}
 8081712:	4b02      	ldr	r3, [pc, #8]	; (808171c <panic_+0xc>)
 8081714:	681b      	ldr	r3, [r3, #0]
 8081716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081718:	9301      	str	r3, [sp, #4]
 808171a:	bd08      	pop	{r3, pc}
 808171c:	080201a0 	.word	0x080201a0

08081720 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
 8081720:	b508      	push	{r3, lr}
 8081722:	4b03      	ldr	r3, [pc, #12]	; (8081730 <diag_get_source+0x10>)
 8081724:	681b      	ldr	r3, [r3, #0]
 8081726:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 808172a:	9301      	str	r3, [sp, #4]
 808172c:	bd08      	pop	{r3, pc}
 808172e:	0000      	.short	0x0000
 8081730:	080201a0 	.word	0x080201a0

08081734 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8081734:	b508      	push	{r3, lr}
 8081736:	4b02      	ldr	r3, [pc, #8]	; (8081740 <system_mode+0xc>)
 8081738:	681b      	ldr	r3, [r3, #0]
 808173a:	681b      	ldr	r3, [r3, #0]
 808173c:	9301      	str	r3, [sp, #4]
 808173e:	bd08      	pop	{r3, pc}
 8081740:	080401a4 	.word	0x080401a4

08081744 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8081744:	b508      	push	{r3, lr}
 8081746:	4b02      	ldr	r3, [pc, #8]	; (8081750 <set_system_mode+0xc>)
 8081748:	681b      	ldr	r3, [r3, #0]
 808174a:	685b      	ldr	r3, [r3, #4]
 808174c:	9301      	str	r3, [sp, #4]
 808174e:	bd08      	pop	{r3, pc}
 8081750:	080401a4 	.word	0x080401a4

08081754 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8081754:	b508      	push	{r3, lr}
 8081756:	4b02      	ldr	r3, [pc, #8]	; (8081760 <system_delay_ms+0xc>)
 8081758:	681b      	ldr	r3, [r3, #0]
 808175a:	695b      	ldr	r3, [r3, #20]
 808175c:	9301      	str	r3, [sp, #4]
 808175e:	bd08      	pop	{r3, pc}
 8081760:	080401a4 	.word	0x080401a4

08081764 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 8081764:	b508      	push	{r3, lr}
 8081766:	4b02      	ldr	r3, [pc, #8]	; (8081770 <system_sleep+0xc>)
 8081768:	681b      	ldr	r3, [r3, #0]
 808176a:	699b      	ldr	r3, [r3, #24]
 808176c:	9301      	str	r3, [sp, #4]
 808176e:	bd08      	pop	{r3, pc}
 8081770:	080401a4 	.word	0x080401a4

08081774 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8081774:	b508      	push	{r3, lr}
 8081776:	4b02      	ldr	r3, [pc, #8]	; (8081780 <system_thread_set_state+0xc>)
 8081778:	681b      	ldr	r3, [r3, #0]
 808177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808177c:	9301      	str	r3, [sp, #4]
 808177e:	bd08      	pop	{r3, pc}
 8081780:	080401a4 	.word	0x080401a4

08081784 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8081784:	b508      	push	{r3, lr}
 8081786:	4b02      	ldr	r3, [pc, #8]	; (8081790 <application_thread_current+0xc>)
 8081788:	681b      	ldr	r3, [r3, #0]
 808178a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808178c:	9301      	str	r3, [sp, #4]
 808178e:	bd08      	pop	{r3, pc}
 8081790:	080401a4 	.word	0x080401a4

08081794 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8081794:	b508      	push	{r3, lr}
 8081796:	4b02      	ldr	r3, [pc, #8]	; (80817a0 <application_thread_invoke+0xc>)
 8081798:	681b      	ldr	r3, [r3, #0]
 808179a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808179c:	9301      	str	r3, [sp, #4]
 808179e:	bd08      	pop	{r3, pc}
 80817a0:	080401a4 	.word	0x080401a4

080817a4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80817a4:	b508      	push	{r3, lr}
 80817a6:	4b02      	ldr	r3, [pc, #8]	; (80817b0 <system_thread_get_state+0xc>)
 80817a8:	681b      	ldr	r3, [r3, #0]
 80817aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80817ac:	9301      	str	r3, [sp, #4]
 80817ae:	bd08      	pop	{r3, pc}
 80817b0:	080401a4 	.word	0x080401a4

080817b4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80817b4:	b508      	push	{r3, lr}
 80817b6:	4b03      	ldr	r3, [pc, #12]	; (80817c4 <system_ctrl_set_app_request_handler+0x10>)
 80817b8:	681b      	ldr	r3, [r3, #0]
 80817ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80817be:	9301      	str	r3, [sp, #4]
 80817c0:	bd08      	pop	{r3, pc}
 80817c2:	0000      	.short	0x0000
 80817c4:	080401a4 	.word	0x080401a4

080817c8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80817c8:	b508      	push	{r3, lr}
 80817ca:	4b03      	ldr	r3, [pc, #12]	; (80817d8 <system_ctrl_set_result+0x10>)
 80817cc:	681b      	ldr	r3, [r3, #0]
 80817ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80817d2:	9301      	str	r3, [sp, #4]
 80817d4:	bd08      	pop	{r3, pc}
 80817d6:	0000      	.short	0x0000
 80817d8:	080401a4 	.word	0x080401a4

080817dc <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 80817dc:	b508      	push	{r3, lr}
 80817de:	4b03      	ldr	r3, [pc, #12]	; (80817ec <system_reset+0x10>)
 80817e0:	681b      	ldr	r3, [r3, #0]
 80817e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80817e6:	9301      	str	r3, [sp, #4]
 80817e8:	bd08      	pop	{r3, pc}
 80817ea:	0000      	.short	0x0000
 80817ec:	080401a4 	.word	0x080401a4

080817f0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80817f0:	b508      	push	{r3, lr}
 80817f2:	4b02      	ldr	r3, [pc, #8]	; (80817fc <spark_variable+0xc>)
 80817f4:	681b      	ldr	r3, [r3, #0]
 80817f6:	681b      	ldr	r3, [r3, #0]
 80817f8:	9301      	str	r3, [sp, #4]
 80817fa:	bd08      	pop	{r3, pc}
 80817fc:	080401cc 	.word	0x080401cc

08081800 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8081800:	b508      	push	{r3, lr}
 8081802:	4b02      	ldr	r3, [pc, #8]	; (808180c <spark_function+0xc>)
 8081804:	681b      	ldr	r3, [r3, #0]
 8081806:	685b      	ldr	r3, [r3, #4]
 8081808:	9301      	str	r3, [sp, #4]
 808180a:	bd08      	pop	{r3, pc}
 808180c:	080401cc 	.word	0x080401cc

08081810 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8081810:	b508      	push	{r3, lr}
 8081812:	4b02      	ldr	r3, [pc, #8]	; (808181c <spark_process+0xc>)
 8081814:	681b      	ldr	r3, [r3, #0]
 8081816:	689b      	ldr	r3, [r3, #8]
 8081818:	9301      	str	r3, [sp, #4]
 808181a:	bd08      	pop	{r3, pc}
 808181c:	080401cc 	.word	0x080401cc

08081820 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8081820:	b508      	push	{r3, lr}
 8081822:	4b02      	ldr	r3, [pc, #8]	; (808182c <spark_cloud_flag_connect+0xc>)
 8081824:	681b      	ldr	r3, [r3, #0]
 8081826:	68db      	ldr	r3, [r3, #12]
 8081828:	9301      	str	r3, [sp, #4]
 808182a:	bd08      	pop	{r3, pc}
 808182c:	080401cc 	.word	0x080401cc

08081830 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8081830:	b508      	push	{r3, lr}
 8081832:	4b02      	ldr	r3, [pc, #8]	; (808183c <spark_cloud_flag_connected+0xc>)
 8081834:	681b      	ldr	r3, [r3, #0]
 8081836:	695b      	ldr	r3, [r3, #20]
 8081838:	9301      	str	r3, [sp, #4]
 808183a:	bd08      	pop	{r3, pc}
 808183c:	080401cc 	.word	0x080401cc

08081840 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 8081840:	b508      	push	{r3, lr}
 8081842:	4b02      	ldr	r3, [pc, #8]	; (808184c <spark_deviceID+0xc>)
 8081844:	681b      	ldr	r3, [r3, #0]
 8081846:	69db      	ldr	r3, [r3, #28]
 8081848:	9301      	str	r3, [sp, #4]
 808184a:	bd08      	pop	{r3, pc}
 808184c:	080401cc 	.word	0x080401cc

08081850 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8081850:	b508      	push	{r3, lr}
 8081852:	4b02      	ldr	r3, [pc, #8]	; (808185c <spark_send_event+0xc>)
 8081854:	681b      	ldr	r3, [r3, #0]
 8081856:	6a1b      	ldr	r3, [r3, #32]
 8081858:	9301      	str	r3, [sp, #4]
 808185a:	bd08      	pop	{r3, pc}
 808185c:	080401cc 	.word	0x080401cc

08081860 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 8081860:	b508      	push	{r3, lr}
 8081862:	4b02      	ldr	r3, [pc, #8]	; (808186c <spark_subscribe+0xc>)
 8081864:	681b      	ldr	r3, [r3, #0]
 8081866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081868:	9301      	str	r3, [sp, #4]
 808186a:	bd08      	pop	{r3, pc}
 808186c:	080401cc 	.word	0x080401cc

08081870 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 8081870:	b508      	push	{r3, lr}
 8081872:	4b02      	ldr	r3, [pc, #8]	; (808187c <spark_sync_time+0xc>)
 8081874:	681b      	ldr	r3, [r3, #0]
 8081876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081878:	9301      	str	r3, [sp, #4]
 808187a:	bd08      	pop	{r3, pc}
 808187c:	080401cc 	.word	0x080401cc

08081880 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8081880:	b508      	push	{r3, lr}
 8081882:	4b02      	ldr	r3, [pc, #8]	; (808188c <spark_sync_time_pending+0xc>)
 8081884:	681b      	ldr	r3, [r3, #0]
 8081886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081888:	9301      	str	r3, [sp, #4]
 808188a:	bd08      	pop	{r3, pc}
 808188c:	080401cc 	.word	0x080401cc

08081890 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8081890:	b508      	push	{r3, lr}
 8081892:	4b02      	ldr	r3, [pc, #8]	; (808189c <spark_set_random_seed_from_cloud_handler+0xc>)
 8081894:	681b      	ldr	r3, [r3, #0]
 8081896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081898:	9301      	str	r3, [sp, #4]
 808189a:	bd08      	pop	{r3, pc}
 808189c:	080401cc 	.word	0x080401cc

080818a0 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 80818a0:	b508      	push	{r3, lr}
 80818a2:	4b02      	ldr	r3, [pc, #8]	; (80818ac <spark_cloud_disconnect+0xc>)
 80818a4:	681b      	ldr	r3, [r3, #0]
 80818a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80818a8:	9301      	str	r3, [sp, #4]
 80818aa:	bd08      	pop	{r3, pc}
 80818ac:	080401cc 	.word	0x080401cc

080818b0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80818b0:	b508      	push	{r3, lr}
 80818b2:	4b02      	ldr	r3, [pc, #8]	; (80818bc <network_connect+0xc>)
 80818b4:	681b      	ldr	r3, [r3, #0]
 80818b6:	685b      	ldr	r3, [r3, #4]
 80818b8:	9301      	str	r3, [sp, #4]
 80818ba:	bd08      	pop	{r3, pc}
 80818bc:	080401c8 	.word	0x080401c8

080818c0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80818c0:	b508      	push	{r3, lr}
 80818c2:	4b02      	ldr	r3, [pc, #8]	; (80818cc <network_connecting+0xc>)
 80818c4:	681b      	ldr	r3, [r3, #0]
 80818c6:	689b      	ldr	r3, [r3, #8]
 80818c8:	9301      	str	r3, [sp, #4]
 80818ca:	bd08      	pop	{r3, pc}
 80818cc:	080401c8 	.word	0x080401c8

080818d0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80818d0:	b508      	push	{r3, lr}
 80818d2:	4b02      	ldr	r3, [pc, #8]	; (80818dc <network_disconnect+0xc>)
 80818d4:	681b      	ldr	r3, [r3, #0]
 80818d6:	68db      	ldr	r3, [r3, #12]
 80818d8:	9301      	str	r3, [sp, #4]
 80818da:	bd08      	pop	{r3, pc}
 80818dc:	080401c8 	.word	0x080401c8

080818e0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80818e0:	b508      	push	{r3, lr}
 80818e2:	4b02      	ldr	r3, [pc, #8]	; (80818ec <network_ready+0xc>)
 80818e4:	681b      	ldr	r3, [r3, #0]
 80818e6:	691b      	ldr	r3, [r3, #16]
 80818e8:	9301      	str	r3, [sp, #4]
 80818ea:	bd08      	pop	{r3, pc}
 80818ec:	080401c8 	.word	0x080401c8

080818f0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80818f0:	b508      	push	{r3, lr}
 80818f2:	4b02      	ldr	r3, [pc, #8]	; (80818fc <network_on+0xc>)
 80818f4:	681b      	ldr	r3, [r3, #0]
 80818f6:	695b      	ldr	r3, [r3, #20]
 80818f8:	9301      	str	r3, [sp, #4]
 80818fa:	bd08      	pop	{r3, pc}
 80818fc:	080401c8 	.word	0x080401c8

08081900 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8081900:	b508      	push	{r3, lr}
 8081902:	4b02      	ldr	r3, [pc, #8]	; (808190c <network_off+0xc>)
 8081904:	681b      	ldr	r3, [r3, #0]
 8081906:	699b      	ldr	r3, [r3, #24]
 8081908:	9301      	str	r3, [sp, #4]
 808190a:	bd08      	pop	{r3, pc}
 808190c:	080401c8 	.word	0x080401c8

08081910 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8081910:	b508      	push	{r3, lr}
 8081912:	4b02      	ldr	r3, [pc, #8]	; (808191c <network_listen+0xc>)
 8081914:	681b      	ldr	r3, [r3, #0]
 8081916:	69db      	ldr	r3, [r3, #28]
 8081918:	9301      	str	r3, [sp, #4]
 808191a:	bd08      	pop	{r3, pc}
 808191c:	080401c8 	.word	0x080401c8

08081920 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8081920:	b508      	push	{r3, lr}
 8081922:	4b02      	ldr	r3, [pc, #8]	; (808192c <network_listening+0xc>)
 8081924:	681b      	ldr	r3, [r3, #0]
 8081926:	6a1b      	ldr	r3, [r3, #32]
 8081928:	9301      	str	r3, [sp, #4]
 808192a:	bd08      	pop	{r3, pc}
 808192c:	080401c8 	.word	0x080401c8

08081930 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8081930:	b508      	push	{r3, lr}
 8081932:	4b02      	ldr	r3, [pc, #8]	; (808193c <network_set_listen_timeout+0xc>)
 8081934:	681b      	ldr	r3, [r3, #0]
 8081936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081938:	9301      	str	r3, [sp, #4]
 808193a:	bd08      	pop	{r3, pc}
 808193c:	080401c8 	.word	0x080401c8

08081940 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8081940:	b508      	push	{r3, lr}
 8081942:	4b02      	ldr	r3, [pc, #8]	; (808194c <network_get_listen_timeout+0xc>)
 8081944:	681b      	ldr	r3, [r3, #0]
 8081946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081948:	9301      	str	r3, [sp, #4]
 808194a:	bd08      	pop	{r3, pc}
 808194c:	080401c8 	.word	0x080401c8

08081950 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 8081950:	b508      	push	{r3, lr}
 8081952:	4b02      	ldr	r3, [pc, #8]	; (808195c <network_is_on+0xc>)
 8081954:	681b      	ldr	r3, [r3, #0]
 8081956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081958:	9301      	str	r3, [sp, #4]
 808195a:	bd08      	pop	{r3, pc}
 808195c:	080401c8 	.word	0x080401c8

08081960 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 8081960:	b508      	push	{r3, lr}
 8081962:	4b02      	ldr	r3, [pc, #8]	; (808196c <network_is_off+0xc>)
 8081964:	681b      	ldr	r3, [r3, #0]
 8081966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081968:	9301      	str	r3, [sp, #4]
 808196a:	bd08      	pop	{r3, pc}
 808196c:	080401c8 	.word	0x080401c8

08081970 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8081970:	b508      	push	{r3, lr}
 8081972:	4b02      	ldr	r3, [pc, #8]	; (808197c <malloc+0xc>)
 8081974:	681b      	ldr	r3, [r3, #0]
 8081976:	681b      	ldr	r3, [r3, #0]
 8081978:	9301      	str	r3, [sp, #4]
 808197a:	bd08      	pop	{r3, pc}
 808197c:	080401a0 	.word	0x080401a0

08081980 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8081980:	b508      	push	{r3, lr}
 8081982:	4b02      	ldr	r3, [pc, #8]	; (808198c <free+0xc>)
 8081984:	681b      	ldr	r3, [r3, #0]
 8081986:	685b      	ldr	r3, [r3, #4]
 8081988:	9301      	str	r3, [sp, #4]
 808198a:	bd08      	pop	{r3, pc}
 808198c:	080401a0 	.word	0x080401a0

08081990 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8081990:	b508      	push	{r3, lr}
 8081992:	4b02      	ldr	r3, [pc, #8]	; (808199c <realloc+0xc>)
 8081994:	681b      	ldr	r3, [r3, #0]
 8081996:	689b      	ldr	r3, [r3, #8]
 8081998:	9301      	str	r3, [sp, #4]
 808199a:	bd08      	pop	{r3, pc}
 808199c:	080401a0 	.word	0x080401a0

080819a0 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80819a0:	b508      	push	{r3, lr}
 80819a2:	4b02      	ldr	r3, [pc, #8]	; (80819ac <siprintf+0xc>)
 80819a4:	681b      	ldr	r3, [r3, #0]
 80819a6:	691b      	ldr	r3, [r3, #16]
 80819a8:	9301      	str	r3, [sp, #4]
 80819aa:	bd08      	pop	{r3, pc}
 80819ac:	080401a0 	.word	0x080401a0

080819b0 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80819b0:	b508      	push	{r3, lr}
 80819b2:	4b02      	ldr	r3, [pc, #8]	; (80819bc <snprintf+0xc>)
 80819b4:	681b      	ldr	r3, [r3, #0]
 80819b6:	69db      	ldr	r3, [r3, #28]
 80819b8:	9301      	str	r3, [sp, #4]
 80819ba:	bd08      	pop	{r3, pc}
 80819bc:	080401a0 	.word	0x080401a0

080819c0 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80819c0:	b508      	push	{r3, lr}
 80819c2:	4b02      	ldr	r3, [pc, #8]	; (80819cc <abort+0xc>)
 80819c4:	681b      	ldr	r3, [r3, #0]
 80819c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80819c8:	9301      	str	r3, [sp, #4]
 80819ca:	bd08      	pop	{r3, pc}
 80819cc:	080401a0 	.word	0x080401a0

080819d0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80819d0:	b508      	push	{r3, lr}
 80819d2:	4b02      	ldr	r3, [pc, #8]	; (80819dc <_malloc_r+0xc>)
 80819d4:	681b      	ldr	r3, [r3, #0]
 80819d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80819d8:	9301      	str	r3, [sp, #4]
 80819da:	bd08      	pop	{r3, pc}
 80819dc:	080401a0 	.word	0x080401a0

080819e0 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80819e0:	b508      	push	{r3, lr}
 80819e2:	4b02      	ldr	r3, [pc, #8]	; (80819ec <newlib_impure_ptr_callback+0xc>)
 80819e4:	681b      	ldr	r3, [r3, #0]
 80819e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80819e8:	9301      	str	r3, [sp, #4]
 80819ea:	bd08      	pop	{r3, pc}
 80819ec:	080401a0 	.word	0x080401a0

080819f0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80819f0:	2100      	movs	r1, #0
 80819f2:	f7ff beaf 	b.w	8081754 <system_delay_ms>

080819f6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80819f6:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80819f8:	6883      	ldr	r3, [r0, #8]
 80819fa:	4604      	mov	r4, r0
 80819fc:	b90b      	cbnz	r3, 8081a02 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80819fe:	f001 fc09 	bl	8083214 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081a02:	68c3      	ldr	r3, [r0, #12]
 8081a04:	4798      	blx	r3
      if (_M_manager)
 8081a06:	68a3      	ldr	r3, [r4, #8]
 8081a08:	b11b      	cbz	r3, 8081a12 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081a0a:	2203      	movs	r2, #3
 8081a0c:	4621      	mov	r1, r4
 8081a0e:	4620      	mov	r0, r4
 8081a10:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8081a12:	4620      	mov	r0, r4
}
 8081a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 8081a18:	2110      	movs	r1, #16
 8081a1a:	f001 bbf7 	b.w	808320c <_ZdlPvj>

08081a1e <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8081a1e:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 8081a20:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 8081a22:	b085      	sub	sp, #20
 8081a24:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081a26:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 8081a28:	460f      	mov	r7, r1
 8081a2a:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8081a2c:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081a2e:	f002 fc30 	bl	8084292 <strlen>
 8081a32:	687b      	ldr	r3, [r7, #4]
 8081a34:	b281      	uxth	r1, r0
 8081a36:	9600      	str	r6, [sp, #0]
 8081a38:	4628      	mov	r0, r5
 8081a3a:	aa03      	add	r2, sp, #12
 8081a3c:	f7ff fcd8 	bl	80813f0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8081a40:	b130      	cbz	r0, 8081a50 <_ZN5spark13CellularClass7resolveEPKc+0x32>
 8081a42:	4631      	mov	r1, r6
 8081a44:	4620      	mov	r0, r4
 8081a46:	f000 fdbb 	bl	80825c0 <_ZN9IPAddressC1Em>
    }
 8081a4a:	4620      	mov	r0, r4
 8081a4c:	b005      	add	sp, #20
 8081a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8081a50:	4620      	mov	r0, r4
 8081a52:	a903      	add	r1, sp, #12
 8081a54:	f000 fdac 	bl	80825b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 8081a58:	e7f7      	b.n	8081a4a <_ZN5spark13CellularClass7resolveEPKc+0x2c>

08081a5a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 8081a5a:	2200      	movs	r2, #0
 8081a5c:	6840      	ldr	r0, [r0, #4]
 8081a5e:	4611      	mov	r1, r2
 8081a60:	f7ff bf5e 	b.w	8081920 <network_listening>

08081a64 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 8081a64:	2200      	movs	r2, #0
 8081a66:	6840      	ldr	r0, [r0, #4]
 8081a68:	4611      	mov	r1, r2
 8081a6a:	f7ff bf69 	b.w	8081940 <network_get_listen_timeout>

08081a6e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 8081a6e:	2200      	movs	r2, #0
 8081a70:	6840      	ldr	r0, [r0, #4]
 8081a72:	f7ff bf5d 	b.w	8081930 <network_set_listen_timeout>

08081a76 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 8081a76:	2200      	movs	r2, #0
 8081a78:	6840      	ldr	r0, [r0, #4]
 8081a7a:	f081 0101 	eor.w	r1, r1, #1
 8081a7e:	f7ff bf47 	b.w	8081910 <network_listen>

08081a82 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
 8081a82:	2300      	movs	r3, #0
 8081a84:	6840      	ldr	r0, [r0, #4]
 8081a86:	461a      	mov	r2, r3
 8081a88:	4619      	mov	r1, r3
 8081a8a:	f7ff bf39 	b.w	8081900 <network_off>

08081a8e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 8081a8e:	2300      	movs	r3, #0
 8081a90:	6840      	ldr	r0, [r0, #4]
 8081a92:	461a      	mov	r2, r3
 8081a94:	4619      	mov	r1, r3
 8081a96:	f7ff bf2b 	b.w	80818f0 <network_on>

08081a9a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 8081a9a:	2200      	movs	r2, #0
 8081a9c:	6840      	ldr	r0, [r0, #4]
 8081a9e:	4611      	mov	r1, r2
 8081aa0:	f7ff bf0e 	b.w	80818c0 <network_connecting>

08081aa4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8081aa4:	2200      	movs	r2, #0
 8081aa6:	2102      	movs	r1, #2
 8081aa8:	6840      	ldr	r0, [r0, #4]
 8081aaa:	f7ff bf11 	b.w	80818d0 <network_disconnect>

08081aae <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 8081aae:	2300      	movs	r3, #0
 8081ab0:	6840      	ldr	r0, [r0, #4]
 8081ab2:	461a      	mov	r2, r3
 8081ab4:	f7ff befc 	b.w	80818b0 <network_connect>

08081ab8 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 8081ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
 8081aba:	2500      	movs	r5, #0
 8081abc:	2618      	movs	r6, #24
 8081abe:	460f      	mov	r7, r1
 8081ac0:	4b19      	ldr	r3, [pc, #100]	; (8081b28 <_ZN5spark13CellularClass4RSSIEv+0x70>)
 8081ac2:	4632      	mov	r2, r6
 8081ac4:	6003      	str	r3, [r0, #0]
 8081ac6:	3330      	adds	r3, #48	; 0x30
 8081ac8:	4629      	mov	r1, r5
 8081aca:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8081ace:	b089      	sub	sp, #36	; 0x24
 8081ad0:	6043      	str	r3, [r0, #4]
 8081ad2:	4604      	mov	r4, r0
 8081ad4:	3010      	adds	r0, #16
 8081ad6:	f002 fb7a 	bl	80841ce <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 8081ada:	462a      	mov	r2, r5
 8081adc:	4629      	mov	r1, r5
 8081ade:	6878      	ldr	r0, [r7, #4]
 8081ae0:	f7ff fefe 	bl	80818e0 <network_ready>
 8081ae4:	b918      	cbnz	r0, 8081aee <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
 8081ae6:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
 8081ae8:	4620      	mov	r0, r4
 8081aea:	b009      	add	sp, #36	; 0x24
 8081aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
 8081aee:	4629      	mov	r1, r5
 8081af0:	4632      	mov	r2, r6
 8081af2:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
 8081af4:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
 8081af8:	f002 fb69 	bl	80841ce <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8081afc:	4668      	mov	r0, sp
 8081afe:	a902      	add	r1, sp, #8
        sigext.size = sizeof(sigext);
 8081b00:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8081b04:	f7ff fc7c 	bl	8081400 <cellular_signal>
 8081b08:	b110      	cbz	r0, 8081b10 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
 8081b0a:	2301      	movs	r3, #1
 8081b0c:	60a3      	str	r3, [r4, #8]
            return sig;
 8081b0e:	e7eb      	b.n	8081ae8 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
 8081b10:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
 8081b12:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
 8081b14:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
 8081b16:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
 8081b18:	b90b      	cbnz	r3, 8081b1e <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
 8081b1a:	2302      	movs	r3, #2
 8081b1c:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
 8081b1e:	4620      	mov	r0, r4
 8081b20:	a902      	add	r1, sp, #8
 8081b22:	f000 f8b8 	bl	8081c96 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
 8081b26:	e7df      	b.n	8081ae8 <_ZN5spark13CellularClass4RSSIEv+0x30>
 8081b28:	080847ec 	.word	0x080847ec

08081b2c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8081b2c:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8081b2e:	2428      	movs	r4, #40	; 0x28
 8081b30:	4b07      	ldr	r3, [pc, #28]	; (8081b50 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8081b32:	4622      	mov	r2, r4
 8081b34:	4618      	mov	r0, r3
 8081b36:	2100      	movs	r1, #0
 8081b38:	f002 fb49 	bl	80841ce <memset>
        cid = -1;
 8081b3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8081b40:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8081b42:	2204      	movs	r2, #4
 8081b44:	4b03      	ldr	r3, [pc, #12]	; (8081b54 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 8081b46:	8004      	strh	r4, [r0, #0]
 8081b48:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8081b4a:	4a03      	ldr	r2, [pc, #12]	; (8081b58 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 8081b4c:	601a      	str	r2, [r3, #0]
 8081b4e:	bd10      	pop	{r4, pc}
 8081b50:	200000fc 	.word	0x200000fc
 8081b54:	200000f4 	.word	0x200000f4
 8081b58:	080847b0 	.word	0x080847b0

08081b5c <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 8081b5c:	4770      	bx	lr

08081b5e <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 8081b5e:	7d00      	ldrb	r0, [r0, #20]
 8081b60:	4770      	bx	lr

08081b62 <_ZNK14CellularSignal7isValidEv>:
    return n;
}
#pragma GCC diagnostic pop

bool CellularSignal::isValid() const
{
 8081b62:	4603      	mov	r3, r0
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
 8081b64:	7d00      	ldrb	r0, [r0, #20]
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
 8081b66:	b170      	cbz	r0, 8081b86 <_ZNK14CellularSignal7isValidEv+0x24>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
 8081b68:	699a      	ldr	r2, [r3, #24]
 8081b6a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8081b6e:	d007      	beq.n	8081b80 <_ZNK14CellularSignal7isValidEv+0x1e>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
 8081b70:	2802      	cmp	r0, #2
 8081b72:	d007      	beq.n	8081b84 <_ZNK14CellularSignal7isValidEv+0x22>
#if (PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION)
            // U-blox GSM radios may not always support quality as it depends on the packet switching mode
            // at the time of network connection, which is not possible to query. For now, we will return "true"
            // for GSM Electrons and will not check if quality is actually supported / valid.
            // Hence, `isValid()` can return "true" for invalid signal value. To add a note in docs.
            (sig_.rat == NET_ACCESS_TECHNOLOGY_GSM || sig_.qual != std::numeric_limits<int32_t>::min()));
 8081b74:	6a18      	ldr	r0, [r3, #32]
 8081b76:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
 8081b7a:	bf18      	it	ne
 8081b7c:	2001      	movne	r0, #1
 8081b7e:	4770      	bx	lr
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
 8081b80:	2000      	movs	r0, #0
 8081b82:	4770      	bx	lr
 8081b84:	2001      	movs	r0, #1
#else
            sig_.qual != std::numeric_limits<int32_t>::min());
#endif
}
 8081b86:	4770      	bx	lr

08081b88 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
 8081b88:	6803      	ldr	r3, [r0, #0]
 8081b8a:	6a1b      	ldr	r3, [r3, #32]
 8081b8c:	4718      	bx	r3

08081b8e <_ZN14CellularSignalD0Ev>:
 8081b8e:	b510      	push	{r4, lr}
 8081b90:	4604      	mov	r4, r0
 8081b92:	2128      	movs	r1, #40	; 0x28
 8081b94:	f001 fb3a 	bl	808320c <_ZdlPvj>
 8081b98:	4620      	mov	r0, r4
 8081b9a:	bd10      	pop	{r4, pc}

08081b9c <_ZNK14CellularSignal11getStrengthEv>:
{
 8081b9c:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 8081b9e:	7d03      	ldrb	r3, [r0, #20]
 8081ba0:	b15b      	cbz	r3, 8081bba <_ZNK14CellularSignal11getStrengthEv+0x1e>
 8081ba2:	69c0      	ldr	r0, [r0, #28]
 8081ba4:	2800      	cmp	r0, #0
 8081ba6:	db08      	blt.n	8081bba <_ZNK14CellularSignal11getStrengthEv+0x1e>
        return (float)sig_.strength / 65535.0f * 100.0f;
 8081ba8:	f002 f858 	bl	8083c5c <__aeabi_i2f>
 8081bac:	4904      	ldr	r1, [pc, #16]	; (8081bc0 <_ZNK14CellularSignal11getStrengthEv+0x24>)
 8081bae:	f002 f95d 	bl	8083e6c <__aeabi_fdiv>
 8081bb2:	4904      	ldr	r1, [pc, #16]	; (8081bc4 <_ZNK14CellularSignal11getStrengthEv+0x28>)
 8081bb4:	f002 f8a6 	bl	8083d04 <__aeabi_fmul>
}
 8081bb8:	bd08      	pop	{r3, pc}
    return -1.0f;
 8081bba:	4803      	ldr	r0, [pc, #12]	; (8081bc8 <_ZNK14CellularSignal11getStrengthEv+0x2c>)
 8081bbc:	e7fc      	b.n	8081bb8 <_ZNK14CellularSignal11getStrengthEv+0x1c>
 8081bbe:	bf00      	nop
 8081bc0:	477fff00 	.word	0x477fff00
 8081bc4:	42c80000 	.word	0x42c80000
 8081bc8:	bf800000 	.word	0xbf800000

08081bcc <_ZNK14CellularSignal16getStrengthValueEv>:
{
 8081bcc:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 8081bce:	7d03      	ldrb	r3, [r0, #20]
 8081bd0:	b14b      	cbz	r3, 8081be6 <_ZNK14CellularSignal16getStrengthValueEv+0x1a>
 8081bd2:	6980      	ldr	r0, [r0, #24]
 8081bd4:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8081bd8:	d005      	beq.n	8081be6 <_ZNK14CellularSignal16getStrengthValueEv+0x1a>
        return (float)sig_.rssi / 100.0f;
 8081bda:	f002 f83f 	bl	8083c5c <__aeabi_i2f>
 8081bde:	4903      	ldr	r1, [pc, #12]	; (8081bec <_ZNK14CellularSignal16getStrengthValueEv+0x20>)
 8081be0:	f002 f944 	bl	8083e6c <__aeabi_fdiv>
}
 8081be4:	bd08      	pop	{r3, pc}
    return 0.0f;
 8081be6:	2000      	movs	r0, #0
 8081be8:	e7fc      	b.n	8081be4 <_ZNK14CellularSignal16getStrengthValueEv+0x18>
 8081bea:	bf00      	nop
 8081bec:	42c80000 	.word	0x42c80000

08081bf0 <_ZNK14CellularSignal10getQualityEv>:
{
 8081bf0:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 8081bf2:	7d03      	ldrb	r3, [r0, #20]
 8081bf4:	b15b      	cbz	r3, 8081c0e <_ZNK14CellularSignal10getQualityEv+0x1e>
 8081bf6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8081bf8:	2800      	cmp	r0, #0
 8081bfa:	db08      	blt.n	8081c0e <_ZNK14CellularSignal10getQualityEv+0x1e>
        return (float)sig_.quality / 65535.0f * 100.0f;
 8081bfc:	f002 f82e 	bl	8083c5c <__aeabi_i2f>
 8081c00:	4904      	ldr	r1, [pc, #16]	; (8081c14 <_ZNK14CellularSignal10getQualityEv+0x24>)
 8081c02:	f002 f933 	bl	8083e6c <__aeabi_fdiv>
 8081c06:	4904      	ldr	r1, [pc, #16]	; (8081c18 <_ZNK14CellularSignal10getQualityEv+0x28>)
 8081c08:	f002 f87c 	bl	8083d04 <__aeabi_fmul>
}
 8081c0c:	bd08      	pop	{r3, pc}
    return -1.0f;
 8081c0e:	4803      	ldr	r0, [pc, #12]	; (8081c1c <_ZNK14CellularSignal10getQualityEv+0x2c>)
 8081c10:	e7fc      	b.n	8081c0c <_ZNK14CellularSignal10getQualityEv+0x1c>
 8081c12:	bf00      	nop
 8081c14:	477fff00 	.word	0x477fff00
 8081c18:	42c80000 	.word	0x42c80000
 8081c1c:	bf800000 	.word	0xbf800000

08081c20 <_ZNK14CellularSignal15getQualityValueEv>:
{
 8081c20:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 8081c22:	7d03      	ldrb	r3, [r0, #20]
 8081c24:	b14b      	cbz	r3, 8081c3a <_ZNK14CellularSignal15getQualityValueEv+0x1a>
 8081c26:	6a00      	ldr	r0, [r0, #32]
 8081c28:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8081c2c:	d005      	beq.n	8081c3a <_ZNK14CellularSignal15getQualityValueEv+0x1a>
        return (float)sig_.qual / 100.0f;
 8081c2e:	f002 f815 	bl	8083c5c <__aeabi_i2f>
 8081c32:	4903      	ldr	r1, [pc, #12]	; (8081c40 <_ZNK14CellularSignal15getQualityValueEv+0x20>)
 8081c34:	f002 f91a 	bl	8083e6c <__aeabi_fdiv>
}
 8081c38:	bd08      	pop	{r3, pc}
    return 0.0f;
 8081c3a:	2000      	movs	r0, #0
 8081c3c:	e7fc      	b.n	8081c38 <_ZNK14CellularSignal15getQualityValueEv+0x18>
 8081c3e:	bf00      	nop
 8081c40:	42c80000 	.word	0x42c80000

08081c44 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
 8081c44:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 8081c46:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
 8081c48:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
 8081c4a:	da0a      	bge.n	8081c62 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
 8081c4c:	212d      	movs	r1, #45	; 0x2d
 8081c4e:	f000 fd7c 	bl	808274a <_ZN5Print5printEc>
 8081c52:	4605      	mov	r5, r0
            val = -n;
 8081c54:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 8081c56:	220a      	movs	r2, #10
 8081c58:	4630      	mov	r0, r6
 8081c5a:	f000 fd8f 	bl	808277c <_ZN5Print11printNumberEmh>
    }
}
 8081c5e:	4428      	add	r0, r5
 8081c60:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
 8081c62:	4621      	mov	r1, r4
        size_t t = 0;
 8081c64:	2500      	movs	r5, #0
 8081c66:	e7f6      	b.n	8081c56 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

08081c68 <_ZNK14CellularSignal7printToER5Print>:
{
 8081c68:	b570      	push	{r4, r5, r6, lr}
 8081c6a:	460c      	mov	r4, r1
 8081c6c:	4605      	mov	r5, r0
 8081c6e:	6881      	ldr	r1, [r0, #8]
 8081c70:	4620      	mov	r0, r4
 8081c72:	f7ff ffe7 	bl	8081c44 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print(',');
 8081c76:	212c      	movs	r1, #44	; 0x2c
 8081c78:	4606      	mov	r6, r0
 8081c7a:	4620      	mov	r0, r4
 8081c7c:	f000 fd65 	bl	808274a <_ZN5Print5printEc>
 8081c80:	68e9      	ldr	r1, [r5, #12]
 8081c82:	4406      	add	r6, r0
size_t Print::print(T n, int base)
 8081c84:	4620      	mov	r0, r4
 8081c86:	f7ff ffdd 	bl	8081c44 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
}
 8081c8a:	4430      	add	r0, r6
 8081c8c:	bd70      	pop	{r4, r5, r6, pc}

08081c8e <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 8081c8e:	f1a0 0004 	sub.w	r0, r0, #4
 8081c92:	f7ff bfe9 	b.w	8081c68 <_ZNK14CellularSignal7printToER5Print>

08081c96 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
 8081c96:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 8081c98:	460d      	mov	r5, r1
 8081c9a:	f100 0410 	add.w	r4, r0, #16
 8081c9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8081ca0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8081ca2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8081ca6:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8081caa:	2001      	movs	r0, #1
 8081cac:	bd30      	pop	{r4, r5, pc}

08081cae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8081cae:	4770      	bx	lr

08081cb0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 8081cb0:	2000      	movs	r0, #0
 8081cb2:	4770      	bx	lr

08081cb4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8081cb4:	b510      	push	{r4, lr}
 8081cb6:	4604      	mov	r4, r0
 8081cb8:	2110      	movs	r1, #16
 8081cba:	f001 faa7 	bl	808320c <_ZdlPvj>
 8081cbe:	4620      	mov	r0, r4
 8081cc0:	bd10      	pop	{r4, pc}

08081cc2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8081cc2:	b508      	push	{r3, lr}
      { delete this; }
 8081cc4:	f7ff fff6 	bl	8081cb4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8081cc8:	bd08      	pop	{r3, pc}

08081cca <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 8081cca:	b510      	push	{r4, lr}
      if (_M_manager)
 8081ccc:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 8081cce:	4604      	mov	r4, r0
      if (_M_manager)
 8081cd0:	b113      	cbz	r3, 8081cd8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081cd2:	2203      	movs	r2, #3
 8081cd4:	4601      	mov	r1, r0
 8081cd6:	4798      	blx	r3
    }
 8081cd8:	4620      	mov	r0, r4
 8081cda:	bd10      	pop	{r4, pc}

08081cdc <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8081cdc:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8081cde:	b530      	push	{r4, r5, lr}
        type_(type) {
 8081ce0:	f64f 749c 	movw	r4, #65436	; 0xff9c
 8081ce4:	6002      	str	r2, [r0, #0]
 8081ce6:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081ce8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8081cea:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 8081cec:	680c      	ldr	r4, [r1, #0]
 8081cee:	8085      	strh	r5, [r0, #4]
 8081cf0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8081cf2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 8081cf4:	bd30      	pop	{r4, r5, pc}

08081cf6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8081cf6:	b510      	push	{r4, lr}
 8081cf8:	4604      	mov	r4, r0
    free((void*)msg_);
 8081cfa:	6800      	ldr	r0, [r0, #0]
 8081cfc:	f7ff fe40 	bl	8081980 <free>
}
 8081d00:	4620      	mov	r0, r4
 8081d02:	bd10      	pop	{r4, pc}

08081d04 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8081d04:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8081d06:	68c4      	ldr	r4, [r0, #12]
 8081d08:	b1f4      	cbz	r4, 8081d48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 8081d0a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8081d0c:	2b02      	cmp	r3, #2
 8081d0e:	d103      	bne.n	8081d18 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 8081d10:	f104 000c 	add.w	r0, r4, #12
 8081d14:	f7ff ffef 	bl	8081cf6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 8081d18:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 8081d1a:	b135      	cbz	r5, 8081d2a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 8081d1c:	4628      	mov	r0, r5
 8081d1e:	f7ff ffd4 	bl	8081cca <_ZNSt14_Function_baseD1Ev>
 8081d22:	2110      	movs	r1, #16
 8081d24:	4628      	mov	r0, r5
 8081d26:	f001 fa71 	bl	808320c <_ZdlPvj>
 8081d2a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8081d2c:	b135      	cbz	r5, 8081d3c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8081d2e:	4628      	mov	r0, r5
 8081d30:	f7ff ffcb 	bl	8081cca <_ZNSt14_Function_baseD1Ev>
 8081d34:	2110      	movs	r1, #16
 8081d36:	4628      	mov	r0, r5
 8081d38:	f001 fa68 	bl	808320c <_ZdlPvj>
 8081d3c:	4620      	mov	r0, r4
 8081d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8081d42:	2114      	movs	r1, #20
 8081d44:	f001 ba62 	b.w	808320c <_ZdlPvj>
 8081d48:	bd38      	pop	{r3, r4, r5, pc}

08081d4a <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8081d4a:	b510      	push	{r4, lr}
 8081d4c:	b088      	sub	sp, #32
 8081d4e:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8081d50:	4668      	mov	r0, sp
 8081d52:	f000 fd90 	bl	8082876 <_ZN6StringC1EPKc>
    return (*fn)(p);
 8081d56:	4669      	mov	r1, sp
 8081d58:	a804      	add	r0, sp, #16
 8081d5a:	f000 fdae 	bl	80828ba <_ZN6StringC1ERKS_>
 8081d5e:	a804      	add	r0, sp, #16
 8081d60:	47a0      	blx	r4
 8081d62:	4604      	mov	r4, r0
 8081d64:	a804      	add	r0, sp, #16
 8081d66:	f000 fd3c 	bl	80827e2 <_ZN6StringD1Ev>
    String p(param);
 8081d6a:	4668      	mov	r0, sp
 8081d6c:	f000 fd39 	bl	80827e2 <_ZN6StringD1Ev>
}
 8081d70:	4620      	mov	r0, r4
 8081d72:	b008      	add	sp, #32
 8081d74:	bd10      	pop	{r4, pc}

08081d76 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8081d76:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 8081d78:	2300      	movs	r3, #0
         size = sizeof(*this);
 8081d7a:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 8081d7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 8081d80:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8081d82:	4669      	mov	r1, sp
 8081d84:	461a      	mov	r2, r3
 8081d86:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 8081d88:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 8081d8c:	f8ad 4000 	strh.w	r4, [sp]
 8081d90:	f7ff fd36 	bl	8081800 <spark_function>
}
 8081d94:	b004      	add	sp, #16
 8081d96:	bd10      	pop	{r4, pc}

08081d98 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 8081d98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
 8081d9a:	230c      	movs	r3, #12
    spark_cloud_disconnect_options opts = {};
 8081d9c:	2100      	movs	r1, #0
    opts.size = sizeof(opts);
 8081d9e:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
 8081da2:	6803      	ldr	r3, [r0, #0]
    spark_cloud_disconnect_options opts = {};
 8081da4:	f8ad 100d 	strh.w	r1, [sp, #13]
    opts.flags = flags_;
 8081da8:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
 8081dac:	7a03      	ldrb	r3, [r0, #8]
    spark_cloud_disconnect_options opts = {};
 8081dae:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.graceful = graceful_;
 8081db2:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
 8081db6:	6843      	ldr	r3, [r0, #4]
 8081db8:	9302      	str	r3, [sp, #8]
    opts.clear_session = clearSession_;
 8081dba:	7a43      	ldrb	r3, [r0, #9]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 8081dbc:	a801      	add	r0, sp, #4
    opts.clear_session = clearSession_;
 8081dbe:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 8081dc2:	f7ff fd6d 	bl	80818a0 <spark_cloud_disconnect>
}
 8081dc6:	b005      	add	sp, #20
 8081dc8:	f85d fb04 	ldr.w	pc, [sp], #4

08081dcc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 8081dcc:	680b      	ldr	r3, [r1, #0]
 8081dce:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 8081dd0:	b113      	cbz	r3, 8081dd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 8081dd2:	685a      	ldr	r2, [r3, #4]
 8081dd4:	3201      	adds	r2, #1
 8081dd6:	605a      	str	r2, [r3, #4]
      }
 8081dd8:	4770      	bx	lr

08081dda <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8081dda:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081ddc:	460e      	mov	r6, r1
 8081dde:	4604      	mov	r4, r0
 8081de0:	f856 3b04 	ldr.w	r3, [r6], #4
 8081de4:	460d      	mov	r5, r1
 8081de6:	a801      	add	r0, sp, #4
 8081de8:	4631      	mov	r1, r6
 8081dea:	9300      	str	r3, [sp, #0]
 8081dec:	f7ff ffee 	bl	8081dcc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8081df0:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8081df2:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8081df4:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 8081df6:	2300      	movs	r3, #0
	_M_pi = __tmp;
 8081df8:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 8081dfa:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 8081dfc:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8081dfe:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 8081e00:	f7fe fe20 	bl	8080a44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081e04:	4630      	mov	r0, r6
 8081e06:	f7fe fe1d 	bl	8080a44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 8081e0a:	4628      	mov	r0, r5
 8081e0c:	2108      	movs	r1, #8
 8081e0e:	f001 f9fd 	bl	808320c <_ZdlPvj>
        return p;
    }
 8081e12:	4620      	mov	r0, r4
 8081e14:	b002      	add	sp, #8
 8081e16:	bd70      	pop	{r4, r5, r6, pc}

08081e18 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 8081e18:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081e1a:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 8081e1c:	460b      	mov	r3, r1
 8081e1e:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081e20:	c803      	ldmia	r0, {r0, r1}
 8081e22:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8081e26:	e893 0003 	ldmia.w	r3, {r0, r1}
 8081e2a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8081e2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8081e32:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8081e36:	b002      	add	sp, #8
 8081e38:	bd10      	pop	{r4, pc}

08081e3a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 8081e3a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 8081e3c:	b510      	push	{r4, lr}
      if (_M_empty())
 8081e3e:	b90a      	cbnz	r2, 8081e44 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8081e40:	f001 f9e8 	bl	8083214 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081e44:	68c3      	ldr	r3, [r0, #12]
    }
 8081e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081e4a:	4718      	bx	r3

08081e4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081e4c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8081e4e:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8081e50:	f100 0110 	add.w	r1, r0, #16
 8081e54:	f7ff fff1 	bl	8081e3a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 8081e58:	bd08      	pop	{r3, pc}

08081e5a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 8081e5a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 8081e5c:	b510      	push	{r4, lr}
      if (_M_empty())
 8081e5e:	b90a      	cbnz	r2, 8081e64 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8081e60:	f001 f9d8 	bl	8083214 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081e64:	68c3      	ldr	r3, [r0, #12]
    }
 8081e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081e6a:	4718      	bx	r3

08081e6c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081e6c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8081e6e:	6800      	ldr	r0, [r0, #0]
 8081e70:	f100 0110 	add.w	r1, r0, #16
 8081e74:	f7ff fff1 	bl	8081e5a <_ZNKSt8functionIFvRKbEEclES1_>
      }
 8081e78:	bd08      	pop	{r3, pc}
	...

08081e7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 8081e7c:	b538      	push	{r3, r4, r5, lr}
 8081e7e:	2300      	movs	r3, #0
 8081e80:	4604      	mov	r4, r0
 8081e82:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081e84:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 8081e86:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081e88:	f7fe f90f 	bl	80800aa <_Znwj>
 8081e8c:	b128      	cbz	r0, 8081e9a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 8081e8e:	2301      	movs	r3, #1
 8081e90:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 8081e94:	4b02      	ldr	r3, [pc, #8]	; (8081ea0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8081e96:	60c5      	str	r5, [r0, #12]
 8081e98:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081e9a:	6020      	str	r0, [r4, #0]
	}
 8081e9c:	4620      	mov	r0, r4
 8081e9e:	bd38      	pop	{r3, r4, r5, pc}
 8081ea0:	08084828 	.word	0x08084828

08081ea4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 8081ea4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8081ea6:	2300      	movs	r3, #0
 8081ea8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8081eaa:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8081eac:	4604      	mov	r4, r0
 8081eae:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8081eb0:	b12b      	cbz	r3, 8081ebe <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081eb2:	2202      	movs	r2, #2
 8081eb4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081eb6:	68eb      	ldr	r3, [r5, #12]
 8081eb8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8081eba:	68ab      	ldr	r3, [r5, #8]
 8081ebc:	60a3      	str	r3, [r4, #8]
    }
 8081ebe:	4620      	mov	r0, r4
 8081ec0:	bd38      	pop	{r3, r4, r5, pc}
	...

08081ec4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 8081ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081ec6:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8081ec8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 8081eca:	4668      	mov	r0, sp
 8081ecc:	f7ff ff06 	bl	8081cdc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 8081ed0:	f04f 0302 	mov.w	r3, #2
 8081ed4:	e8d4 2f4f 	ldrexb	r2, [r4]
 8081ed8:	2a00      	cmp	r2, #0
 8081eda:	d103      	bne.n	8081ee4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 8081edc:	e8c4 3f41 	strexb	r1, r3, [r4]
 8081ee0:	2900      	cmp	r1, #0
 8081ee2:	d1f7      	bne.n	8081ed4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 8081ee4:	d125      	bne.n	8081f32 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 8081ee6:	f104 050c 	add.w	r5, r4, #12
 8081eea:	4669      	mov	r1, sp
 8081eec:	4628      	mov	r0, r5
 8081eee:	f7ff fef5 	bl	8081cdc <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 8081ef2:	2301      	movs	r3, #1
 8081ef4:	f3bf 8f5b 	dmb	ish
 8081ef8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 8081efa:	2000      	movs	r0, #0
 8081efc:	f3bf 8f5b 	dmb	ish
 8081f00:	f104 0308 	add.w	r3, r4, #8
 8081f04:	e853 6f00 	ldrex	r6, [r3]
 8081f08:	e843 0200 	strex	r2, r0, [r3]
 8081f0c:	2a00      	cmp	r2, #0
 8081f0e:	d1f9      	bne.n	8081f04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 8081f10:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 8081f14:	b16e      	cbz	r6, 8081f32 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 8081f16:	f7ff fc35 	bl	8081784 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 8081f1a:	b178      	cbz	r0, 8081f3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8081f1c:	4629      	mov	r1, r5
 8081f1e:	4630      	mov	r0, r6
 8081f20:	f7ff ff8b 	bl	8081e3a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 8081f24:	4630      	mov	r0, r6
 8081f26:	f7ff fed0 	bl	8081cca <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 8081f2a:	2110      	movs	r1, #16
 8081f2c:	4630      	mov	r0, r6
 8081f2e:	f001 f96d 	bl	808320c <_ZdlPvj>
        p_->setError(std::move(error));
 8081f32:	4668      	mov	r0, sp
 8081f34:	f7ff fedf 	bl	8081cf6 <_ZN8particle5ErrorD1Ev>
    }
 8081f38:	b009      	add	sp, #36	; 0x24
 8081f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8081f3c:	4631      	mov	r1, r6
 8081f3e:	a802      	add	r0, sp, #8
 8081f40:	f7ff ffb0 	bl	8081ea4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 8081f44:	68e0      	ldr	r0, [r4, #12]
 8081f46:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8081f4a:	b108      	cbz	r0, 8081f50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 8081f4c:	f002 f986 	bl	808425c <strdup>
        type_(type) {
 8081f50:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8081f52:	2010      	movs	r0, #16
 8081f54:	f8ad 501c 	strh.w	r5, [sp, #28]
 8081f58:	f7fe f8a7 	bl	80800aa <_Znwj>
 8081f5c:	4605      	mov	r5, r0
 8081f5e:	b1e8      	cbz	r0, 8081f9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 8081f60:	2700      	movs	r7, #0
 8081f62:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081f64:	2018      	movs	r0, #24
 8081f66:	f7fe f8a0 	bl	80800aa <_Znwj>
 8081f6a:	4604      	mov	r4, r0
 8081f6c:	b188      	cbz	r0, 8081f92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 8081f6e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8081f70:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8081f72:	a802      	add	r0, sp, #8
 8081f74:	f7ff ff50 	bl	8081e18 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081f78:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8081f7a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8081f7c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081f7e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8081f80:	9204      	str	r2, [sp, #16]
 8081f82:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8081f84:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8081f86:	60e3      	str	r3, [r4, #12]
 8081f88:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 8081f8c:	9205      	str	r2, [sp, #20]
 8081f8e:	f7ff fea5 	bl	8081cdc <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 8081f92:	4b08      	ldr	r3, [pc, #32]	; (8081fb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081f94:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8081f96:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8081f98:	4b07      	ldr	r3, [pc, #28]	; (8081fb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 8081f9a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 8081f9c:	a806      	add	r0, sp, #24
 8081f9e:	f7ff feaa 	bl	8081cf6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 8081fa2:	a802      	add	r0, sp, #8
 8081fa4:	f7ff fe91 	bl	8081cca <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8081fa8:	2200      	movs	r2, #0
 8081faa:	4629      	mov	r1, r5
 8081fac:	4803      	ldr	r0, [pc, #12]	; (8081fbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 8081fae:	f7ff fbf1 	bl	8081794 <application_thread_invoke>
 8081fb2:	e7b7      	b.n	8081f24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 8081fb4:	08081e4d 	.word	0x08081e4d
 8081fb8:	080820e5 	.word	0x080820e5
 8081fbc:	080819f7 	.word	0x080819f7

08081fc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8081fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8081fc4:	b08a      	sub	sp, #40	; 0x28
 8081fc6:	4605      	mov	r5, r0
 8081fc8:	460c      	mov	r4, r1
 8081fca:	4617      	mov	r7, r2
 8081fcc:	4698      	mov	r8, r3
 8081fce:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8081fd2:	f7ff fc2d 	bl	8081830 <spark_cloud_flag_connected>
 8081fd6:	ae07      	add	r6, sp, #28
    if (!connected()) {
 8081fd8:	4682      	mov	sl, r0
 8081fda:	bb38      	cbnz	r0, 808202c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 8081fdc:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8081fe0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8081fe2:	a905      	add	r1, sp, #20
 8081fe4:	4630      	mov	r0, r6
 8081fe6:	f8ad 3018 	strh.w	r3, [sp, #24]
 8081fea:	f7ff fe77 	bl	8081cdc <_ZN8particle5ErrorC1EOS0_>
 8081fee:	2014      	movs	r0, #20
 8081ff0:	f7fe f85b 	bl	80800aa <_Znwj>
 8081ff4:	4604      	mov	r4, r0
 8081ff6:	b148      	cbz	r0, 808200c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8081ff8:	2302      	movs	r3, #2
 8081ffa:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8081ffc:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8081ffe:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8082002:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 8082004:	4631      	mov	r1, r6
 8082006:	300c      	adds	r0, #12
 8082008:	f7ff fe68 	bl	8081cdc <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 808200c:	4628      	mov	r0, r5
	: __shared_count(__p)
 808200e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8082010:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 8082014:	f7ff ff32 	bl	8081e7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8082018:	4630      	mov	r0, r6
 808201a:	f7ff fe6c 	bl	8081cf6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 808201e:	a805      	add	r0, sp, #20
 8082020:	f7ff fe69 	bl	8081cf6 <_ZN8particle5ErrorD1Ev>
}
 8082024:	4628      	mov	r0, r5
 8082026:	b00a      	add	sp, #40	; 0x28
 8082028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 808202c:	230c      	movs	r3, #12
 808202e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8082032:	2014      	movs	r0, #20
 8082034:	e9cd aa08 	strd	sl, sl, [sp, #32]
 8082038:	9307      	str	r3, [sp, #28]
 808203a:	f7fe f836 	bl	80800aa <_Znwj>
 808203e:	4601      	mov	r1, r0
 8082040:	b128      	cbz	r0, 808204e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8082042:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 8082046:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808204a:	f880 a001 	strb.w	sl, [r0, #1]
 808204e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8082050:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 8082052:	f7ff ff13 	bl	8081e7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 8082056:	4b22      	ldr	r3, [pc, #136]	; (80820e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8082058:	2008      	movs	r0, #8
 808205a:	9308      	str	r3, [sp, #32]
 808205c:	f7fe f825 	bl	80800aa <_Znwj>
 8082060:	4682      	mov	sl, r0
 8082062:	b128      	cbz	r0, 8082070 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082064:	9b03      	ldr	r3, [sp, #12]
 8082066:	a904      	add	r1, sp, #16
 8082068:	f840 3b04 	str.w	r3, [r0], #4
 808206c:	f7ff feae 	bl	8081dcc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8082070:	4642      	mov	r2, r8
 8082072:	4639      	mov	r1, r7
 8082074:	4620      	mov	r0, r4
 8082076:	9600      	str	r6, [sp, #0]
 8082078:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 808207c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8082080:	f7ff fbe6 	bl	8081850 <spark_send_event>
 8082084:	b9b8      	cbnz	r0, 80820b6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 8082086:	9b03      	ldr	r3, [sp, #12]
 8082088:	785b      	ldrb	r3, [r3, #1]
 808208a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 808208e:	b993      	cbnz	r3, 80820b6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 8082090:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 8082094:	a905      	add	r1, sp, #20
 8082096:	a803      	add	r0, sp, #12
 8082098:	9205      	str	r2, [sp, #20]
 808209a:	f8ad 3018 	strh.w	r3, [sp, #24]
 808209e:	f7ff ff11 	bl	8081ec4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80820a2:	a805      	add	r0, sp, #20
 80820a4:	f7ff fe27 	bl	8081cf6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80820a8:	a805      	add	r0, sp, #20
 80820aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80820ac:	f7ff fe95 	bl	8081dda <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80820b0:	a806      	add	r0, sp, #24
 80820b2:	f7fe fcc7 	bl	8080a44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80820b6:	9b03      	ldr	r3, [sp, #12]
 80820b8:	a904      	add	r1, sp, #16
 80820ba:	a806      	add	r0, sp, #24
 80820bc:	9305      	str	r3, [sp, #20]
 80820be:	f7ff fe85 	bl	8081dcc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80820c2:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80820c4:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80820c6:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80820c8:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80820ca:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80820cc:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80820ce:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80820d0:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80820d2:	f7fe fcb7 	bl	8080a44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80820d6:	a804      	add	r0, sp, #16
 80820d8:	f7fe fcb4 	bl	8080a44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80820dc:	e7a2      	b.n	8082024 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80820de:	bf00      	nop
 80820e0:	080821a9 	.word	0x080821a9

080820e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80820e4:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80820e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80820e8:	4605      	mov	r5, r0
	  switch (__op)
 80820ea:	d007      	beq.n	80820fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80820ec:	2a03      	cmp	r2, #3
 80820ee:	d018      	beq.n	8082122 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80820f0:	2a01      	cmp	r2, #1
 80820f2:	d101      	bne.n	80820f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80820f4:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80820f6:	6003      	str	r3, [r0, #0]
	}
 80820f8:	2000      	movs	r0, #0
 80820fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80820fc:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80820fe:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8082100:	f7fd ffd3 	bl	80800aa <_Znwj>
 8082104:	4604      	mov	r4, r0
 8082106:	b150      	cbz	r0, 808211e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8082108:	4631      	mov	r1, r6
 808210a:	f7ff fecb 	bl	8081ea4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 808210e:	6930      	ldr	r0, [r6, #16]
 8082110:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8082114:	b108      	cbz	r0, 808211a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 8082116:	f002 f8a1 	bl	808425c <strdup>
        type_(type) {
 808211a:	6120      	str	r0, [r4, #16]
 808211c:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 808211e:	602c      	str	r4, [r5, #0]
	}
 8082120:	e7ea      	b.n	80820f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 8082122:	6804      	ldr	r4, [r0, #0]
 8082124:	2c00      	cmp	r4, #0
 8082126:	d0e7      	beq.n	80820f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 8082128:	f104 0010 	add.w	r0, r4, #16
 808212c:	f7ff fde3 	bl	8081cf6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 8082130:	4620      	mov	r0, r4
 8082132:	f7ff fdca 	bl	8081cca <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8082136:	2118      	movs	r1, #24
 8082138:	4620      	mov	r0, r4
 808213a:	f001 f867 	bl	808320c <_ZdlPvj>
 808213e:	e7db      	b.n	80820f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

08082140 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8082140:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8082142:	2300      	movs	r3, #0
 8082144:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8082146:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8082148:	4604      	mov	r4, r0
 808214a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 808214c:	b12b      	cbz	r3, 808215a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808214e:	2202      	movs	r2, #2
 8082150:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8082152:	68eb      	ldr	r3, [r5, #12]
 8082154:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8082156:	68ab      	ldr	r3, [r5, #8]
 8082158:	60a3      	str	r3, [r4, #8]
    }
 808215a:	4620      	mov	r0, r4
 808215c:	bd38      	pop	{r3, r4, r5, pc}

0808215e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 808215e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8082160:	b570      	push	{r4, r5, r6, lr}
 8082162:	4604      	mov	r4, r0
	  switch (__op)
 8082164:	d007      	beq.n	8082176 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 8082166:	2a03      	cmp	r2, #3
 8082168:	d012      	beq.n	8082190 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 808216a:	2a01      	cmp	r2, #1
 808216c:	d101      	bne.n	8082172 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 808216e:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8082170:	6003      	str	r3, [r0, #0]
	}
 8082172:	2000      	movs	r0, #0
 8082174:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8082176:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 8082178:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 808217a:	f7fd ff96 	bl	80800aa <_Znwj>
 808217e:	4605      	mov	r5, r0
 8082180:	b120      	cbz	r0, 808218c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 8082182:	4631      	mov	r1, r6
 8082184:	f7ff ffdc 	bl	8082140 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8082188:	7c33      	ldrb	r3, [r6, #16]
 808218a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 808218c:	6025      	str	r5, [r4, #0]
	}
 808218e:	e7f0      	b.n	8082172 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 8082190:	6804      	ldr	r4, [r0, #0]
 8082192:	2c00      	cmp	r4, #0
 8082194:	d0ed      	beq.n	8082172 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 8082196:	4620      	mov	r0, r4
 8082198:	f7ff fd97 	bl	8081cca <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 808219c:	2114      	movs	r1, #20
 808219e:	4620      	mov	r0, r4
 80821a0:	f001 f834 	bl	808320c <_ZdlPvj>
 80821a4:	e7e5      	b.n	8082172 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080821a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80821a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80821aa:	4604      	mov	r4, r0
 80821ac:	b089      	sub	sp, #36	; 0x24
 80821ae:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80821b0:	a801      	add	r0, sp, #4
 80821b2:	4611      	mov	r1, r2
 80821b4:	f7ff fe11 	bl	8081dda <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80821b8:	b1a4      	cbz	r4, 80821e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80821ba:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80821bc:	b11d      	cbz	r5, 80821c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80821be:	4628      	mov	r0, r5
 80821c0:	f002 f84c 	bl	808425c <strdup>
 80821c4:	4605      	mov	r5, r0
 80821c6:	a801      	add	r0, sp, #4
 80821c8:	a903      	add	r1, sp, #12
        type_(type) {
 80821ca:	9503      	str	r5, [sp, #12]
 80821cc:	f8ad 4010 	strh.w	r4, [sp, #16]
 80821d0:	f7ff fe78 	bl	8081ec4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80821d4:	a803      	add	r0, sp, #12
 80821d6:	f7ff fd8e 	bl	8081cf6 <_ZN8particle5ErrorD1Ev>
 80821da:	a802      	add	r0, sp, #8
 80821dc:	f7fe fc32 	bl	8080a44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80821e0:	b009      	add	sp, #36	; 0x24
 80821e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80821e4:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80821e6:	9d01      	ldr	r5, [sp, #4]
 80821e8:	e8d5 2f4f 	ldrexb	r2, [r5]
 80821ec:	2a00      	cmp	r2, #0
 80821ee:	d103      	bne.n	80821f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80821f0:	e8c5 3f41 	strexb	r1, r3, [r5]
 80821f4:	2900      	cmp	r1, #0
 80821f6:	d1f7      	bne.n	80821e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80821f8:	d1ef      	bne.n	80821da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80821fa:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80821fc:	f3bf 8f5b 	dmb	ish
 8082200:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 8082202:	f3bf 8f5b 	dmb	ish
 8082206:	1d2b      	adds	r3, r5, #4
 8082208:	e853 6f00 	ldrex	r6, [r3]
 808220c:	e843 4200 	strex	r2, r4, [r3]
 8082210:	2a00      	cmp	r2, #0
 8082212:	d1f9      	bne.n	8082208 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 8082214:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 8082218:	2e00      	cmp	r6, #0
 808221a:	d0de      	beq.n	80821da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 808221c:	4620      	mov	r0, r4
 808221e:	f7ff fab1 	bl	8081784 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 8082222:	4607      	mov	r7, r0
 8082224:	b160      	cbz	r0, 8082240 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8082226:	4630      	mov	r0, r6
 8082228:	f105 010c 	add.w	r1, r5, #12
 808222c:	f7ff fe15 	bl	8081e5a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 8082230:	4630      	mov	r0, r6
 8082232:	f7ff fd4a 	bl	8081cca <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 8082236:	2110      	movs	r1, #16
 8082238:	4630      	mov	r0, r6
 808223a:	f000 ffe7 	bl	808320c <_ZdlPvj>
 808223e:	e7cc      	b.n	80821da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8082240:	4631      	mov	r1, r6
 8082242:	a803      	add	r0, sp, #12
 8082244:	f7ff ff7c 	bl	8082140 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8082248:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808224a:	2010      	movs	r0, #16
 808224c:	f88d 301c 	strb.w	r3, [sp, #28]
 8082250:	f7fd ff2b 	bl	80800aa <_Znwj>
 8082254:	4605      	mov	r5, r0
 8082256:	b1d0      	cbz	r0, 808228e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 8082258:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808225a:	2014      	movs	r0, #20
 808225c:	f7fd ff25 	bl	80800aa <_Znwj>
 8082260:	4604      	mov	r4, r0
 8082262:	b178      	cbz	r0, 8082284 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 8082264:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8082266:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8082268:	a803      	add	r0, sp, #12
 808226a:	f7ff fdd5 	bl	8081e18 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808226e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8082270:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8082272:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082274:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 8082276:	9205      	str	r2, [sp, #20]
 8082278:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808227a:	60e3      	str	r3, [r4, #12]
 808227c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 8082280:	9206      	str	r2, [sp, #24]
 8082282:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 8082284:	4b06      	ldr	r3, [pc, #24]	; (80822a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082286:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8082288:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808228a:	4b06      	ldr	r3, [pc, #24]	; (80822a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 808228c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 808228e:	a803      	add	r0, sp, #12
 8082290:	f7ff fd1b 	bl	8081cca <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8082294:	2200      	movs	r2, #0
 8082296:	4629      	mov	r1, r5
 8082298:	4803      	ldr	r0, [pc, #12]	; (80822a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 808229a:	f7ff fa7b 	bl	8081794 <application_thread_invoke>
 808229e:	e7c7      	b.n	8082230 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80822a0:	08081e6d 	.word	0x08081e6d
 80822a4:	0808215f 	.word	0x0808215f
 80822a8:	080819f7 	.word	0x080819f7

080822ac <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
 80822ac:	6800      	ldr	r0, [r0, #0]
 80822ae:	f000 b917 	b.w	80824e0 <_ZN7TwoWire4lockEv>

080822b2 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 80822b2:	b510      	push	{r4, lr}
 80822b4:	4604      	mov	r4, r0
      lock_(_lock) {
 80822b6:	6001      	str	r1, [r0, #0]
 80822b8:	7102      	strb	r2, [r0, #4]
    if (lock_) {
 80822ba:	b10a      	cbz	r2, 80822c0 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 80822bc:	f7ff fff6 	bl	80822ac <_ZN9FuelGauge4lockEv>
}
 80822c0:	4620      	mov	r0, r4
 80822c2:	bd10      	pop	{r4, pc}

080822c4 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
 80822c4:	b538      	push	{r3, r4, r5, lr}
 80822c6:	4604      	mov	r4, r0
 80822c8:	460d      	mov	r5, r1
            return &Wire3;
 80822ca:	f000 ff6d 	bl	80831a8 <_Z20__fetch_global_Wire3v>
        : FuelGauge(*fuelWireInstance(), _lock)
 80822ce:	462a      	mov	r2, r5
            return &Wire3;
 80822d0:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
 80822d2:	4620      	mov	r0, r4
 80822d4:	f7ff ffed 	bl	80822b2 <_ZN9FuelGaugeC1ER7TwoWireb>
}
 80822d8:	4620      	mov	r0, r4
 80822da:	bd38      	pop	{r3, r4, r5, pc}

080822dc <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
 80822dc:	6800      	ldr	r0, [r0, #0]
 80822de:	f000 b908 	b.w	80824f2 <_ZN7TwoWire6unlockEv>

080822e2 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 80822e2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80822e6:	4604      	mov	r4, r0
 80822e8:	460d      	mov	r5, r1
 80822ea:	4617      	mov	r7, r2
 80822ec:	461e      	mov	r6, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
 80822ee:	f7ff ffdd 	bl	80822ac <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80822f2:	2336      	movs	r3, #54	; 0x36
 80822f4:	f88d 3000 	strb.w	r3, [sp]
 80822f8:	2300      	movs	r3, #0
 80822fa:	f04f 0801 	mov.w	r8, #1
 80822fe:	9301      	str	r3, [sp, #4]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
 8082300:	230a      	movs	r3, #10
    i2c_.beginTransmission(config);
 8082302:	4669      	mov	r1, sp
 8082304:	6820      	ldr	r0, [r4, #0]
 8082306:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8082308:	f88d 8008 	strb.w	r8, [sp, #8]
 808230c:	f000 f8c9 	bl	80824a2 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
 8082310:	6820      	ldr	r0, [r4, #0]
 8082312:	4629      	mov	r1, r5
 8082314:	6803      	ldr	r3, [r0, #0]
 8082316:	689b      	ldr	r3, [r3, #8]
 8082318:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
 808231a:	4641      	mov	r1, r8
 808231c:	6820      	ldr	r0, [r4, #0]
 808231e:	f000 f8d8 	bl	80824d2 <_ZN7TwoWire15endTransmissionEh>
 8082322:	4605      	mov	r5, r0
 8082324:	b140      	cbz	r0, 8082338 <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
 8082326:	f06f 059f 	mvn.w	r5, #159	; 0x9f

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 808232a:	4620      	mov	r0, r4
 808232c:	f7ff ffd6 	bl	80822dc <_ZN9FuelGauge6unlockEv>
}
 8082330:	4628      	mov	r0, r5
 8082332:	b004      	add	sp, #16
 8082334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
 8082338:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
 808233a:	4669      	mov	r1, sp
 808233c:	6820      	ldr	r0, [r4, #0]
 808233e:	9301      	str	r3, [sp, #4]
 8082340:	f000 f87c 	bl	808243c <_ZN7TwoWire11requestFromERK16WireTransmission>
 8082344:	2802      	cmp	r0, #2
 8082346:	d1ee      	bne.n	8082326 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
 8082348:	6820      	ldr	r0, [r4, #0]
 808234a:	6803      	ldr	r3, [r0, #0]
 808234c:	695b      	ldr	r3, [r3, #20]
 808234e:	4798      	blx	r3
 8082350:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
 8082352:	6820      	ldr	r0, [r4, #0]
 8082354:	6803      	ldr	r3, [r0, #0]
 8082356:	695b      	ldr	r3, [r3, #20]
 8082358:	4798      	blx	r3
 808235a:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
 808235c:	e7e5      	b.n	808232a <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>
	...

08082360 <_ZN9FuelGauge6getSoCEv>:
    byte MSB = 0;
 8082360:	2300      	movs	r3, #0
float FuelGauge::getSoC() {
 8082362:	b513      	push	{r0, r1, r4, lr}
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 8082364:	2104      	movs	r1, #4
    byte MSB = 0;
 8082366:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
 808236a:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 808236e:	f10d 0206 	add.w	r2, sp, #6
 8082372:	f10d 0307 	add.w	r3, sp, #7
 8082376:	f7ff ffb4 	bl	80822e2 <_ZN9FuelGauge12readRegisterEhRhS0_>
 808237a:	b9a0      	cbnz	r0, 80823a6 <_ZN9FuelGauge6getSoCEv+0x46>
        float decimal = LSB / 256.0;
 808237c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8082380:	f001 f89e 	bl	80834c0 <__aeabi_i2d>
 8082384:	2200      	movs	r2, #0
 8082386:	4b09      	ldr	r3, [pc, #36]	; (80823ac <_ZN9FuelGauge6getSoCEv+0x4c>)
 8082388:	f001 f904 	bl	8083594 <__aeabi_dmul>
 808238c:	f001 fb5c 	bl	8083a48 <__aeabi_d2f>
 8082390:	4604      	mov	r4, r0
        return MSB + decimal;
 8082392:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8082396:	f001 fc61 	bl	8083c5c <__aeabi_i2f>
 808239a:	4601      	mov	r1, r0
 808239c:	4620      	mov	r0, r4
 808239e:	f001 fba9 	bl	8083af4 <__addsf3>
}
 80823a2:	b002      	add	sp, #8
 80823a4:	bd10      	pop	{r4, pc}
        return -1.0f;
 80823a6:	4802      	ldr	r0, [pc, #8]	; (80823b0 <_ZN9FuelGauge6getSoCEv+0x50>)
 80823a8:	e7fb      	b.n	80823a2 <_ZN9FuelGauge6getSoCEv+0x42>
 80823aa:	bf00      	nop
 80823ac:	3f700000 	.word	0x3f700000
 80823b0:	bf800000 	.word	0xbf800000

080823b4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80823b4:	4770      	bx	lr

080823b6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80823b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80823b8:	4606      	mov	r6, r0
 80823ba:	4615      	mov	r5, r2
 80823bc:	460c      	mov	r4, r1
 80823be:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80823c0:	42bc      	cmp	r4, r7
 80823c2:	d006      	beq.n	80823d2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80823c4:	6833      	ldr	r3, [r6, #0]
 80823c6:	4630      	mov	r0, r6
 80823c8:	689b      	ldr	r3, [r3, #8]
 80823ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80823ce:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80823d0:	e7f6      	b.n	80823c0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80823d2:	4628      	mov	r0, r5
 80823d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080823d6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80823d6:	2200      	movs	r2, #0
 80823d8:	7c00      	ldrb	r0, [r0, #16]
 80823da:	f7ff b8c9 	b.w	8081570 <hal_i2c_write>

080823de <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80823de:	2100      	movs	r1, #0
 80823e0:	7c00      	ldrb	r0, [r0, #16]
 80823e2:	f7ff b8cd 	b.w	8081580 <hal_i2c_available>

080823e6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80823e6:	2100      	movs	r1, #0
 80823e8:	7c00      	ldrb	r0, [r0, #16]
 80823ea:	f7ff b8d1 	b.w	8081590 <hal_i2c_read>

080823ee <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80823ee:	2100      	movs	r1, #0
 80823f0:	7c00      	ldrb	r0, [r0, #16]
 80823f2:	f7ff b8d5 	b.w	80815a0 <hal_i2c_peek>

080823f6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80823f6:	2100      	movs	r1, #0
 80823f8:	7c00      	ldrb	r0, [r0, #16]
 80823fa:	f7ff b8d9 	b.w	80815b0 <hal_i2c_flush>

080823fe <_ZN7TwoWireD0Ev>:
 80823fe:	b510      	push	{r4, lr}
 8082400:	4604      	mov	r4, r0
 8082402:	2114      	movs	r1, #20
 8082404:	f000 ff02 	bl	808320c <_ZdlPvj>
 8082408:	4620      	mov	r0, r4
 808240a:	bd10      	pop	{r4, pc}

0808240c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 808240c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808240e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8082412:	4604      	mov	r4, r0
 8082414:	4608      	mov	r0, r1
 8082416:	2100      	movs	r1, #0
 8082418:	e9c4 1301 	strd	r1, r3, [r4, #4]
 808241c:	4b03      	ldr	r3, [pc, #12]	; (808242c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 808241e:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 8082420:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 8082422:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 8082424:	f7ff f8d4 	bl	80815d0 <hal_i2c_init>
}
 8082428:	4620      	mov	r0, r4
 808242a:	bd10      	pop	{r4, pc}
 808242c:	08084844 	.word	0x08084844

08082430 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 8082430:	2300      	movs	r3, #0
 8082432:	7c00      	ldrb	r0, [r0, #16]
 8082434:	461a      	mov	r2, r3
 8082436:	4619      	mov	r1, r3
 8082438:	f7ff b882 	b.w	8081540 <hal_i2c_begin>

0808243c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 808243c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 808243e:	2200      	movs	r2, #0
 8082440:	2314      	movs	r3, #20
 8082442:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8082446:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 808244a:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 808244c:	7c00      	ldrb	r0, [r0, #16]
 808244e:	f88d 3008 	strb.w	r3, [sp, #8]
 8082452:	684b      	ldr	r3, [r1, #4]
 8082454:	9303      	str	r3, [sp, #12]
 8082456:	68cb      	ldr	r3, [r1, #12]
 8082458:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 808245a:	7a0b      	ldrb	r3, [r1, #8]
 808245c:	a901      	add	r1, sp, #4
 808245e:	9305      	str	r3, [sp, #20]
 8082460:	f7ff f8ce 	bl	8081600 <hal_i2c_request_ex>
}
 8082464:	b007      	add	sp, #28
 8082466:	f85d fb04 	ldr.w	pc, [sp], #4

0808246a <_ZN7TwoWire11requestFromEhjh>:
{
 808246a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 808246c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808246e:	f88d 1000 	strb.w	r1, [sp]
 8082472:	f04f 0164 	mov.w	r1, #100	; 0x64
 8082476:	bf18      	it	ne
 8082478:	2301      	movne	r3, #1
 808247a:	9103      	str	r1, [sp, #12]
 808247c:	4669      	mov	r1, sp
    size_ = size;
 808247e:	9201      	str	r2, [sp, #4]
 8082480:	f88d 3008 	strb.w	r3, [sp, #8]
 8082484:	f7ff ffda 	bl	808243c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 8082488:	b005      	add	sp, #20
 808248a:	f85d fb04 	ldr.w	pc, [sp], #4

0808248e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 808248e:	2301      	movs	r3, #1
 8082490:	f7ff bfeb 	b.w	808246a <_ZN7TwoWire11requestFromEhjh>

08082494 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 8082494:	2200      	movs	r2, #0
 8082496:	7c00      	ldrb	r0, [r0, #16]
 8082498:	f7ff b85a 	b.w	8081550 <hal_i2c_begin_transmission>

0808249c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 808249c:	b2c9      	uxtb	r1, r1
 808249e:	f7ff bff9 	b.w	8082494 <_ZN7TwoWire17beginTransmissionEh>

080824a2 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
 80824a2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 80824a4:	2200      	movs	r2, #0
 80824a6:	460b      	mov	r3, r1
 80824a8:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80824ac:	2214      	movs	r2, #20
 80824ae:	f8ad 2004 	strh.w	r2, [sp, #4]
    };
 80824b2:	685a      	ldr	r2, [r3, #4]
      .address = address_,
 80824b4:	7809      	ldrb	r1, [r1, #0]
    };
 80824b6:	9203      	str	r2, [sp, #12]
 80824b8:	68da      	ldr	r2, [r3, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80824ba:	7a1b      	ldrb	r3, [r3, #8]
    };
 80824bc:	9204      	str	r2, [sp, #16]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
 80824be:	7c00      	ldrb	r0, [r0, #16]
 80824c0:	aa01      	add	r2, sp, #4
 80824c2:	f88d 1008 	strb.w	r1, [sp, #8]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80824c6:	9305      	str	r3, [sp, #20]
 80824c8:	f7ff f842 	bl	8081550 <hal_i2c_begin_transmission>
}
 80824cc:	b007      	add	sp, #28
 80824ce:	f85d fb04 	ldr.w	pc, [sp], #4

080824d2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80824d2:	2200      	movs	r2, #0
 80824d4:	7c00      	ldrb	r0, [r0, #16]
 80824d6:	f7ff b843 	b.w	8081560 <hal_i2c_end_transmission>

080824da <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80824da:	2101      	movs	r1, #1
 80824dc:	f7ff bff9 	b.w	80824d2 <_ZN7TwoWire15endTransmissionEh>

080824e0 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 80824e0:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
 80824e2:	2100      	movs	r1, #0
 80824e4:	7c00      	ldrb	r0, [r0, #16]
 80824e6:	f7ff f87b 	bl	80815e0 <hal_i2c_lock>
}
 80824ea:	fab0 f080 	clz	r0, r0
 80824ee:	0940      	lsrs	r0, r0, #5
 80824f0:	bd08      	pop	{r3, pc}

080824f2 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 80824f2:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
 80824f4:	2100      	movs	r1, #0
 80824f6:	7c00      	ldrb	r0, [r0, #16]
 80824f8:	f7ff f87a 	bl	80815f0 <hal_i2c_unlock>
}
 80824fc:	fab0 f080 	clz	r0, r0
 8082500:	0940      	lsrs	r0, r0, #5
 8082502:	bd08      	pop	{r3, pc}

08082504 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 8082504:	4700      	bx	r0
	...

08082508 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 8082508:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 808250c:	2400      	movs	r4, #0
{
 808250e:	461d      	mov	r5, r3
 8082510:	460f      	mov	r7, r1
 8082512:	4690      	mov	r8, r2
 8082514:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
 8082516:	f7ff f803 	bl	8081520 <HAL_Interrupts_Detach>
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 808251a:	2304      	movs	r3, #4
  if (priority >= 0) {
 808251c:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 808251e:	f88d 300c 	strb.w	r3, [sp, #12]
    extra.IRQChannelSubPriority = subpriority;
 8082522:	bfa8      	it	ge
 8082524:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    HAL_InterruptExtraConfiguration extra = {0};
 8082528:	f8ad 400d 	strh.w	r4, [sp, #13]
 808252c:	f88d 400f 	strb.w	r4, [sp, #15]
    return &extra;
 8082530:	bfa4      	itt	ge
 8082532:	ac03      	addge	r4, sp, #12
    extra.IRQChannelSubPriority = subpriority;
 8082534:	f88d 300e 	strbge.w	r3, [sp, #14]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8082538:	463a      	mov	r2, r7
 808253a:	4643      	mov	r3, r8
 808253c:	4630      	mov	r0, r6
 808253e:	4906      	ldr	r1, [pc, #24]	; (8082558 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
 8082540:	9400      	str	r4, [sp, #0]
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 8082542:	bfa8      	it	ge
 8082544:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8082548:	f7fe ffe2 	bl	8081510 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 808254c:	fab0 f080 	clz	r0, r0
 8082550:	0940      	lsrs	r0, r0, #5
 8082552:	b004      	add	sp, #16
 8082554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082558:	08082505 	.word	0x08082505

0808255c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 808255c:	4770      	bx	lr

0808255e <_ZN9IPAddressD0Ev>:
 808255e:	b510      	push	{r4, lr}
 8082560:	4604      	mov	r4, r0
 8082562:	2108      	movs	r1, #8
 8082564:	f000 fe52 	bl	808320c <_ZdlPvj>
 8082568:	4620      	mov	r0, r4
 808256a:	bd10      	pop	{r4, pc}

0808256c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 808256c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808256e:	460e      	mov	r6, r1
 8082570:	2400      	movs	r4, #0
 8082572:	f100 0708 	add.w	r7, r0, #8
 8082576:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 8082578:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 808257c:	220a      	movs	r2, #10
 808257e:	4630      	mov	r0, r6
 8082580:	f000 f8fc 	bl	808277c <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8082584:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8082586:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 8082588:	d101      	bne.n	808258e <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 808258a:	4620      	mov	r0, r4
 808258c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 808258e:	2c00      	cmp	r4, #0
 8082590:	d0f2      	beq.n	8082578 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8082592:	212e      	movs	r1, #46	; 0x2e
 8082594:	4630      	mov	r0, r6
 8082596:	f000 f8d8 	bl	808274a <_ZN5Print5printEc>
 808259a:	4404      	add	r4, r0
 808259c:	e7ec      	b.n	8082578 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080825a0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80825a0:	4a02      	ldr	r2, [pc, #8]	; (80825ac <_ZN9IPAddressC1Ev+0xc>)
 80825a2:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80825a4:	2200      	movs	r2, #0
 80825a6:	6042      	str	r2, [r0, #4]
}
 80825a8:	4770      	bx	lr
 80825aa:	bf00      	nop
 80825ac:	0808486c 	.word	0x0808486c

080825b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80825b0:	4a02      	ldr	r2, [pc, #8]	; (80825bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 80825b2:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 80825b4:	680a      	ldr	r2, [r1, #0]
 80825b6:	6042      	str	r2, [r0, #4]
}
 80825b8:	4770      	bx	lr
 80825ba:	bf00      	nop
 80825bc:	0808486c 	.word	0x0808486c

080825c0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80825c0:	4a01      	ldr	r2, [pc, #4]	; (80825c8 <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 80825c2:	e9c0 2100 	strd	r2, r1, [r0]
}
 80825c6:	4770      	bx	lr
 80825c8:	0808486c 	.word	0x0808486c

080825cc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80825cc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80825ce:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80825d2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80825d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80825da:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80825de:	6044      	str	r4, [r0, #4]
}
 80825e0:	bd10      	pop	{r4, pc}
	...

080825e4 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80825e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80825e6:	4d04      	ldr	r5, [pc, #16]	; (80825f8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80825e8:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80825ea:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80825ee:	9500      	str	r5, [sp, #0]
 80825f0:	f7ff ffec 	bl	80825cc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80825f4:	b003      	add	sp, #12
 80825f6:	bd30      	pop	{r4, r5, pc}
 80825f8:	0808486c 	.word	0x0808486c

080825fc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80825fc:	4b01      	ldr	r3, [pc, #4]	; (8082604 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80825fe:	4a02      	ldr	r2, [pc, #8]	; (8082608 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8082600:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 8082602:	4770      	bx	lr
 8082604:	20000124 	.word	0x20000124
 8082608:	08084878 	.word	0x08084878

0808260c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 808260c:	2300      	movs	r3, #0
 808260e:	6840      	ldr	r0, [r0, #4]
 8082610:	461a      	mov	r2, r3
 8082612:	f7ff b94d 	b.w	80818b0 <network_connect>

08082616 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8082616:	2200      	movs	r2, #0
 8082618:	2102      	movs	r1, #2
 808261a:	6840      	ldr	r0, [r0, #4]
 808261c:	f7ff b958 	b.w	80818d0 <network_disconnect>

08082620 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8082620:	2200      	movs	r2, #0
 8082622:	6840      	ldr	r0, [r0, #4]
 8082624:	4611      	mov	r1, r2
 8082626:	f7ff b94b 	b.w	80818c0 <network_connecting>

0808262a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808262a:	2200      	movs	r2, #0
 808262c:	6840      	ldr	r0, [r0, #4]
 808262e:	4611      	mov	r1, r2
 8082630:	f7ff b956 	b.w	80818e0 <network_ready>

08082634 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8082634:	2300      	movs	r3, #0
 8082636:	6840      	ldr	r0, [r0, #4]
 8082638:	461a      	mov	r2, r3
 808263a:	4619      	mov	r1, r3
 808263c:	f7ff b958 	b.w	80818f0 <network_on>

08082640 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8082640:	2300      	movs	r3, #0
 8082642:	6840      	ldr	r0, [r0, #4]
 8082644:	461a      	mov	r2, r3
 8082646:	4619      	mov	r1, r3
 8082648:	f7ff b95a 	b.w	8081900 <network_off>

0808264c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 808264c:	2100      	movs	r1, #0
 808264e:	6840      	ldr	r0, [r0, #4]
 8082650:	f7ff b97e 	b.w	8081950 <network_is_on>

08082654 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 8082654:	2100      	movs	r1, #0
 8082656:	6840      	ldr	r0, [r0, #4]
 8082658:	f7ff b982 	b.w	8081960 <network_is_off>

0808265c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 808265c:	2200      	movs	r2, #0
 808265e:	6840      	ldr	r0, [r0, #4]
 8082660:	f081 0101 	eor.w	r1, r1, #1
 8082664:	f7ff b954 	b.w	8081910 <network_listen>

08082668 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8082668:	2200      	movs	r2, #0
 808266a:	6840      	ldr	r0, [r0, #4]
 808266c:	f7ff b960 	b.w	8081930 <network_set_listen_timeout>

08082670 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8082670:	2200      	movs	r2, #0
 8082672:	6840      	ldr	r0, [r0, #4]
 8082674:	4611      	mov	r1, r2
 8082676:	f7ff b963 	b.w	8081940 <network_get_listen_timeout>

0808267a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808267a:	2200      	movs	r2, #0
 808267c:	6840      	ldr	r0, [r0, #4]
 808267e:	4611      	mov	r1, r2
 8082680:	f7ff b94e 	b.w	8081920 <network_listening>

08082684 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8082684:	b570      	push	{r4, r5, r6, lr}
 8082686:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8082688:	2600      	movs	r6, #0
 808268a:	b086      	sub	sp, #24
 808268c:	4604      	mov	r4, r0
    IPAddress addr;
 808268e:	a804      	add	r0, sp, #16
 8082690:	f7ff ff86 	bl	80825a0 <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082694:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 8082696:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082698:	f001 fdfb 	bl	8084292 <strlen>
 808269c:	4b0a      	ldr	r3, [pc, #40]	; (80826c8 <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 808269e:	9600      	str	r6, [sp, #0]
 80826a0:	b281      	uxth	r1, r0
 80826a2:	685b      	ldr	r3, [r3, #4]
 80826a4:	4628      	mov	r0, r5
 80826a6:	aa03      	add	r2, sp, #12
 80826a8:	f7fe fea2 	bl	80813f0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80826ac:	b130      	cbz	r0, 80826bc <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 80826ae:	4631      	mov	r1, r6
 80826b0:	4620      	mov	r0, r4
 80826b2:	f7ff ff85 	bl	80825c0 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80826b6:	4620      	mov	r0, r4
 80826b8:	b006      	add	sp, #24
 80826ba:	bd70      	pop	{r4, r5, r6, pc}
 80826bc:	4620      	mov	r0, r4
 80826be:	a903      	add	r1, sp, #12
 80826c0:	f7ff ff76 	bl	80825b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80826c4:	e7f7      	b.n	80826b6 <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 80826c6:	bf00      	nop
 80826c8:	200000f4 	.word	0x200000f4

080826cc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80826cc:	4b02      	ldr	r3, [pc, #8]	; (80826d8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80826ce:	4a03      	ldr	r2, [pc, #12]	; (80826dc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80826d0:	601a      	str	r2, [r3, #0]
 80826d2:	2200      	movs	r2, #0
 80826d4:	605a      	str	r2, [r3, #4]

} // spark
 80826d6:	4770      	bx	lr
 80826d8:	20000128 	.word	0x20000128
 80826dc:	08084884 	.word	0x08084884

080826e0 <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 80826e0:	b508      	push	{r3, lr}
            return &Wire3;
 80826e2:	f000 fd61 	bl	80831a8 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}
 80826e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
 80826ea:	f7ff bef9 	b.w	80824e0 <_ZN7TwoWire4lockEv>

080826ee <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
 80826ee:	b510      	push	{r4, lr}
 80826f0:	4604      	mov	r4, r0
    lock_(_lock)
 80826f2:	7001      	strb	r1, [r0, #0]
    if (lock_) {
 80826f4:	b109      	cbz	r1, 80826fa <_ZN4PMICC1Eb+0xc>
        lock();
 80826f6:	f7ff fff3 	bl	80826e0 <_ZN4PMIC4lockEv.constprop.0>
}
 80826fa:	4620      	mov	r0, r4
 80826fc:	bd10      	pop	{r4, pc}

080826fe <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80826fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082700:	4606      	mov	r6, r0
 8082702:	460d      	mov	r5, r1
  size_t n = 0;
 8082704:	2400      	movs	r4, #0
 8082706:	188f      	adds	r7, r1, r2
  while (size--) {
 8082708:	42bd      	cmp	r5, r7
 808270a:	d00c      	beq.n	8082726 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808270c:	6833      	ldr	r3, [r6, #0]
 808270e:	4630      	mov	r0, r6
 8082710:	689b      	ldr	r3, [r3, #8]
 8082712:	f815 1b01 	ldrb.w	r1, [r5], #1
 8082716:	4798      	blx	r3
     if (chunk>=0)
 8082718:	1e03      	subs	r3, r0, #0
 808271a:	db01      	blt.n	8082720 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808271c:	441c      	add	r4, r3
  while (size--) {
 808271e:	e7f3      	b.n	8082708 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8082720:	2c00      	cmp	r4, #0
 8082722:	bf08      	it	eq
 8082724:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 8082726:	4620      	mov	r0, r4
 8082728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808272a <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 808272a:	b570      	push	{r4, r5, r6, lr}
 808272c:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 808272e:	460c      	mov	r4, r1
    }
 8082730:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 8082732:	b149      	cbz	r1, 8082748 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8082734:	f001 fdad 	bl	8084292 <strlen>
 8082738:	682b      	ldr	r3, [r5, #0]
 808273a:	4602      	mov	r2, r0
 808273c:	4621      	mov	r1, r4
 808273e:	4628      	mov	r0, r5
    }
 8082740:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 8082744:	68db      	ldr	r3, [r3, #12]
 8082746:	4718      	bx	r3
    }
 8082748:	bd70      	pop	{r4, r5, r6, pc}

0808274a <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 808274a:	6803      	ldr	r3, [r0, #0]
 808274c:	689b      	ldr	r3, [r3, #8]
 808274e:	4718      	bx	r3

08082750 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8082750:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8082752:	210d      	movs	r1, #13
{
 8082754:	4605      	mov	r5, r0
  size_t n = print('\r');
 8082756:	f7ff fff8 	bl	808274a <_ZN5Print5printEc>
  n += print('\n');
 808275a:	210a      	movs	r1, #10
  size_t n = print('\r');
 808275c:	4604      	mov	r4, r0
  n += print('\n');
 808275e:	4628      	mov	r0, r5
 8082760:	f7ff fff3 	bl	808274a <_ZN5Print5printEc>
  return n;
}
 8082764:	4420      	add	r0, r4
 8082766:	bd38      	pop	{r3, r4, r5, pc}

08082768 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8082768:	b538      	push	{r3, r4, r5, lr}
 808276a:	4605      	mov	r5, r0
  return write(str);
 808276c:	f7ff ffdd 	bl	808272a <_ZN5Print5writeEPKc>
 8082770:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 8082772:	4628      	mov	r0, r5
 8082774:	f7ff ffec 	bl	8082750 <_ZN5Print7printlnEv>
  return n;
}
 8082778:	4420      	add	r0, r4
 808277a:	bd38      	pop	{r3, r4, r5, pc}

0808277c <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 808277c:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 808277e:	2a01      	cmp	r2, #1
 8082780:	bf98      	it	ls
 8082782:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 8082784:	b530      	push	{r4, r5, lr}
 8082786:	b08b      	sub	sp, #44	; 0x2c
 8082788:	460c      	mov	r4, r1
  *str = '\0';
 808278a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 808278e:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 8082790:	4625      	mov	r5, r4
 8082792:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 8082796:	fb04 5312 	mls	r3, r4, r2, r5
 808279a:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808279c:	2b09      	cmp	r3, #9
 808279e:	bf94      	ite	ls
 80827a0:	3330      	addls	r3, #48	; 0x30
 80827a2:	3337      	addhi	r3, #55	; 0x37
 80827a4:	b2db      	uxtb	r3, r3
  } while(n);
 80827a6:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80827a8:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80827ac:	d9f0      	bls.n	8082790 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80827ae:	f7ff ffbc 	bl	808272a <_ZN5Print5writeEPKc>
}
 80827b2:	b00b      	add	sp, #44	; 0x2c
 80827b4:	bd30      	pop	{r4, r5, pc}
	...

080827b8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80827b8:	2200      	movs	r2, #0
 80827ba:	4b01      	ldr	r3, [pc, #4]	; (80827c0 <_GLOBAL__sub_I_RGB+0x8>)
 80827bc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80827be:	4770      	bx	lr
 80827c0:	20000130 	.word	0x20000130

080827c4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80827c4:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80827c6:	2600      	movs	r6, #0
 80827c8:	4604      	mov	r4, r0
 80827ca:	460d      	mov	r5, r1
 80827cc:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80827d0:	f7fe fe26 	bl	8081420 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80827d4:	4628      	mov	r0, r5
    _spi = spi;
 80827d6:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80827d8:	f7fe ff1a 	bl	8081610 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80827dc:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80827de:	6066      	str	r6, [r4, #4]
}
 80827e0:	bd70      	pop	{r4, r5, r6, pc}

080827e2 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80827e2:	b510      	push	{r4, lr}
 80827e4:	4604      	mov	r4, r0
{
	free(buffer);
 80827e6:	6800      	ldr	r0, [r0, #0]
 80827e8:	f7ff f8ca 	bl	8081980 <free>
}
 80827ec:	4620      	mov	r0, r4
 80827ee:	bd10      	pop	{r4, pc}

080827f0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80827f0:	b510      	push	{r4, lr}
 80827f2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80827f4:	6800      	ldr	r0, [r0, #0]
 80827f6:	b108      	cbz	r0, 80827fc <_ZN6String10invalidateEv+0xc>
 80827f8:	f7ff f8c2 	bl	8081980 <free>
	buffer = NULL;
 80827fc:	2300      	movs	r3, #0
	capacity = len = 0;
 80827fe:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 8082802:	6023      	str	r3, [r4, #0]
}
 8082804:	bd10      	pop	{r4, pc}

08082806 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8082806:	b538      	push	{r3, r4, r5, lr}
 8082808:	4604      	mov	r4, r0
 808280a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 808280c:	6800      	ldr	r0, [r0, #0]
 808280e:	3101      	adds	r1, #1
 8082810:	f7ff f8be 	bl	8081990 <realloc>
	if (newbuffer) {
 8082814:	b110      	cbz	r0, 808281c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8082816:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 808281a:	2001      	movs	r0, #1
	}
	return 0;
}
 808281c:	bd38      	pop	{r3, r4, r5, pc}

0808281e <_ZN6String7reserveEj>:
{
 808281e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8082820:	6803      	ldr	r3, [r0, #0]
{
 8082822:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8082824:	b123      	cbz	r3, 8082830 <_ZN6String7reserveEj+0x12>
 8082826:	6843      	ldr	r3, [r0, #4]
 8082828:	428b      	cmp	r3, r1
 808282a:	d301      	bcc.n	8082830 <_ZN6String7reserveEj+0x12>
 808282c:	2001      	movs	r0, #1
}
 808282e:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 8082830:	4620      	mov	r0, r4
 8082832:	f7ff ffe8 	bl	8082806 <_ZN6String12changeBufferEj>
 8082836:	2800      	cmp	r0, #0
 8082838:	d0f9      	beq.n	808282e <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 808283a:	68a3      	ldr	r3, [r4, #8]
 808283c:	2b00      	cmp	r3, #0
 808283e:	d1f5      	bne.n	808282c <_ZN6String7reserveEj+0xe>
 8082840:	6822      	ldr	r2, [r4, #0]
 8082842:	7013      	strb	r3, [r2, #0]
 8082844:	e7f2      	b.n	808282c <_ZN6String7reserveEj+0xe>

08082846 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8082846:	b570      	push	{r4, r5, r6, lr}
 8082848:	460e      	mov	r6, r1
	if (!reserve(length)) {
 808284a:	4611      	mov	r1, r2
{
 808284c:	4604      	mov	r4, r0
 808284e:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8082850:	f7ff ffe5 	bl	808281e <_ZN6String7reserveEj>
 8082854:	b920      	cbnz	r0, 8082860 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 8082856:	4620      	mov	r0, r4
 8082858:	f7ff ffca 	bl	80827f0 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 808285c:	4620      	mov	r0, r4
 808285e:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 8082860:	462a      	mov	r2, r5
 8082862:	4631      	mov	r1, r6
 8082864:	6820      	ldr	r0, [r4, #0]
	len = length;
 8082866:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8082868:	f001 fca3 	bl	80841b2 <memcpy>
	buffer[len] = 0;
 808286c:	2100      	movs	r1, #0
 808286e:	6822      	ldr	r2, [r4, #0]
 8082870:	68a3      	ldr	r3, [r4, #8]
 8082872:	54d1      	strb	r1, [r2, r3]
	return *this;
 8082874:	e7f2      	b.n	808285c <_ZN6String4copyEPKcj+0x16>

08082876 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 8082876:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 8082878:	2300      	movs	r3, #0
String::String(const char *cstr)
 808287a:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 808287c:	460d      	mov	r5, r1
	capacity = 0;
 808287e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8082882:	6083      	str	r3, [r0, #8]
	flags = 0;
 8082884:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 8082886:	b139      	cbz	r1, 8082898 <_ZN6StringC1EPKc+0x22>
 8082888:	4608      	mov	r0, r1
 808288a:	f001 fd02 	bl	8084292 <strlen>
 808288e:	4629      	mov	r1, r5
 8082890:	4602      	mov	r2, r0
 8082892:	4620      	mov	r0, r4
 8082894:	f7ff ffd7 	bl	8082846 <_ZN6String4copyEPKcj>
}
 8082898:	4620      	mov	r0, r4
 808289a:	bd38      	pop	{r3, r4, r5, pc}

0808289c <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 808289c:	4288      	cmp	r0, r1
{
 808289e:	b510      	push	{r4, lr}
 80828a0:	460b      	mov	r3, r1
 80828a2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80828a4:	d004      	beq.n	80828b0 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80828a6:	6809      	ldr	r1, [r1, #0]
 80828a8:	b121      	cbz	r1, 80828b4 <_ZN6StringaSERKS_+0x18>
 80828aa:	689a      	ldr	r2, [r3, #8]
 80828ac:	f7ff ffcb 	bl	8082846 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80828b0:	4620      	mov	r0, r4
 80828b2:	bd10      	pop	{r4, pc}
	else invalidate();
 80828b4:	f7ff ff9c 	bl	80827f0 <_ZN6String10invalidateEv>
 80828b8:	e7fa      	b.n	80828b0 <_ZN6StringaSERKS_+0x14>

080828ba <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80828ba:	2300      	movs	r3, #0
String::String(const String &value)
 80828bc:	b510      	push	{r4, lr}
 80828be:	4604      	mov	r4, r0
	capacity = 0;
 80828c0:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80828c4:	6083      	str	r3, [r0, #8]
	flags = 0;
 80828c6:	7303      	strb	r3, [r0, #12]
	*this = value;
 80828c8:	f7ff ffe8 	bl	808289c <_ZN6StringaSERKS_>
}
 80828cc:	4620      	mov	r0, r4
 80828ce:	bd10      	pop	{r4, pc}

080828d0 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80828d0:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80828d2:	6882      	ldr	r2, [r0, #8]
 80828d4:	b93a      	cbnz	r2, 80828e6 <_ZNK6String6equalsEPKc+0x16>
 80828d6:	b121      	cbz	r1, 80828e2 <_ZNK6String6equalsEPKc+0x12>
 80828d8:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 80828da:	fab0 f080 	clz	r0, r0
 80828de:	0940      	lsrs	r0, r0, #5
 80828e0:	e000      	b.n	80828e4 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80828e2:	2001      	movs	r0, #1
}
 80828e4:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80828e6:	6800      	ldr	r0, [r0, #0]
 80828e8:	b909      	cbnz	r1, 80828ee <_ZNK6String6equalsEPKc+0x1e>
 80828ea:	7800      	ldrb	r0, [r0, #0]
 80828ec:	e7f5      	b.n	80828da <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 80828ee:	f001 fcaa 	bl	8084246 <strcmp>
 80828f2:	e7f2      	b.n	80828da <_ZNK6String6equalsEPKc+0xa>

080828f4 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 80828f4:	b558      	push	{r3, r4, r6, lr}
 80828f6:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 80828f8:	b12a      	cbz	r2, 8082906 <_ZNK6String8getBytesEPhjj+0x12>
 80828fa:	b121      	cbz	r1, 8082906 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
 80828fc:	6884      	ldr	r4, [r0, #8]
 80828fe:	42a3      	cmp	r3, r4
 8082900:	d302      	bcc.n	8082908 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 8082902:	2300      	movs	r3, #0
 8082904:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
 8082906:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
 8082908:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
 808290a:	3a01      	subs	r2, #1
	if (n > len - index) n = len - index;
 808290c:	4294      	cmp	r4, r2
 808290e:	bf28      	it	cs
 8082910:	4614      	movcs	r4, r2
	strncpy((char *)buf, buffer + index, n);
 8082912:	6801      	ldr	r1, [r0, #0]
 8082914:	4622      	mov	r2, r4
 8082916:	4419      	add	r1, r3
 8082918:	4630      	mov	r0, r6
 808291a:	f001 fcc2 	bl	80842a2 <strncpy>
	buf[n] = 0;
 808291e:	2300      	movs	r3, #0
 8082920:	5533      	strb	r3, [r6, r4]
 8082922:	e7f0      	b.n	8082906 <_ZNK6String8getBytesEPhjj+0x12>

08082924 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 8082924:	b510      	push	{r4, lr}
 8082926:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8082928:	6800      	ldr	r0, [r0, #0]
 808292a:	b118      	cbz	r0, 8082934 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 808292c:	f7ff f828 	bl	8081980 <free>
            wakeupSource_ = nullptr;
 8082930:	2300      	movs	r3, #0
 8082932:	6023      	str	r3, [r4, #0]
        }
    }
 8082934:	bd10      	pop	{r4, pc}

08082936 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8082936:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 8082938:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 808293c:	460d      	mov	r5, r1
        error_ = result.error_;
 808293e:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 8082940:	460b      	mov	r3, r1
 8082942:	f853 2f06 	ldr.w	r2, [r3, #6]!
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8082946:	4604      	mov	r4, r0
        compatResult_ = result.compatResult_;
 8082948:	f8c0 2006 	str.w	r2, [r0, #6]
 808294c:	889b      	ldrh	r3, [r3, #4]
 808294e:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 8082950:	f7ff ffe8 	bl	8082924 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
 8082954:	682b      	ldr	r3, [r5, #0]
 8082956:	b113      	cbz	r3, 808295e <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 8082958:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 808295a:	2300      	movs	r3, #0
 808295c:	602b      	str	r3, [r5, #0]
    }
 808295e:	4620      	mov	r0, r4
 8082960:	bd38      	pop	{r3, r4, r5, pc}

08082962 <_ZN17SystemSleepResult13toSleepResultEv>:
        if (error_ || wakeupSource_) {
 8082962:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SleepResult toSleepResult() {
 8082966:	b510      	push	{r4, lr}
 8082968:	680a      	ldr	r2, [r1, #0]
        if (error_ || wakeupSource_) {
 808296a:	b933      	cbnz	r3, 808297a <_ZN17SystemSleepResult13toSleepResultEv+0x18>
 808296c:	b932      	cbnz	r2, 808297c <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
        return compatResult_;
 808296e:	f851 3f06 	ldr.w	r3, [r1, #6]!
 8082972:	6003      	str	r3, [r0, #0]
 8082974:	888b      	ldrh	r3, [r1, #4]
 8082976:	8083      	strh	r3, [r0, #4]
    }
 8082978:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
 808297a:	b122      	cbz	r2, 8082986 <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
 808297c:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
 808297e:	2c01      	cmp	r4, #1
 8082980:	d003      	beq.n	808298a <_ZN17SystemSleepResult13toSleepResultEv+0x28>
 8082982:	2c04      	cmp	r4, #4
 8082984:	d006      	beq.n	8082994 <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 8082986:	2204      	movs	r2, #4
 8082988:	e005      	b.n	8082996 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 808298a:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 808298c:	718c      	strb	r4, [r1, #6]
 808298e:	810b      	strh	r3, [r1, #8]
 8082990:	814a      	strh	r2, [r1, #10]
                    break;
 8082992:	e7ec      	b.n	808296e <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 8082994:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 8082996:	810b      	strh	r3, [r1, #8]
 8082998:	f64f 73ff 	movw	r3, #65535	; 0xffff
 808299c:	718a      	strb	r2, [r1, #6]
 808299e:	814b      	strh	r3, [r1, #10]
                    break;
 80829a0:	e7e5      	b.n	808296e <_ZN17SystemSleepResult13toSleepResultEv+0xc>

080829a2 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 80829a2:	b507      	push	{r0, r1, r2, lr}
 80829a4:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 80829a6:	2100      	movs	r1, #0
{
 80829a8:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 80829aa:	9100      	str	r1, [sp, #0]
 80829ac:	2001      	movs	r0, #1
 80829ae:	218c      	movs	r1, #140	; 0x8c
 80829b0:	f7fe ff14 	bl	80817dc <system_reset>
}
 80829b4:	b003      	add	sp, #12
 80829b6:	f85d fb04 	ldr.w	pc, [sp], #4

080829ba <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 80829ba:	4601      	mov	r1, r0
    reset(0, flags);
 80829bc:	2000      	movs	r0, #0
 80829be:	f7ff bff0 	b.w	80829a2 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

080829c2 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 80829c2:	2000      	movs	r0, #0
 80829c4:	f7ff bff9 	b.w	80829ba <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

080829c8 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
    }
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 80829c8:	b530      	push	{r4, r5, lr}
 80829ca:	4604      	mov	r4, r0
 80829cc:	b085      	sub	sp, #20
 80829ce:	4608      	mov	r0, r1
 80829d0:	4611      	mov	r1, r2
 80829d2:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 80829d4:	2300      	movs	r3, #0
 80829d6:	f7fe fec5 	bl	8081764 <system_sleep>
              compatResult_(r) {
 80829da:	2300      	movs	r3, #0
 80829dc:	9301      	str	r3, [sp, #4]
 80829de:	f8ad 3008 	strh.w	r3, [sp, #8]
 80829e2:	f88d 300a 	strb.w	r3, [sp, #10]
 80829e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
 80829ea:	4d09      	ldr	r5, [pc, #36]	; (8082a10 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
 80829ec:	a901      	add	r1, sp, #4
 80829ee:	f8ad 000c 	strh.w	r0, [sp, #12]
 80829f2:	4628      	mov	r0, r5
 80829f4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80829f8:	f7ff ff9d 	bl	8082936 <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
 80829fc:	a801      	add	r0, sp, #4
 80829fe:	f7ff ff91 	bl	8082924 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
 8082a02:	4620      	mov	r0, r4
 8082a04:	4629      	mov	r1, r5
 8082a06:	f7ff ffac 	bl	8082962 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
 8082a0a:	4620      	mov	r0, r4
 8082a0c:	b005      	add	sp, #20
 8082a0e:	bd30      	pop	{r4, r5, pc}
 8082a10:	20000140 	.word	0x20000140

08082a14 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8082a14:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 8082a16:	2000      	movs	r0, #0
 8082a18:	4b04      	ldr	r3, [pc, #16]	; (8082a2c <_GLOBAL__sub_I_System+0x18>)
 8082a1a:	601a      	str	r2, [r3, #0]
 8082a1c:	4b04      	ldr	r3, [pc, #16]	; (8082a30 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 8082a1e:	4a05      	ldr	r2, [pc, #20]	; (8082a34 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 8082a20:	6018      	str	r0, [r3, #0]
 8082a22:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 8082a24:	7198      	strb	r0, [r3, #6]
 8082a26:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8082a28:	f7fe be8c 	b.w	8081744 <set_system_mode>
 8082a2c:	2000014c 	.word	0x2000014c
 8082a30:	20000140 	.word	0x20000140
 8082a34:	ffff0000 	.word	0xffff0000

08082a38 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8082a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 8082a3c:	4a15      	ldr	r2, [pc, #84]	; (8082a94 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8082a3e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8082aa0 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 8082a42:	e9d2 3200 	ldrd	r3, r2, [r2]
 8082a46:	18c0      	adds	r0, r0, r3
 8082a48:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
 8082a4c:	4a12      	ldr	r2, [pc, #72]	; (8082a98 <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 8082a4e:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 8082a50:	e9d2 3200 	ldrd	r3, r2, [r2]
 8082a54:	18c6      	adds	r6, r0, r3
 8082a56:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
 8082a5a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8082a5e:	42bb      	cmp	r3, r7
 8082a60:	bf08      	it	eq
 8082a62:	42b2      	cmpeq	r2, r6
 8082a64:	d013      	beq.n	8082a8e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 8082a66:	a903      	add	r1, sp, #12
 8082a68:	4668      	mov	r0, sp
 8082a6a:	e9cd 6700 	strd	r6, r7, [sp]
 8082a6e:	f7fd fad7 	bl	8080020 <localtime_r>
	calendar_time.tm_year += 1900;
 8082a72:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082a74:	4d09      	ldr	r5, [pc, #36]	; (8082a9c <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 8082a76:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082a7a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 8082a7c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082a7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8082a80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8082a82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8082a84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 8082a86:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082a8a:	6823      	ldr	r3, [r4, #0]
 8082a8c:	602b      	str	r3, [r5, #0]
    }
}
 8082a8e:	b00c      	add	sp, #48	; 0x30
 8082a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082a94:	20000180 	.word	0x20000180
 8082a98:	20000178 	.word	0x20000178
 8082a9c:	20000154 	.word	0x20000154
 8082aa0:	20000188 	.word	0x20000188

08082aa4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
 8082aa4:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
 8082aa6:	2000      	movs	r0, #0
 8082aa8:	f7fe feea 	bl	8081880 <spark_sync_time_pending>
 8082aac:	b128      	cbz	r0, 8082aba <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8082aae:	f7fe febf 	bl	8081830 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 8082ab2:	f080 0001 	eor.w	r0, r0, #1
 8082ab6:	b2c0      	uxtb	r0, r0
    }
 8082ab8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 8082aba:	2001      	movs	r0, #1
 8082abc:	e7fc      	b.n	8082ab8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

08082ac0 <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8082ac0:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8082ac2:	490a      	ldr	r1, [pc, #40]	; (8082aec <_ZN9TimeClass4zoneEf+0x2c>)
{
 8082ac4:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8082ac6:	f001 fabb 	bl	8084040 <__aeabi_fcmplt>
 8082aca:	b968      	cbnz	r0, 8082ae8 <_ZN9TimeClass4zoneEf+0x28>
 8082acc:	4620      	mov	r0, r4
 8082ace:	4908      	ldr	r1, [pc, #32]	; (8082af0 <_ZN9TimeClass4zoneEf+0x30>)
 8082ad0:	f001 fad4 	bl	808407c <__aeabi_fcmpgt>
 8082ad4:	b940      	cbnz	r0, 8082ae8 <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 8082ad6:	4907      	ldr	r1, [pc, #28]	; (8082af4 <_ZN9TimeClass4zoneEf+0x34>)
 8082ad8:	4620      	mov	r0, r4
 8082ada:	f001 f913 	bl	8083d04 <__aeabi_fmul>
 8082ade:	f001 fafd 	bl	80840dc <__aeabi_f2lz>
 8082ae2:	4b05      	ldr	r3, [pc, #20]	; (8082af8 <_ZN9TimeClass4zoneEf+0x38>)
 8082ae4:	e9c3 0100 	strd	r0, r1, [r3]
}
 8082ae8:	bd10      	pop	{r4, pc}
 8082aea:	bf00      	nop
 8082aec:	c1400000 	.word	0xc1400000
 8082af0:	41600000 	.word	0x41600000
 8082af4:	45610000 	.word	0x45610000
 8082af8:	20000180 	.word	0x20000180

08082afc <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8082afc:	b530      	push	{r4, r5, lr}
 8082afe:	4604      	mov	r4, r0
    t += time_zone_cache;
 8082b00:	4818      	ldr	r0, [pc, #96]	; (8082b64 <_ZN9TimeClass7timeStrEx+0x68>)
{
 8082b02:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 8082b04:	e9d0 1000 	ldrd	r1, r0, [r0]
 8082b08:	1852      	adds	r2, r2, r1
 8082b0a:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 8082b0e:	4816      	ldr	r0, [pc, #88]	; (8082b68 <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 8082b10:	2500      	movs	r5, #0
    t += dst_current_cache;
 8082b12:	e9d0 1000 	ldrd	r1, r0, [r0]
 8082b16:	1852      	adds	r2, r2, r1
 8082b18:	eb40 0303 	adc.w	r3, r0, r3
 8082b1c:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 8082b20:	2224      	movs	r2, #36	; 0x24
 8082b22:	2100      	movs	r1, #0
 8082b24:	eb0d 0002 	add.w	r0, sp, r2
 8082b28:	f001 fb51 	bl	80841ce <memset>
    localtime_r(&t, &calendar_time);
 8082b2c:	a909      	add	r1, sp, #36	; 0x24
 8082b2e:	4668      	mov	r0, sp
 8082b30:	f7fd fa76 	bl	8080020 <localtime_r>
    char ascstr[26] = {};
 8082b34:	2216      	movs	r2, #22
 8082b36:	4629      	mov	r1, r5
 8082b38:	a803      	add	r0, sp, #12
 8082b3a:	9502      	str	r5, [sp, #8]
 8082b3c:	f001 fb47 	bl	80841ce <memset>
    asctime_r(&calendar_time, ascstr);
 8082b40:	a902      	add	r1, sp, #8
 8082b42:	a809      	add	r0, sp, #36	; 0x24
 8082b44:	f001 fafe 	bl	8084144 <asctime_r>
    int len = strlen(ascstr);
 8082b48:	a802      	add	r0, sp, #8
 8082b4a:	f001 fba2 	bl	8084292 <strlen>
    ascstr[len-1] = 0; // remove final newline
 8082b4e:	ab12      	add	r3, sp, #72	; 0x48
 8082b50:	4418      	add	r0, r3
 8082b52:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 8082b56:	a902      	add	r1, sp, #8
 8082b58:	4620      	mov	r0, r4
 8082b5a:	f7ff fe8c 	bl	8082876 <_ZN6StringC1EPKc>
}
 8082b5e:	4620      	mov	r0, r4
 8082b60:	b013      	add	sp, #76	; 0x4c
 8082b62:	bd30      	pop	{r4, r5, pc}
 8082b64:	20000180 	.word	0x20000180
 8082b68:	20000178 	.word	0x20000178

08082b6c <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 8082b6c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 8082b6e:	2000      	movs	r0, #0
 8082b70:	f7fe fc8e 	bl	8081490 <hal_rtc_time_is_valid>
    if (rtcstate)
 8082b74:	4604      	mov	r4, r0
 8082b76:	b9a0      	cbnz	r0, 8082ba2 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8082b78:	f7fe fddc 	bl	8081734 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8082b7c:	2801      	cmp	r0, #1
 8082b7e:	d110      	bne.n	8082ba2 <_ZN9TimeClass7isValidEv+0x36>
 8082b80:	4620      	mov	r0, r4
 8082b82:	f7fe fe0f 	bl	80817a4 <system_thread_get_state>
 8082b86:	b960      	cbnz	r0, 8082ba2 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 8082b88:	f7ff ff8c 	bl	8082aa4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8082b8c:	b910      	cbnz	r0, 8082b94 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 8082b8e:	f7fe fe3f 	bl	8081810 <spark_process>
        while (_while() && !_condition()) {
 8082b92:	e7f9      	b.n	8082b88 <_ZN9TimeClass7isValidEv+0x1c>
 8082b94:	f7ff ff86 	bl	8082aa4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 8082b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 8082b9c:	2000      	movs	r0, #0
 8082b9e:	f7fe bc77 	b.w	8081490 <hal_rtc_time_is_valid>
}
 8082ba2:	4620      	mov	r0, r4
 8082ba4:	bd10      	pop	{r4, pc}

08082ba6 <_ZN9TimeClass3nowEv>:
{
 8082ba6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 8082ba8:	f7ff ffe0 	bl	8082b6c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 8082bac:	2210      	movs	r2, #16
 8082bae:	2100      	movs	r1, #0
 8082bb0:	4668      	mov	r0, sp
 8082bb2:	f001 fb0c 	bl	80841ce <memset>
    hal_rtc_get_time(&tv, nullptr);
 8082bb6:	2100      	movs	r1, #0
 8082bb8:	4668      	mov	r0, sp
 8082bba:	f7fe fc79 	bl	80814b0 <hal_rtc_get_time>
}
 8082bbe:	9800      	ldr	r0, [sp, #0]
 8082bc0:	b005      	add	sp, #20
 8082bc2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08082bc8 <_ZN9TimeClass4hourEv>:
{
 8082bc8:	b508      	push	{r3, lr}
	return hour(now());
 8082bca:	f7ff ffec 	bl	8082ba6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 8082bce:	17c1      	asrs	r1, r0, #31
 8082bd0:	f7ff ff32 	bl	8082a38 <_ZL22Refresh_UnixTime_Cachex>
}
 8082bd4:	4b01      	ldr	r3, [pc, #4]	; (8082bdc <_ZN9TimeClass4hourEv+0x14>)
 8082bd6:	6898      	ldr	r0, [r3, #8]
 8082bd8:	bd08      	pop	{r3, pc}
 8082bda:	bf00      	nop
 8082bdc:	20000154 	.word	0x20000154

08082be0 <_ZN9TimeClass6minuteEv>:
{
 8082be0:	b508      	push	{r3, lr}
	return minute(now());
 8082be2:	f7ff ffe0 	bl	8082ba6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 8082be6:	17c1      	asrs	r1, r0, #31
 8082be8:	f7ff ff26 	bl	8082a38 <_ZL22Refresh_UnixTime_Cachex>
}
 8082bec:	4b01      	ldr	r3, [pc, #4]	; (8082bf4 <_ZN9TimeClass6minuteEv+0x14>)
 8082bee:	6858      	ldr	r0, [r3, #4]
 8082bf0:	bd08      	pop	{r3, pc}
 8082bf2:	bf00      	nop
 8082bf4:	20000154 	.word	0x20000154

08082bf8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8082bf8:	4b02      	ldr	r3, [pc, #8]	; (8082c04 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8082bfa:	681a      	ldr	r2, [r3, #0]
 8082bfc:	4b02      	ldr	r3, [pc, #8]	; (8082c08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8082bfe:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 8082c00:	4770      	bx	lr
 8082c02:	bf00      	nop
 8082c04:	2000001c 	.word	0x2000001c
 8082c08:	20000150 	.word	0x20000150

08082c0c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 8082c0c:	4770      	bx	lr

08082c0e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082c0e:	7441      	strb	r1, [r0, #17]
}
 8082c10:	4770      	bx	lr

08082c12 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8082c12:	4770      	bx	lr

08082c14 <_ZN11USARTSerial17availableForWriteEv>:
{
 8082c14:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 8082c16:	7c00      	ldrb	r0, [r0, #16]
 8082c18:	f7fe fd42 	bl	80816a0 <hal_usart_available_data_for_write>
}
 8082c1c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082c20:	bd08      	pop	{r3, pc}

08082c22 <_ZN11USARTSerial9availableEv>:
{
 8082c22:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 8082c24:	7c00      	ldrb	r0, [r0, #16]
 8082c26:	f7fe fd13 	bl	8081650 <hal_usart_available>
}
 8082c2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082c2e:	bd08      	pop	{r3, pc}

08082c30 <_ZN11USARTSerial4peekEv>:
{
 8082c30:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 8082c32:	7c00      	ldrb	r0, [r0, #16]
 8082c34:	f7fe fd1c 	bl	8081670 <hal_usart_peek>
}
 8082c38:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8082c3c:	bd08      	pop	{r3, pc}

08082c3e <_ZN11USARTSerial4readEv>:
{
 8082c3e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 8082c40:	7c00      	ldrb	r0, [r0, #16]
 8082c42:	f7fe fd0d 	bl	8081660 <hal_usart_read>
}
 8082c46:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8082c4a:	bd08      	pop	{r3, pc}

08082c4c <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 8082c4c:	7c00      	ldrb	r0, [r0, #16]
 8082c4e:	f7fe bd17 	b.w	8081680 <hal_usart_flush>

08082c52 <_ZN11USARTSerial5writeEh>:
{
 8082c52:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8082c54:	7c46      	ldrb	r6, [r0, #17]
{
 8082c56:	4604      	mov	r4, r0
 8082c58:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8082c5a:	b12e      	cbz	r6, 8082c68 <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 8082c5c:	4629      	mov	r1, r5
 8082c5e:	7c20      	ldrb	r0, [r4, #16]
}
 8082c60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 8082c64:	f7fe bcec 	b.w	8081640 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8082c68:	7c00      	ldrb	r0, [r0, #16]
 8082c6a:	f7fe fd19 	bl	80816a0 <hal_usart_available_data_for_write>
 8082c6e:	2800      	cmp	r0, #0
 8082c70:	dcf4      	bgt.n	8082c5c <_ZN11USARTSerial5writeEh+0xa>
}
 8082c72:	4630      	mov	r0, r6
 8082c74:	bd70      	pop	{r4, r5, r6, pc}

08082c76 <_ZN11USARTSerialD0Ev>:
 8082c76:	b510      	push	{r4, lr}
 8082c78:	4604      	mov	r4, r0
 8082c7a:	2114      	movs	r1, #20
 8082c7c:	f000 fac6 	bl	808320c <_ZdlPvj>
 8082c80:	4620      	mov	r0, r4
 8082c82:	bd10      	pop	{r4, pc}

08082c84 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 8082c84:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8082c88:	b510      	push	{r4, lr}
 8082c8a:	4604      	mov	r4, r0
 8082c8c:	4608      	mov	r0, r1
 8082c8e:	4611      	mov	r1, r2
 8082c90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8082c94:	e9c4 c201 	strd	ip, r2, [r4, #4]
 8082c98:	4a04      	ldr	r2, [pc, #16]	; (8082cac <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 8082c9a:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8082c9c:	6022      	str	r2, [r4, #0]
  _blocking = true;
 8082c9e:	2201      	movs	r2, #1
 8082ca0:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 8082ca2:	461a      	mov	r2, r3
 8082ca4:	f7fe fcc4 	bl	8081630 <hal_usart_init>
}
 8082ca8:	4620      	mov	r0, r4
 8082caa:	bd10      	pop	{r4, pc}
 8082cac:	080848dc 	.word	0x080848dc

08082cb0 <_Z22__fetch_global_Serial1v>:
{
 8082cb0:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8082cb2:	4d0c      	ldr	r5, [pc, #48]	; (8082ce4 <_Z22__fetch_global_Serial1v+0x34>)
 8082cb4:	7829      	ldrb	r1, [r5, #0]
 8082cb6:	f3bf 8f5b 	dmb	ish
 8082cba:	f011 0401 	ands.w	r4, r1, #1
 8082cbe:	d10f      	bne.n	8082ce0 <_Z22__fetch_global_Serial1v+0x30>
 8082cc0:	4628      	mov	r0, r5
 8082cc2:	f7fd f9f8 	bl	80800b6 <__cxa_guard_acquire>
 8082cc6:	b158      	cbz	r0, 8082ce0 <_Z22__fetch_global_Serial1v+0x30>
 8082cc8:	4621      	mov	r1, r4
 8082cca:	4b07      	ldr	r3, [pc, #28]	; (8082ce8 <_Z22__fetch_global_Serial1v+0x38>)
 8082ccc:	4a07      	ldr	r2, [pc, #28]	; (8082cec <_Z22__fetch_global_Serial1v+0x3c>)
 8082cce:	4808      	ldr	r0, [pc, #32]	; (8082cf0 <_Z22__fetch_global_Serial1v+0x40>)
 8082cd0:	f7ff ffd8 	bl	8082c84 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 8082cd4:	4628      	mov	r0, r5
 8082cd6:	f7fd f9f3 	bl	80800c0 <__cxa_guard_release>
 8082cda:	4806      	ldr	r0, [pc, #24]	; (8082cf4 <_Z22__fetch_global_Serial1v+0x44>)
 8082cdc:	f001 fa58 	bl	8084190 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8082ce0:	4803      	ldr	r0, [pc, #12]	; (8082cf0 <_Z22__fetch_global_Serial1v+0x40>)
 8082ce2:	bd38      	pop	{r3, r4, r5, pc}
 8082ce4:	20000190 	.word	0x20000190
 8082ce8:	20000218 	.word	0x20000218
 8082cec:	20000194 	.word	0x20000194
 8082cf0:	2000029c 	.word	0x2000029c
 8082cf4:	08082c13 	.word	0x08082c13

08082cf8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082cf8:	7441      	strb	r1, [r0, #17]
}
 8082cfa:	4770      	bx	lr

08082cfc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8082cfc:	4770      	bx	lr

08082cfe <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8082cfe:	4770      	bx	lr

08082d00 <_ZN9USBSerial4readEv>:
{
 8082d00:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8082d02:	2100      	movs	r1, #0
 8082d04:	7c00      	ldrb	r0, [r0, #16]
 8082d06:	f7fe fceb 	bl	80816e0 <HAL_USB_USART_Receive_Data>
}
 8082d0a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8082d0e:	bd08      	pop	{r3, pc}

08082d10 <_ZN9USBSerial4peekEv>:
{
 8082d10:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8082d12:	2101      	movs	r1, #1
 8082d14:	7c00      	ldrb	r0, [r0, #16]
 8082d16:	f7fe fce3 	bl	80816e0 <HAL_USB_USART_Receive_Data>
}
 8082d1a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8082d1e:	bd08      	pop	{r3, pc}

08082d20 <_ZN9USBSerial17availableForWriteEv>:
{
 8082d20:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8082d22:	7c00      	ldrb	r0, [r0, #16]
 8082d24:	f7fe fcd4 	bl	80816d0 <HAL_USB_USART_Available_Data_For_Write>
}
 8082d28:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082d2c:	bd08      	pop	{r3, pc}

08082d2e <_ZN9USBSerial9availableEv>:
{
 8082d2e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8082d30:	7c00      	ldrb	r0, [r0, #16]
 8082d32:	f7fe fcc5 	bl	80816c0 <HAL_USB_USART_Available_Data>
}
 8082d36:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082d3a:	bd08      	pop	{r3, pc}

08082d3c <_ZN9USBSerial5writeEh>:
{
 8082d3c:	b538      	push	{r3, r4, r5, lr}
 8082d3e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8082d40:	7c00      	ldrb	r0, [r0, #16]
{
 8082d42:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8082d44:	f7fe fcc4 	bl	80816d0 <HAL_USB_USART_Available_Data_For_Write>
 8082d48:	2800      	cmp	r0, #0
 8082d4a:	dc01      	bgt.n	8082d50 <_ZN9USBSerial5writeEh+0x14>
 8082d4c:	7c60      	ldrb	r0, [r4, #17]
 8082d4e:	b128      	cbz	r0, 8082d5c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8082d50:	4629      	mov	r1, r5
 8082d52:	7c20      	ldrb	r0, [r4, #16]
 8082d54:	f7fe fccc 	bl	80816f0 <HAL_USB_USART_Send_Data>
 8082d58:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8082d5c:	bd38      	pop	{r3, r4, r5, pc}

08082d5e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 8082d5e:	7c00      	ldrb	r0, [r0, #16]
 8082d60:	f7fe bcce 	b.w	8081700 <HAL_USB_USART_Flush_Data>

08082d64 <_ZN9USBSerialD0Ev>:
 8082d64:	b510      	push	{r4, lr}
 8082d66:	4604      	mov	r4, r0
 8082d68:	2114      	movs	r1, #20
 8082d6a:	f000 fa4f 	bl	808320c <_ZdlPvj>
 8082d6e:	4620      	mov	r0, r4
 8082d70:	bd10      	pop	{r4, pc}

08082d72 <__tcf_1>:
 8082d72:	4770      	bx	lr

08082d74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8082d74:	b510      	push	{r4, lr}
 8082d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8082d7a:	4604      	mov	r4, r0
 8082d7c:	4608      	mov	r0, r1
 8082d7e:	2100      	movs	r1, #0
 8082d80:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8082d84:	4b04      	ldr	r3, [pc, #16]	; (8082d98 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 8082d86:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8082d88:	6023      	str	r3, [r4, #0]
  _blocking = true;
 8082d8a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 8082d8c:	4611      	mov	r1, r2
  _blocking = true;
 8082d8e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 8082d90:	f7fe fc8e 	bl	80816b0 <HAL_USB_USART_Init>
}
 8082d94:	4620      	mov	r0, r4
 8082d96:	bd10      	pop	{r4, pc}
 8082d98:	0808490c 	.word	0x0808490c

08082d9c <_Z19acquireSerialBufferv>:
{
 8082d9c:	b510      	push	{r4, lr}
 8082d9e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8082da0:	2214      	movs	r2, #20
 8082da2:	2100      	movs	r1, #0
 8082da4:	f001 fa13 	bl	80841ce <memset>
  conf.rx_buffer = serial_rx_buffer;
 8082da8:	4b05      	ldr	r3, [pc, #20]	; (8082dc0 <_Z19acquireSerialBufferv+0x24>)
}
 8082daa:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 8082dac:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8082dae:	4b05      	ldr	r3, [pc, #20]	; (8082dc4 <_Z19acquireSerialBufferv+0x28>)
 8082db0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8082db2:	f240 1301 	movw	r3, #257	; 0x101
 8082db6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8082db8:	2381      	movs	r3, #129	; 0x81
 8082dba:	8223      	strh	r3, [r4, #16]
}
 8082dbc:	bd10      	pop	{r4, pc}
 8082dbe:	bf00      	nop
 8082dc0:	200002e0 	.word	0x200002e0
 8082dc4:	200003e1 	.word	0x200003e1

08082dc8 <_Z16_fetch_usbserialv>:
{
 8082dc8:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8082dca:	4d0e      	ldr	r5, [pc, #56]	; (8082e04 <_Z16_fetch_usbserialv+0x3c>)
{
 8082dcc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8082dce:	a801      	add	r0, sp, #4
 8082dd0:	f7ff ffe4 	bl	8082d9c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8082dd4:	7829      	ldrb	r1, [r5, #0]
 8082dd6:	f3bf 8f5b 	dmb	ish
 8082dda:	f011 0401 	ands.w	r4, r1, #1
 8082dde:	d10e      	bne.n	8082dfe <_Z16_fetch_usbserialv+0x36>
 8082de0:	4628      	mov	r0, r5
 8082de2:	f7fd f968 	bl	80800b6 <__cxa_guard_acquire>
 8082de6:	b150      	cbz	r0, 8082dfe <_Z16_fetch_usbserialv+0x36>
 8082de8:	4621      	mov	r1, r4
 8082dea:	aa01      	add	r2, sp, #4
 8082dec:	4806      	ldr	r0, [pc, #24]	; (8082e08 <_Z16_fetch_usbserialv+0x40>)
 8082dee:	f7ff ffc1 	bl	8082d74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8082df2:	4628      	mov	r0, r5
 8082df4:	f7fd f964 	bl	80800c0 <__cxa_guard_release>
 8082df8:	4804      	ldr	r0, [pc, #16]	; (8082e0c <_Z16_fetch_usbserialv+0x44>)
 8082dfa:	f001 f9c9 	bl	8084190 <atexit>
	return _usbserial;
}
 8082dfe:	4802      	ldr	r0, [pc, #8]	; (8082e08 <_Z16_fetch_usbserialv+0x40>)
 8082e00:	b007      	add	sp, #28
 8082e02:	bd30      	pop	{r4, r5, pc}
 8082e04:	200002b0 	.word	0x200002b0
 8082e08:	200002b8 	.word	0x200002b8
 8082e0c:	08082cfd 	.word	0x08082cfd

08082e10 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8082e10:	b510      	push	{r4, lr}
 8082e12:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8082e14:	2214      	movs	r2, #20
 8082e16:	2100      	movs	r1, #0
 8082e18:	f001 f9d9 	bl	80841ce <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8082e1c:	4b05      	ldr	r3, [pc, #20]	; (8082e34 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8082e1e:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 8082e20:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8082e22:	4b05      	ldr	r3, [pc, #20]	; (8082e38 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8082e24:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8082e26:	f240 1301 	movw	r3, #257	; 0x101
 8082e2a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8082e2c:	2381      	movs	r3, #129	; 0x81
 8082e2e:	8223      	strh	r3, [r4, #16]
}
 8082e30:	bd10      	pop	{r4, pc}
 8082e32:	bf00      	nop
 8082e34:	20000462 	.word	0x20000462
 8082e38:	20000563 	.word	0x20000563

08082e3c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8082e3c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8082e3e:	4c0e      	ldr	r4, [pc, #56]	; (8082e78 <_Z17_fetch_usbserial1v+0x3c>)
{
 8082e40:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8082e42:	a801      	add	r0, sp, #4
 8082e44:	f7ff ffe4 	bl	8082e10 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8082e48:	7823      	ldrb	r3, [r4, #0]
 8082e4a:	f3bf 8f5b 	dmb	ish
 8082e4e:	07db      	lsls	r3, r3, #31
 8082e50:	d40e      	bmi.n	8082e70 <_Z17_fetch_usbserial1v+0x34>
 8082e52:	4620      	mov	r0, r4
 8082e54:	f7fd f92f 	bl	80800b6 <__cxa_guard_acquire>
 8082e58:	b150      	cbz	r0, 8082e70 <_Z17_fetch_usbserial1v+0x34>
 8082e5a:	2101      	movs	r1, #1
 8082e5c:	aa01      	add	r2, sp, #4
 8082e5e:	4807      	ldr	r0, [pc, #28]	; (8082e7c <_Z17_fetch_usbserial1v+0x40>)
 8082e60:	f7ff ff88 	bl	8082d74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8082e64:	4620      	mov	r0, r4
 8082e66:	f7fd f92b 	bl	80800c0 <__cxa_guard_release>
 8082e6a:	4805      	ldr	r0, [pc, #20]	; (8082e80 <_Z17_fetch_usbserial1v+0x44>)
 8082e6c:	f001 f990 	bl	8084190 <atexit>
  return _usbserial1;
}
 8082e70:	4802      	ldr	r0, [pc, #8]	; (8082e7c <_Z17_fetch_usbserial1v+0x40>)
 8082e72:	b006      	add	sp, #24
 8082e74:	bd10      	pop	{r4, pc}
 8082e76:	bf00      	nop
 8082e78:	200002b4 	.word	0x200002b4
 8082e7c:	200002cc 	.word	0x200002cc
 8082e80:	08082d73 	.word	0x08082d73

08082e84 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 8082e84:	4b01      	ldr	r3, [pc, #4]	; (8082e8c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 8082e86:	6018      	str	r0, [r3, #0]
    }, nullptr);
 8082e88:	4770      	bx	lr
 8082e8a:	bf00      	nop
 8082e8c:	20000020 	.word	0x20000020

08082e90 <serialEventRun>:
{
 8082e90:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8082e92:	4b17      	ldr	r3, [pc, #92]	; (8082ef0 <serialEventRun+0x60>)
 8082e94:	b143      	cbz	r3, 8082ea8 <serialEventRun+0x18>
 8082e96:	f7ff ff97 	bl	8082dc8 <_Z16_fetch_usbserialv>
 8082e9a:	6803      	ldr	r3, [r0, #0]
 8082e9c:	691b      	ldr	r3, [r3, #16]
 8082e9e:	4798      	blx	r3
 8082ea0:	2800      	cmp	r0, #0
 8082ea2:	dd01      	ble.n	8082ea8 <serialEventRun+0x18>
        serialEvent();
 8082ea4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 8082ea8:	4b12      	ldr	r3, [pc, #72]	; (8082ef4 <serialEventRun+0x64>)
 8082eaa:	b143      	cbz	r3, 8082ebe <serialEventRun+0x2e>
 8082eac:	f7ff ff00 	bl	8082cb0 <_Z22__fetch_global_Serial1v>
 8082eb0:	6803      	ldr	r3, [r0, #0]
 8082eb2:	691b      	ldr	r3, [r3, #16]
 8082eb4:	4798      	blx	r3
 8082eb6:	2800      	cmp	r0, #0
 8082eb8:	dd01      	ble.n	8082ebe <serialEventRun+0x2e>
        serialEvent1();
 8082eba:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 8082ebe:	4b0e      	ldr	r3, [pc, #56]	; (8082ef8 <serialEventRun+0x68>)
 8082ec0:	b10b      	cbz	r3, 8082ec6 <serialEventRun+0x36>
 8082ec2:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 8082ec6:	4b0d      	ldr	r3, [pc, #52]	; (8082efc <serialEventRun+0x6c>)
 8082ec8:	b10b      	cbz	r3, 8082ece <serialEventRun+0x3e>
 8082eca:	f3af 8000 	nop.w
    if (serialEventRun5) serialEventRun5();
 8082ece:	4b0c      	ldr	r3, [pc, #48]	; (8082f00 <serialEventRun+0x70>)
 8082ed0:	b10b      	cbz	r3, 8082ed6 <serialEventRun+0x46>
 8082ed2:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8082ed6:	4b0b      	ldr	r3, [pc, #44]	; (8082f04 <serialEventRun+0x74>)
 8082ed8:	b143      	cbz	r3, 8082eec <serialEventRun+0x5c>
 8082eda:	f7ff ffaf 	bl	8082e3c <_Z17_fetch_usbserial1v>
 8082ede:	6803      	ldr	r3, [r0, #0]
 8082ee0:	691b      	ldr	r3, [r3, #16]
 8082ee2:	4798      	blx	r3
 8082ee4:	2800      	cmp	r0, #0
 8082ee6:	dd01      	ble.n	8082eec <serialEventRun+0x5c>
        usbSerialEvent1();
 8082ee8:	f3af 8000 	nop.w
}
 8082eec:	bd08      	pop	{r3, pc}
 8082eee:	bf00      	nop
	...

08082f08 <_post_loop>:
{
 8082f08:	b508      	push	{r3, lr}
	serialEventRun();
 8082f0a:	f7ff ffc1 	bl	8082e90 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8082f0e:	f7fe fab7 	bl	8081480 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8082f12:	4b01      	ldr	r3, [pc, #4]	; (8082f18 <_post_loop+0x10>)
 8082f14:	6018      	str	r0, [r3, #0]
}
 8082f16:	bd08      	pop	{r3, pc}
 8082f18:	200005fc 	.word	0x200005fc

08082f1c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8082f1c:	4805      	ldr	r0, [pc, #20]	; (8082f34 <_Z33system_initialize_user_backup_ramv+0x18>)
 8082f1e:	4a06      	ldr	r2, [pc, #24]	; (8082f38 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 8082f20:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8082f22:	1a12      	subs	r2, r2, r0
 8082f24:	4905      	ldr	r1, [pc, #20]	; (8082f3c <_Z33system_initialize_user_backup_ramv+0x20>)
 8082f26:	f001 f944 	bl	80841b2 <memcpy>
    __backup_sram_signature = signature;
 8082f2a:	4b05      	ldr	r3, [pc, #20]	; (8082f40 <_Z33system_initialize_user_backup_ramv+0x24>)
 8082f2c:	4a05      	ldr	r2, [pc, #20]	; (8082f44 <_Z33system_initialize_user_backup_ramv+0x28>)
 8082f2e:	601a      	str	r2, [r3, #0]
}
 8082f30:	bd08      	pop	{r3, pc}
 8082f32:	bf00      	nop
 8082f34:	40024000 	.word	0x40024000
 8082f38:	40024018 	.word	0x40024018
 8082f3c:	08084ab0 	.word	0x08084ab0
 8082f40:	40024014 	.word	0x40024014
 8082f44:	9a271c1e 	.word	0x9a271c1e

08082f48 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8082f48:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8082f4a:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8082f4c:	461a      	mov	r2, r3
 8082f4e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8082f52:	9300      	str	r3, [sp, #0]
 8082f54:	f7fe fc38 	bl	80817c8 <system_ctrl_set_result>
}
 8082f58:	b003      	add	sp, #12
 8082f5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08082f60 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 8082f60:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8082f62:	8843      	ldrh	r3, [r0, #2]
 8082f64:	2b0a      	cmp	r3, #10
 8082f66:	d008      	beq.n	8082f7a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8082f68:	2b50      	cmp	r3, #80	; 0x50
 8082f6a:	d10b      	bne.n	8082f84 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 8082f6c:	4b09      	ldr	r3, [pc, #36]	; (8082f94 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8082f6e:	681b      	ldr	r3, [r3, #0]
 8082f70:	b14b      	cbz	r3, 8082f86 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 8082f72:	b003      	add	sp, #12
 8082f74:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 8082f78:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 8082f7a:	f7ff ffe5 	bl	8082f48 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 8082f7e:	b003      	add	sp, #12
 8082f80:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8082f84:	2300      	movs	r3, #0
 8082f86:	461a      	mov	r2, r3
 8082f88:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8082f8c:	9300      	str	r3, [sp, #0]
 8082f8e:	f7fe fc1b 	bl	80817c8 <system_ctrl_set_result>
}
 8082f92:	e7f4      	b.n	8082f7e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 8082f94:	200005e8 	.word	0x200005e8

08082f98 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8082f98:	2100      	movs	r1, #0
{
 8082f9a:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8082f9c:	4811      	ldr	r0, [pc, #68]	; (8082fe4 <module_user_init_hook+0x4c>)
 8082f9e:	f7fe fd1f 	bl	80819e0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 8082fa2:	4b11      	ldr	r3, [pc, #68]	; (8082fe8 <module_user_init_hook+0x50>)
 8082fa4:	681a      	ldr	r2, [r3, #0]
 8082fa6:	4b11      	ldr	r3, [pc, #68]	; (8082fec <module_user_init_hook+0x54>)
 8082fa8:	429a      	cmp	r2, r3
 8082faa:	bf0c      	ite	eq
 8082fac:	2201      	moveq	r2, #1
 8082fae:	2200      	movne	r2, #0
 8082fb0:	4b0f      	ldr	r3, [pc, #60]	; (8082ff0 <module_user_init_hook+0x58>)
 8082fb2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8082fb4:	d001      	beq.n	8082fba <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 8082fb6:	f7ff ffb1 	bl	8082f1c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8082fba:	f7fe fa51 	bl	8081460 <HAL_RNG_GetRandomNumber>
 8082fbe:	4604      	mov	r4, r0
    srand(seed);
 8082fc0:	f001 f90e 	bl	80841e0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8082fc4:	4b0b      	ldr	r3, [pc, #44]	; (8082ff4 <module_user_init_hook+0x5c>)
 8082fc6:	b113      	cbz	r3, 8082fce <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 8082fc8:	4620      	mov	r0, r4
 8082fca:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8082fce:	2100      	movs	r1, #0
 8082fd0:	4808      	ldr	r0, [pc, #32]	; (8082ff4 <module_user_init_hook+0x5c>)
 8082fd2:	f7fe fc5d 	bl	8081890 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8082fd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8082fda:	2100      	movs	r1, #0
 8082fdc:	4806      	ldr	r0, [pc, #24]	; (8082ff8 <module_user_init_hook+0x60>)
 8082fde:	f7fe bbe9 	b.w	80817b4 <system_ctrl_set_app_request_handler>
 8082fe2:	bf00      	nop
 8082fe4:	08082e85 	.word	0x08082e85
 8082fe8:	40024014 	.word	0x40024014
 8082fec:	9a271c1e 	.word	0x9a271c1e
 8082ff0:	200005e4 	.word	0x200005e4
 8082ff4:	00000000 	.word	0x00000000
 8082ff8:	08082f61 	.word	0x08082f61

08082ffc <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 8082ffc:	4b02      	ldr	r3, [pc, #8]	; (8083008 <__tcf_0+0xc>)
 8082ffe:	6898      	ldr	r0, [r3, #8]
 8083000:	b108      	cbz	r0, 8083006 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 8083002:	f7fe ba15 	b.w	8081430 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 8083006:	4770      	bx	lr
 8083008:	200005f0 	.word	0x200005f0

0808300c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 808300c:	282e      	cmp	r0, #46	; 0x2e
bool pinAvailable(uint16_t pin) {
 808300e:	b570      	push	{r4, r5, r6, lr}
 8083010:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 8083012:	d901      	bls.n	8083018 <pinAvailable+0xc>
    return false;
 8083014:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 8083016:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 8083018:	f1a0 030d 	sub.w	r3, r0, #13
 808301c:	2b02      	cmp	r3, #2
 808301e:	d90b      	bls.n	8083038 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 8083020:	2801      	cmp	r0, #1
 8083022:	d824      	bhi.n	808306e <pinAvailable+0x62>
 8083024:	f000 f89c 	bl	8083160 <_Z19__fetch_global_Wirev>
 8083028:	2100      	movs	r1, #0
 808302a:	7c00      	ldrb	r0, [r0, #16]
 808302c:	f7fe fac8 	bl	80815c0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 8083030:	f080 0001 	eor.w	r0, r0, #1
 8083034:	b2c0      	uxtb	r0, r0
 8083036:	e7ee      	b.n	8083016 <pinAvailable+0xa>
 8083038:	4e12      	ldr	r6, [pc, #72]	; (8083084 <pinAvailable+0x78>)
 808303a:	7831      	ldrb	r1, [r6, #0]
 808303c:	f3bf 8f5b 	dmb	ish
 8083040:	f011 0501 	ands.w	r5, r1, #1
 8083044:	d10d      	bne.n	8083062 <pinAvailable+0x56>
 8083046:	4630      	mov	r0, r6
 8083048:	f7fd f835 	bl	80800b6 <__cxa_guard_acquire>
 808304c:	b148      	cbz	r0, 8083062 <pinAvailable+0x56>
 808304e:	4629      	mov	r1, r5
 8083050:	480d      	ldr	r0, [pc, #52]	; (8083088 <pinAvailable+0x7c>)
 8083052:	f7ff fbb7 	bl	80827c4 <_ZN8SPIClassC1E19hal_spi_interface_t>
 8083056:	4630      	mov	r0, r6
 8083058:	f7fd f832 	bl	80800c0 <__cxa_guard_release>
 808305c:	480b      	ldr	r0, [pc, #44]	; (808308c <pinAvailable+0x80>)
 808305e:	f001 f897 	bl	8084190 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 8083062:	4b09      	ldr	r3, [pc, #36]	; (8083088 <pinAvailable+0x7c>)
 8083064:	7818      	ldrb	r0, [r3, #0]
 8083066:	f7fe fadb 	bl	8081620 <hal_spi_is_enabled>
 808306a:	2800      	cmp	r0, #0
 808306c:	d1d2      	bne.n	8083014 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 808306e:	3c12      	subs	r4, #18
 8083070:	2c01      	cmp	r4, #1
 8083072:	d805      	bhi.n	8083080 <pinAvailable+0x74>
 8083074:	f7ff fe1c 	bl	8082cb0 <_Z22__fetch_global_Serial1v>
 8083078:	7c00      	ldrb	r0, [r0, #16]
 808307a:	f7fe fb09 	bl	8081690 <hal_usart_is_enabled>
 808307e:	e7d7      	b.n	8083030 <pinAvailable+0x24>
  return true; // 'pin' is available
 8083080:	2001      	movs	r0, #1
 8083082:	e7c8      	b.n	8083016 <pinAvailable+0xa>
 8083084:	200005ec 	.word	0x200005ec
 8083088:	200005f0 	.word	0x200005f0
 808308c:	08082ffd 	.word	0x08082ffd

08083090 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8083090:	282e      	cmp	r0, #46	; 0x2e
{
 8083092:	b538      	push	{r3, r4, r5, lr}
 8083094:	4604      	mov	r4, r0
 8083096:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8083098:	d80a      	bhi.n	80830b0 <pinMode+0x20>
 808309a:	29ff      	cmp	r1, #255	; 0xff
 808309c:	d008      	beq.n	80830b0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 808309e:	f7ff ffb5 	bl	808300c <pinAvailable>
 80830a2:	b128      	cbz	r0, 80830b0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80830a4:	4629      	mov	r1, r5
 80830a6:	4620      	mov	r0, r4
}
 80830a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80830ac:	f7fe ba18 	b.w	80814e0 <HAL_Pin_Mode>
}
 80830b0:	bd38      	pop	{r3, r4, r5, pc}

080830b2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80830b2:	b538      	push	{r3, r4, r5, lr}
 80830b4:	4604      	mov	r4, r0
 80830b6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80830b8:	f7fe fa1a 	bl	80814f0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80830bc:	28ff      	cmp	r0, #255	; 0xff
 80830be:	d010      	beq.n	80830e2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80830c0:	2806      	cmp	r0, #6
 80830c2:	d804      	bhi.n	80830ce <digitalWrite+0x1c>
 80830c4:	234d      	movs	r3, #77	; 0x4d
 80830c6:	fa23 f000 	lsr.w	r0, r3, r0
 80830ca:	07c3      	lsls	r3, r0, #31
 80830cc:	d409      	bmi.n	80830e2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80830ce:	4620      	mov	r0, r4
 80830d0:	f7ff ff9c 	bl	808300c <pinAvailable>
 80830d4:	b128      	cbz	r0, 80830e2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80830d6:	4629      	mov	r1, r5
 80830d8:	4620      	mov	r0, r4
}
 80830da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80830de:	f7fe ba0f 	b.w	8081500 <HAL_GPIO_Write>
}
 80830e2:	bd38      	pop	{r3, r4, r5, pc}

080830e4 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80830e4:	b510      	push	{r4, lr}
 80830e6:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80830e8:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80830ea:	bf9c      	itt	ls
 80830ec:	340a      	addls	r4, #10
 80830ee:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80830f0:	4620      	mov	r0, r4
 80830f2:	f7ff ff8b 	bl	808300c <pinAvailable>
 80830f6:	b150      	cbz	r0, 808310e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80830f8:	2103      	movs	r1, #3
 80830fa:	4620      	mov	r0, r4
 80830fc:	f7fe f9e8 	bl	80814d0 <HAL_Validate_Pin_Function>
 8083100:	2803      	cmp	r0, #3
 8083102:	d104      	bne.n	808310e <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 8083104:	4620      	mov	r0, r4
}
 8083106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 808310a:	f7fe ba11 	b.w	8081530 <hal_adc_read>
}
 808310e:	2000      	movs	r0, #0
 8083110:	bd10      	pop	{r4, pc}

08083112 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8083112:	4770      	bx	lr

08083114 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:
	hal_i2c_config_t config = {
 8083114:	2300      	movs	r3, #0
hal_i2c_config_t defaultWireConfig() {
 8083116:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 8083118:	2520      	movs	r5, #32
 808311a:	8043      	strh	r3, [r0, #2]
 808311c:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808311e:	4e08      	ldr	r6, [pc, #32]	; (8083140 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x2c>)
hal_i2c_config_t defaultWireConfig() {
 8083120:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 8083122:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083124:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 8083126:	6085      	str	r5, [r0, #8]
 8083128:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808312a:	4628      	mov	r0, r5
 808312c:	f000 f870 	bl	8083210 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083130:	4631      	mov	r1, r6
	};
 8083132:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083134:	4628      	mov	r0, r5
 8083136:	f000 f86b 	bl	8083210 <_ZnajRKSt9nothrow_t>
	};
 808313a:	60e0      	str	r0, [r4, #12]
}
 808313c:	4620      	mov	r0, r4
 808313e:	bd70      	pop	{r4, r5, r6, pc}
 8083140:	08084934 	.word	0x08084934

08083144 <__tcf_2>:
 8083144:	4770      	bx	lr

08083146 <_Z17acquireWireBufferv>:
{
 8083146:	b510      	push	{r4, lr}
 8083148:	4604      	mov	r4, r0
	return defaultWireConfig();
 808314a:	f7ff ffe3 	bl	8083114 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 808314e:	4620      	mov	r0, r4
 8083150:	bd10      	pop	{r4, pc}

08083152 <_Z18acquireWire3Bufferv>:
 8083152:	b510      	push	{r4, lr}
 8083154:	4604      	mov	r4, r0
 8083156:	f7ff ffdd 	bl	8083114 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
 808315a:	4620      	mov	r0, r4
 808315c:	bd10      	pop	{r4, pc}
	...

08083160 <_Z19__fetch_global_Wirev>:
{
 8083160:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8083162:	4d0e      	ldr	r5, [pc, #56]	; (808319c <_Z19__fetch_global_Wirev+0x3c>)
{
 8083164:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8083166:	7829      	ldrb	r1, [r5, #0]
 8083168:	f3bf 8f5b 	dmb	ish
 808316c:	f011 0401 	ands.w	r4, r1, #1
 8083170:	d111      	bne.n	8083196 <_Z19__fetch_global_Wirev+0x36>
 8083172:	4628      	mov	r0, r5
 8083174:	f7fc ff9f 	bl	80800b6 <__cxa_guard_acquire>
 8083178:	b168      	cbz	r0, 8083196 <_Z19__fetch_global_Wirev+0x36>
 808317a:	a801      	add	r0, sp, #4
 808317c:	f7ff ffe3 	bl	8083146 <_Z17acquireWireBufferv>
 8083180:	4621      	mov	r1, r4
 8083182:	aa01      	add	r2, sp, #4
 8083184:	4806      	ldr	r0, [pc, #24]	; (80831a0 <_Z19__fetch_global_Wirev+0x40>)
 8083186:	f7ff f941 	bl	808240c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 808318a:	4628      	mov	r0, r5
 808318c:	f7fc ff98 	bl	80800c0 <__cxa_guard_release>
 8083190:	4804      	ldr	r0, [pc, #16]	; (80831a4 <_Z19__fetch_global_Wirev+0x44>)
 8083192:	f000 fffd 	bl	8084190 <atexit>
	return wire;
}
 8083196:	4802      	ldr	r0, [pc, #8]	; (80831a0 <_Z19__fetch_global_Wirev+0x40>)
 8083198:	b007      	add	sp, #28
 808319a:	bd30      	pop	{r4, r5, pc}
 808319c:	20000600 	.word	0x20000600
 80831a0:	20000608 	.word	0x20000608
 80831a4:	08083113 	.word	0x08083113

080831a8 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 80831a8:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 80831aa:	4c0e      	ldr	r4, [pc, #56]	; (80831e4 <_Z20__fetch_global_Wire3v+0x3c>)
{
 80831ac:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 80831ae:	7823      	ldrb	r3, [r4, #0]
 80831b0:	f3bf 8f5b 	dmb	ish
 80831b4:	07db      	lsls	r3, r3, #31
 80831b6:	d411      	bmi.n	80831dc <_Z20__fetch_global_Wire3v+0x34>
 80831b8:	4620      	mov	r0, r4
 80831ba:	f7fc ff7c 	bl	80800b6 <__cxa_guard_acquire>
 80831be:	b168      	cbz	r0, 80831dc <_Z20__fetch_global_Wire3v+0x34>
 80831c0:	a801      	add	r0, sp, #4
 80831c2:	f7ff ffc6 	bl	8083152 <_Z18acquireWire3Bufferv>
 80831c6:	2102      	movs	r1, #2
 80831c8:	aa01      	add	r2, sp, #4
 80831ca:	4807      	ldr	r0, [pc, #28]	; (80831e8 <_Z20__fetch_global_Wire3v+0x40>)
 80831cc:	f7ff f91e 	bl	808240c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80831d0:	4620      	mov	r0, r4
 80831d2:	f7fc ff75 	bl	80800c0 <__cxa_guard_release>
 80831d6:	4805      	ldr	r0, [pc, #20]	; (80831ec <_Z20__fetch_global_Wire3v+0x44>)
 80831d8:	f000 ffda 	bl	8084190 <atexit>
	return wire;
}
 80831dc:	4802      	ldr	r0, [pc, #8]	; (80831e8 <_Z20__fetch_global_Wire3v+0x40>)
 80831de:	b006      	add	sp, #24
 80831e0:	bd10      	pop	{r4, pc}
 80831e2:	bf00      	nop
 80831e4:	20000604 	.word	0x20000604
 80831e8:	2000061c 	.word	0x2000061c
 80831ec:	08083145 	.word	0x08083145

080831f0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80831f0:	2300      	movs	r3, #0
 80831f2:	b507      	push	{r0, r1, r2, lr}
 80831f4:	461a      	mov	r2, r3
 80831f6:	4619      	mov	r1, r3
 80831f8:	9300      	str	r3, [sp, #0]
 80831fa:	4803      	ldr	r0, [pc, #12]	; (8083208 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80831fc:	f7ff f9f2 	bl	80825e4 <_ZN9IPAddressC1Ehhhh>
 8083200:	b003      	add	sp, #12
 8083202:	f85d fb04 	ldr.w	pc, [sp], #4
 8083206:	bf00      	nop
 8083208:	20000630 	.word	0x20000630

0808320c <_ZdlPvj>:
 808320c:	f7fc bf51 	b.w	80800b2 <_ZdlPv>

08083210 <_ZnajRKSt9nothrow_t>:
 8083210:	f7fc bf4d 	b.w	80800ae <_Znaj>

08083214 <_ZSt25__throw_bad_function_callv>:
 8083214:	b508      	push	{r3, lr}
 8083216:	f7fe fbd3 	bl	80819c0 <abort>
	...

0808321c <__aeabi_drsub>:
 808321c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8083220:	e002      	b.n	8083228 <__adddf3>
 8083222:	bf00      	nop

08083224 <__aeabi_dsub>:
 8083224:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08083228 <__adddf3>:
 8083228:	b530      	push	{r4, r5, lr}
 808322a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 808322e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8083232:	ea94 0f05 	teq	r4, r5
 8083236:	bf08      	it	eq
 8083238:	ea90 0f02 	teqeq	r0, r2
 808323c:	bf1f      	itttt	ne
 808323e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8083242:	ea55 0c02 	orrsne.w	ip, r5, r2
 8083246:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 808324a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808324e:	f000 80e2 	beq.w	8083416 <__adddf3+0x1ee>
 8083252:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8083256:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 808325a:	bfb8      	it	lt
 808325c:	426d      	neglt	r5, r5
 808325e:	dd0c      	ble.n	808327a <__adddf3+0x52>
 8083260:	442c      	add	r4, r5
 8083262:	ea80 0202 	eor.w	r2, r0, r2
 8083266:	ea81 0303 	eor.w	r3, r1, r3
 808326a:	ea82 0000 	eor.w	r0, r2, r0
 808326e:	ea83 0101 	eor.w	r1, r3, r1
 8083272:	ea80 0202 	eor.w	r2, r0, r2
 8083276:	ea81 0303 	eor.w	r3, r1, r3
 808327a:	2d36      	cmp	r5, #54	; 0x36
 808327c:	bf88      	it	hi
 808327e:	bd30      	pophi	{r4, r5, pc}
 8083280:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8083284:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8083288:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 808328c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8083290:	d002      	beq.n	8083298 <__adddf3+0x70>
 8083292:	4240      	negs	r0, r0
 8083294:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083298:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 808329c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80832a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80832a4:	d002      	beq.n	80832ac <__adddf3+0x84>
 80832a6:	4252      	negs	r2, r2
 80832a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80832ac:	ea94 0f05 	teq	r4, r5
 80832b0:	f000 80a7 	beq.w	8083402 <__adddf3+0x1da>
 80832b4:	f1a4 0401 	sub.w	r4, r4, #1
 80832b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80832bc:	db0d      	blt.n	80832da <__adddf3+0xb2>
 80832be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80832c2:	fa22 f205 	lsr.w	r2, r2, r5
 80832c6:	1880      	adds	r0, r0, r2
 80832c8:	f141 0100 	adc.w	r1, r1, #0
 80832cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80832d0:	1880      	adds	r0, r0, r2
 80832d2:	fa43 f305 	asr.w	r3, r3, r5
 80832d6:	4159      	adcs	r1, r3
 80832d8:	e00e      	b.n	80832f8 <__adddf3+0xd0>
 80832da:	f1a5 0520 	sub.w	r5, r5, #32
 80832de:	f10e 0e20 	add.w	lr, lr, #32
 80832e2:	2a01      	cmp	r2, #1
 80832e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80832e8:	bf28      	it	cs
 80832ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80832ee:	fa43 f305 	asr.w	r3, r3, r5
 80832f2:	18c0      	adds	r0, r0, r3
 80832f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80832f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80832fc:	d507      	bpl.n	808330e <__adddf3+0xe6>
 80832fe:	f04f 0e00 	mov.w	lr, #0
 8083302:	f1dc 0c00 	rsbs	ip, ip, #0
 8083306:	eb7e 0000 	sbcs.w	r0, lr, r0
 808330a:	eb6e 0101 	sbc.w	r1, lr, r1
 808330e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8083312:	d31b      	bcc.n	808334c <__adddf3+0x124>
 8083314:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8083318:	d30c      	bcc.n	8083334 <__adddf3+0x10c>
 808331a:	0849      	lsrs	r1, r1, #1
 808331c:	ea5f 0030 	movs.w	r0, r0, rrx
 8083320:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8083324:	f104 0401 	add.w	r4, r4, #1
 8083328:	ea4f 5244 	mov.w	r2, r4, lsl #21
 808332c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8083330:	f080 809a 	bcs.w	8083468 <__adddf3+0x240>
 8083334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8083338:	bf08      	it	eq
 808333a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808333e:	f150 0000 	adcs.w	r0, r0, #0
 8083342:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083346:	ea41 0105 	orr.w	r1, r1, r5
 808334a:	bd30      	pop	{r4, r5, pc}
 808334c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8083350:	4140      	adcs	r0, r0
 8083352:	eb41 0101 	adc.w	r1, r1, r1
 8083356:	3c01      	subs	r4, #1
 8083358:	bf28      	it	cs
 808335a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 808335e:	d2e9      	bcs.n	8083334 <__adddf3+0x10c>
 8083360:	f091 0f00 	teq	r1, #0
 8083364:	bf04      	itt	eq
 8083366:	4601      	moveq	r1, r0
 8083368:	2000      	moveq	r0, #0
 808336a:	fab1 f381 	clz	r3, r1
 808336e:	bf08      	it	eq
 8083370:	3320      	addeq	r3, #32
 8083372:	f1a3 030b 	sub.w	r3, r3, #11
 8083376:	f1b3 0220 	subs.w	r2, r3, #32
 808337a:	da0c      	bge.n	8083396 <__adddf3+0x16e>
 808337c:	320c      	adds	r2, #12
 808337e:	dd08      	ble.n	8083392 <__adddf3+0x16a>
 8083380:	f102 0c14 	add.w	ip, r2, #20
 8083384:	f1c2 020c 	rsb	r2, r2, #12
 8083388:	fa01 f00c 	lsl.w	r0, r1, ip
 808338c:	fa21 f102 	lsr.w	r1, r1, r2
 8083390:	e00c      	b.n	80833ac <__adddf3+0x184>
 8083392:	f102 0214 	add.w	r2, r2, #20
 8083396:	bfd8      	it	le
 8083398:	f1c2 0c20 	rsble	ip, r2, #32
 808339c:	fa01 f102 	lsl.w	r1, r1, r2
 80833a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80833a4:	bfdc      	itt	le
 80833a6:	ea41 010c 	orrle.w	r1, r1, ip
 80833aa:	4090      	lslle	r0, r2
 80833ac:	1ae4      	subs	r4, r4, r3
 80833ae:	bfa2      	ittt	ge
 80833b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80833b4:	4329      	orrge	r1, r5
 80833b6:	bd30      	popge	{r4, r5, pc}
 80833b8:	ea6f 0404 	mvn.w	r4, r4
 80833bc:	3c1f      	subs	r4, #31
 80833be:	da1c      	bge.n	80833fa <__adddf3+0x1d2>
 80833c0:	340c      	adds	r4, #12
 80833c2:	dc0e      	bgt.n	80833e2 <__adddf3+0x1ba>
 80833c4:	f104 0414 	add.w	r4, r4, #20
 80833c8:	f1c4 0220 	rsb	r2, r4, #32
 80833cc:	fa20 f004 	lsr.w	r0, r0, r4
 80833d0:	fa01 f302 	lsl.w	r3, r1, r2
 80833d4:	ea40 0003 	orr.w	r0, r0, r3
 80833d8:	fa21 f304 	lsr.w	r3, r1, r4
 80833dc:	ea45 0103 	orr.w	r1, r5, r3
 80833e0:	bd30      	pop	{r4, r5, pc}
 80833e2:	f1c4 040c 	rsb	r4, r4, #12
 80833e6:	f1c4 0220 	rsb	r2, r4, #32
 80833ea:	fa20 f002 	lsr.w	r0, r0, r2
 80833ee:	fa01 f304 	lsl.w	r3, r1, r4
 80833f2:	ea40 0003 	orr.w	r0, r0, r3
 80833f6:	4629      	mov	r1, r5
 80833f8:	bd30      	pop	{r4, r5, pc}
 80833fa:	fa21 f004 	lsr.w	r0, r1, r4
 80833fe:	4629      	mov	r1, r5
 8083400:	bd30      	pop	{r4, r5, pc}
 8083402:	f094 0f00 	teq	r4, #0
 8083406:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 808340a:	bf06      	itte	eq
 808340c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8083410:	3401      	addeq	r4, #1
 8083412:	3d01      	subne	r5, #1
 8083414:	e74e      	b.n	80832b4 <__adddf3+0x8c>
 8083416:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808341a:	bf18      	it	ne
 808341c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8083420:	d029      	beq.n	8083476 <__adddf3+0x24e>
 8083422:	ea94 0f05 	teq	r4, r5
 8083426:	bf08      	it	eq
 8083428:	ea90 0f02 	teqeq	r0, r2
 808342c:	d005      	beq.n	808343a <__adddf3+0x212>
 808342e:	ea54 0c00 	orrs.w	ip, r4, r0
 8083432:	bf04      	itt	eq
 8083434:	4619      	moveq	r1, r3
 8083436:	4610      	moveq	r0, r2
 8083438:	bd30      	pop	{r4, r5, pc}
 808343a:	ea91 0f03 	teq	r1, r3
 808343e:	bf1e      	ittt	ne
 8083440:	2100      	movne	r1, #0
 8083442:	2000      	movne	r0, #0
 8083444:	bd30      	popne	{r4, r5, pc}
 8083446:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 808344a:	d105      	bne.n	8083458 <__adddf3+0x230>
 808344c:	0040      	lsls	r0, r0, #1
 808344e:	4149      	adcs	r1, r1
 8083450:	bf28      	it	cs
 8083452:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8083456:	bd30      	pop	{r4, r5, pc}
 8083458:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 808345c:	bf3c      	itt	cc
 808345e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8083462:	bd30      	popcc	{r4, r5, pc}
 8083464:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083468:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 808346c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083470:	f04f 0000 	mov.w	r0, #0
 8083474:	bd30      	pop	{r4, r5, pc}
 8083476:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808347a:	bf1a      	itte	ne
 808347c:	4619      	movne	r1, r3
 808347e:	4610      	movne	r0, r2
 8083480:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8083484:	bf1c      	itt	ne
 8083486:	460b      	movne	r3, r1
 8083488:	4602      	movne	r2, r0
 808348a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808348e:	bf06      	itte	eq
 8083490:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8083494:	ea91 0f03 	teqeq	r1, r3
 8083498:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 808349c:	bd30      	pop	{r4, r5, pc}
 808349e:	bf00      	nop

080834a0 <__aeabi_ui2d>:
 80834a0:	f090 0f00 	teq	r0, #0
 80834a4:	bf04      	itt	eq
 80834a6:	2100      	moveq	r1, #0
 80834a8:	4770      	bxeq	lr
 80834aa:	b530      	push	{r4, r5, lr}
 80834ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80834b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80834b4:	f04f 0500 	mov.w	r5, #0
 80834b8:	f04f 0100 	mov.w	r1, #0
 80834bc:	e750      	b.n	8083360 <__adddf3+0x138>
 80834be:	bf00      	nop

080834c0 <__aeabi_i2d>:
 80834c0:	f090 0f00 	teq	r0, #0
 80834c4:	bf04      	itt	eq
 80834c6:	2100      	moveq	r1, #0
 80834c8:	4770      	bxeq	lr
 80834ca:	b530      	push	{r4, r5, lr}
 80834cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80834d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80834d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80834d8:	bf48      	it	mi
 80834da:	4240      	negmi	r0, r0
 80834dc:	f04f 0100 	mov.w	r1, #0
 80834e0:	e73e      	b.n	8083360 <__adddf3+0x138>
 80834e2:	bf00      	nop

080834e4 <__aeabi_f2d>:
 80834e4:	0042      	lsls	r2, r0, #1
 80834e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80834ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80834ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80834f2:	bf1f      	itttt	ne
 80834f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80834f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80834fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8083500:	4770      	bxne	lr
 8083502:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8083506:	bf08      	it	eq
 8083508:	4770      	bxeq	lr
 808350a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 808350e:	bf04      	itt	eq
 8083510:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8083514:	4770      	bxeq	lr
 8083516:	b530      	push	{r4, r5, lr}
 8083518:	f44f 7460 	mov.w	r4, #896	; 0x380
 808351c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083520:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083524:	e71c      	b.n	8083360 <__adddf3+0x138>
 8083526:	bf00      	nop

08083528 <__aeabi_ul2d>:
 8083528:	ea50 0201 	orrs.w	r2, r0, r1
 808352c:	bf08      	it	eq
 808352e:	4770      	bxeq	lr
 8083530:	b530      	push	{r4, r5, lr}
 8083532:	f04f 0500 	mov.w	r5, #0
 8083536:	e00a      	b.n	808354e <__aeabi_l2d+0x16>

08083538 <__aeabi_l2d>:
 8083538:	ea50 0201 	orrs.w	r2, r0, r1
 808353c:	bf08      	it	eq
 808353e:	4770      	bxeq	lr
 8083540:	b530      	push	{r4, r5, lr}
 8083542:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8083546:	d502      	bpl.n	808354e <__aeabi_l2d+0x16>
 8083548:	4240      	negs	r0, r0
 808354a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808354e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083552:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083556:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 808355a:	f43f aed8 	beq.w	808330e <__adddf3+0xe6>
 808355e:	f04f 0203 	mov.w	r2, #3
 8083562:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8083566:	bf18      	it	ne
 8083568:	3203      	addne	r2, #3
 808356a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808356e:	bf18      	it	ne
 8083570:	3203      	addne	r2, #3
 8083572:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8083576:	f1c2 0320 	rsb	r3, r2, #32
 808357a:	fa00 fc03 	lsl.w	ip, r0, r3
 808357e:	fa20 f002 	lsr.w	r0, r0, r2
 8083582:	fa01 fe03 	lsl.w	lr, r1, r3
 8083586:	ea40 000e 	orr.w	r0, r0, lr
 808358a:	fa21 f102 	lsr.w	r1, r1, r2
 808358e:	4414      	add	r4, r2
 8083590:	e6bd      	b.n	808330e <__adddf3+0xe6>
 8083592:	bf00      	nop

08083594 <__aeabi_dmul>:
 8083594:	b570      	push	{r4, r5, r6, lr}
 8083596:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808359a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808359e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80835a2:	bf1d      	ittte	ne
 80835a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80835a8:	ea94 0f0c 	teqne	r4, ip
 80835ac:	ea95 0f0c 	teqne	r5, ip
 80835b0:	f000 f8de 	bleq	8083770 <__aeabi_dmul+0x1dc>
 80835b4:	442c      	add	r4, r5
 80835b6:	ea81 0603 	eor.w	r6, r1, r3
 80835ba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80835be:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80835c2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80835c6:	bf18      	it	ne
 80835c8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80835cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80835d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80835d4:	d038      	beq.n	8083648 <__aeabi_dmul+0xb4>
 80835d6:	fba0 ce02 	umull	ip, lr, r0, r2
 80835da:	f04f 0500 	mov.w	r5, #0
 80835de:	fbe1 e502 	umlal	lr, r5, r1, r2
 80835e2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80835e6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80835ea:	f04f 0600 	mov.w	r6, #0
 80835ee:	fbe1 5603 	umlal	r5, r6, r1, r3
 80835f2:	f09c 0f00 	teq	ip, #0
 80835f6:	bf18      	it	ne
 80835f8:	f04e 0e01 	orrne.w	lr, lr, #1
 80835fc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8083600:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8083604:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8083608:	d204      	bcs.n	8083614 <__aeabi_dmul+0x80>
 808360a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 808360e:	416d      	adcs	r5, r5
 8083610:	eb46 0606 	adc.w	r6, r6, r6
 8083614:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8083618:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 808361c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8083620:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8083624:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8083628:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808362c:	bf88      	it	hi
 808362e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8083632:	d81e      	bhi.n	8083672 <__aeabi_dmul+0xde>
 8083634:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8083638:	bf08      	it	eq
 808363a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 808363e:	f150 0000 	adcs.w	r0, r0, #0
 8083642:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083646:	bd70      	pop	{r4, r5, r6, pc}
 8083648:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 808364c:	ea46 0101 	orr.w	r1, r6, r1
 8083650:	ea40 0002 	orr.w	r0, r0, r2
 8083654:	ea81 0103 	eor.w	r1, r1, r3
 8083658:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 808365c:	bfc2      	ittt	gt
 808365e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8083662:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8083666:	bd70      	popgt	{r4, r5, r6, pc}
 8083668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808366c:	f04f 0e00 	mov.w	lr, #0
 8083670:	3c01      	subs	r4, #1
 8083672:	f300 80ab 	bgt.w	80837cc <__aeabi_dmul+0x238>
 8083676:	f114 0f36 	cmn.w	r4, #54	; 0x36
 808367a:	bfde      	ittt	le
 808367c:	2000      	movle	r0, #0
 808367e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8083682:	bd70      	pople	{r4, r5, r6, pc}
 8083684:	f1c4 0400 	rsb	r4, r4, #0
 8083688:	3c20      	subs	r4, #32
 808368a:	da35      	bge.n	80836f8 <__aeabi_dmul+0x164>
 808368c:	340c      	adds	r4, #12
 808368e:	dc1b      	bgt.n	80836c8 <__aeabi_dmul+0x134>
 8083690:	f104 0414 	add.w	r4, r4, #20
 8083694:	f1c4 0520 	rsb	r5, r4, #32
 8083698:	fa00 f305 	lsl.w	r3, r0, r5
 808369c:	fa20 f004 	lsr.w	r0, r0, r4
 80836a0:	fa01 f205 	lsl.w	r2, r1, r5
 80836a4:	ea40 0002 	orr.w	r0, r0, r2
 80836a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80836ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80836b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80836b4:	fa21 f604 	lsr.w	r6, r1, r4
 80836b8:	eb42 0106 	adc.w	r1, r2, r6
 80836bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80836c0:	bf08      	it	eq
 80836c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80836c6:	bd70      	pop	{r4, r5, r6, pc}
 80836c8:	f1c4 040c 	rsb	r4, r4, #12
 80836cc:	f1c4 0520 	rsb	r5, r4, #32
 80836d0:	fa00 f304 	lsl.w	r3, r0, r4
 80836d4:	fa20 f005 	lsr.w	r0, r0, r5
 80836d8:	fa01 f204 	lsl.w	r2, r1, r4
 80836dc:	ea40 0002 	orr.w	r0, r0, r2
 80836e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80836e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80836e8:	f141 0100 	adc.w	r1, r1, #0
 80836ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80836f0:	bf08      	it	eq
 80836f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80836f6:	bd70      	pop	{r4, r5, r6, pc}
 80836f8:	f1c4 0520 	rsb	r5, r4, #32
 80836fc:	fa00 f205 	lsl.w	r2, r0, r5
 8083700:	ea4e 0e02 	orr.w	lr, lr, r2
 8083704:	fa20 f304 	lsr.w	r3, r0, r4
 8083708:	fa01 f205 	lsl.w	r2, r1, r5
 808370c:	ea43 0302 	orr.w	r3, r3, r2
 8083710:	fa21 f004 	lsr.w	r0, r1, r4
 8083714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083718:	fa21 f204 	lsr.w	r2, r1, r4
 808371c:	ea20 0002 	bic.w	r0, r0, r2
 8083720:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8083724:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083728:	bf08      	it	eq
 808372a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808372e:	bd70      	pop	{r4, r5, r6, pc}
 8083730:	f094 0f00 	teq	r4, #0
 8083734:	d10f      	bne.n	8083756 <__aeabi_dmul+0x1c2>
 8083736:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808373a:	0040      	lsls	r0, r0, #1
 808373c:	eb41 0101 	adc.w	r1, r1, r1
 8083740:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083744:	bf08      	it	eq
 8083746:	3c01      	subeq	r4, #1
 8083748:	d0f7      	beq.n	808373a <__aeabi_dmul+0x1a6>
 808374a:	ea41 0106 	orr.w	r1, r1, r6
 808374e:	f095 0f00 	teq	r5, #0
 8083752:	bf18      	it	ne
 8083754:	4770      	bxne	lr
 8083756:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 808375a:	0052      	lsls	r2, r2, #1
 808375c:	eb43 0303 	adc.w	r3, r3, r3
 8083760:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8083764:	bf08      	it	eq
 8083766:	3d01      	subeq	r5, #1
 8083768:	d0f7      	beq.n	808375a <__aeabi_dmul+0x1c6>
 808376a:	ea43 0306 	orr.w	r3, r3, r6
 808376e:	4770      	bx	lr
 8083770:	ea94 0f0c 	teq	r4, ip
 8083774:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083778:	bf18      	it	ne
 808377a:	ea95 0f0c 	teqne	r5, ip
 808377e:	d00c      	beq.n	808379a <__aeabi_dmul+0x206>
 8083780:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083784:	bf18      	it	ne
 8083786:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808378a:	d1d1      	bne.n	8083730 <__aeabi_dmul+0x19c>
 808378c:	ea81 0103 	eor.w	r1, r1, r3
 8083790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083794:	f04f 0000 	mov.w	r0, #0
 8083798:	bd70      	pop	{r4, r5, r6, pc}
 808379a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808379e:	bf06      	itte	eq
 80837a0:	4610      	moveq	r0, r2
 80837a2:	4619      	moveq	r1, r3
 80837a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80837a8:	d019      	beq.n	80837de <__aeabi_dmul+0x24a>
 80837aa:	ea94 0f0c 	teq	r4, ip
 80837ae:	d102      	bne.n	80837b6 <__aeabi_dmul+0x222>
 80837b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80837b4:	d113      	bne.n	80837de <__aeabi_dmul+0x24a>
 80837b6:	ea95 0f0c 	teq	r5, ip
 80837ba:	d105      	bne.n	80837c8 <__aeabi_dmul+0x234>
 80837bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80837c0:	bf1c      	itt	ne
 80837c2:	4610      	movne	r0, r2
 80837c4:	4619      	movne	r1, r3
 80837c6:	d10a      	bne.n	80837de <__aeabi_dmul+0x24a>
 80837c8:	ea81 0103 	eor.w	r1, r1, r3
 80837cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80837d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80837d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80837d8:	f04f 0000 	mov.w	r0, #0
 80837dc:	bd70      	pop	{r4, r5, r6, pc}
 80837de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80837e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80837e6:	bd70      	pop	{r4, r5, r6, pc}

080837e8 <__aeabi_ddiv>:
 80837e8:	b570      	push	{r4, r5, r6, lr}
 80837ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80837ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80837f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80837f6:	bf1d      	ittte	ne
 80837f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80837fc:	ea94 0f0c 	teqne	r4, ip
 8083800:	ea95 0f0c 	teqne	r5, ip
 8083804:	f000 f8a7 	bleq	8083956 <__aeabi_ddiv+0x16e>
 8083808:	eba4 0405 	sub.w	r4, r4, r5
 808380c:	ea81 0e03 	eor.w	lr, r1, r3
 8083810:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083814:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8083818:	f000 8088 	beq.w	808392c <__aeabi_ddiv+0x144>
 808381c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8083820:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8083824:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8083828:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 808382c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8083830:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8083834:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8083838:	ea4f 2600 	mov.w	r6, r0, lsl #8
 808383c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8083840:	429d      	cmp	r5, r3
 8083842:	bf08      	it	eq
 8083844:	4296      	cmpeq	r6, r2
 8083846:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808384a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 808384e:	d202      	bcs.n	8083856 <__aeabi_ddiv+0x6e>
 8083850:	085b      	lsrs	r3, r3, #1
 8083852:	ea4f 0232 	mov.w	r2, r2, rrx
 8083856:	1ab6      	subs	r6, r6, r2
 8083858:	eb65 0503 	sbc.w	r5, r5, r3
 808385c:	085b      	lsrs	r3, r3, #1
 808385e:	ea4f 0232 	mov.w	r2, r2, rrx
 8083862:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8083866:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808386a:	ebb6 0e02 	subs.w	lr, r6, r2
 808386e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083872:	bf22      	ittt	cs
 8083874:	1ab6      	subcs	r6, r6, r2
 8083876:	4675      	movcs	r5, lr
 8083878:	ea40 000c 	orrcs.w	r0, r0, ip
 808387c:	085b      	lsrs	r3, r3, #1
 808387e:	ea4f 0232 	mov.w	r2, r2, rrx
 8083882:	ebb6 0e02 	subs.w	lr, r6, r2
 8083886:	eb75 0e03 	sbcs.w	lr, r5, r3
 808388a:	bf22      	ittt	cs
 808388c:	1ab6      	subcs	r6, r6, r2
 808388e:	4675      	movcs	r5, lr
 8083890:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8083894:	085b      	lsrs	r3, r3, #1
 8083896:	ea4f 0232 	mov.w	r2, r2, rrx
 808389a:	ebb6 0e02 	subs.w	lr, r6, r2
 808389e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80838a2:	bf22      	ittt	cs
 80838a4:	1ab6      	subcs	r6, r6, r2
 80838a6:	4675      	movcs	r5, lr
 80838a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80838ac:	085b      	lsrs	r3, r3, #1
 80838ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80838b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80838b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80838ba:	bf22      	ittt	cs
 80838bc:	1ab6      	subcs	r6, r6, r2
 80838be:	4675      	movcs	r5, lr
 80838c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80838c4:	ea55 0e06 	orrs.w	lr, r5, r6
 80838c8:	d018      	beq.n	80838fc <__aeabi_ddiv+0x114>
 80838ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80838ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80838d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80838d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80838da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80838de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80838e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80838e6:	d1c0      	bne.n	808386a <__aeabi_ddiv+0x82>
 80838e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80838ec:	d10b      	bne.n	8083906 <__aeabi_ddiv+0x11e>
 80838ee:	ea41 0100 	orr.w	r1, r1, r0
 80838f2:	f04f 0000 	mov.w	r0, #0
 80838f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80838fa:	e7b6      	b.n	808386a <__aeabi_ddiv+0x82>
 80838fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083900:	bf04      	itt	eq
 8083902:	4301      	orreq	r1, r0
 8083904:	2000      	moveq	r0, #0
 8083906:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808390a:	bf88      	it	hi
 808390c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8083910:	f63f aeaf 	bhi.w	8083672 <__aeabi_dmul+0xde>
 8083914:	ebb5 0c03 	subs.w	ip, r5, r3
 8083918:	bf04      	itt	eq
 808391a:	ebb6 0c02 	subseq.w	ip, r6, r2
 808391e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8083922:	f150 0000 	adcs.w	r0, r0, #0
 8083926:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808392a:	bd70      	pop	{r4, r5, r6, pc}
 808392c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8083930:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8083934:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8083938:	bfc2      	ittt	gt
 808393a:	ebd4 050c 	rsbsgt	r5, r4, ip
 808393e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8083942:	bd70      	popgt	{r4, r5, r6, pc}
 8083944:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083948:	f04f 0e00 	mov.w	lr, #0
 808394c:	3c01      	subs	r4, #1
 808394e:	e690      	b.n	8083672 <__aeabi_dmul+0xde>
 8083950:	ea45 0e06 	orr.w	lr, r5, r6
 8083954:	e68d      	b.n	8083672 <__aeabi_dmul+0xde>
 8083956:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808395a:	ea94 0f0c 	teq	r4, ip
 808395e:	bf08      	it	eq
 8083960:	ea95 0f0c 	teqeq	r5, ip
 8083964:	f43f af3b 	beq.w	80837de <__aeabi_dmul+0x24a>
 8083968:	ea94 0f0c 	teq	r4, ip
 808396c:	d10a      	bne.n	8083984 <__aeabi_ddiv+0x19c>
 808396e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8083972:	f47f af34 	bne.w	80837de <__aeabi_dmul+0x24a>
 8083976:	ea95 0f0c 	teq	r5, ip
 808397a:	f47f af25 	bne.w	80837c8 <__aeabi_dmul+0x234>
 808397e:	4610      	mov	r0, r2
 8083980:	4619      	mov	r1, r3
 8083982:	e72c      	b.n	80837de <__aeabi_dmul+0x24a>
 8083984:	ea95 0f0c 	teq	r5, ip
 8083988:	d106      	bne.n	8083998 <__aeabi_ddiv+0x1b0>
 808398a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808398e:	f43f aefd 	beq.w	808378c <__aeabi_dmul+0x1f8>
 8083992:	4610      	mov	r0, r2
 8083994:	4619      	mov	r1, r3
 8083996:	e722      	b.n	80837de <__aeabi_dmul+0x24a>
 8083998:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808399c:	bf18      	it	ne
 808399e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80839a2:	f47f aec5 	bne.w	8083730 <__aeabi_dmul+0x19c>
 80839a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80839aa:	f47f af0d 	bne.w	80837c8 <__aeabi_dmul+0x234>
 80839ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80839b2:	f47f aeeb 	bne.w	808378c <__aeabi_dmul+0x1f8>
 80839b6:	e712      	b.n	80837de <__aeabi_dmul+0x24a>

080839b8 <__aeabi_d2iz>:
 80839b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80839bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80839c0:	d215      	bcs.n	80839ee <__aeabi_d2iz+0x36>
 80839c2:	d511      	bpl.n	80839e8 <__aeabi_d2iz+0x30>
 80839c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80839c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80839cc:	d912      	bls.n	80839f4 <__aeabi_d2iz+0x3c>
 80839ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80839d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80839d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80839da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80839de:	fa23 f002 	lsr.w	r0, r3, r2
 80839e2:	bf18      	it	ne
 80839e4:	4240      	negne	r0, r0
 80839e6:	4770      	bx	lr
 80839e8:	f04f 0000 	mov.w	r0, #0
 80839ec:	4770      	bx	lr
 80839ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80839f2:	d105      	bne.n	8083a00 <__aeabi_d2iz+0x48>
 80839f4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80839f8:	bf08      	it	eq
 80839fa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80839fe:	4770      	bx	lr
 8083a00:	f04f 0000 	mov.w	r0, #0
 8083a04:	4770      	bx	lr
 8083a06:	bf00      	nop

08083a08 <__aeabi_d2uiz>:
 8083a08:	004a      	lsls	r2, r1, #1
 8083a0a:	d211      	bcs.n	8083a30 <__aeabi_d2uiz+0x28>
 8083a0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8083a10:	d211      	bcs.n	8083a36 <__aeabi_d2uiz+0x2e>
 8083a12:	d50d      	bpl.n	8083a30 <__aeabi_d2uiz+0x28>
 8083a14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8083a18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8083a1c:	d40e      	bmi.n	8083a3c <__aeabi_d2uiz+0x34>
 8083a1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8083a22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8083a26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8083a2a:	fa23 f002 	lsr.w	r0, r3, r2
 8083a2e:	4770      	bx	lr
 8083a30:	f04f 0000 	mov.w	r0, #0
 8083a34:	4770      	bx	lr
 8083a36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8083a3a:	d102      	bne.n	8083a42 <__aeabi_d2uiz+0x3a>
 8083a3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8083a40:	4770      	bx	lr
 8083a42:	f04f 0000 	mov.w	r0, #0
 8083a46:	4770      	bx	lr

08083a48 <__aeabi_d2f>:
 8083a48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8083a4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8083a50:	bf24      	itt	cs
 8083a52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8083a56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8083a5a:	d90d      	bls.n	8083a78 <__aeabi_d2f+0x30>
 8083a5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8083a60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8083a64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8083a68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8083a6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8083a70:	bf08      	it	eq
 8083a72:	f020 0001 	biceq.w	r0, r0, #1
 8083a76:	4770      	bx	lr
 8083a78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8083a7c:	d121      	bne.n	8083ac2 <__aeabi_d2f+0x7a>
 8083a7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8083a82:	bfbc      	itt	lt
 8083a84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8083a88:	4770      	bxlt	lr
 8083a8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083a8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8083a92:	f1c2 0218 	rsb	r2, r2, #24
 8083a96:	f1c2 0c20 	rsb	ip, r2, #32
 8083a9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8083a9e:	fa20 f002 	lsr.w	r0, r0, r2
 8083aa2:	bf18      	it	ne
 8083aa4:	f040 0001 	orrne.w	r0, r0, #1
 8083aa8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8083aac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8083ab0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8083ab4:	ea40 000c 	orr.w	r0, r0, ip
 8083ab8:	fa23 f302 	lsr.w	r3, r3, r2
 8083abc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8083ac0:	e7cc      	b.n	8083a5c <__aeabi_d2f+0x14>
 8083ac2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8083ac6:	d107      	bne.n	8083ad8 <__aeabi_d2f+0x90>
 8083ac8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8083acc:	bf1e      	ittt	ne
 8083ace:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8083ad2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8083ad6:	4770      	bxne	lr
 8083ad8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8083adc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8083ae0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083ae4:	4770      	bx	lr
 8083ae6:	bf00      	nop

08083ae8 <__aeabi_frsub>:
 8083ae8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8083aec:	e002      	b.n	8083af4 <__addsf3>
 8083aee:	bf00      	nop

08083af0 <__aeabi_fsub>:
 8083af0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08083af4 <__addsf3>:
 8083af4:	0042      	lsls	r2, r0, #1
 8083af6:	bf1f      	itttt	ne
 8083af8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8083afc:	ea92 0f03 	teqne	r2, r3
 8083b00:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8083b04:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8083b08:	d06a      	beq.n	8083be0 <__addsf3+0xec>
 8083b0a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8083b0e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8083b12:	bfc1      	itttt	gt
 8083b14:	18d2      	addgt	r2, r2, r3
 8083b16:	4041      	eorgt	r1, r0
 8083b18:	4048      	eorgt	r0, r1
 8083b1a:	4041      	eorgt	r1, r0
 8083b1c:	bfb8      	it	lt
 8083b1e:	425b      	neglt	r3, r3
 8083b20:	2b19      	cmp	r3, #25
 8083b22:	bf88      	it	hi
 8083b24:	4770      	bxhi	lr
 8083b26:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8083b2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083b2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8083b32:	bf18      	it	ne
 8083b34:	4240      	negne	r0, r0
 8083b36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8083b3a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8083b3e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8083b42:	bf18      	it	ne
 8083b44:	4249      	negne	r1, r1
 8083b46:	ea92 0f03 	teq	r2, r3
 8083b4a:	d03f      	beq.n	8083bcc <__addsf3+0xd8>
 8083b4c:	f1a2 0201 	sub.w	r2, r2, #1
 8083b50:	fa41 fc03 	asr.w	ip, r1, r3
 8083b54:	eb10 000c 	adds.w	r0, r0, ip
 8083b58:	f1c3 0320 	rsb	r3, r3, #32
 8083b5c:	fa01 f103 	lsl.w	r1, r1, r3
 8083b60:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8083b64:	d502      	bpl.n	8083b6c <__addsf3+0x78>
 8083b66:	4249      	negs	r1, r1
 8083b68:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8083b6c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8083b70:	d313      	bcc.n	8083b9a <__addsf3+0xa6>
 8083b72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8083b76:	d306      	bcc.n	8083b86 <__addsf3+0x92>
 8083b78:	0840      	lsrs	r0, r0, #1
 8083b7a:	ea4f 0131 	mov.w	r1, r1, rrx
 8083b7e:	f102 0201 	add.w	r2, r2, #1
 8083b82:	2afe      	cmp	r2, #254	; 0xfe
 8083b84:	d251      	bcs.n	8083c2a <__addsf3+0x136>
 8083b86:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8083b8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8083b8e:	bf08      	it	eq
 8083b90:	f020 0001 	biceq.w	r0, r0, #1
 8083b94:	ea40 0003 	orr.w	r0, r0, r3
 8083b98:	4770      	bx	lr
 8083b9a:	0049      	lsls	r1, r1, #1
 8083b9c:	eb40 0000 	adc.w	r0, r0, r0
 8083ba0:	3a01      	subs	r2, #1
 8083ba2:	bf28      	it	cs
 8083ba4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8083ba8:	d2ed      	bcs.n	8083b86 <__addsf3+0x92>
 8083baa:	fab0 fc80 	clz	ip, r0
 8083bae:	f1ac 0c08 	sub.w	ip, ip, #8
 8083bb2:	ebb2 020c 	subs.w	r2, r2, ip
 8083bb6:	fa00 f00c 	lsl.w	r0, r0, ip
 8083bba:	bfaa      	itet	ge
 8083bbc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8083bc0:	4252      	neglt	r2, r2
 8083bc2:	4318      	orrge	r0, r3
 8083bc4:	bfbc      	itt	lt
 8083bc6:	40d0      	lsrlt	r0, r2
 8083bc8:	4318      	orrlt	r0, r3
 8083bca:	4770      	bx	lr
 8083bcc:	f092 0f00 	teq	r2, #0
 8083bd0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8083bd4:	bf06      	itte	eq
 8083bd6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8083bda:	3201      	addeq	r2, #1
 8083bdc:	3b01      	subne	r3, #1
 8083bde:	e7b5      	b.n	8083b4c <__addsf3+0x58>
 8083be0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8083be4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8083be8:	bf18      	it	ne
 8083bea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8083bee:	d021      	beq.n	8083c34 <__addsf3+0x140>
 8083bf0:	ea92 0f03 	teq	r2, r3
 8083bf4:	d004      	beq.n	8083c00 <__addsf3+0x10c>
 8083bf6:	f092 0f00 	teq	r2, #0
 8083bfa:	bf08      	it	eq
 8083bfc:	4608      	moveq	r0, r1
 8083bfe:	4770      	bx	lr
 8083c00:	ea90 0f01 	teq	r0, r1
 8083c04:	bf1c      	itt	ne
 8083c06:	2000      	movne	r0, #0
 8083c08:	4770      	bxne	lr
 8083c0a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8083c0e:	d104      	bne.n	8083c1a <__addsf3+0x126>
 8083c10:	0040      	lsls	r0, r0, #1
 8083c12:	bf28      	it	cs
 8083c14:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8083c18:	4770      	bx	lr
 8083c1a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8083c1e:	bf3c      	itt	cc
 8083c20:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8083c24:	4770      	bxcc	lr
 8083c26:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8083c2a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8083c2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083c32:	4770      	bx	lr
 8083c34:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8083c38:	bf16      	itet	ne
 8083c3a:	4608      	movne	r0, r1
 8083c3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8083c40:	4601      	movne	r1, r0
 8083c42:	0242      	lsls	r2, r0, #9
 8083c44:	bf06      	itte	eq
 8083c46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8083c4a:	ea90 0f01 	teqeq	r0, r1
 8083c4e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8083c52:	4770      	bx	lr

08083c54 <__aeabi_ui2f>:
 8083c54:	f04f 0300 	mov.w	r3, #0
 8083c58:	e004      	b.n	8083c64 <__aeabi_i2f+0x8>
 8083c5a:	bf00      	nop

08083c5c <__aeabi_i2f>:
 8083c5c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8083c60:	bf48      	it	mi
 8083c62:	4240      	negmi	r0, r0
 8083c64:	ea5f 0c00 	movs.w	ip, r0
 8083c68:	bf08      	it	eq
 8083c6a:	4770      	bxeq	lr
 8083c6c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8083c70:	4601      	mov	r1, r0
 8083c72:	f04f 0000 	mov.w	r0, #0
 8083c76:	e01c      	b.n	8083cb2 <__aeabi_l2f+0x2a>

08083c78 <__aeabi_ul2f>:
 8083c78:	ea50 0201 	orrs.w	r2, r0, r1
 8083c7c:	bf08      	it	eq
 8083c7e:	4770      	bxeq	lr
 8083c80:	f04f 0300 	mov.w	r3, #0
 8083c84:	e00a      	b.n	8083c9c <__aeabi_l2f+0x14>
 8083c86:	bf00      	nop

08083c88 <__aeabi_l2f>:
 8083c88:	ea50 0201 	orrs.w	r2, r0, r1
 8083c8c:	bf08      	it	eq
 8083c8e:	4770      	bxeq	lr
 8083c90:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8083c94:	d502      	bpl.n	8083c9c <__aeabi_l2f+0x14>
 8083c96:	4240      	negs	r0, r0
 8083c98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083c9c:	ea5f 0c01 	movs.w	ip, r1
 8083ca0:	bf02      	ittt	eq
 8083ca2:	4684      	moveq	ip, r0
 8083ca4:	4601      	moveq	r1, r0
 8083ca6:	2000      	moveq	r0, #0
 8083ca8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8083cac:	bf08      	it	eq
 8083cae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8083cb2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8083cb6:	fabc f28c 	clz	r2, ip
 8083cba:	3a08      	subs	r2, #8
 8083cbc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8083cc0:	db10      	blt.n	8083ce4 <__aeabi_l2f+0x5c>
 8083cc2:	fa01 fc02 	lsl.w	ip, r1, r2
 8083cc6:	4463      	add	r3, ip
 8083cc8:	fa00 fc02 	lsl.w	ip, r0, r2
 8083ccc:	f1c2 0220 	rsb	r2, r2, #32
 8083cd0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8083cd4:	fa20 f202 	lsr.w	r2, r0, r2
 8083cd8:	eb43 0002 	adc.w	r0, r3, r2
 8083cdc:	bf08      	it	eq
 8083cde:	f020 0001 	biceq.w	r0, r0, #1
 8083ce2:	4770      	bx	lr
 8083ce4:	f102 0220 	add.w	r2, r2, #32
 8083ce8:	fa01 fc02 	lsl.w	ip, r1, r2
 8083cec:	f1c2 0220 	rsb	r2, r2, #32
 8083cf0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8083cf4:	fa21 f202 	lsr.w	r2, r1, r2
 8083cf8:	eb43 0002 	adc.w	r0, r3, r2
 8083cfc:	bf08      	it	eq
 8083cfe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8083d02:	4770      	bx	lr

08083d04 <__aeabi_fmul>:
 8083d04:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083d08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8083d0c:	bf1e      	ittt	ne
 8083d0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8083d12:	ea92 0f0c 	teqne	r2, ip
 8083d16:	ea93 0f0c 	teqne	r3, ip
 8083d1a:	d06f      	beq.n	8083dfc <__aeabi_fmul+0xf8>
 8083d1c:	441a      	add	r2, r3
 8083d1e:	ea80 0c01 	eor.w	ip, r0, r1
 8083d22:	0240      	lsls	r0, r0, #9
 8083d24:	bf18      	it	ne
 8083d26:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8083d2a:	d01e      	beq.n	8083d6a <__aeabi_fmul+0x66>
 8083d2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8083d30:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8083d34:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8083d38:	fba0 3101 	umull	r3, r1, r0, r1
 8083d3c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8083d40:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8083d44:	bf3e      	ittt	cc
 8083d46:	0049      	lslcc	r1, r1, #1
 8083d48:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8083d4c:	005b      	lslcc	r3, r3, #1
 8083d4e:	ea40 0001 	orr.w	r0, r0, r1
 8083d52:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8083d56:	2afd      	cmp	r2, #253	; 0xfd
 8083d58:	d81d      	bhi.n	8083d96 <__aeabi_fmul+0x92>
 8083d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8083d5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8083d62:	bf08      	it	eq
 8083d64:	f020 0001 	biceq.w	r0, r0, #1
 8083d68:	4770      	bx	lr
 8083d6a:	f090 0f00 	teq	r0, #0
 8083d6e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8083d72:	bf08      	it	eq
 8083d74:	0249      	lsleq	r1, r1, #9
 8083d76:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8083d7a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8083d7e:	3a7f      	subs	r2, #127	; 0x7f
 8083d80:	bfc2      	ittt	gt
 8083d82:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8083d86:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8083d8a:	4770      	bxgt	lr
 8083d8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083d90:	f04f 0300 	mov.w	r3, #0
 8083d94:	3a01      	subs	r2, #1
 8083d96:	dc5d      	bgt.n	8083e54 <__aeabi_fmul+0x150>
 8083d98:	f112 0f19 	cmn.w	r2, #25
 8083d9c:	bfdc      	itt	le
 8083d9e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8083da2:	4770      	bxle	lr
 8083da4:	f1c2 0200 	rsb	r2, r2, #0
 8083da8:	0041      	lsls	r1, r0, #1
 8083daa:	fa21 f102 	lsr.w	r1, r1, r2
 8083dae:	f1c2 0220 	rsb	r2, r2, #32
 8083db2:	fa00 fc02 	lsl.w	ip, r0, r2
 8083db6:	ea5f 0031 	movs.w	r0, r1, rrx
 8083dba:	f140 0000 	adc.w	r0, r0, #0
 8083dbe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8083dc2:	bf08      	it	eq
 8083dc4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8083dc8:	4770      	bx	lr
 8083dca:	f092 0f00 	teq	r2, #0
 8083dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8083dd2:	bf02      	ittt	eq
 8083dd4:	0040      	lsleq	r0, r0, #1
 8083dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8083dda:	3a01      	subeq	r2, #1
 8083ddc:	d0f9      	beq.n	8083dd2 <__aeabi_fmul+0xce>
 8083dde:	ea40 000c 	orr.w	r0, r0, ip
 8083de2:	f093 0f00 	teq	r3, #0
 8083de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8083dea:	bf02      	ittt	eq
 8083dec:	0049      	lsleq	r1, r1, #1
 8083dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8083df2:	3b01      	subeq	r3, #1
 8083df4:	d0f9      	beq.n	8083dea <__aeabi_fmul+0xe6>
 8083df6:	ea41 010c 	orr.w	r1, r1, ip
 8083dfa:	e78f      	b.n	8083d1c <__aeabi_fmul+0x18>
 8083dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8083e00:	ea92 0f0c 	teq	r2, ip
 8083e04:	bf18      	it	ne
 8083e06:	ea93 0f0c 	teqne	r3, ip
 8083e0a:	d00a      	beq.n	8083e22 <__aeabi_fmul+0x11e>
 8083e0c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8083e10:	bf18      	it	ne
 8083e12:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8083e16:	d1d8      	bne.n	8083dca <__aeabi_fmul+0xc6>
 8083e18:	ea80 0001 	eor.w	r0, r0, r1
 8083e1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8083e20:	4770      	bx	lr
 8083e22:	f090 0f00 	teq	r0, #0
 8083e26:	bf17      	itett	ne
 8083e28:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8083e2c:	4608      	moveq	r0, r1
 8083e2e:	f091 0f00 	teqne	r1, #0
 8083e32:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8083e36:	d014      	beq.n	8083e62 <__aeabi_fmul+0x15e>
 8083e38:	ea92 0f0c 	teq	r2, ip
 8083e3c:	d101      	bne.n	8083e42 <__aeabi_fmul+0x13e>
 8083e3e:	0242      	lsls	r2, r0, #9
 8083e40:	d10f      	bne.n	8083e62 <__aeabi_fmul+0x15e>
 8083e42:	ea93 0f0c 	teq	r3, ip
 8083e46:	d103      	bne.n	8083e50 <__aeabi_fmul+0x14c>
 8083e48:	024b      	lsls	r3, r1, #9
 8083e4a:	bf18      	it	ne
 8083e4c:	4608      	movne	r0, r1
 8083e4e:	d108      	bne.n	8083e62 <__aeabi_fmul+0x15e>
 8083e50:	ea80 0001 	eor.w	r0, r0, r1
 8083e54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8083e58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8083e5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083e60:	4770      	bx	lr
 8083e62:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8083e66:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8083e6a:	4770      	bx	lr

08083e6c <__aeabi_fdiv>:
 8083e6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083e70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8083e74:	bf1e      	ittt	ne
 8083e76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8083e7a:	ea92 0f0c 	teqne	r2, ip
 8083e7e:	ea93 0f0c 	teqne	r3, ip
 8083e82:	d069      	beq.n	8083f58 <__aeabi_fdiv+0xec>
 8083e84:	eba2 0203 	sub.w	r2, r2, r3
 8083e88:	ea80 0c01 	eor.w	ip, r0, r1
 8083e8c:	0249      	lsls	r1, r1, #9
 8083e8e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8083e92:	d037      	beq.n	8083f04 <__aeabi_fdiv+0x98>
 8083e94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8083e98:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8083e9c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8083ea0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8083ea4:	428b      	cmp	r3, r1
 8083ea6:	bf38      	it	cc
 8083ea8:	005b      	lslcc	r3, r3, #1
 8083eaa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8083eae:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8083eb2:	428b      	cmp	r3, r1
 8083eb4:	bf24      	itt	cs
 8083eb6:	1a5b      	subcs	r3, r3, r1
 8083eb8:	ea40 000c 	orrcs.w	r0, r0, ip
 8083ebc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8083ec0:	bf24      	itt	cs
 8083ec2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8083ec6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8083eca:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8083ece:	bf24      	itt	cs
 8083ed0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8083ed4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8083ed8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8083edc:	bf24      	itt	cs
 8083ede:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8083ee2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8083ee6:	011b      	lsls	r3, r3, #4
 8083ee8:	bf18      	it	ne
 8083eea:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8083eee:	d1e0      	bne.n	8083eb2 <__aeabi_fdiv+0x46>
 8083ef0:	2afd      	cmp	r2, #253	; 0xfd
 8083ef2:	f63f af50 	bhi.w	8083d96 <__aeabi_fmul+0x92>
 8083ef6:	428b      	cmp	r3, r1
 8083ef8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8083efc:	bf08      	it	eq
 8083efe:	f020 0001 	biceq.w	r0, r0, #1
 8083f02:	4770      	bx	lr
 8083f04:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8083f08:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8083f0c:	327f      	adds	r2, #127	; 0x7f
 8083f0e:	bfc2      	ittt	gt
 8083f10:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8083f14:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8083f18:	4770      	bxgt	lr
 8083f1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083f1e:	f04f 0300 	mov.w	r3, #0
 8083f22:	3a01      	subs	r2, #1
 8083f24:	e737      	b.n	8083d96 <__aeabi_fmul+0x92>
 8083f26:	f092 0f00 	teq	r2, #0
 8083f2a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8083f2e:	bf02      	ittt	eq
 8083f30:	0040      	lsleq	r0, r0, #1
 8083f32:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8083f36:	3a01      	subeq	r2, #1
 8083f38:	d0f9      	beq.n	8083f2e <__aeabi_fdiv+0xc2>
 8083f3a:	ea40 000c 	orr.w	r0, r0, ip
 8083f3e:	f093 0f00 	teq	r3, #0
 8083f42:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8083f46:	bf02      	ittt	eq
 8083f48:	0049      	lsleq	r1, r1, #1
 8083f4a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8083f4e:	3b01      	subeq	r3, #1
 8083f50:	d0f9      	beq.n	8083f46 <__aeabi_fdiv+0xda>
 8083f52:	ea41 010c 	orr.w	r1, r1, ip
 8083f56:	e795      	b.n	8083e84 <__aeabi_fdiv+0x18>
 8083f58:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8083f5c:	ea92 0f0c 	teq	r2, ip
 8083f60:	d108      	bne.n	8083f74 <__aeabi_fdiv+0x108>
 8083f62:	0242      	lsls	r2, r0, #9
 8083f64:	f47f af7d 	bne.w	8083e62 <__aeabi_fmul+0x15e>
 8083f68:	ea93 0f0c 	teq	r3, ip
 8083f6c:	f47f af70 	bne.w	8083e50 <__aeabi_fmul+0x14c>
 8083f70:	4608      	mov	r0, r1
 8083f72:	e776      	b.n	8083e62 <__aeabi_fmul+0x15e>
 8083f74:	ea93 0f0c 	teq	r3, ip
 8083f78:	d104      	bne.n	8083f84 <__aeabi_fdiv+0x118>
 8083f7a:	024b      	lsls	r3, r1, #9
 8083f7c:	f43f af4c 	beq.w	8083e18 <__aeabi_fmul+0x114>
 8083f80:	4608      	mov	r0, r1
 8083f82:	e76e      	b.n	8083e62 <__aeabi_fmul+0x15e>
 8083f84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8083f88:	bf18      	it	ne
 8083f8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8083f8e:	d1ca      	bne.n	8083f26 <__aeabi_fdiv+0xba>
 8083f90:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8083f94:	f47f af5c 	bne.w	8083e50 <__aeabi_fmul+0x14c>
 8083f98:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8083f9c:	f47f af3c 	bne.w	8083e18 <__aeabi_fmul+0x114>
 8083fa0:	e75f      	b.n	8083e62 <__aeabi_fmul+0x15e>
 8083fa2:	bf00      	nop

08083fa4 <__gesf2>:
 8083fa4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8083fa8:	e006      	b.n	8083fb8 <__cmpsf2+0x4>
 8083faa:	bf00      	nop

08083fac <__lesf2>:
 8083fac:	f04f 0c01 	mov.w	ip, #1
 8083fb0:	e002      	b.n	8083fb8 <__cmpsf2+0x4>
 8083fb2:	bf00      	nop

08083fb4 <__cmpsf2>:
 8083fb4:	f04f 0c01 	mov.w	ip, #1
 8083fb8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8083fbc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8083fc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8083fc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8083fc8:	bf18      	it	ne
 8083fca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8083fce:	d011      	beq.n	8083ff4 <__cmpsf2+0x40>
 8083fd0:	b001      	add	sp, #4
 8083fd2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8083fd6:	bf18      	it	ne
 8083fd8:	ea90 0f01 	teqne	r0, r1
 8083fdc:	bf58      	it	pl
 8083fde:	ebb2 0003 	subspl.w	r0, r2, r3
 8083fe2:	bf88      	it	hi
 8083fe4:	17c8      	asrhi	r0, r1, #31
 8083fe6:	bf38      	it	cc
 8083fe8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8083fec:	bf18      	it	ne
 8083fee:	f040 0001 	orrne.w	r0, r0, #1
 8083ff2:	4770      	bx	lr
 8083ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8083ff8:	d102      	bne.n	8084000 <__cmpsf2+0x4c>
 8083ffa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8083ffe:	d105      	bne.n	808400c <__cmpsf2+0x58>
 8084000:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8084004:	d1e4      	bne.n	8083fd0 <__cmpsf2+0x1c>
 8084006:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808400a:	d0e1      	beq.n	8083fd0 <__cmpsf2+0x1c>
 808400c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8084010:	4770      	bx	lr
 8084012:	bf00      	nop

08084014 <__aeabi_cfrcmple>:
 8084014:	4684      	mov	ip, r0
 8084016:	4608      	mov	r0, r1
 8084018:	4661      	mov	r1, ip
 808401a:	e7ff      	b.n	808401c <__aeabi_cfcmpeq>

0808401c <__aeabi_cfcmpeq>:
 808401c:	b50f      	push	{r0, r1, r2, r3, lr}
 808401e:	f7ff ffc9 	bl	8083fb4 <__cmpsf2>
 8084022:	2800      	cmp	r0, #0
 8084024:	bf48      	it	mi
 8084026:	f110 0f00 	cmnmi.w	r0, #0
 808402a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0808402c <__aeabi_fcmpeq>:
 808402c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084030:	f7ff fff4 	bl	808401c <__aeabi_cfcmpeq>
 8084034:	bf0c      	ite	eq
 8084036:	2001      	moveq	r0, #1
 8084038:	2000      	movne	r0, #0
 808403a:	f85d fb08 	ldr.w	pc, [sp], #8
 808403e:	bf00      	nop

08084040 <__aeabi_fcmplt>:
 8084040:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084044:	f7ff ffea 	bl	808401c <__aeabi_cfcmpeq>
 8084048:	bf34      	ite	cc
 808404a:	2001      	movcc	r0, #1
 808404c:	2000      	movcs	r0, #0
 808404e:	f85d fb08 	ldr.w	pc, [sp], #8
 8084052:	bf00      	nop

08084054 <__aeabi_fcmple>:
 8084054:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084058:	f7ff ffe0 	bl	808401c <__aeabi_cfcmpeq>
 808405c:	bf94      	ite	ls
 808405e:	2001      	movls	r0, #1
 8084060:	2000      	movhi	r0, #0
 8084062:	f85d fb08 	ldr.w	pc, [sp], #8
 8084066:	bf00      	nop

08084068 <__aeabi_fcmpge>:
 8084068:	f84d ed08 	str.w	lr, [sp, #-8]!
 808406c:	f7ff ffd2 	bl	8084014 <__aeabi_cfrcmple>
 8084070:	bf94      	ite	ls
 8084072:	2001      	movls	r0, #1
 8084074:	2000      	movhi	r0, #0
 8084076:	f85d fb08 	ldr.w	pc, [sp], #8
 808407a:	bf00      	nop

0808407c <__aeabi_fcmpgt>:
 808407c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084080:	f7ff ffc8 	bl	8084014 <__aeabi_cfrcmple>
 8084084:	bf34      	ite	cc
 8084086:	2001      	movcc	r0, #1
 8084088:	2000      	movcs	r0, #0
 808408a:	f85d fb08 	ldr.w	pc, [sp], #8
 808408e:	bf00      	nop

08084090 <__aeabi_f2iz>:
 8084090:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8084094:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8084098:	d30f      	bcc.n	80840ba <__aeabi_f2iz+0x2a>
 808409a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 808409e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80840a2:	d90d      	bls.n	80840c0 <__aeabi_f2iz+0x30>
 80840a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80840a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80840ac:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80840b0:	fa23 f002 	lsr.w	r0, r3, r2
 80840b4:	bf18      	it	ne
 80840b6:	4240      	negne	r0, r0
 80840b8:	4770      	bx	lr
 80840ba:	f04f 0000 	mov.w	r0, #0
 80840be:	4770      	bx	lr
 80840c0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80840c4:	d101      	bne.n	80840ca <__aeabi_f2iz+0x3a>
 80840c6:	0242      	lsls	r2, r0, #9
 80840c8:	d105      	bne.n	80840d6 <__aeabi_f2iz+0x46>
 80840ca:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80840ce:	bf08      	it	eq
 80840d0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80840d4:	4770      	bx	lr
 80840d6:	f04f 0000 	mov.w	r0, #0
 80840da:	4770      	bx	lr

080840dc <__aeabi_f2lz>:
 80840dc:	b510      	push	{r4, lr}
 80840de:	2100      	movs	r1, #0
 80840e0:	4604      	mov	r4, r0
 80840e2:	f7ff ffad 	bl	8084040 <__aeabi_fcmplt>
 80840e6:	b920      	cbnz	r0, 80840f2 <__aeabi_f2lz+0x16>
 80840e8:	4620      	mov	r0, r4
 80840ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80840ee:	f000 b809 	b.w	8084104 <__aeabi_f2ulz>
 80840f2:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 80840f6:	f000 f805 	bl	8084104 <__aeabi_f2ulz>
 80840fa:	4240      	negs	r0, r0
 80840fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8084100:	bd10      	pop	{r4, pc}
 8084102:	bf00      	nop

08084104 <__aeabi_f2ulz>:
 8084104:	b5d0      	push	{r4, r6, r7, lr}
 8084106:	f7ff f9ed 	bl	80834e4 <__aeabi_f2d>
 808410a:	2200      	movs	r2, #0
 808410c:	4b0b      	ldr	r3, [pc, #44]	; (808413c <__aeabi_f2ulz+0x38>)
 808410e:	4606      	mov	r6, r0
 8084110:	460f      	mov	r7, r1
 8084112:	f7ff fa3f 	bl	8083594 <__aeabi_dmul>
 8084116:	f7ff fc77 	bl	8083a08 <__aeabi_d2uiz>
 808411a:	4604      	mov	r4, r0
 808411c:	f7ff f9c0 	bl	80834a0 <__aeabi_ui2d>
 8084120:	2200      	movs	r2, #0
 8084122:	4b07      	ldr	r3, [pc, #28]	; (8084140 <__aeabi_f2ulz+0x3c>)
 8084124:	f7ff fa36 	bl	8083594 <__aeabi_dmul>
 8084128:	4602      	mov	r2, r0
 808412a:	460b      	mov	r3, r1
 808412c:	4630      	mov	r0, r6
 808412e:	4639      	mov	r1, r7
 8084130:	f7ff f878 	bl	8083224 <__aeabi_dsub>
 8084134:	f7ff fc68 	bl	8083a08 <__aeabi_d2uiz>
 8084138:	4621      	mov	r1, r4
 808413a:	bdd0      	pop	{r4, r6, r7, pc}
 808413c:	3df00000 	.word	0x3df00000
 8084140:	41f00000 	.word	0x41f00000

08084144 <asctime_r>:
 8084144:	b510      	push	{r4, lr}
 8084146:	460c      	mov	r4, r1
 8084148:	6941      	ldr	r1, [r0, #20]
 808414a:	b086      	sub	sp, #24
 808414c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8084150:	6903      	ldr	r3, [r0, #16]
 8084152:	6982      	ldr	r2, [r0, #24]
 8084154:	9104      	str	r1, [sp, #16]
 8084156:	6801      	ldr	r1, [r0, #0]
 8084158:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 808415c:	9103      	str	r1, [sp, #12]
 808415e:	6841      	ldr	r1, [r0, #4]
 8084160:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8084164:	9102      	str	r1, [sp, #8]
 8084166:	6881      	ldr	r1, [r0, #8]
 8084168:	9101      	str	r1, [sp, #4]
 808416a:	68c1      	ldr	r1, [r0, #12]
 808416c:	4620      	mov	r0, r4
 808416e:	9100      	str	r1, [sp, #0]
 8084170:	4904      	ldr	r1, [pc, #16]	; (8084184 <asctime_r+0x40>)
 8084172:	440b      	add	r3, r1
 8084174:	4904      	ldr	r1, [pc, #16]	; (8084188 <asctime_r+0x44>)
 8084176:	440a      	add	r2, r1
 8084178:	4904      	ldr	r1, [pc, #16]	; (808418c <asctime_r+0x48>)
 808417a:	f7fd fc11 	bl	80819a0 <siprintf>
 808417e:	4620      	mov	r0, r4
 8084180:	b006      	add	sp, #24
 8084182:	bd10      	pop	{r4, pc}
 8084184:	0808496a 	.word	0x0808496a
 8084188:	08084955 	.word	0x08084955
 808418c:	08084935 	.word	0x08084935

08084190 <atexit>:
 8084190:	2300      	movs	r3, #0
 8084192:	4601      	mov	r1, r0
 8084194:	461a      	mov	r2, r3
 8084196:	4618      	mov	r0, r3
 8084198:	f000 b91a 	b.w	80843d0 <__register_exitproc>

0808419c <atoi>:
 808419c:	220a      	movs	r2, #10
 808419e:	2100      	movs	r1, #0
 80841a0:	f000 b90c 	b.w	80843bc <strtol>

080841a4 <difftime>:
 80841a4:	b508      	push	{r3, lr}
 80841a6:	1a80      	subs	r0, r0, r2
 80841a8:	eb61 0103 	sbc.w	r1, r1, r3
 80841ac:	f7ff f9c4 	bl	8083538 <__aeabi_l2d>
 80841b0:	bd08      	pop	{r3, pc}

080841b2 <memcpy>:
 80841b2:	440a      	add	r2, r1
 80841b4:	4291      	cmp	r1, r2
 80841b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80841ba:	d100      	bne.n	80841be <memcpy+0xc>
 80841bc:	4770      	bx	lr
 80841be:	b510      	push	{r4, lr}
 80841c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80841c4:	4291      	cmp	r1, r2
 80841c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80841ca:	d1f9      	bne.n	80841c0 <memcpy+0xe>
 80841cc:	bd10      	pop	{r4, pc}

080841ce <memset>:
 80841ce:	4603      	mov	r3, r0
 80841d0:	4402      	add	r2, r0
 80841d2:	4293      	cmp	r3, r2
 80841d4:	d100      	bne.n	80841d8 <memset+0xa>
 80841d6:	4770      	bx	lr
 80841d8:	f803 1b01 	strb.w	r1, [r3], #1
 80841dc:	e7f9      	b.n	80841d2 <memset+0x4>
	...

080841e0 <srand>:
 80841e0:	b538      	push	{r3, r4, r5, lr}
 80841e2:	4b0d      	ldr	r3, [pc, #52]	; (8084218 <srand+0x38>)
 80841e4:	4604      	mov	r4, r0
 80841e6:	681d      	ldr	r5, [r3, #0]
 80841e8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80841ea:	b97b      	cbnz	r3, 808420c <srand+0x2c>
 80841ec:	2018      	movs	r0, #24
 80841ee:	f7fd fbbf 	bl	8081970 <malloc>
 80841f2:	4a0a      	ldr	r2, [pc, #40]	; (808421c <srand+0x3c>)
 80841f4:	4b0a      	ldr	r3, [pc, #40]	; (8084220 <srand+0x40>)
 80841f6:	63a8      	str	r0, [r5, #56]	; 0x38
 80841f8:	e9c0 2300 	strd	r2, r3, [r0]
 80841fc:	4b09      	ldr	r3, [pc, #36]	; (8084224 <srand+0x44>)
 80841fe:	2201      	movs	r2, #1
 8084200:	6083      	str	r3, [r0, #8]
 8084202:	230b      	movs	r3, #11
 8084204:	8183      	strh	r3, [r0, #12]
 8084206:	2300      	movs	r3, #0
 8084208:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808420c:	2200      	movs	r2, #0
 808420e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8084210:	611c      	str	r4, [r3, #16]
 8084212:	615a      	str	r2, [r3, #20]
 8084214:	bd38      	pop	{r3, r4, r5, pc}
 8084216:	bf00      	nop
 8084218:	20000020 	.word	0x20000020
 808421c:	abcd330e 	.word	0xabcd330e
 8084220:	e66d1234 	.word	0xe66d1234
 8084224:	0005deec 	.word	0x0005deec

08084228 <strcat>:
 8084228:	4602      	mov	r2, r0
 808422a:	b510      	push	{r4, lr}
 808422c:	7814      	ldrb	r4, [r2, #0]
 808422e:	4613      	mov	r3, r2
 8084230:	3201      	adds	r2, #1
 8084232:	2c00      	cmp	r4, #0
 8084234:	d1fa      	bne.n	808422c <strcat+0x4>
 8084236:	3b01      	subs	r3, #1
 8084238:	f811 2b01 	ldrb.w	r2, [r1], #1
 808423c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8084240:	2a00      	cmp	r2, #0
 8084242:	d1f9      	bne.n	8084238 <strcat+0x10>
 8084244:	bd10      	pop	{r4, pc}

08084246 <strcmp>:
 8084246:	f810 2b01 	ldrb.w	r2, [r0], #1
 808424a:	f811 3b01 	ldrb.w	r3, [r1], #1
 808424e:	2a01      	cmp	r2, #1
 8084250:	bf28      	it	cs
 8084252:	429a      	cmpcs	r2, r3
 8084254:	d0f7      	beq.n	8084246 <strcmp>
 8084256:	1ad0      	subs	r0, r2, r3
 8084258:	4770      	bx	lr
	...

0808425c <strdup>:
 808425c:	4b02      	ldr	r3, [pc, #8]	; (8084268 <strdup+0xc>)
 808425e:	4601      	mov	r1, r0
 8084260:	6818      	ldr	r0, [r3, #0]
 8084262:	f000 b803 	b.w	808426c <_strdup_r>
 8084266:	bf00      	nop
 8084268:	20000020 	.word	0x20000020

0808426c <_strdup_r>:
 808426c:	b570      	push	{r4, r5, r6, lr}
 808426e:	4604      	mov	r4, r0
 8084270:	4608      	mov	r0, r1
 8084272:	460d      	mov	r5, r1
 8084274:	f000 f80d 	bl	8084292 <strlen>
 8084278:	1c46      	adds	r6, r0, #1
 808427a:	4631      	mov	r1, r6
 808427c:	4620      	mov	r0, r4
 808427e:	f7fd fba7 	bl	80819d0 <_malloc_r>
 8084282:	4604      	mov	r4, r0
 8084284:	b118      	cbz	r0, 808428e <_strdup_r+0x22>
 8084286:	4632      	mov	r2, r6
 8084288:	4629      	mov	r1, r5
 808428a:	f7ff ff92 	bl	80841b2 <memcpy>
 808428e:	4620      	mov	r0, r4
 8084290:	bd70      	pop	{r4, r5, r6, pc}

08084292 <strlen>:
 8084292:	4603      	mov	r3, r0
 8084294:	f813 2b01 	ldrb.w	r2, [r3], #1
 8084298:	2a00      	cmp	r2, #0
 808429a:	d1fb      	bne.n	8084294 <strlen+0x2>
 808429c:	1a18      	subs	r0, r3, r0
 808429e:	3801      	subs	r0, #1
 80842a0:	4770      	bx	lr

080842a2 <strncpy>:
 80842a2:	4603      	mov	r3, r0
 80842a4:	b510      	push	{r4, lr}
 80842a6:	3901      	subs	r1, #1
 80842a8:	b132      	cbz	r2, 80842b8 <strncpy+0x16>
 80842aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80842ae:	3a01      	subs	r2, #1
 80842b0:	f803 4b01 	strb.w	r4, [r3], #1
 80842b4:	2c00      	cmp	r4, #0
 80842b6:	d1f7      	bne.n	80842a8 <strncpy+0x6>
 80842b8:	2100      	movs	r1, #0
 80842ba:	441a      	add	r2, r3
 80842bc:	4293      	cmp	r3, r2
 80842be:	d100      	bne.n	80842c2 <strncpy+0x20>
 80842c0:	bd10      	pop	{r4, pc}
 80842c2:	f803 1b01 	strb.w	r1, [r3], #1
 80842c6:	e7f9      	b.n	80842bc <strncpy+0x1a>

080842c8 <_strtol_l.isra.0>:
 80842c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80842cc:	468c      	mov	ip, r1
 80842ce:	4686      	mov	lr, r0
 80842d0:	4e39      	ldr	r6, [pc, #228]	; (80843b8 <_strtol_l.isra.0+0xf0>)
 80842d2:	4660      	mov	r0, ip
 80842d4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80842d8:	5da5      	ldrb	r5, [r4, r6]
 80842da:	f015 0508 	ands.w	r5, r5, #8
 80842de:	d1f8      	bne.n	80842d2 <_strtol_l.isra.0+0xa>
 80842e0:	2c2d      	cmp	r4, #45	; 0x2d
 80842e2:	d133      	bne.n	808434c <_strtol_l.isra.0+0x84>
 80842e4:	f04f 0801 	mov.w	r8, #1
 80842e8:	f89c 4000 	ldrb.w	r4, [ip]
 80842ec:	f100 0c02 	add.w	ip, r0, #2
 80842f0:	2b00      	cmp	r3, #0
 80842f2:	d05c      	beq.n	80843ae <_strtol_l.isra.0+0xe6>
 80842f4:	2b10      	cmp	r3, #16
 80842f6:	d10c      	bne.n	8084312 <_strtol_l.isra.0+0x4a>
 80842f8:	2c30      	cmp	r4, #48	; 0x30
 80842fa:	d10a      	bne.n	8084312 <_strtol_l.isra.0+0x4a>
 80842fc:	f89c 0000 	ldrb.w	r0, [ip]
 8084300:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8084304:	2858      	cmp	r0, #88	; 0x58
 8084306:	d14d      	bne.n	80843a4 <_strtol_l.isra.0+0xdc>
 8084308:	2310      	movs	r3, #16
 808430a:	f89c 4001 	ldrb.w	r4, [ip, #1]
 808430e:	f10c 0c02 	add.w	ip, ip, #2
 8084312:	2600      	movs	r6, #0
 8084314:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8084318:	3f01      	subs	r7, #1
 808431a:	fbb7 f9f3 	udiv	r9, r7, r3
 808431e:	4630      	mov	r0, r6
 8084320:	fb03 7a19 	mls	sl, r3, r9, r7
 8084324:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 8084328:	2d09      	cmp	r5, #9
 808432a:	d818      	bhi.n	808435e <_strtol_l.isra.0+0x96>
 808432c:	462c      	mov	r4, r5
 808432e:	42a3      	cmp	r3, r4
 8084330:	dd24      	ble.n	808437c <_strtol_l.isra.0+0xb4>
 8084332:	1c75      	adds	r5, r6, #1
 8084334:	d007      	beq.n	8084346 <_strtol_l.isra.0+0x7e>
 8084336:	4581      	cmp	r9, r0
 8084338:	d31d      	bcc.n	8084376 <_strtol_l.isra.0+0xae>
 808433a:	d101      	bne.n	8084340 <_strtol_l.isra.0+0x78>
 808433c:	45a2      	cmp	sl, r4
 808433e:	db1a      	blt.n	8084376 <_strtol_l.isra.0+0xae>
 8084340:	2601      	movs	r6, #1
 8084342:	fb00 4003 	mla	r0, r0, r3, r4
 8084346:	f81c 4b01 	ldrb.w	r4, [ip], #1
 808434a:	e7eb      	b.n	8084324 <_strtol_l.isra.0+0x5c>
 808434c:	2c2b      	cmp	r4, #43	; 0x2b
 808434e:	bf08      	it	eq
 8084350:	f89c 4000 	ldrbeq.w	r4, [ip]
 8084354:	46a8      	mov	r8, r5
 8084356:	bf08      	it	eq
 8084358:	f100 0c02 	addeq.w	ip, r0, #2
 808435c:	e7c8      	b.n	80842f0 <_strtol_l.isra.0+0x28>
 808435e:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 8084362:	2d19      	cmp	r5, #25
 8084364:	d801      	bhi.n	808436a <_strtol_l.isra.0+0xa2>
 8084366:	3c37      	subs	r4, #55	; 0x37
 8084368:	e7e1      	b.n	808432e <_strtol_l.isra.0+0x66>
 808436a:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 808436e:	2d19      	cmp	r5, #25
 8084370:	d804      	bhi.n	808437c <_strtol_l.isra.0+0xb4>
 8084372:	3c57      	subs	r4, #87	; 0x57
 8084374:	e7db      	b.n	808432e <_strtol_l.isra.0+0x66>
 8084376:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 808437a:	e7e4      	b.n	8084346 <_strtol_l.isra.0+0x7e>
 808437c:	1c73      	adds	r3, r6, #1
 808437e:	d106      	bne.n	808438e <_strtol_l.isra.0+0xc6>
 8084380:	2322      	movs	r3, #34	; 0x22
 8084382:	4638      	mov	r0, r7
 8084384:	f8ce 3000 	str.w	r3, [lr]
 8084388:	b942      	cbnz	r2, 808439c <_strtol_l.isra.0+0xd4>
 808438a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808438e:	f1b8 0f00 	cmp.w	r8, #0
 8084392:	d000      	beq.n	8084396 <_strtol_l.isra.0+0xce>
 8084394:	4240      	negs	r0, r0
 8084396:	2a00      	cmp	r2, #0
 8084398:	d0f7      	beq.n	808438a <_strtol_l.isra.0+0xc2>
 808439a:	b10e      	cbz	r6, 80843a0 <_strtol_l.isra.0+0xd8>
 808439c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80843a0:	6011      	str	r1, [r2, #0]
 80843a2:	e7f2      	b.n	808438a <_strtol_l.isra.0+0xc2>
 80843a4:	2430      	movs	r4, #48	; 0x30
 80843a6:	2b00      	cmp	r3, #0
 80843a8:	d1b3      	bne.n	8084312 <_strtol_l.isra.0+0x4a>
 80843aa:	2308      	movs	r3, #8
 80843ac:	e7b1      	b.n	8084312 <_strtol_l.isra.0+0x4a>
 80843ae:	2c30      	cmp	r4, #48	; 0x30
 80843b0:	d0a4      	beq.n	80842fc <_strtol_l.isra.0+0x34>
 80843b2:	230a      	movs	r3, #10
 80843b4:	e7ad      	b.n	8084312 <_strtol_l.isra.0+0x4a>
 80843b6:	bf00      	nop
 80843b8:	0808498f 	.word	0x0808498f

080843bc <strtol>:
 80843bc:	4613      	mov	r3, r2
 80843be:	460a      	mov	r2, r1
 80843c0:	4601      	mov	r1, r0
 80843c2:	4802      	ldr	r0, [pc, #8]	; (80843cc <strtol+0x10>)
 80843c4:	6800      	ldr	r0, [r0, #0]
 80843c6:	f7ff bf7f 	b.w	80842c8 <_strtol_l.isra.0>
 80843ca:	bf00      	nop
 80843cc:	20000020 	.word	0x20000020

080843d0 <__register_exitproc>:
 80843d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80843d4:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8084494 <__register_exitproc+0xc4>
 80843d8:	4606      	mov	r6, r0
 80843da:	f8d8 0000 	ldr.w	r0, [r8]
 80843de:	461f      	mov	r7, r3
 80843e0:	460d      	mov	r5, r1
 80843e2:	4691      	mov	r9, r2
 80843e4:	f000 f858 	bl	8084498 <__retarget_lock_acquire_recursive>
 80843e8:	4b26      	ldr	r3, [pc, #152]	; (8084484 <__register_exitproc+0xb4>)
 80843ea:	681c      	ldr	r4, [r3, #0]
 80843ec:	b934      	cbnz	r4, 80843fc <__register_exitproc+0x2c>
 80843ee:	4c26      	ldr	r4, [pc, #152]	; (8084488 <__register_exitproc+0xb8>)
 80843f0:	601c      	str	r4, [r3, #0]
 80843f2:	4b26      	ldr	r3, [pc, #152]	; (808448c <__register_exitproc+0xbc>)
 80843f4:	b113      	cbz	r3, 80843fc <__register_exitproc+0x2c>
 80843f6:	681b      	ldr	r3, [r3, #0]
 80843f8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80843fc:	6863      	ldr	r3, [r4, #4]
 80843fe:	2b1f      	cmp	r3, #31
 8084400:	dd07      	ble.n	8084412 <__register_exitproc+0x42>
 8084402:	f8d8 0000 	ldr.w	r0, [r8]
 8084406:	f000 f849 	bl	808449c <__retarget_lock_release_recursive>
 808440a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 808440e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8084412:	b35e      	cbz	r6, 808446c <__register_exitproc+0x9c>
 8084414:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8084418:	b988      	cbnz	r0, 808443e <__register_exitproc+0x6e>
 808441a:	4b1d      	ldr	r3, [pc, #116]	; (8084490 <__register_exitproc+0xc0>)
 808441c:	b923      	cbnz	r3, 8084428 <__register_exitproc+0x58>
 808441e:	f8d8 0000 	ldr.w	r0, [r8]
 8084422:	f000 f83a 	bl	808449a <__retarget_lock_release>
 8084426:	e7f0      	b.n	808440a <__register_exitproc+0x3a>
 8084428:	f44f 7084 	mov.w	r0, #264	; 0x108
 808442c:	f7fd faa0 	bl	8081970 <malloc>
 8084430:	2800      	cmp	r0, #0
 8084432:	d0f4      	beq.n	808441e <__register_exitproc+0x4e>
 8084434:	2300      	movs	r3, #0
 8084436:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 808443a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 808443e:	2201      	movs	r2, #1
 8084440:	6863      	ldr	r3, [r4, #4]
 8084442:	2e02      	cmp	r6, #2
 8084444:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8084448:	fa02 f203 	lsl.w	r2, r2, r3
 808444c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8084450:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8084454:	ea43 0302 	orr.w	r3, r3, r2
 8084458:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 808445c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8084460:	bf02      	ittt	eq
 8084462:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8084466:	431a      	orreq	r2, r3
 8084468:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 808446c:	6863      	ldr	r3, [r4, #4]
 808446e:	f8d8 0000 	ldr.w	r0, [r8]
 8084472:	1c5a      	adds	r2, r3, #1
 8084474:	3302      	adds	r3, #2
 8084476:	6062      	str	r2, [r4, #4]
 8084478:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 808447c:	f000 f80e 	bl	808449c <__retarget_lock_release_recursive>
 8084480:	2000      	movs	r0, #0
 8084482:	e7c4      	b.n	808440e <__register_exitproc+0x3e>
 8084484:	200006c4 	.word	0x200006c4
 8084488:	20000638 	.word	0x20000638
 808448c:	00000000 	.word	0x00000000
 8084490:	08081971 	.word	0x08081971
 8084494:	20000084 	.word	0x20000084

08084498 <__retarget_lock_acquire_recursive>:
 8084498:	4770      	bx	lr

0808449a <__retarget_lock_release>:
 808449a:	4770      	bx	lr

0808449c <__retarget_lock_release_recursive>:
 808449c:	4770      	bx	lr

0808449e <link_code_end>:
	...

080844a0 <dynalib_user>:
 80844a0:	0031 0808 0071 0808 0099 0808 009d 0808     1...q...........
 80844b0:	0000 0000 6e55 6e6b 776f 006e 6f4e 656e     ....Unknown.None
 80844c0:	5700 4669 0069 5347 004d 4d55 5354 4300     .WiFi.GSM.UMTS.C
 80844d0:	4d44 0041 544c 0045 4549 4545 3038 3132     DMA.LTE.IEEE8021
 80844e0:	3435 4c00 4554 435f 5441 4d5f 0031 544c     54.LTE_CAT_M1.LT
 80844f0:	5f45 4143 5f54 424e 0031 6f50 726f 4c00     E_CAT_NB1.Poor.L
 8084500:	776f 4d00 6465 7569 006d 6556 7972 4720     ow.Medium.Very G
 8084510:	6f6f 0064 7247 6165 0074 2e30 3137 2500     ood.Great.0.71.%
 8084520:	2073 3a53 3225 302e 2566 2c25 5120 253a     s S:%2.0f%%, Q:%
 8084530:	2e32 6630 2525 0020 5441 432b 5546 3d4e     2.0f%% .AT+CFUN=
 8084540:	3631 0a0d 5200 7365 7465 6974 676e 6920     16...Resetting i
 8084550:	206e 7270 676f 6572 7373 3200 2535 6420     n progress.25% d
 8084560:	6e6f 0065 3035 2025 6f64 656e 3700 2535     one.50% done.75%
 8084570:	6420 6e6f 0065 6f44 656e 4100 656c 7472      done.Done.Alert
 8084580:	0073 6953 6e67 6c61 5200 7365 7465 6f43     s.Signal.ResetCo
 8084590:	6e75 0074 6554 706d 7265 7461 7275 0065     unt.Temperature.
 80845a0:	6552 656c 7361 0065 7473 7461 4f65 4366     Release.stateOfC
 80845b0:	6768 7000 6d75 4d70 6e69 7475 7365 5200     hg.pumpMinutes.R
 80845c0:	7365 7465 462d 4152 004d 6552 6573 2d74     eset-FRAM.Reset-
 80845d0:	6f43 6e75 7374 4800 7261 2d64 6552 6573     Counts.Hard-Rese
 80845e0:	0074 6553 646e 4e2d 776f 5600 7265 6f62     t.Send-Now.Verbo
 80845f0:	6573 4d2d 646f 0065 6553 2d74 6954 656d     se-Mode.Set-Time
 8084600:	6f7a 656e 4200 6f6f 7473 7265 4e20 206f     zone.Booster No 
 8084610:	6c46 776f 3120 2d20 0020 6f42 736f 6574     Flow 1 - .Booste
 8084620:	2072 6f4e 4620 6f6c 2077 2032 202d 5300     r No Flow 2 - .S
 8084630:	6f74 6172 6567 5420 6e61 206b 6f4c 2077     torage Tank Low 
 8084640:	202d 5000 6d75 2070 2031 6143 6c6c 6465     - .Pump 1 Called
 8084650:	2d20 0020 7550 706d 3220 4320 6c61 656c      - .Pump 2 Calle
 8084660:	2064 202d 4c00 736f 2074 6f50 6577 0072     d - .Lost Power.
 8084670:	227b 6c61 7265 5674 6c61 6575 3a22 6925     {"alertValue":%i
 8084680:	202c 7022 6d75 4d70 6e69 2273 253a 2c69     , "pumpMins":%i,
 8084690:	2220 6162 7474 7265 2279 253a 2c69 2220      "battery":%i, "
 80846a0:	6574 706d 3a22 6925 202c 7222 7365 7465     temp":%i, "reset
 80846b0:	2273 253a 7d69 4d00 6e6f 7469 726f 6e69     s":%i}.Monitorin
 80846c0:	5f67 6f48 7275 796c 5700 6961 6974 676e     g_Hourly.Waiting
 80846d0:	6620 726f 5220 7365 6f70 736e 0065 7453      for Response.St
 80846e0:	7461 0065 6449 656c 5200 7365 6f70 736e     ate.Idle.Respons
 80846f0:	2065 6954 656d 756f 2074 7245 6f72 0072     e Timeout Error.
 8084700:	5245 4f52 5f52 5453 5441 2045 202d 6552     ERROR_STATE - Re
 8084710:	6573 7474 6e69 0067 6f4e 4420 7461 0061     setting.No Data.
 8084720:	6255 6469 746f 2073 6f48 6b6f 5200 7365     Ubidots Hook.Res
 8084730:	6f70 736e 2065 6552 6563 7669 6465 5300     ponse Received.S
 8084740:	7465 5620 7265 6f62 6573 4d20 646f 0065     et Verbose Mode.
 8084750:	0030 6c43 6165 6572 2064 6556 6272 736f     0.Cleared Verbos
 8084760:	2065 6f4d 6564 5400 6d69 2065 6f7a 656e     e Mode.Time zone
 8084770:	6f20 6666 6573 2074 6925 5400 6d69 0065      offset %i.Time.
 8084780:	44b4 0808 44bc 0808 44c1 0808 44c6 0808     .D...D...D...D..
 8084790:	44ca 0808 44cf 0808 44d4 0808 44d8 0808     .D...D...D...D..
 80847a0:	44e3 0808 44ee 0808                         .D...D..

080847a8 <_ZTVN5spark13CellularClassE>:
	...
 80847b0:	1aaf 0808 1aa5 0808 1a9b 0808 0277 0808     ............w...
 80847c0:	1a8f 0808 1a83 0808 264d 0808 2655 0808     ........M&..U&..
 80847d0:	1a77 0808 1a6f 0808 1a65 0808 1a5b 0808     w...o...e...[...
 80847e0:	1a1f 0808                                   ....

080847e4 <_ZTV14CellularSignal>:
	...
 80847ec:	1b5d 0808 1b8f 0808 1b5f 0808 1b9d 0808     ]......._.......
 80847fc:	1bcd 0808 1bf1 0808 1c21 0808 1c69 0808     ........!...i...
 808480c:	1b63 0808 1b89 0808 fffc ffff 0000 0000     c...............
 808481c:	1c8f 0808                                   ....

08084820 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8084828:	1caf 0808 1cb5 0808 1d05 0808 1cc3 0808     ................
 8084838:	1cb1 0808                                   ....

0808483c <_ZTV7TwoWire>:
	...
 8084844:	23b5 0808 23ff 0808 23d7 0808 23b7 0808     .#...#...#...#..
 8084854:	23df 0808 23e7 0808 23ef 0808 23f7 0808     .#...#...#...#..

08084864 <_ZTV9IPAddress>:
	...
 808486c:	256d 0808 255d 0808 255f 0808 7061 0070     m%..]%.._%..app.

0808487c <_ZTVN5spark12NetworkClassE>:
	...
 8084884:	260d 0808 2617 0808 2621 0808 262b 0808     .&...&..!&..+&..
 8084894:	2635 0808 2641 0808 264d 0808 2655 0808     5&..A&..M&..U&..
 80848a4:	265d 0808 2669 0808 2671 0808 267b 0808     ]&..i&..q&..{&..
 80848b4:	2685 0808 5925 252d 2d6d 6425 2554 3a48     .&..%Y-%m-%dT%H:
 80848c4:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

080848d4 <_ZTV11USARTSerial>:
	...
 80848dc:	2c0d 0808 2c77 0808 2c53 0808 26ff 0808     .,..w,..S,...&..
 80848ec:	2c23 0808 2c3f 0808 2c31 0808 2c4d 0808     #,..?,..1,..M,..
 80848fc:	2c0f 0808 2c15 0808                         .,...,..

08084904 <_ZTV9USBSerial>:
	...
 808490c:	2cff 0808 2d65 0808 2d3d 0808 26ff 0808     .,..e-..=-...&..
 808491c:	2d2f 0808 2d01 0808 2d11 0808 2d5f 0808     /-...-...-.._-..
 808492c:	2d21 0808 2cf9 0808                         !-...,..

08084934 <_ZSt7nothrow>:
 8084934:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
 8084944:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

08084955 <day_name.4782>:
 8084955:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 8084965:	6972 6153                                    riSat

0808496a <mon_name.4783>:
 808496a:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 808497a:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 808498a:	4476 6365                                   vDec

0808498e <_ctype_>:
 808498e:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 808499e:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80849ae:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80849be:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80849ce:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80849de:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80849ee:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80849fe:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8084a0e:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08084a8f <link_const_variable_data_end>:
	...

08084a90 <link_constructors_location>:
 8084a90:	08081389 	.word	0x08081389
 8084a94:	08081b2d 	.word	0x08081b2d
 8084a98:	080825fd 	.word	0x080825fd
 8084a9c:	080826cd 	.word	0x080826cd
 8084aa0:	080827b9 	.word	0x080827b9
 8084aa4:	08082a15 	.word	0x08082a15
 8084aa8:	08082bf9 	.word	0x08082bf9
 8084aac:	080831f1 	.word	0x080831f1
